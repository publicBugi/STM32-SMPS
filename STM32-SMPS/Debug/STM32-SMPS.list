
STM32-SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f0  080082f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f8  080082f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f8  080082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000088  08008388  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08008388  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014308  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001844b  00000000  00000000  00038dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d0c  00000000  00000000  0005120b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d703  00000000  00000000  00064f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010261a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  0010266c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007fe8 	.word	0x08007fe8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08007fe8 	.word	0x08007fe8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0008      	movs	r0, r1
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 fc59 	bl	8000af0 <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 fbe5 	bl	8000a18 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fc4b 	bl	8000af0 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fc41 	bl	8000af0 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fbf1 	bl	8000a64 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 fbe7 	bl	8000a64 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_uldivmod>:
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d111      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d10f      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_uldivmod+0xe>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uldivmod+0x16>
 80002b4:	2100      	movs	r1, #0
 80002b6:	43c9      	mvns	r1, r1
 80002b8:	0008      	movs	r0, r1
 80002ba:	b407      	push	{r0, r1, r2}
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__aeabi_uldivmod+0x24>)
 80002be:	a102      	add	r1, pc, #8	; (adr r1, 80002c8 <__aeabi_uldivmod+0x24>)
 80002c0:	1840      	adds	r0, r0, r1
 80002c2:	9002      	str	r0, [sp, #8]
 80002c4:	bd03      	pop	{r0, r1, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	ffffff65 	.word	0xffffff65
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f81e 	bl	8000314 <__udivmoddi4>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_f2uiz>:
 80002e4:	219e      	movs	r1, #158	; 0x9e
 80002e6:	b510      	push	{r4, lr}
 80002e8:	05c9      	lsls	r1, r1, #23
 80002ea:	1c04      	adds	r4, r0, #0
 80002ec:	f7ff ffd0 	bl	8000290 <__aeabi_fcmpge>
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d103      	bne.n	80002fc <__aeabi_f2uiz+0x18>
 80002f4:	1c20      	adds	r0, r4, #0
 80002f6:	f000 ff13 	bl	8001120 <__aeabi_f2iz>
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	219e      	movs	r1, #158	; 0x9e
 80002fe:	1c20      	adds	r0, r4, #0
 8000300:	05c9      	lsls	r1, r1, #23
 8000302:	f000 fd5f 	bl	8000dc4 <__aeabi_fsub>
 8000306:	f000 ff0b 	bl	8001120 <__aeabi_f2iz>
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	061b      	lsls	r3, r3, #24
 800030e:	469c      	mov	ip, r3
 8000310:	4460      	add	r0, ip
 8000312:	e7f2      	b.n	80002fa <__aeabi_f2uiz+0x16>

08000314 <__udivmoddi4>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	4657      	mov	r7, sl
 8000318:	464e      	mov	r6, r9
 800031a:	4645      	mov	r5, r8
 800031c:	46de      	mov	lr, fp
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	0004      	movs	r4, r0
 8000322:	000d      	movs	r5, r1
 8000324:	4692      	mov	sl, r2
 8000326:	4699      	mov	r9, r3
 8000328:	b083      	sub	sp, #12
 800032a:	428b      	cmp	r3, r1
 800032c:	d830      	bhi.n	8000390 <__udivmoddi4+0x7c>
 800032e:	d02d      	beq.n	800038c <__udivmoddi4+0x78>
 8000330:	4649      	mov	r1, r9
 8000332:	4650      	mov	r0, sl
 8000334:	f000 ffc2 	bl	80012bc <__clzdi2>
 8000338:	0029      	movs	r1, r5
 800033a:	0006      	movs	r6, r0
 800033c:	0020      	movs	r0, r4
 800033e:	f000 ffbd 	bl	80012bc <__clzdi2>
 8000342:	1a33      	subs	r3, r6, r0
 8000344:	4698      	mov	r8, r3
 8000346:	3b20      	subs	r3, #32
 8000348:	469b      	mov	fp, r3
 800034a:	d433      	bmi.n	80003b4 <__udivmoddi4+0xa0>
 800034c:	465a      	mov	r2, fp
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	4642      	mov	r2, r8
 8000354:	001f      	movs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	001e      	movs	r6, r3
 800035c:	42af      	cmp	r7, r5
 800035e:	d83a      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 8000360:	42af      	cmp	r7, r5
 8000362:	d100      	bne.n	8000366 <__udivmoddi4+0x52>
 8000364:	e078      	b.n	8000458 <__udivmoddi4+0x144>
 8000366:	465b      	mov	r3, fp
 8000368:	1ba4      	subs	r4, r4, r6
 800036a:	41bd      	sbcs	r5, r7
 800036c:	2b00      	cmp	r3, #0
 800036e:	da00      	bge.n	8000372 <__udivmoddi4+0x5e>
 8000370:	e075      	b.n	800045e <__udivmoddi4+0x14a>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	465a      	mov	r2, fp
 800037e:	4093      	lsls	r3, r2
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	4642      	mov	r2, r8
 8000386:	4093      	lsls	r3, r2
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	e028      	b.n	80003de <__udivmoddi4+0xca>
 800038c:	4282      	cmp	r2, r0
 800038e:	d9cf      	bls.n	8000330 <__udivmoddi4+0x1c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <__udivmoddi4+0x8e>
 800039e:	601c      	str	r4, [r3, #0]
 80003a0:	605d      	str	r5, [r3, #4]
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	b003      	add	sp, #12
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	46bb      	mov	fp, r7
 80003ac:	46b2      	mov	sl, r6
 80003ae:	46a9      	mov	r9, r5
 80003b0:	46a0      	mov	r8, r4
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b4:	4642      	mov	r2, r8
 80003b6:	2320      	movs	r3, #32
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	4652      	mov	r2, sl
 80003bc:	40da      	lsrs	r2, r3
 80003be:	4641      	mov	r1, r8
 80003c0:	0013      	movs	r3, r2
 80003c2:	464a      	mov	r2, r9
 80003c4:	408a      	lsls	r2, r1
 80003c6:	0017      	movs	r7, r2
 80003c8:	4642      	mov	r2, r8
 80003ca:	431f      	orrs	r7, r3
 80003cc:	4653      	mov	r3, sl
 80003ce:	4093      	lsls	r3, r2
 80003d0:	001e      	movs	r6, r3
 80003d2:	42af      	cmp	r7, r5
 80003d4:	d9c4      	bls.n	8000360 <__udivmoddi4+0x4c>
 80003d6:	2200      	movs	r2, #0
 80003d8:	2300      	movs	r3, #0
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	4643      	mov	r3, r8
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0d9      	beq.n	8000398 <__udivmoddi4+0x84>
 80003e4:	07fb      	lsls	r3, r7, #31
 80003e6:	0872      	lsrs	r2, r6, #1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	4646      	mov	r6, r8
 80003ec:	087b      	lsrs	r3, r7, #1
 80003ee:	e00e      	b.n	800040e <__udivmoddi4+0xfa>
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d101      	bne.n	80003f8 <__udivmoddi4+0xe4>
 80003f4:	42a2      	cmp	r2, r4
 80003f6:	d80c      	bhi.n	8000412 <__udivmoddi4+0xfe>
 80003f8:	1aa4      	subs	r4, r4, r2
 80003fa:	419d      	sbcs	r5, r3
 80003fc:	2001      	movs	r0, #1
 80003fe:	1924      	adds	r4, r4, r4
 8000400:	416d      	adcs	r5, r5
 8000402:	2100      	movs	r1, #0
 8000404:	3e01      	subs	r6, #1
 8000406:	1824      	adds	r4, r4, r0
 8000408:	414d      	adcs	r5, r1
 800040a:	2e00      	cmp	r6, #0
 800040c:	d006      	beq.n	800041c <__udivmoddi4+0x108>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d9ee      	bls.n	80003f0 <__udivmoddi4+0xdc>
 8000412:	3e01      	subs	r6, #1
 8000414:	1924      	adds	r4, r4, r4
 8000416:	416d      	adcs	r5, r5
 8000418:	2e00      	cmp	r6, #0
 800041a:	d1f8      	bne.n	800040e <__udivmoddi4+0xfa>
 800041c:	9800      	ldr	r0, [sp, #0]
 800041e:	9901      	ldr	r1, [sp, #4]
 8000420:	465b      	mov	r3, fp
 8000422:	1900      	adds	r0, r0, r4
 8000424:	4169      	adcs	r1, r5
 8000426:	2b00      	cmp	r3, #0
 8000428:	db24      	blt.n	8000474 <__udivmoddi4+0x160>
 800042a:	002b      	movs	r3, r5
 800042c:	465a      	mov	r2, fp
 800042e:	4644      	mov	r4, r8
 8000430:	40d3      	lsrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	db2a      	blt.n	8000496 <__udivmoddi4+0x182>
 8000440:	0026      	movs	r6, r4
 8000442:	409e      	lsls	r6, r3
 8000444:	0033      	movs	r3, r6
 8000446:	0026      	movs	r6, r4
 8000448:	4647      	mov	r7, r8
 800044a:	40be      	lsls	r6, r7
 800044c:	0032      	movs	r2, r6
 800044e:	1a80      	subs	r0, r0, r2
 8000450:	4199      	sbcs	r1, r3
 8000452:	9000      	str	r0, [sp, #0]
 8000454:	9101      	str	r1, [sp, #4]
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x84>
 8000458:	42a3      	cmp	r3, r4
 800045a:	d8bc      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 800045c:	e783      	b.n	8000366 <__udivmoddi4+0x52>
 800045e:	4642      	mov	r2, r8
 8000460:	2320      	movs	r3, #32
 8000462:	2100      	movs	r1, #0
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	9100      	str	r1, [sp, #0]
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	40da      	lsrs	r2, r3
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	e786      	b.n	8000382 <__udivmoddi4+0x6e>
 8000474:	4642      	mov	r2, r8
 8000476:	2320      	movs	r3, #32
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	4646      	mov	r6, r8
 800047e:	409a      	lsls	r2, r3
 8000480:	0023      	movs	r3, r4
 8000482:	40f3      	lsrs	r3, r6
 8000484:	4644      	mov	r4, r8
 8000486:	4313      	orrs	r3, r2
 8000488:	002a      	movs	r2, r5
 800048a:	40e2      	lsrs	r2, r4
 800048c:	001c      	movs	r4, r3
 800048e:	465b      	mov	r3, fp
 8000490:	0015      	movs	r5, r2
 8000492:	2b00      	cmp	r3, #0
 8000494:	dad4      	bge.n	8000440 <__udivmoddi4+0x12c>
 8000496:	4642      	mov	r2, r8
 8000498:	002f      	movs	r7, r5
 800049a:	2320      	movs	r3, #32
 800049c:	0026      	movs	r6, r4
 800049e:	4097      	lsls	r7, r2
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	40de      	lsrs	r6, r3
 80004a4:	003b      	movs	r3, r7
 80004a6:	4333      	orrs	r3, r6
 80004a8:	e7cd      	b.n	8000446 <__udivmoddi4+0x132>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_fadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46c6      	mov	lr, r8
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	024e      	lsls	r6, r1, #9
 80004b6:	0045      	lsls	r5, r0, #1
 80004b8:	004f      	lsls	r7, r1, #1
 80004ba:	00da      	lsls	r2, r3, #3
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	469c      	mov	ip, r3
 80004c0:	0a70      	lsrs	r0, r6, #9
 80004c2:	4690      	mov	r8, r2
 80004c4:	b500      	push	{lr}
 80004c6:	0e2d      	lsrs	r5, r5, #24
 80004c8:	0e3f      	lsrs	r7, r7, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09b6      	lsrs	r6, r6, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d04b      	beq.n	800056a <__aeabi_fadd+0xbe>
 80004d2:	1bea      	subs	r2, r5, r7
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	dd36      	ble.n	8000546 <__aeabi_fadd+0x9a>
 80004d8:	2f00      	cmp	r7, #0
 80004da:	d061      	beq.n	80005a0 <__aeabi_fadd+0xf4>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x36>
 80004e0:	e0ad      	b.n	800063e <__aeabi_fadd+0x192>
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	04db      	lsls	r3, r3, #19
 80004e6:	431e      	orrs	r6, r3
 80004e8:	2a1b      	cmp	r2, #27
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0x42>
 80004ec:	e0d3      	b.n	8000696 <__aeabi_fadd+0x1ea>
 80004ee:	2001      	movs	r0, #1
 80004f0:	4643      	mov	r3, r8
 80004f2:	1a18      	subs	r0, r3, r0
 80004f4:	0143      	lsls	r3, r0, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x4e>
 80004f8:	e08c      	b.n	8000614 <__aeabi_fadd+0x168>
 80004fa:	0180      	lsls	r0, r0, #6
 80004fc:	0987      	lsrs	r7, r0, #6
 80004fe:	0038      	movs	r0, r7
 8000500:	f000 febe 	bl	8001280 <__clzsi2>
 8000504:	3805      	subs	r0, #5
 8000506:	4087      	lsls	r7, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x62>
 800050c:	e0b6      	b.n	800067c <__aeabi_fadd+0x1d0>
 800050e:	1a2d      	subs	r5, r5, r0
 8000510:	48b3      	ldr	r0, [pc, #716]	; (80007e0 <__aeabi_fadd+0x334>)
 8000512:	4038      	ands	r0, r7
 8000514:	0743      	lsls	r3, r0, #29
 8000516:	d004      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000518:	230f      	movs	r3, #15
 800051a:	4003      	ands	r3, r0
 800051c:	2b04      	cmp	r3, #4
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000520:	3004      	adds	r0, #4
 8000522:	0143      	lsls	r3, r0, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x7c>
 8000526:	e078      	b.n	800061a <__aeabi_fadd+0x16e>
 8000528:	1c6a      	adds	r2, r5, #1
 800052a:	2dfe      	cmp	r5, #254	; 0xfe
 800052c:	d065      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800052e:	0180      	lsls	r0, r0, #6
 8000530:	0a43      	lsrs	r3, r0, #9
 8000532:	469c      	mov	ip, r3
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	4663      	mov	r3, ip
 8000538:	05d0      	lsls	r0, r2, #23
 800053a:	4318      	orrs	r0, r3
 800053c:	07e4      	lsls	r4, r4, #31
 800053e:	4320      	orrs	r0, r4
 8000540:	bc80      	pop	{r7}
 8000542:	46b8      	mov	r8, r7
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	2a00      	cmp	r2, #0
 8000548:	d035      	beq.n	80005b6 <__aeabi_fadd+0x10a>
 800054a:	1b7a      	subs	r2, r7, r5
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_fadd+0xa6>
 8000550:	e0af      	b.n	80006b2 <__aeabi_fadd+0x206>
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xae>
 8000558:	e0a7      	b.n	80006aa <__aeabi_fadd+0x1fe>
 800055a:	1e53      	subs	r3, r2, #1
 800055c:	2a01      	cmp	r2, #1
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0xb6>
 8000560:	e12f      	b.n	80007c2 <__aeabi_fadd+0x316>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d069      	beq.n	800063a <__aeabi_fadd+0x18e>
 8000566:	001a      	movs	r2, r3
 8000568:	e0aa      	b.n	80006c0 <__aeabi_fadd+0x214>
 800056a:	1be9      	subs	r1, r5, r7
 800056c:	2900      	cmp	r1, #0
 800056e:	dd70      	ble.n	8000652 <__aeabi_fadd+0x1a6>
 8000570:	2f00      	cmp	r7, #0
 8000572:	d037      	beq.n	80005e4 <__aeabi_fadd+0x138>
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d062      	beq.n	800063e <__aeabi_fadd+0x192>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	291b      	cmp	r1, #27
 8000580:	dc00      	bgt.n	8000584 <__aeabi_fadd+0xd8>
 8000582:	e0b0      	b.n	80006e6 <__aeabi_fadd+0x23a>
 8000584:	2001      	movs	r0, #1
 8000586:	4440      	add	r0, r8
 8000588:	0143      	lsls	r3, r0, #5
 800058a:	d543      	bpl.n	8000614 <__aeabi_fadd+0x168>
 800058c:	3501      	adds	r5, #1
 800058e:	2dff      	cmp	r5, #255	; 0xff
 8000590:	d033      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000592:	2301      	movs	r3, #1
 8000594:	4a93      	ldr	r2, [pc, #588]	; (80007e4 <__aeabi_fadd+0x338>)
 8000596:	4003      	ands	r3, r0
 8000598:	0840      	lsrs	r0, r0, #1
 800059a:	4010      	ands	r0, r2
 800059c:	4318      	orrs	r0, r3
 800059e:	e7b9      	b.n	8000514 <__aeabi_fadd+0x68>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xfa>
 80005a4:	e083      	b.n	80006ae <__aeabi_fadd+0x202>
 80005a6:	1e51      	subs	r1, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x102>
 80005ac:	e0d8      	b.n	8000760 <__aeabi_fadd+0x2b4>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d045      	beq.n	800063e <__aeabi_fadd+0x192>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e798      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005b6:	27fe      	movs	r7, #254	; 0xfe
 80005b8:	1c6a      	adds	r2, r5, #1
 80005ba:	4217      	tst	r7, r2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x114>
 80005be:	e086      	b.n	80006ce <__aeabi_fadd+0x222>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x11a>
 80005c4:	e0b7      	b.n	8000736 <__aeabi_fadd+0x28a>
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x122>
 80005cc:	e0f3      	b.n	80007b6 <__aeabi_fadd+0x30a>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d0b0      	beq.n	8000536 <__aeabi_fadd+0x8a>
 80005d4:	1b98      	subs	r0, r3, r6
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x130>
 80005da:	e0fa      	b.n	80007d2 <__aeabi_fadd+0x326>
 80005dc:	4643      	mov	r3, r8
 80005de:	000c      	movs	r4, r1
 80005e0:	1af0      	subs	r0, r6, r3
 80005e2:	e797      	b.n	8000514 <__aeabi_fadd+0x68>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x13e>
 80005e8:	e0c8      	b.n	800077c <__aeabi_fadd+0x2d0>
 80005ea:	1e4a      	subs	r2, r1, #1
 80005ec:	2901      	cmp	r1, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x146>
 80005f0:	e0ae      	b.n	8000750 <__aeabi_fadd+0x2a4>
 80005f2:	29ff      	cmp	r1, #255	; 0xff
 80005f4:	d023      	beq.n	800063e <__aeabi_fadd+0x192>
 80005f6:	0011      	movs	r1, r2
 80005f8:	e7c1      	b.n	800057e <__aeabi_fadd+0xd2>
 80005fa:	2300      	movs	r3, #0
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	469c      	mov	ip, r3
 8000600:	e799      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4211      	tst	r1, r2
 8000608:	d077      	beq.n	80006fa <__aeabi_fadd+0x24e>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d0f5      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800060e:	0015      	movs	r5, r2
 8000610:	4446      	add	r6, r8
 8000612:	0870      	lsrs	r0, r6, #1
 8000614:	0743      	lsls	r3, r0, #29
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0x16e>
 8000618:	e77e      	b.n	8000518 <__aeabi_fadd+0x6c>
 800061a:	08c3      	lsrs	r3, r0, #3
 800061c:	2dff      	cmp	r5, #255	; 0xff
 800061e:	d00e      	beq.n	800063e <__aeabi_fadd+0x192>
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	0a5b      	lsrs	r3, r3, #9
 8000624:	469c      	mov	ip, r3
 8000626:	b2ea      	uxtb	r2, r5
 8000628:	e785      	b.n	8000536 <__aeabi_fadd+0x8a>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d007      	beq.n	800063e <__aeabi_fadd+0x192>
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	03d2      	lsls	r2, r2, #15
 8000632:	4213      	tst	r3, r2
 8000634:	d003      	beq.n	800063e <__aeabi_fadd+0x192>
 8000636:	4210      	tst	r0, r2
 8000638:	d101      	bne.n	800063e <__aeabi_fadd+0x192>
 800063a:	000c      	movs	r4, r1
 800063c:	0003      	movs	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0db      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4318      	orrs	r0, r3
 8000648:	0240      	lsls	r0, r0, #9
 800064a:	0a43      	lsrs	r3, r0, #9
 800064c:	469c      	mov	ip, r3
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	e771      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000652:	2900      	cmp	r1, #0
 8000654:	d0d5      	beq.n	8000602 <__aeabi_fadd+0x156>
 8000656:	1b7a      	subs	r2, r7, r5
 8000658:	2d00      	cmp	r5, #0
 800065a:	d160      	bne.n	800071e <__aeabi_fadd+0x272>
 800065c:	4643      	mov	r3, r8
 800065e:	2b00      	cmp	r3, #0
 8000660:	d024      	beq.n	80006ac <__aeabi_fadd+0x200>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d073      	beq.n	8000750 <__aeabi_fadd+0x2a4>
 8000668:	2aff      	cmp	r2, #255	; 0xff
 800066a:	d0e7      	beq.n	800063c <__aeabi_fadd+0x190>
 800066c:	001a      	movs	r2, r3
 800066e:	2a1b      	cmp	r2, #27
 8000670:	dc00      	bgt.n	8000674 <__aeabi_fadd+0x1c8>
 8000672:	e085      	b.n	8000780 <__aeabi_fadd+0x2d4>
 8000674:	2001      	movs	r0, #1
 8000676:	003d      	movs	r5, r7
 8000678:	1980      	adds	r0, r0, r6
 800067a:	e785      	b.n	8000588 <__aeabi_fadd+0xdc>
 800067c:	2320      	movs	r3, #32
 800067e:	003a      	movs	r2, r7
 8000680:	1b45      	subs	r5, r0, r5
 8000682:	0038      	movs	r0, r7
 8000684:	3501      	adds	r5, #1
 8000686:	40ea      	lsrs	r2, r5
 8000688:	1b5d      	subs	r5, r3, r5
 800068a:	40a8      	lsls	r0, r5
 800068c:	1e43      	subs	r3, r0, #1
 800068e:	4198      	sbcs	r0, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4310      	orrs	r0, r2
 8000694:	e73e      	b.n	8000514 <__aeabi_fadd+0x68>
 8000696:	2320      	movs	r3, #32
 8000698:	0030      	movs	r0, r6
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	0031      	movs	r1, r6
 800069e:	4098      	lsls	r0, r3
 80006a0:	40d1      	lsrs	r1, r2
 80006a2:	1e43      	subs	r3, r0, #1
 80006a4:	4198      	sbcs	r0, r3
 80006a6:	4308      	orrs	r0, r1
 80006a8:	e722      	b.n	80004f0 <__aeabi_fadd+0x44>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	0015      	movs	r5, r2
 80006b0:	e7b4      	b.n	800061c <__aeabi_fadd+0x170>
 80006b2:	2fff      	cmp	r7, #255	; 0xff
 80006b4:	d0c1      	beq.n	800063a <__aeabi_fadd+0x18e>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	4640      	mov	r0, r8
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	4318      	orrs	r0, r3
 80006be:	4680      	mov	r8, r0
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd51      	ble.n	8000768 <__aeabi_fadd+0x2bc>
 80006c4:	2001      	movs	r0, #1
 80006c6:	000c      	movs	r4, r1
 80006c8:	003d      	movs	r5, r7
 80006ca:	1a30      	subs	r0, r6, r0
 80006cc:	e712      	b.n	80004f4 <__aeabi_fadd+0x48>
 80006ce:	4643      	mov	r3, r8
 80006d0:	1b9f      	subs	r7, r3, r6
 80006d2:	017b      	lsls	r3, r7, #5
 80006d4:	d42b      	bmi.n	800072e <__aeabi_fadd+0x282>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x230>
 80006da:	e710      	b.n	80004fe <__aeabi_fadd+0x52>
 80006dc:	2300      	movs	r3, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	469c      	mov	ip, r3
 80006e4:	e727      	b.n	8000536 <__aeabi_fadd+0x8a>
 80006e6:	2320      	movs	r3, #32
 80006e8:	0032      	movs	r2, r6
 80006ea:	0030      	movs	r0, r6
 80006ec:	40ca      	lsrs	r2, r1
 80006ee:	1a59      	subs	r1, r3, r1
 80006f0:	4088      	lsls	r0, r1
 80006f2:	1e43      	subs	r3, r0, #1
 80006f4:	4198      	sbcs	r0, r3
 80006f6:	4310      	orrs	r0, r2
 80006f8:	e745      	b.n	8000586 <__aeabi_fadd+0xda>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d14a      	bne.n	8000794 <__aeabi_fadd+0x2e8>
 80006fe:	4643      	mov	r3, r8
 8000700:	2b00      	cmp	r3, #0
 8000702:	d063      	beq.n	80007cc <__aeabi_fadd+0x320>
 8000704:	2200      	movs	r2, #0
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x260>
 800070a:	e714      	b.n	8000536 <__aeabi_fadd+0x8a>
 800070c:	0030      	movs	r0, r6
 800070e:	4440      	add	r0, r8
 8000710:	0143      	lsls	r3, r0, #5
 8000712:	d400      	bmi.n	8000716 <__aeabi_fadd+0x26a>
 8000714:	e77e      	b.n	8000614 <__aeabi_fadd+0x168>
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <__aeabi_fadd+0x334>)
 8000718:	3501      	adds	r5, #1
 800071a:	4018      	ands	r0, r3
 800071c:	e77a      	b.n	8000614 <__aeabi_fadd+0x168>
 800071e:	2fff      	cmp	r7, #255	; 0xff
 8000720:	d08c      	beq.n	800063c <__aeabi_fadd+0x190>
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	4641      	mov	r1, r8
 8000726:	04db      	lsls	r3, r3, #19
 8000728:	4319      	orrs	r1, r3
 800072a:	4688      	mov	r8, r1
 800072c:	e79f      	b.n	800066e <__aeabi_fadd+0x1c2>
 800072e:	4643      	mov	r3, r8
 8000730:	000c      	movs	r4, r1
 8000732:	1af7      	subs	r7, r6, r3
 8000734:	e6e3      	b.n	80004fe <__aeabi_fadd+0x52>
 8000736:	4642      	mov	r2, r8
 8000738:	2a00      	cmp	r2, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fadd+0x292>
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x17e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x298>
 8000742:	e77a      	b.n	800063a <__aeabi_fadd+0x18e>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	2400      	movs	r4, #0
 800074a:	469c      	mov	ip, r3
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	e6f2      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000750:	0030      	movs	r0, r6
 8000752:	4440      	add	r0, r8
 8000754:	2501      	movs	r5, #1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b0>
 800075a:	e75b      	b.n	8000614 <__aeabi_fadd+0x168>
 800075c:	2502      	movs	r5, #2
 800075e:	e718      	b.n	8000592 <__aeabi_fadd+0xe6>
 8000760:	4643      	mov	r3, r8
 8000762:	2501      	movs	r5, #1
 8000764:	1b98      	subs	r0, r3, r6
 8000766:	e6c5      	b.n	80004f4 <__aeabi_fadd+0x48>
 8000768:	2320      	movs	r3, #32
 800076a:	4644      	mov	r4, r8
 800076c:	4640      	mov	r0, r8
 800076e:	40d4      	lsrs	r4, r2
 8000770:	1a9a      	subs	r2, r3, r2
 8000772:	4090      	lsls	r0, r2
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	4320      	orrs	r0, r4
 800077a:	e7a4      	b.n	80006c6 <__aeabi_fadd+0x21a>
 800077c:	000d      	movs	r5, r1
 800077e:	e74d      	b.n	800061c <__aeabi_fadd+0x170>
 8000780:	2320      	movs	r3, #32
 8000782:	4641      	mov	r1, r8
 8000784:	4640      	mov	r0, r8
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1a9a      	subs	r2, r3, r2
 800078a:	4090      	lsls	r0, r2
 800078c:	1e43      	subs	r3, r0, #1
 800078e:	4198      	sbcs	r0, r3
 8000790:	4308      	orrs	r0, r1
 8000792:	e770      	b.n	8000676 <__aeabi_fadd+0x1ca>
 8000794:	4642      	mov	r2, r8
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x2f0>
 800079a:	e74f      	b.n	800063c <__aeabi_fadd+0x190>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2f6>
 80007a0:	e74d      	b.n	800063e <__aeabi_fadd+0x192>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4213      	tst	r3, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x300>
 80007aa:	e748      	b.n	800063e <__aeabi_fadd+0x192>
 80007ac:	4210      	tst	r0, r2
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x306>
 80007b0:	e745      	b.n	800063e <__aeabi_fadd+0x192>
 80007b2:	0003      	movs	r3, r0
 80007b4:	e743      	b.n	800063e <__aeabi_fadd+0x192>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d090      	beq.n	80006dc <__aeabi_fadd+0x230>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4684      	mov	ip, r0
 80007be:	2200      	movs	r2, #0
 80007c0:	e6b9      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007c2:	4643      	mov	r3, r8
 80007c4:	000c      	movs	r4, r1
 80007c6:	1af0      	subs	r0, r6, r3
 80007c8:	3501      	adds	r5, #1
 80007ca:	e693      	b.n	80004f4 <__aeabi_fadd+0x48>
 80007cc:	4684      	mov	ip, r0
 80007ce:	2200      	movs	r2, #0
 80007d0:	e6b1      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x32c>
 80007d6:	e71d      	b.n	8000614 <__aeabi_fadd+0x168>
 80007d8:	2300      	movs	r3, #0
 80007da:	2400      	movs	r4, #0
 80007dc:	469c      	mov	ip, r3
 80007de:	e6aa      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007e0:	fbffffff 	.word	0xfbffffff
 80007e4:	7dffffff 	.word	0x7dffffff

080007e8 <__aeabi_fdiv>:
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	464f      	mov	r7, r9
 80007ec:	4646      	mov	r6, r8
 80007ee:	46d6      	mov	lr, sl
 80007f0:	0245      	lsls	r5, r0, #9
 80007f2:	b5c0      	push	{r6, r7, lr}
 80007f4:	0047      	lsls	r7, r0, #1
 80007f6:	1c0c      	adds	r4, r1, #0
 80007f8:	0a6d      	lsrs	r5, r5, #9
 80007fa:	0e3f      	lsrs	r7, r7, #24
 80007fc:	0fc6      	lsrs	r6, r0, #31
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fdiv+0x1c>
 8000802:	e070      	b.n	80008e6 <__aeabi_fdiv+0xfe>
 8000804:	2fff      	cmp	r7, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fdiv+0x22>
 8000808:	e075      	b.n	80008f6 <__aeabi_fdiv+0x10e>
 800080a:	00eb      	lsls	r3, r5, #3
 800080c:	2580      	movs	r5, #128	; 0x80
 800080e:	04ed      	lsls	r5, r5, #19
 8000810:	431d      	orrs	r5, r3
 8000812:	2300      	movs	r3, #0
 8000814:	4699      	mov	r9, r3
 8000816:	469a      	mov	sl, r3
 8000818:	3f7f      	subs	r7, #127	; 0x7f
 800081a:	0260      	lsls	r0, r4, #9
 800081c:	0a43      	lsrs	r3, r0, #9
 800081e:	4698      	mov	r8, r3
 8000820:	0063      	lsls	r3, r4, #1
 8000822:	0e1b      	lsrs	r3, r3, #24
 8000824:	0fe4      	lsrs	r4, r4, #31
 8000826:	2b00      	cmp	r3, #0
 8000828:	d04e      	beq.n	80008c8 <__aeabi_fdiv+0xe0>
 800082a:	2bff      	cmp	r3, #255	; 0xff
 800082c:	d046      	beq.n	80008bc <__aeabi_fdiv+0xd4>
 800082e:	4642      	mov	r2, r8
 8000830:	00d0      	lsls	r0, r2, #3
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	04d2      	lsls	r2, r2, #19
 8000836:	4302      	orrs	r2, r0
 8000838:	4690      	mov	r8, r2
 800083a:	2200      	movs	r2, #0
 800083c:	3b7f      	subs	r3, #127	; 0x7f
 800083e:	0031      	movs	r1, r6
 8000840:	1aff      	subs	r7, r7, r3
 8000842:	464b      	mov	r3, r9
 8000844:	4061      	eors	r1, r4
 8000846:	b2c9      	uxtb	r1, r1
 8000848:	4313      	orrs	r3, r2
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d900      	bls.n	8000850 <__aeabi_fdiv+0x68>
 800084e:	e0b5      	b.n	80009bc <__aeabi_fdiv+0x1d4>
 8000850:	486e      	ldr	r0, [pc, #440]	; (8000a0c <__aeabi_fdiv+0x224>)
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	58c3      	ldr	r3, [r0, r3]
 8000856:	469f      	mov	pc, r3
 8000858:	2300      	movs	r3, #0
 800085a:	4698      	mov	r8, r3
 800085c:	0026      	movs	r6, r4
 800085e:	4645      	mov	r5, r8
 8000860:	4692      	mov	sl, r2
 8000862:	4653      	mov	r3, sl
 8000864:	2b02      	cmp	r3, #2
 8000866:	d100      	bne.n	800086a <__aeabi_fdiv+0x82>
 8000868:	e089      	b.n	800097e <__aeabi_fdiv+0x196>
 800086a:	2b03      	cmp	r3, #3
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x88>
 800086e:	e09e      	b.n	80009ae <__aeabi_fdiv+0x1c6>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d018      	beq.n	80008a6 <__aeabi_fdiv+0xbe>
 8000874:	003b      	movs	r3, r7
 8000876:	337f      	adds	r3, #127	; 0x7f
 8000878:	2b00      	cmp	r3, #0
 800087a:	dd69      	ble.n	8000950 <__aeabi_fdiv+0x168>
 800087c:	076a      	lsls	r2, r5, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000880:	220f      	movs	r2, #15
 8000882:	402a      	ands	r2, r5
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000888:	3504      	adds	r5, #4
 800088a:	012a      	lsls	r2, r5, #4
 800088c:	d503      	bpl.n	8000896 <__aeabi_fdiv+0xae>
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <__aeabi_fdiv+0x228>)
 8000890:	401d      	ands	r5, r3
 8000892:	003b      	movs	r3, r7
 8000894:	3380      	adds	r3, #128	; 0x80
 8000896:	2bfe      	cmp	r3, #254	; 0xfe
 8000898:	dd00      	ble.n	800089c <__aeabi_fdiv+0xb4>
 800089a:	e070      	b.n	800097e <__aeabi_fdiv+0x196>
 800089c:	01ad      	lsls	r5, r5, #6
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	b2d8      	uxtb	r0, r3
 80008a2:	e002      	b.n	80008aa <__aeabi_fdiv+0xc2>
 80008a4:	000e      	movs	r6, r1
 80008a6:	2000      	movs	r0, #0
 80008a8:	2500      	movs	r5, #0
 80008aa:	05c0      	lsls	r0, r0, #23
 80008ac:	4328      	orrs	r0, r5
 80008ae:	07f6      	lsls	r6, r6, #31
 80008b0:	4330      	orrs	r0, r6
 80008b2:	bce0      	pop	{r5, r6, r7}
 80008b4:	46ba      	mov	sl, r7
 80008b6:	46b1      	mov	r9, r6
 80008b8:	46a8      	mov	r8, r5
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	4643      	mov	r3, r8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d13f      	bne.n	8000942 <__aeabi_fdiv+0x15a>
 80008c2:	2202      	movs	r2, #2
 80008c4:	3fff      	subs	r7, #255	; 0xff
 80008c6:	e003      	b.n	80008d0 <__aeabi_fdiv+0xe8>
 80008c8:	4643      	mov	r3, r8
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d12d      	bne.n	800092a <__aeabi_fdiv+0x142>
 80008ce:	2201      	movs	r2, #1
 80008d0:	0031      	movs	r1, r6
 80008d2:	464b      	mov	r3, r9
 80008d4:	4061      	eors	r1, r4
 80008d6:	b2c9      	uxtb	r1, r1
 80008d8:	4313      	orrs	r3, r2
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d834      	bhi.n	8000948 <__aeabi_fdiv+0x160>
 80008de:	484d      	ldr	r0, [pc, #308]	; (8000a14 <__aeabi_fdiv+0x22c>)
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	58c3      	ldr	r3, [r0, r3]
 80008e4:	469f      	mov	pc, r3
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d113      	bne.n	8000912 <__aeabi_fdiv+0x12a>
 80008ea:	2304      	movs	r3, #4
 80008ec:	4699      	mov	r9, r3
 80008ee:	3b03      	subs	r3, #3
 80008f0:	2700      	movs	r7, #0
 80008f2:	469a      	mov	sl, r3
 80008f4:	e791      	b.n	800081a <__aeabi_fdiv+0x32>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d105      	bne.n	8000906 <__aeabi_fdiv+0x11e>
 80008fa:	2308      	movs	r3, #8
 80008fc:	4699      	mov	r9, r3
 80008fe:	3b06      	subs	r3, #6
 8000900:	27ff      	movs	r7, #255	; 0xff
 8000902:	469a      	mov	sl, r3
 8000904:	e789      	b.n	800081a <__aeabi_fdiv+0x32>
 8000906:	230c      	movs	r3, #12
 8000908:	4699      	mov	r9, r3
 800090a:	3b09      	subs	r3, #9
 800090c:	27ff      	movs	r7, #255	; 0xff
 800090e:	469a      	mov	sl, r3
 8000910:	e783      	b.n	800081a <__aeabi_fdiv+0x32>
 8000912:	0028      	movs	r0, r5
 8000914:	f000 fcb4 	bl	8001280 <__clzsi2>
 8000918:	2776      	movs	r7, #118	; 0x76
 800091a:	1f43      	subs	r3, r0, #5
 800091c:	409d      	lsls	r5, r3
 800091e:	2300      	movs	r3, #0
 8000920:	427f      	negs	r7, r7
 8000922:	4699      	mov	r9, r3
 8000924:	469a      	mov	sl, r3
 8000926:	1a3f      	subs	r7, r7, r0
 8000928:	e777      	b.n	800081a <__aeabi_fdiv+0x32>
 800092a:	4640      	mov	r0, r8
 800092c:	f000 fca8 	bl	8001280 <__clzsi2>
 8000930:	4642      	mov	r2, r8
 8000932:	1f43      	subs	r3, r0, #5
 8000934:	409a      	lsls	r2, r3
 8000936:	2376      	movs	r3, #118	; 0x76
 8000938:	425b      	negs	r3, r3
 800093a:	4690      	mov	r8, r2
 800093c:	1a1b      	subs	r3, r3, r0
 800093e:	2200      	movs	r2, #0
 8000940:	e77d      	b.n	800083e <__aeabi_fdiv+0x56>
 8000942:	23ff      	movs	r3, #255	; 0xff
 8000944:	2203      	movs	r2, #3
 8000946:	e77a      	b.n	800083e <__aeabi_fdiv+0x56>
 8000948:	000e      	movs	r6, r1
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	2500      	movs	r5, #0
 800094e:	e7ac      	b.n	80008aa <__aeabi_fdiv+0xc2>
 8000950:	2001      	movs	r0, #1
 8000952:	1ac0      	subs	r0, r0, r3
 8000954:	281b      	cmp	r0, #27
 8000956:	dca6      	bgt.n	80008a6 <__aeabi_fdiv+0xbe>
 8000958:	379e      	adds	r7, #158	; 0x9e
 800095a:	002a      	movs	r2, r5
 800095c:	40bd      	lsls	r5, r7
 800095e:	40c2      	lsrs	r2, r0
 8000960:	1e6b      	subs	r3, r5, #1
 8000962:	419d      	sbcs	r5, r3
 8000964:	4315      	orrs	r5, r2
 8000966:	076b      	lsls	r3, r5, #29
 8000968:	d004      	beq.n	8000974 <__aeabi_fdiv+0x18c>
 800096a:	230f      	movs	r3, #15
 800096c:	402b      	ands	r3, r5
 800096e:	2b04      	cmp	r3, #4
 8000970:	d000      	beq.n	8000974 <__aeabi_fdiv+0x18c>
 8000972:	3504      	adds	r5, #4
 8000974:	016b      	lsls	r3, r5, #5
 8000976:	d544      	bpl.n	8000a02 <__aeabi_fdiv+0x21a>
 8000978:	2001      	movs	r0, #1
 800097a:	2500      	movs	r5, #0
 800097c:	e795      	b.n	80008aa <__aeabi_fdiv+0xc2>
 800097e:	20ff      	movs	r0, #255	; 0xff
 8000980:	2500      	movs	r5, #0
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0xc2>
 8000984:	2580      	movs	r5, #128	; 0x80
 8000986:	2600      	movs	r6, #0
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	03ed      	lsls	r5, r5, #15
 800098c:	e78d      	b.n	80008aa <__aeabi_fdiv+0xc2>
 800098e:	2300      	movs	r3, #0
 8000990:	4698      	mov	r8, r3
 8000992:	2080      	movs	r0, #128	; 0x80
 8000994:	03c0      	lsls	r0, r0, #15
 8000996:	4205      	tst	r5, r0
 8000998:	d009      	beq.n	80009ae <__aeabi_fdiv+0x1c6>
 800099a:	4643      	mov	r3, r8
 800099c:	4203      	tst	r3, r0
 800099e:	d106      	bne.n	80009ae <__aeabi_fdiv+0x1c6>
 80009a0:	4645      	mov	r5, r8
 80009a2:	4305      	orrs	r5, r0
 80009a4:	026d      	lsls	r5, r5, #9
 80009a6:	0026      	movs	r6, r4
 80009a8:	20ff      	movs	r0, #255	; 0xff
 80009aa:	0a6d      	lsrs	r5, r5, #9
 80009ac:	e77d      	b.n	80008aa <__aeabi_fdiv+0xc2>
 80009ae:	2080      	movs	r0, #128	; 0x80
 80009b0:	03c0      	lsls	r0, r0, #15
 80009b2:	4305      	orrs	r5, r0
 80009b4:	026d      	lsls	r5, r5, #9
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	0a6d      	lsrs	r5, r5, #9
 80009ba:	e776      	b.n	80008aa <__aeabi_fdiv+0xc2>
 80009bc:	4642      	mov	r2, r8
 80009be:	016b      	lsls	r3, r5, #5
 80009c0:	0150      	lsls	r0, r2, #5
 80009c2:	4283      	cmp	r3, r0
 80009c4:	d219      	bcs.n	80009fa <__aeabi_fdiv+0x212>
 80009c6:	221b      	movs	r2, #27
 80009c8:	2500      	movs	r5, #0
 80009ca:	3f01      	subs	r7, #1
 80009cc:	2601      	movs	r6, #1
 80009ce:	001c      	movs	r4, r3
 80009d0:	006d      	lsls	r5, r5, #1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2c00      	cmp	r4, #0
 80009d6:	db01      	blt.n	80009dc <__aeabi_fdiv+0x1f4>
 80009d8:	4298      	cmp	r0, r3
 80009da:	d801      	bhi.n	80009e0 <__aeabi_fdiv+0x1f8>
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	4335      	orrs	r5, r6
 80009e0:	3a01      	subs	r2, #1
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d1f3      	bne.n	80009ce <__aeabi_fdiv+0x1e6>
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	4193      	sbcs	r3, r2
 80009ea:	431d      	orrs	r5, r3
 80009ec:	003b      	movs	r3, r7
 80009ee:	337f      	adds	r3, #127	; 0x7f
 80009f0:	000e      	movs	r6, r1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_fdiv+0x210>
 80009f6:	e741      	b.n	800087c <__aeabi_fdiv+0x94>
 80009f8:	e7aa      	b.n	8000950 <__aeabi_fdiv+0x168>
 80009fa:	221a      	movs	r2, #26
 80009fc:	2501      	movs	r5, #1
 80009fe:	1a1b      	subs	r3, r3, r0
 8000a00:	e7e4      	b.n	80009cc <__aeabi_fdiv+0x1e4>
 8000a02:	01ad      	lsls	r5, r5, #6
 8000a04:	2000      	movs	r0, #0
 8000a06:	0a6d      	lsrs	r5, r5, #9
 8000a08:	e74f      	b.n	80008aa <__aeabi_fdiv+0xc2>
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	08008030 	.word	0x08008030
 8000a10:	f7ffffff 	.word	0xf7ffffff
 8000a14:	08008070 	.word	0x08008070

08000a18 <__eqsf2>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	0042      	lsls	r2, r0, #1
 8000a1c:	0245      	lsls	r5, r0, #9
 8000a1e:	024e      	lsls	r6, r1, #9
 8000a20:	004c      	lsls	r4, r1, #1
 8000a22:	0fc3      	lsrs	r3, r0, #31
 8000a24:	0a6d      	lsrs	r5, r5, #9
 8000a26:	2001      	movs	r0, #1
 8000a28:	0e12      	lsrs	r2, r2, #24
 8000a2a:	0a76      	lsrs	r6, r6, #9
 8000a2c:	0e24      	lsrs	r4, r4, #24
 8000a2e:	0fc9      	lsrs	r1, r1, #31
 8000a30:	2aff      	cmp	r2, #255	; 0xff
 8000a32:	d006      	beq.n	8000a42 <__eqsf2+0x2a>
 8000a34:	2cff      	cmp	r4, #255	; 0xff
 8000a36:	d003      	beq.n	8000a40 <__eqsf2+0x28>
 8000a38:	42a2      	cmp	r2, r4
 8000a3a:	d101      	bne.n	8000a40 <__eqsf2+0x28>
 8000a3c:	42b5      	cmp	r5, r6
 8000a3e:	d006      	beq.n	8000a4e <__eqsf2+0x36>
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d1fc      	bne.n	8000a40 <__eqsf2+0x28>
 8000a46:	2cff      	cmp	r4, #255	; 0xff
 8000a48:	d1fa      	bne.n	8000a40 <__eqsf2+0x28>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d1f8      	bne.n	8000a40 <__eqsf2+0x28>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d006      	beq.n	8000a60 <__eqsf2+0x48>
 8000a52:	2001      	movs	r0, #1
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d1f3      	bne.n	8000a40 <__eqsf2+0x28>
 8000a58:	0028      	movs	r0, r5
 8000a5a:	1e43      	subs	r3, r0, #1
 8000a5c:	4198      	sbcs	r0, r3
 8000a5e:	e7ef      	b.n	8000a40 <__eqsf2+0x28>
 8000a60:	2000      	movs	r0, #0
 8000a62:	e7ed      	b.n	8000a40 <__eqsf2+0x28>

08000a64 <__gesf2>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	0245      	lsls	r5, r0, #9
 8000a6a:	024e      	lsls	r6, r1, #9
 8000a6c:	004c      	lsls	r4, r1, #1
 8000a6e:	0fc3      	lsrs	r3, r0, #31
 8000a70:	0a6d      	lsrs	r5, r5, #9
 8000a72:	0e12      	lsrs	r2, r2, #24
 8000a74:	0a76      	lsrs	r6, r6, #9
 8000a76:	0e24      	lsrs	r4, r4, #24
 8000a78:	0fc8      	lsrs	r0, r1, #31
 8000a7a:	2aff      	cmp	r2, #255	; 0xff
 8000a7c:	d01b      	beq.n	8000ab6 <__gesf2+0x52>
 8000a7e:	2cff      	cmp	r4, #255	; 0xff
 8000a80:	d00e      	beq.n	8000aa0 <__gesf2+0x3c>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d11b      	bne.n	8000abe <__gesf2+0x5a>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d101      	bne.n	8000a8e <__gesf2+0x2a>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d01c      	beq.n	8000ac8 <__gesf2+0x64>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d00c      	beq.n	8000aac <__gesf2+0x48>
 8000a92:	4283      	cmp	r3, r0
 8000a94:	d01c      	beq.n	8000ad0 <__gesf2+0x6c>
 8000a96:	2102      	movs	r1, #2
 8000a98:	1e58      	subs	r0, r3, #1
 8000a9a:	4008      	ands	r0, r1
 8000a9c:	3801      	subs	r0, #1
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d122      	bne.n	8000aea <__gesf2+0x86>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d1f4      	bne.n	8000a92 <__gesf2+0x2e>
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d1f2      	bne.n	8000a92 <__gesf2+0x2e>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1f6      	bne.n	8000a9e <__gesf2+0x3a>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	e7f3      	b.n	8000a9e <__gesf2+0x3a>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d117      	bne.n	8000aea <__gesf2+0x86>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d0f0      	beq.n	8000aa0 <__gesf2+0x3c>
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d1e7      	bne.n	8000a92 <__gesf2+0x2e>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1e5      	bne.n	8000a92 <__gesf2+0x2e>
 8000ac6:	e7e6      	b.n	8000a96 <__gesf2+0x32>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e7      	beq.n	8000a9e <__gesf2+0x3a>
 8000ace:	e7e2      	b.n	8000a96 <__gesf2+0x32>
 8000ad0:	42a2      	cmp	r2, r4
 8000ad2:	dc05      	bgt.n	8000ae0 <__gesf2+0x7c>
 8000ad4:	dbea      	blt.n	8000aac <__gesf2+0x48>
 8000ad6:	42b5      	cmp	r5, r6
 8000ad8:	d802      	bhi.n	8000ae0 <__gesf2+0x7c>
 8000ada:	d3e7      	bcc.n	8000aac <__gesf2+0x48>
 8000adc:	2000      	movs	r0, #0
 8000ade:	e7de      	b.n	8000a9e <__gesf2+0x3a>
 8000ae0:	4243      	negs	r3, r0
 8000ae2:	4158      	adcs	r0, r3
 8000ae4:	0040      	lsls	r0, r0, #1
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	e7d9      	b.n	8000a9e <__gesf2+0x3a>
 8000aea:	2002      	movs	r0, #2
 8000aec:	4240      	negs	r0, r0
 8000aee:	e7d6      	b.n	8000a9e <__gesf2+0x3a>

08000af0 <__lesf2>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	0042      	lsls	r2, r0, #1
 8000af4:	0245      	lsls	r5, r0, #9
 8000af6:	024e      	lsls	r6, r1, #9
 8000af8:	004c      	lsls	r4, r1, #1
 8000afa:	0fc3      	lsrs	r3, r0, #31
 8000afc:	0a6d      	lsrs	r5, r5, #9
 8000afe:	0e12      	lsrs	r2, r2, #24
 8000b00:	0a76      	lsrs	r6, r6, #9
 8000b02:	0e24      	lsrs	r4, r4, #24
 8000b04:	0fc8      	lsrs	r0, r1, #31
 8000b06:	2aff      	cmp	r2, #255	; 0xff
 8000b08:	d00b      	beq.n	8000b22 <__lesf2+0x32>
 8000b0a:	2cff      	cmp	r4, #255	; 0xff
 8000b0c:	d00d      	beq.n	8000b2a <__lesf2+0x3a>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d11f      	bne.n	8000b52 <__lesf2+0x62>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d116      	bne.n	8000b44 <__lesf2+0x54>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d114      	bne.n	8000b44 <__lesf2+0x54>
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d010      	beq.n	8000b42 <__lesf2+0x52>
 8000b20:	e009      	b.n	8000b36 <__lesf2+0x46>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d10c      	bne.n	8000b40 <__lesf2+0x50>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d113      	bne.n	8000b52 <__lesf2+0x62>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d108      	bne.n	8000b40 <__lesf2+0x50>
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d008      	beq.n	8000b44 <__lesf2+0x54>
 8000b32:	4283      	cmp	r3, r0
 8000b34:	d012      	beq.n	8000b5c <__lesf2+0x6c>
 8000b36:	2102      	movs	r1, #2
 8000b38:	1e58      	subs	r0, r3, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	e000      	b.n	8000b42 <__lesf2+0x52>
 8000b40:	2002      	movs	r0, #2
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d1f4      	bne.n	8000b32 <__lesf2+0x42>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1fa      	bne.n	8000b42 <__lesf2+0x52>
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	4240      	negs	r0, r0
 8000b50:	e7f7      	b.n	8000b42 <__lesf2+0x52>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d1ed      	bne.n	8000b32 <__lesf2+0x42>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d1eb      	bne.n	8000b32 <__lesf2+0x42>
 8000b5a:	e7ec      	b.n	8000b36 <__lesf2+0x46>
 8000b5c:	42a2      	cmp	r2, r4
 8000b5e:	dc05      	bgt.n	8000b6c <__lesf2+0x7c>
 8000b60:	dbf2      	blt.n	8000b48 <__lesf2+0x58>
 8000b62:	42b5      	cmp	r5, r6
 8000b64:	d802      	bhi.n	8000b6c <__lesf2+0x7c>
 8000b66:	d3ef      	bcc.n	8000b48 <__lesf2+0x58>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e7ea      	b.n	8000b42 <__lesf2+0x52>
 8000b6c:	4243      	negs	r3, r0
 8000b6e:	4158      	adcs	r0, r3
 8000b70:	0040      	lsls	r0, r0, #1
 8000b72:	3801      	subs	r0, #1
 8000b74:	e7e5      	b.n	8000b42 <__lesf2+0x52>
 8000b76:	46c0      	nop			; (mov r8, r8)

08000b78 <__aeabi_fmul>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	464f      	mov	r7, r9
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	0244      	lsls	r4, r0, #9
 8000b82:	0045      	lsls	r5, r0, #1
 8000b84:	b5c0      	push	{r6, r7, lr}
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	1c0f      	adds	r7, r1, #0
 8000b8a:	0e2d      	lsrs	r5, r5, #24
 8000b8c:	0fc6      	lsrs	r6, r0, #31
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fmul+0x1c>
 8000b92:	e08d      	b.n	8000cb0 <__aeabi_fmul+0x138>
 8000b94:	2dff      	cmp	r5, #255	; 0xff
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fmul+0x22>
 8000b98:	e092      	b.n	8000cc0 <__aeabi_fmul+0x148>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2080      	movs	r0, #128	; 0x80
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	00e4      	lsls	r4, r4, #3
 8000ba4:	04c0      	lsls	r0, r0, #19
 8000ba6:	4304      	orrs	r4, r0
 8000ba8:	3d7f      	subs	r5, #127	; 0x7f
 8000baa:	0278      	lsls	r0, r7, #9
 8000bac:	0a43      	lsrs	r3, r0, #9
 8000bae:	4698      	mov	r8, r3
 8000bb0:	007b      	lsls	r3, r7, #1
 8000bb2:	0e1b      	lsrs	r3, r3, #24
 8000bb4:	0fff      	lsrs	r7, r7, #31
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fmul+0x44>
 8000bba:	e070      	b.n	8000c9e <__aeabi_fmul+0x126>
 8000bbc:	2bff      	cmp	r3, #255	; 0xff
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fmul+0x4a>
 8000bc0:	e086      	b.n	8000cd0 <__aeabi_fmul+0x158>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	00d0      	lsls	r0, r2, #3
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	3b7f      	subs	r3, #127	; 0x7f
 8000bca:	18ed      	adds	r5, r5, r3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	04d2      	lsls	r2, r2, #19
 8000bd0:	4302      	orrs	r2, r0
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	469c      	mov	ip, r3
 8000bd6:	0031      	movs	r1, r6
 8000bd8:	464b      	mov	r3, r9
 8000bda:	4079      	eors	r1, r7
 8000bdc:	1c68      	adds	r0, r5, #1
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d81c      	bhi.n	8000c1c <__aeabi_fmul+0xa4>
 8000be2:	4a76      	ldr	r2, [pc, #472]	; (8000dbc <__aeabi_fmul+0x244>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58d3      	ldr	r3, [r2, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	0039      	movs	r1, r7
 8000bec:	4644      	mov	r4, r8
 8000bee:	46e2      	mov	sl, ip
 8000bf0:	4653      	mov	r3, sl
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d00f      	beq.n	8000c16 <__aeabi_fmul+0x9e>
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fmul+0x84>
 8000bfa:	e0d7      	b.n	8000dac <__aeabi_fmul+0x234>
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d137      	bne.n	8000c70 <__aeabi_fmul+0xf8>
 8000c00:	2000      	movs	r0, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	05c0      	lsls	r0, r0, #23
 8000c06:	4320      	orrs	r0, r4
 8000c08:	07c9      	lsls	r1, r1, #31
 8000c0a:	4308      	orrs	r0, r1
 8000c0c:	bce0      	pop	{r5, r6, r7}
 8000c0e:	46ba      	mov	sl, r7
 8000c10:	46b1      	mov	r9, r6
 8000c12:	46a8      	mov	r8, r5
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	2400      	movs	r4, #0
 8000c1a:	e7f3      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000c1c:	0c26      	lsrs	r6, r4, #16
 8000c1e:	0424      	lsls	r4, r4, #16
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	4644      	mov	r4, r8
 8000c24:	0424      	lsls	r4, r4, #16
 8000c26:	0c24      	lsrs	r4, r4, #16
 8000c28:	4643      	mov	r3, r8
 8000c2a:	0027      	movs	r7, r4
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	4357      	muls	r7, r2
 8000c30:	4374      	muls	r4, r6
 8000c32:	435a      	muls	r2, r3
 8000c34:	435e      	muls	r6, r3
 8000c36:	1912      	adds	r2, r2, r4
 8000c38:	0c3b      	lsrs	r3, r7, #16
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	429c      	cmp	r4, r3
 8000c3e:	d903      	bls.n	8000c48 <__aeabi_fmul+0xd0>
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	0252      	lsls	r2, r2, #9
 8000c44:	4694      	mov	ip, r2
 8000c46:	4466      	add	r6, ip
 8000c48:	043f      	lsls	r7, r7, #16
 8000c4a:	041a      	lsls	r2, r3, #16
 8000c4c:	0c3f      	lsrs	r7, r7, #16
 8000c4e:	19d2      	adds	r2, r2, r7
 8000c50:	0194      	lsls	r4, r2, #6
 8000c52:	1e67      	subs	r7, r4, #1
 8000c54:	41bc      	sbcs	r4, r7
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	0e92      	lsrs	r2, r2, #26
 8000c5a:	199b      	adds	r3, r3, r6
 8000c5c:	4314      	orrs	r4, r2
 8000c5e:	019b      	lsls	r3, r3, #6
 8000c60:	431c      	orrs	r4, r3
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fmul+0xf0>
 8000c66:	e09b      	b.n	8000da0 <__aeabi_fmul+0x228>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	0862      	lsrs	r2, r4, #1
 8000c6c:	401c      	ands	r4, r3
 8000c6e:	4314      	orrs	r4, r2
 8000c70:	0002      	movs	r2, r0
 8000c72:	327f      	adds	r2, #127	; 0x7f
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	dd64      	ble.n	8000d42 <__aeabi_fmul+0x1ca>
 8000c78:	0763      	lsls	r3, r4, #29
 8000c7a:	d004      	beq.n	8000c86 <__aeabi_fmul+0x10e>
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4023      	ands	r3, r4
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d000      	beq.n	8000c86 <__aeabi_fmul+0x10e>
 8000c84:	3404      	adds	r4, #4
 8000c86:	0123      	lsls	r3, r4, #4
 8000c88:	d503      	bpl.n	8000c92 <__aeabi_fmul+0x11a>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <__aeabi_fmul+0x248>)
 8000c8e:	3280      	adds	r2, #128	; 0x80
 8000c90:	401c      	ands	r4, r3
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	dcbf      	bgt.n	8000c16 <__aeabi_fmul+0x9e>
 8000c96:	01a4      	lsls	r4, r4, #6
 8000c98:	0a64      	lsrs	r4, r4, #9
 8000c9a:	b2d0      	uxtb	r0, r2
 8000c9c:	e7b2      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d13d      	bne.n	8000d20 <__aeabi_fmul+0x1a8>
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	4691      	mov	r9, r2
 8000cac:	469c      	mov	ip, r3
 8000cae:	e792      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d129      	bne.n	8000d08 <__aeabi_fmul+0x190>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	4699      	mov	r9, r3
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	2500      	movs	r5, #0
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	e774      	b.n	8000baa <__aeabi_fmul+0x32>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d11b      	bne.n	8000cfc <__aeabi_fmul+0x184>
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	3b06      	subs	r3, #6
 8000cca:	25ff      	movs	r5, #255	; 0xff
 8000ccc:	469a      	mov	sl, r3
 8000cce:	e76c      	b.n	8000baa <__aeabi_fmul+0x32>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	35ff      	adds	r5, #255	; 0xff
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10b      	bne.n	8000cf0 <__aeabi_fmul+0x178>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	464a      	mov	r2, r9
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	4691      	mov	r9, r2
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	e778      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	0031      	movs	r1, r6
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d000      	beq.n	8000cee <__aeabi_fmul+0x176>
 8000cec:	e783      	b.n	8000bf6 <__aeabi_fmul+0x7e>
 8000cee:	e792      	b.n	8000c16 <__aeabi_fmul+0x9e>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	469c      	mov	ip, r3
 8000cfa:	e76c      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	4699      	mov	r9, r3
 8000d00:	3b09      	subs	r3, #9
 8000d02:	25ff      	movs	r5, #255	; 0xff
 8000d04:	469a      	mov	sl, r3
 8000d06:	e750      	b.n	8000baa <__aeabi_fmul+0x32>
 8000d08:	0020      	movs	r0, r4
 8000d0a:	f000 fab9 	bl	8001280 <__clzsi2>
 8000d0e:	2576      	movs	r5, #118	; 0x76
 8000d10:	1f43      	subs	r3, r0, #5
 8000d12:	409c      	lsls	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	426d      	negs	r5, r5
 8000d18:	4699      	mov	r9, r3
 8000d1a:	469a      	mov	sl, r3
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	e744      	b.n	8000baa <__aeabi_fmul+0x32>
 8000d20:	4640      	mov	r0, r8
 8000d22:	f000 faad 	bl	8001280 <__clzsi2>
 8000d26:	4642      	mov	r2, r8
 8000d28:	1f43      	subs	r3, r0, #5
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	1a2d      	subs	r5, r5, r0
 8000d30:	4690      	mov	r8, r2
 8000d32:	469c      	mov	ip, r3
 8000d34:	3d76      	subs	r5, #118	; 0x76
 8000d36:	e74e      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000d38:	2480      	movs	r4, #128	; 0x80
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	20ff      	movs	r0, #255	; 0xff
 8000d3e:	03e4      	lsls	r4, r4, #15
 8000d40:	e760      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000d42:	2301      	movs	r3, #1
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	2b1b      	cmp	r3, #27
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_fmul+0x1d4>
 8000d4a:	e759      	b.n	8000c00 <__aeabi_fmul+0x88>
 8000d4c:	0022      	movs	r2, r4
 8000d4e:	309e      	adds	r0, #158	; 0x9e
 8000d50:	40da      	lsrs	r2, r3
 8000d52:	4084      	lsls	r4, r0
 8000d54:	0013      	movs	r3, r2
 8000d56:	1e62      	subs	r2, r4, #1
 8000d58:	4194      	sbcs	r4, r2
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	0763      	lsls	r3, r4, #29
 8000d5e:	d004      	beq.n	8000d6a <__aeabi_fmul+0x1f2>
 8000d60:	230f      	movs	r3, #15
 8000d62:	4023      	ands	r3, r4
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fmul+0x1f2>
 8000d68:	3404      	adds	r4, #4
 8000d6a:	0163      	lsls	r3, r4, #5
 8000d6c:	d51a      	bpl.n	8000da4 <__aeabi_fmul+0x22c>
 8000d6e:	2001      	movs	r0, #1
 8000d70:	2400      	movs	r4, #0
 8000d72:	e747      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	03c0      	lsls	r0, r0, #15
 8000d78:	4204      	tst	r4, r0
 8000d7a:	d009      	beq.n	8000d90 <__aeabi_fmul+0x218>
 8000d7c:	4643      	mov	r3, r8
 8000d7e:	4203      	tst	r3, r0
 8000d80:	d106      	bne.n	8000d90 <__aeabi_fmul+0x218>
 8000d82:	4644      	mov	r4, r8
 8000d84:	4304      	orrs	r4, r0
 8000d86:	0264      	lsls	r4, r4, #9
 8000d88:	0039      	movs	r1, r7
 8000d8a:	20ff      	movs	r0, #255	; 0xff
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	e739      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000d90:	2080      	movs	r0, #128	; 0x80
 8000d92:	03c0      	lsls	r0, r0, #15
 8000d94:	4304      	orrs	r4, r0
 8000d96:	0264      	lsls	r4, r4, #9
 8000d98:	0031      	movs	r1, r6
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	e731      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000da0:	0028      	movs	r0, r5
 8000da2:	e765      	b.n	8000c70 <__aeabi_fmul+0xf8>
 8000da4:	01a4      	lsls	r4, r4, #6
 8000da6:	2000      	movs	r0, #0
 8000da8:	0a64      	lsrs	r4, r4, #9
 8000daa:	e72b      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000dac:	2080      	movs	r0, #128	; 0x80
 8000dae:	03c0      	lsls	r0, r0, #15
 8000db0:	4304      	orrs	r4, r0
 8000db2:	0264      	lsls	r4, r4, #9
 8000db4:	20ff      	movs	r0, #255	; 0xff
 8000db6:	0a64      	lsrs	r4, r4, #9
 8000db8:	e724      	b.n	8000c04 <__aeabi_fmul+0x8c>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	080080b0 	.word	0x080080b0
 8000dc0:	f7ffffff 	.word	0xf7ffffff

08000dc4 <__aeabi_fsub>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	46ce      	mov	lr, r9
 8000dc8:	4647      	mov	r7, r8
 8000dca:	0243      	lsls	r3, r0, #9
 8000dcc:	0a5b      	lsrs	r3, r3, #9
 8000dce:	024e      	lsls	r6, r1, #9
 8000dd0:	00da      	lsls	r2, r3, #3
 8000dd2:	4694      	mov	ip, r2
 8000dd4:	0a72      	lsrs	r2, r6, #9
 8000dd6:	4691      	mov	r9, r2
 8000dd8:	0045      	lsls	r5, r0, #1
 8000dda:	004a      	lsls	r2, r1, #1
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	0e2d      	lsrs	r5, r5, #24
 8000de0:	001f      	movs	r7, r3
 8000de2:	0fc4      	lsrs	r4, r0, #31
 8000de4:	0e12      	lsrs	r2, r2, #24
 8000de6:	0fc9      	lsrs	r1, r1, #31
 8000de8:	09b6      	lsrs	r6, r6, #6
 8000dea:	2aff      	cmp	r2, #255	; 0xff
 8000dec:	d05b      	beq.n	8000ea6 <__aeabi_fsub+0xe2>
 8000dee:	2001      	movs	r0, #1
 8000df0:	4041      	eors	r1, r0
 8000df2:	428c      	cmp	r4, r1
 8000df4:	d039      	beq.n	8000e6a <__aeabi_fsub+0xa6>
 8000df6:	1aa8      	subs	r0, r5, r2
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	dd5a      	ble.n	8000eb2 <__aeabi_fsub+0xee>
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d06a      	beq.n	8000ed6 <__aeabi_fsub+0x112>
 8000e00:	2dff      	cmp	r5, #255	; 0xff
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fsub+0x42>
 8000e04:	e0d9      	b.n	8000fba <__aeabi_fsub+0x1f6>
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	04d2      	lsls	r2, r2, #19
 8000e0a:	4316      	orrs	r6, r2
 8000e0c:	281b      	cmp	r0, #27
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_fsub+0x4e>
 8000e10:	e0e9      	b.n	8000fe6 <__aeabi_fsub+0x222>
 8000e12:	2001      	movs	r0, #1
 8000e14:	4663      	mov	r3, ip
 8000e16:	1a18      	subs	r0, r3, r0
 8000e18:	0143      	lsls	r3, r0, #5
 8000e1a:	d400      	bmi.n	8000e1e <__aeabi_fsub+0x5a>
 8000e1c:	e0b4      	b.n	8000f88 <__aeabi_fsub+0x1c4>
 8000e1e:	0180      	lsls	r0, r0, #6
 8000e20:	0987      	lsrs	r7, r0, #6
 8000e22:	0038      	movs	r0, r7
 8000e24:	f000 fa2c 	bl	8001280 <__clzsi2>
 8000e28:	3805      	subs	r0, #5
 8000e2a:	4087      	lsls	r7, r0
 8000e2c:	4285      	cmp	r5, r0
 8000e2e:	dc00      	bgt.n	8000e32 <__aeabi_fsub+0x6e>
 8000e30:	e0cc      	b.n	8000fcc <__aeabi_fsub+0x208>
 8000e32:	1a2d      	subs	r5, r5, r0
 8000e34:	48b5      	ldr	r0, [pc, #724]	; (800110c <__aeabi_fsub+0x348>)
 8000e36:	4038      	ands	r0, r7
 8000e38:	0743      	lsls	r3, r0, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fsub+0x82>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4003      	ands	r3, r0
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fsub+0x82>
 8000e44:	3004      	adds	r0, #4
 8000e46:	0143      	lsls	r3, r0, #5
 8000e48:	d400      	bmi.n	8000e4c <__aeabi_fsub+0x88>
 8000e4a:	e0a0      	b.n	8000f8e <__aeabi_fsub+0x1ca>
 8000e4c:	1c6a      	adds	r2, r5, #1
 8000e4e:	2dfe      	cmp	r5, #254	; 0xfe
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fsub+0x90>
 8000e52:	e08d      	b.n	8000f70 <__aeabi_fsub+0x1ac>
 8000e54:	0180      	lsls	r0, r0, #6
 8000e56:	0a47      	lsrs	r7, r0, #9
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	05d0      	lsls	r0, r2, #23
 8000e5c:	4338      	orrs	r0, r7
 8000e5e:	07e4      	lsls	r4, r4, #31
 8000e60:	4320      	orrs	r0, r4
 8000e62:	bcc0      	pop	{r6, r7}
 8000e64:	46b9      	mov	r9, r7
 8000e66:	46b0      	mov	r8, r6
 8000e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e6a:	1aa8      	subs	r0, r5, r2
 8000e6c:	4680      	mov	r8, r0
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	dd45      	ble.n	8000efe <__aeabi_fsub+0x13a>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d070      	beq.n	8000f58 <__aeabi_fsub+0x194>
 8000e76:	2dff      	cmp	r5, #255	; 0xff
 8000e78:	d100      	bne.n	8000e7c <__aeabi_fsub+0xb8>
 8000e7a:	e09e      	b.n	8000fba <__aeabi_fsub+0x1f6>
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	04db      	lsls	r3, r3, #19
 8000e80:	431e      	orrs	r6, r3
 8000e82:	4643      	mov	r3, r8
 8000e84:	2b1b      	cmp	r3, #27
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0xc6>
 8000e88:	e0d2      	b.n	8001030 <__aeabi_fsub+0x26c>
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4460      	add	r0, ip
 8000e8e:	0143      	lsls	r3, r0, #5
 8000e90:	d57a      	bpl.n	8000f88 <__aeabi_fsub+0x1c4>
 8000e92:	3501      	adds	r5, #1
 8000e94:	2dff      	cmp	r5, #255	; 0xff
 8000e96:	d06b      	beq.n	8000f70 <__aeabi_fsub+0x1ac>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4a9d      	ldr	r2, [pc, #628]	; (8001110 <__aeabi_fsub+0x34c>)
 8000e9c:	4003      	ands	r3, r0
 8000e9e:	0840      	lsrs	r0, r0, #1
 8000ea0:	4010      	ands	r0, r2
 8000ea2:	4318      	orrs	r0, r3
 8000ea4:	e7c8      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d020      	beq.n	8000eec <__aeabi_fsub+0x128>
 8000eaa:	428c      	cmp	r4, r1
 8000eac:	d023      	beq.n	8000ef6 <__aeabi_fsub+0x132>
 8000eae:	0028      	movs	r0, r5
 8000eb0:	38ff      	subs	r0, #255	; 0xff
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d039      	beq.n	8000f2a <__aeabi_fsub+0x166>
 8000eb6:	1b57      	subs	r7, r2, r5
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	d000      	beq.n	8000ebe <__aeabi_fsub+0xfa>
 8000ebc:	e09d      	b.n	8000ffa <__aeabi_fsub+0x236>
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x102>
 8000ec4:	e0db      	b.n	800107e <__aeabi_fsub+0x2ba>
 8000ec6:	1e7b      	subs	r3, r7, #1
 8000ec8:	2f01      	cmp	r7, #1
 8000eca:	d100      	bne.n	8000ece <__aeabi_fsub+0x10a>
 8000ecc:	e10d      	b.n	80010ea <__aeabi_fsub+0x326>
 8000ece:	2fff      	cmp	r7, #255	; 0xff
 8000ed0:	d071      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000ed2:	001f      	movs	r7, r3
 8000ed4:	e098      	b.n	8001008 <__aeabi_fsub+0x244>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x118>
 8000eda:	e0a7      	b.n	800102c <__aeabi_fsub+0x268>
 8000edc:	1e42      	subs	r2, r0, #1
 8000ede:	2801      	cmp	r0, #1
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x120>
 8000ee2:	e0e6      	b.n	80010b2 <__aeabi_fsub+0x2ee>
 8000ee4:	28ff      	cmp	r0, #255	; 0xff
 8000ee6:	d068      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e78f      	b.n	8000e0c <__aeabi_fsub+0x48>
 8000eec:	2001      	movs	r0, #1
 8000eee:	4041      	eors	r1, r0
 8000ef0:	42a1      	cmp	r1, r4
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x132>
 8000ef4:	e77f      	b.n	8000df6 <__aeabi_fsub+0x32>
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	4240      	negs	r0, r0
 8000efa:	4680      	mov	r8, r0
 8000efc:	44a8      	add	r8, r5
 8000efe:	4640      	mov	r0, r8
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d038      	beq.n	8000f76 <__aeabi_fsub+0x1b2>
 8000f04:	1b51      	subs	r1, r2, r5
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x148>
 8000f0a:	e0ae      	b.n	800106a <__aeabi_fsub+0x2a6>
 8000f0c:	2aff      	cmp	r2, #255	; 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x14e>
 8000f10:	e0df      	b.n	80010d2 <__aeabi_fsub+0x30e>
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	4660      	mov	r0, ip
 8000f16:	04db      	lsls	r3, r3, #19
 8000f18:	4318      	orrs	r0, r3
 8000f1a:	4684      	mov	ip, r0
 8000f1c:	291b      	cmp	r1, #27
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_fsub+0x15e>
 8000f20:	e0d9      	b.n	80010d6 <__aeabi_fsub+0x312>
 8000f22:	2001      	movs	r0, #1
 8000f24:	0015      	movs	r5, r2
 8000f26:	1980      	adds	r0, r0, r6
 8000f28:	e7b1      	b.n	8000e8e <__aeabi_fsub+0xca>
 8000f2a:	20fe      	movs	r0, #254	; 0xfe
 8000f2c:	1c6a      	adds	r2, r5, #1
 8000f2e:	4210      	tst	r0, r2
 8000f30:	d171      	bne.n	8001016 <__aeabi_fsub+0x252>
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x174>
 8000f36:	e0a6      	b.n	8001086 <__aeabi_fsub+0x2c2>
 8000f38:	4663      	mov	r3, ip
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x17c>
 8000f3e:	e0d9      	b.n	80010f4 <__aeabi_fsub+0x330>
 8000f40:	2200      	movs	r2, #0
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x184>
 8000f46:	e788      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f48:	1b98      	subs	r0, r3, r6
 8000f4a:	0143      	lsls	r3, r0, #5
 8000f4c:	d400      	bmi.n	8000f50 <__aeabi_fsub+0x18c>
 8000f4e:	e0e1      	b.n	8001114 <__aeabi_fsub+0x350>
 8000f50:	4663      	mov	r3, ip
 8000f52:	000c      	movs	r4, r1
 8000f54:	1af0      	subs	r0, r6, r3
 8000f56:	e76f      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000f58:	2e00      	cmp	r6, #0
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x19a>
 8000f5c:	e0b7      	b.n	80010ce <__aeabi_fsub+0x30a>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	3a01      	subs	r2, #1
 8000f62:	2801      	cmp	r0, #1
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x1a4>
 8000f66:	e09c      	b.n	80010a2 <__aeabi_fsub+0x2de>
 8000f68:	28ff      	cmp	r0, #255	; 0xff
 8000f6a:	d026      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 8000f6c:	4690      	mov	r8, r2
 8000f6e:	e788      	b.n	8000e82 <__aeabi_fsub+0xbe>
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	2700      	movs	r7, #0
 8000f74:	e771      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f76:	20fe      	movs	r0, #254	; 0xfe
 8000f78:	1c6a      	adds	r2, r5, #1
 8000f7a:	4210      	tst	r0, r2
 8000f7c:	d064      	beq.n	8001048 <__aeabi_fsub+0x284>
 8000f7e:	2aff      	cmp	r2, #255	; 0xff
 8000f80:	d0f6      	beq.n	8000f70 <__aeabi_fsub+0x1ac>
 8000f82:	0015      	movs	r5, r2
 8000f84:	4466      	add	r6, ip
 8000f86:	0870      	lsrs	r0, r6, #1
 8000f88:	0743      	lsls	r3, r0, #29
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_fsub+0x1ca>
 8000f8c:	e756      	b.n	8000e3c <__aeabi_fsub+0x78>
 8000f8e:	08c3      	lsrs	r3, r0, #3
 8000f90:	2dff      	cmp	r5, #255	; 0xff
 8000f92:	d012      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	0a5f      	lsrs	r7, r3, #9
 8000f98:	b2ea      	uxtb	r2, r5
 8000f9a:	e75e      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000f9c:	4662      	mov	r2, ip
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x1e0>
 8000fa2:	e096      	b.n	80010d2 <__aeabi_fsub+0x30e>
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d008      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	03d2      	lsls	r2, r2, #15
 8000fac:	4213      	tst	r3, r2
 8000fae:	d004      	beq.n	8000fba <__aeabi_fsub+0x1f6>
 8000fb0:	4648      	mov	r0, r9
 8000fb2:	4210      	tst	r0, r2
 8000fb4:	d101      	bne.n	8000fba <__aeabi_fsub+0x1f6>
 8000fb6:	000c      	movs	r4, r1
 8000fb8:	464b      	mov	r3, r9
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0d8      	beq.n	8000f70 <__aeabi_fsub+0x1ac>
 8000fbe:	2780      	movs	r7, #128	; 0x80
 8000fc0:	03ff      	lsls	r7, r7, #15
 8000fc2:	431f      	orrs	r7, r3
 8000fc4:	027f      	lsls	r7, r7, #9
 8000fc6:	22ff      	movs	r2, #255	; 0xff
 8000fc8:	0a7f      	lsrs	r7, r7, #9
 8000fca:	e746      	b.n	8000e5a <__aeabi_fsub+0x96>
 8000fcc:	2320      	movs	r3, #32
 8000fce:	003a      	movs	r2, r7
 8000fd0:	1b45      	subs	r5, r0, r5
 8000fd2:	0038      	movs	r0, r7
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	40ea      	lsrs	r2, r5
 8000fd8:	1b5d      	subs	r5, r3, r5
 8000fda:	40a8      	lsls	r0, r5
 8000fdc:	1e43      	subs	r3, r0, #1
 8000fde:	4198      	sbcs	r0, r3
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	4310      	orrs	r0, r2
 8000fe4:	e728      	b.n	8000e38 <__aeabi_fsub+0x74>
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	1a1b      	subs	r3, r3, r0
 8000fea:	0032      	movs	r2, r6
 8000fec:	409e      	lsls	r6, r3
 8000fee:	40c2      	lsrs	r2, r0
 8000ff0:	0030      	movs	r0, r6
 8000ff2:	1e43      	subs	r3, r0, #1
 8000ff4:	4198      	sbcs	r0, r3
 8000ff6:	4310      	orrs	r0, r2
 8000ff8:	e70c      	b.n	8000e14 <__aeabi_fsub+0x50>
 8000ffa:	2aff      	cmp	r2, #255	; 0xff
 8000ffc:	d0db      	beq.n	8000fb6 <__aeabi_fsub+0x1f2>
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	4660      	mov	r0, ip
 8001002:	04db      	lsls	r3, r3, #19
 8001004:	4318      	orrs	r0, r3
 8001006:	4684      	mov	ip, r0
 8001008:	2f1b      	cmp	r7, #27
 800100a:	dd56      	ble.n	80010ba <__aeabi_fsub+0x2f6>
 800100c:	2001      	movs	r0, #1
 800100e:	000c      	movs	r4, r1
 8001010:	0015      	movs	r5, r2
 8001012:	1a30      	subs	r0, r6, r0
 8001014:	e700      	b.n	8000e18 <__aeabi_fsub+0x54>
 8001016:	4663      	mov	r3, ip
 8001018:	1b9f      	subs	r7, r3, r6
 800101a:	017b      	lsls	r3, r7, #5
 800101c:	d43d      	bmi.n	800109a <__aeabi_fsub+0x2d6>
 800101e:	2f00      	cmp	r7, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_fsub+0x260>
 8001022:	e6fe      	b.n	8000e22 <__aeabi_fsub+0x5e>
 8001024:	2400      	movs	r4, #0
 8001026:	2200      	movs	r2, #0
 8001028:	2700      	movs	r7, #0
 800102a:	e716      	b.n	8000e5a <__aeabi_fsub+0x96>
 800102c:	0005      	movs	r5, r0
 800102e:	e7af      	b.n	8000f90 <__aeabi_fsub+0x1cc>
 8001030:	0032      	movs	r2, r6
 8001032:	4643      	mov	r3, r8
 8001034:	4641      	mov	r1, r8
 8001036:	40da      	lsrs	r2, r3
 8001038:	2320      	movs	r3, #32
 800103a:	1a5b      	subs	r3, r3, r1
 800103c:	409e      	lsls	r6, r3
 800103e:	0030      	movs	r0, r6
 8001040:	1e43      	subs	r3, r0, #1
 8001042:	4198      	sbcs	r0, r3
 8001044:	4310      	orrs	r0, r2
 8001046:	e721      	b.n	8000e8c <__aeabi_fsub+0xc8>
 8001048:	2d00      	cmp	r5, #0
 800104a:	d1a7      	bne.n	8000f9c <__aeabi_fsub+0x1d8>
 800104c:	4663      	mov	r3, ip
 800104e:	2b00      	cmp	r3, #0
 8001050:	d059      	beq.n	8001106 <__aeabi_fsub+0x342>
 8001052:	2200      	movs	r2, #0
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x296>
 8001058:	e6ff      	b.n	8000e5a <__aeabi_fsub+0x96>
 800105a:	0030      	movs	r0, r6
 800105c:	4460      	add	r0, ip
 800105e:	0143      	lsls	r3, r0, #5
 8001060:	d592      	bpl.n	8000f88 <__aeabi_fsub+0x1c4>
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <__aeabi_fsub+0x348>)
 8001064:	3501      	adds	r5, #1
 8001066:	4018      	ands	r0, r3
 8001068:	e78e      	b.n	8000f88 <__aeabi_fsub+0x1c4>
 800106a:	4663      	mov	r3, ip
 800106c:	2b00      	cmp	r3, #0
 800106e:	d047      	beq.n	8001100 <__aeabi_fsub+0x33c>
 8001070:	1e4b      	subs	r3, r1, #1
 8001072:	2901      	cmp	r1, #1
 8001074:	d015      	beq.n	80010a2 <__aeabi_fsub+0x2de>
 8001076:	29ff      	cmp	r1, #255	; 0xff
 8001078:	d02b      	beq.n	80010d2 <__aeabi_fsub+0x30e>
 800107a:	0019      	movs	r1, r3
 800107c:	e74e      	b.n	8000f1c <__aeabi_fsub+0x158>
 800107e:	000c      	movs	r4, r1
 8001080:	464b      	mov	r3, r9
 8001082:	003d      	movs	r5, r7
 8001084:	e784      	b.n	8000f90 <__aeabi_fsub+0x1cc>
 8001086:	4662      	mov	r2, ip
 8001088:	2a00      	cmp	r2, #0
 800108a:	d18b      	bne.n	8000fa4 <__aeabi_fsub+0x1e0>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d192      	bne.n	8000fb6 <__aeabi_fsub+0x1f2>
 8001090:	2780      	movs	r7, #128	; 0x80
 8001092:	2400      	movs	r4, #0
 8001094:	22ff      	movs	r2, #255	; 0xff
 8001096:	03ff      	lsls	r7, r7, #15
 8001098:	e6df      	b.n	8000e5a <__aeabi_fsub+0x96>
 800109a:	4663      	mov	r3, ip
 800109c:	000c      	movs	r4, r1
 800109e:	1af7      	subs	r7, r6, r3
 80010a0:	e6bf      	b.n	8000e22 <__aeabi_fsub+0x5e>
 80010a2:	0030      	movs	r0, r6
 80010a4:	4460      	add	r0, ip
 80010a6:	2501      	movs	r5, #1
 80010a8:	0143      	lsls	r3, r0, #5
 80010aa:	d400      	bmi.n	80010ae <__aeabi_fsub+0x2ea>
 80010ac:	e76c      	b.n	8000f88 <__aeabi_fsub+0x1c4>
 80010ae:	2502      	movs	r5, #2
 80010b0:	e6f2      	b.n	8000e98 <__aeabi_fsub+0xd4>
 80010b2:	4663      	mov	r3, ip
 80010b4:	2501      	movs	r5, #1
 80010b6:	1b98      	subs	r0, r3, r6
 80010b8:	e6ae      	b.n	8000e18 <__aeabi_fsub+0x54>
 80010ba:	2320      	movs	r3, #32
 80010bc:	4664      	mov	r4, ip
 80010be:	4660      	mov	r0, ip
 80010c0:	40fc      	lsrs	r4, r7
 80010c2:	1bdf      	subs	r7, r3, r7
 80010c4:	40b8      	lsls	r0, r7
 80010c6:	1e43      	subs	r3, r0, #1
 80010c8:	4198      	sbcs	r0, r3
 80010ca:	4320      	orrs	r0, r4
 80010cc:	e79f      	b.n	800100e <__aeabi_fsub+0x24a>
 80010ce:	0005      	movs	r5, r0
 80010d0:	e75e      	b.n	8000f90 <__aeabi_fsub+0x1cc>
 80010d2:	464b      	mov	r3, r9
 80010d4:	e771      	b.n	8000fba <__aeabi_fsub+0x1f6>
 80010d6:	2320      	movs	r3, #32
 80010d8:	4665      	mov	r5, ip
 80010da:	4660      	mov	r0, ip
 80010dc:	40cd      	lsrs	r5, r1
 80010de:	1a59      	subs	r1, r3, r1
 80010e0:	4088      	lsls	r0, r1
 80010e2:	1e43      	subs	r3, r0, #1
 80010e4:	4198      	sbcs	r0, r3
 80010e6:	4328      	orrs	r0, r5
 80010e8:	e71c      	b.n	8000f24 <__aeabi_fsub+0x160>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	2501      	movs	r5, #1
 80010f0:	1af0      	subs	r0, r6, r3
 80010f2:	e691      	b.n	8000e18 <__aeabi_fsub+0x54>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d095      	beq.n	8001024 <__aeabi_fsub+0x260>
 80010f8:	000c      	movs	r4, r1
 80010fa:	464f      	mov	r7, r9
 80010fc:	2200      	movs	r2, #0
 80010fe:	e6ac      	b.n	8000e5a <__aeabi_fsub+0x96>
 8001100:	464b      	mov	r3, r9
 8001102:	000d      	movs	r5, r1
 8001104:	e744      	b.n	8000f90 <__aeabi_fsub+0x1cc>
 8001106:	464f      	mov	r7, r9
 8001108:	2200      	movs	r2, #0
 800110a:	e6a6      	b.n	8000e5a <__aeabi_fsub+0x96>
 800110c:	fbffffff 	.word	0xfbffffff
 8001110:	7dffffff 	.word	0x7dffffff
 8001114:	2800      	cmp	r0, #0
 8001116:	d000      	beq.n	800111a <__aeabi_fsub+0x356>
 8001118:	e736      	b.n	8000f88 <__aeabi_fsub+0x1c4>
 800111a:	2400      	movs	r4, #0
 800111c:	2700      	movs	r7, #0
 800111e:	e69c      	b.n	8000e5a <__aeabi_fsub+0x96>

08001120 <__aeabi_f2iz>:
 8001120:	0241      	lsls	r1, r0, #9
 8001122:	0042      	lsls	r2, r0, #1
 8001124:	0fc3      	lsrs	r3, r0, #31
 8001126:	0a49      	lsrs	r1, r1, #9
 8001128:	2000      	movs	r0, #0
 800112a:	0e12      	lsrs	r2, r2, #24
 800112c:	2a7e      	cmp	r2, #126	; 0x7e
 800112e:	dd03      	ble.n	8001138 <__aeabi_f2iz+0x18>
 8001130:	2a9d      	cmp	r2, #157	; 0x9d
 8001132:	dd02      	ble.n	800113a <__aeabi_f2iz+0x1a>
 8001134:	4a09      	ldr	r2, [pc, #36]	; (800115c <__aeabi_f2iz+0x3c>)
 8001136:	1898      	adds	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	2080      	movs	r0, #128	; 0x80
 800113c:	0400      	lsls	r0, r0, #16
 800113e:	4301      	orrs	r1, r0
 8001140:	2a95      	cmp	r2, #149	; 0x95
 8001142:	dc07      	bgt.n	8001154 <__aeabi_f2iz+0x34>
 8001144:	2096      	movs	r0, #150	; 0x96
 8001146:	1a82      	subs	r2, r0, r2
 8001148:	40d1      	lsrs	r1, r2
 800114a:	4248      	negs	r0, r1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f3      	bne.n	8001138 <__aeabi_f2iz+0x18>
 8001150:	0008      	movs	r0, r1
 8001152:	e7f1      	b.n	8001138 <__aeabi_f2iz+0x18>
 8001154:	3a96      	subs	r2, #150	; 0x96
 8001156:	4091      	lsls	r1, r2
 8001158:	e7f7      	b.n	800114a <__aeabi_f2iz+0x2a>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	7fffffff 	.word	0x7fffffff

08001160 <__aeabi_i2f>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	2800      	cmp	r0, #0
 8001164:	d013      	beq.n	800118e <__aeabi_i2f+0x2e>
 8001166:	17c3      	asrs	r3, r0, #31
 8001168:	18c6      	adds	r6, r0, r3
 800116a:	405e      	eors	r6, r3
 800116c:	0fc4      	lsrs	r4, r0, #31
 800116e:	0030      	movs	r0, r6
 8001170:	f000 f886 	bl	8001280 <__clzsi2>
 8001174:	239e      	movs	r3, #158	; 0x9e
 8001176:	0005      	movs	r5, r0
 8001178:	1a1b      	subs	r3, r3, r0
 800117a:	2b96      	cmp	r3, #150	; 0x96
 800117c:	dc0f      	bgt.n	800119e <__aeabi_i2f+0x3e>
 800117e:	2808      	cmp	r0, #8
 8001180:	dd01      	ble.n	8001186 <__aeabi_i2f+0x26>
 8001182:	3d08      	subs	r5, #8
 8001184:	40ae      	lsls	r6, r5
 8001186:	0276      	lsls	r6, r6, #9
 8001188:	0a76      	lsrs	r6, r6, #9
 800118a:	b2d8      	uxtb	r0, r3
 800118c:	e002      	b.n	8001194 <__aeabi_i2f+0x34>
 800118e:	2400      	movs	r4, #0
 8001190:	2000      	movs	r0, #0
 8001192:	2600      	movs	r6, #0
 8001194:	05c0      	lsls	r0, r0, #23
 8001196:	4330      	orrs	r0, r6
 8001198:	07e4      	lsls	r4, r4, #31
 800119a:	4320      	orrs	r0, r4
 800119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119e:	2b99      	cmp	r3, #153	; 0x99
 80011a0:	dd0c      	ble.n	80011bc <__aeabi_i2f+0x5c>
 80011a2:	2205      	movs	r2, #5
 80011a4:	0031      	movs	r1, r6
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	40d1      	lsrs	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	0001      	movs	r1, r0
 80011ae:	0030      	movs	r0, r6
 80011b0:	311b      	adds	r1, #27
 80011b2:	4088      	lsls	r0, r1
 80011b4:	1e41      	subs	r1, r0, #1
 80011b6:	4188      	sbcs	r0, r1
 80011b8:	4302      	orrs	r2, r0
 80011ba:	0016      	movs	r6, r2
 80011bc:	2d05      	cmp	r5, #5
 80011be:	dc12      	bgt.n	80011e6 <__aeabi_i2f+0x86>
 80011c0:	0031      	movs	r1, r6
 80011c2:	4f0d      	ldr	r7, [pc, #52]	; (80011f8 <__aeabi_i2f+0x98>)
 80011c4:	4039      	ands	r1, r7
 80011c6:	0772      	lsls	r2, r6, #29
 80011c8:	d009      	beq.n	80011de <__aeabi_i2f+0x7e>
 80011ca:	200f      	movs	r0, #15
 80011cc:	4030      	ands	r0, r6
 80011ce:	2804      	cmp	r0, #4
 80011d0:	d005      	beq.n	80011de <__aeabi_i2f+0x7e>
 80011d2:	3104      	adds	r1, #4
 80011d4:	014a      	lsls	r2, r1, #5
 80011d6:	d502      	bpl.n	80011de <__aeabi_i2f+0x7e>
 80011d8:	239f      	movs	r3, #159	; 0x9f
 80011da:	4039      	ands	r1, r7
 80011dc:	1b5b      	subs	r3, r3, r5
 80011de:	0189      	lsls	r1, r1, #6
 80011e0:	0a4e      	lsrs	r6, r1, #9
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	e7d6      	b.n	8001194 <__aeabi_i2f+0x34>
 80011e6:	1f6a      	subs	r2, r5, #5
 80011e8:	4096      	lsls	r6, r2
 80011ea:	0031      	movs	r1, r6
 80011ec:	4f02      	ldr	r7, [pc, #8]	; (80011f8 <__aeabi_i2f+0x98>)
 80011ee:	4039      	ands	r1, r7
 80011f0:	0772      	lsls	r2, r6, #29
 80011f2:	d0f4      	beq.n	80011de <__aeabi_i2f+0x7e>
 80011f4:	e7e9      	b.n	80011ca <__aeabi_i2f+0x6a>
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	fbffffff 	.word	0xfbffffff

080011fc <__aeabi_ui2f>:
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	1e05      	subs	r5, r0, #0
 8001200:	d00e      	beq.n	8001220 <__aeabi_ui2f+0x24>
 8001202:	f000 f83d 	bl	8001280 <__clzsi2>
 8001206:	239e      	movs	r3, #158	; 0x9e
 8001208:	0004      	movs	r4, r0
 800120a:	1a1b      	subs	r3, r3, r0
 800120c:	2b96      	cmp	r3, #150	; 0x96
 800120e:	dc0c      	bgt.n	800122a <__aeabi_ui2f+0x2e>
 8001210:	2808      	cmp	r0, #8
 8001212:	dd01      	ble.n	8001218 <__aeabi_ui2f+0x1c>
 8001214:	3c08      	subs	r4, #8
 8001216:	40a5      	lsls	r5, r4
 8001218:	026d      	lsls	r5, r5, #9
 800121a:	0a6d      	lsrs	r5, r5, #9
 800121c:	b2d8      	uxtb	r0, r3
 800121e:	e001      	b.n	8001224 <__aeabi_ui2f+0x28>
 8001220:	2000      	movs	r0, #0
 8001222:	2500      	movs	r5, #0
 8001224:	05c0      	lsls	r0, r0, #23
 8001226:	4328      	orrs	r0, r5
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	2b99      	cmp	r3, #153	; 0x99
 800122c:	dd09      	ble.n	8001242 <__aeabi_ui2f+0x46>
 800122e:	0002      	movs	r2, r0
 8001230:	0029      	movs	r1, r5
 8001232:	321b      	adds	r2, #27
 8001234:	4091      	lsls	r1, r2
 8001236:	1e4a      	subs	r2, r1, #1
 8001238:	4191      	sbcs	r1, r2
 800123a:	2205      	movs	r2, #5
 800123c:	1a12      	subs	r2, r2, r0
 800123e:	40d5      	lsrs	r5, r2
 8001240:	430d      	orrs	r5, r1
 8001242:	2c05      	cmp	r4, #5
 8001244:	dc12      	bgt.n	800126c <__aeabi_ui2f+0x70>
 8001246:	0029      	movs	r1, r5
 8001248:	4e0c      	ldr	r6, [pc, #48]	; (800127c <__aeabi_ui2f+0x80>)
 800124a:	4031      	ands	r1, r6
 800124c:	076a      	lsls	r2, r5, #29
 800124e:	d009      	beq.n	8001264 <__aeabi_ui2f+0x68>
 8001250:	200f      	movs	r0, #15
 8001252:	4028      	ands	r0, r5
 8001254:	2804      	cmp	r0, #4
 8001256:	d005      	beq.n	8001264 <__aeabi_ui2f+0x68>
 8001258:	3104      	adds	r1, #4
 800125a:	014a      	lsls	r2, r1, #5
 800125c:	d502      	bpl.n	8001264 <__aeabi_ui2f+0x68>
 800125e:	239f      	movs	r3, #159	; 0x9f
 8001260:	4031      	ands	r1, r6
 8001262:	1b1b      	subs	r3, r3, r4
 8001264:	0189      	lsls	r1, r1, #6
 8001266:	0a4d      	lsrs	r5, r1, #9
 8001268:	b2d8      	uxtb	r0, r3
 800126a:	e7db      	b.n	8001224 <__aeabi_ui2f+0x28>
 800126c:	1f62      	subs	r2, r4, #5
 800126e:	4095      	lsls	r5, r2
 8001270:	0029      	movs	r1, r5
 8001272:	4e02      	ldr	r6, [pc, #8]	; (800127c <__aeabi_ui2f+0x80>)
 8001274:	4031      	ands	r1, r6
 8001276:	076a      	lsls	r2, r5, #29
 8001278:	d0f4      	beq.n	8001264 <__aeabi_ui2f+0x68>
 800127a:	e7e9      	b.n	8001250 <__aeabi_ui2f+0x54>
 800127c:	fbffffff 	.word	0xfbffffff

08001280 <__clzsi2>:
 8001280:	211c      	movs	r1, #28
 8001282:	2301      	movs	r3, #1
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	4298      	cmp	r0, r3
 8001288:	d301      	bcc.n	800128e <__clzsi2+0xe>
 800128a:	0c00      	lsrs	r0, r0, #16
 800128c:	3910      	subs	r1, #16
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	4298      	cmp	r0, r3
 8001292:	d301      	bcc.n	8001298 <__clzsi2+0x18>
 8001294:	0a00      	lsrs	r0, r0, #8
 8001296:	3908      	subs	r1, #8
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	4298      	cmp	r0, r3
 800129c:	d301      	bcc.n	80012a2 <__clzsi2+0x22>
 800129e:	0900      	lsrs	r0, r0, #4
 80012a0:	3904      	subs	r1, #4
 80012a2:	a202      	add	r2, pc, #8	; (adr r2, 80012ac <__clzsi2+0x2c>)
 80012a4:	5c10      	ldrb	r0, [r2, r0]
 80012a6:	1840      	adds	r0, r0, r1
 80012a8:	4770      	bx	lr
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	02020304 	.word	0x02020304
 80012b0:	01010101 	.word	0x01010101
	...

080012bc <__clzdi2>:
 80012bc:	b510      	push	{r4, lr}
 80012be:	2900      	cmp	r1, #0
 80012c0:	d103      	bne.n	80012ca <__clzdi2+0xe>
 80012c2:	f7ff ffdd 	bl	8001280 <__clzsi2>
 80012c6:	3020      	adds	r0, #32
 80012c8:	e002      	b.n	80012d0 <__clzdi2+0x14>
 80012ca:	0008      	movs	r0, r1
 80012cc:	f7ff ffd8 	bl	8001280 <__clzsi2>
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)

080012d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x3c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Init+0x3c>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	0049      	lsls	r1, r1, #1
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f810 	bl	8001314 <HAL_InitTick>
 80012f4:	1e03      	subs	r3, r0, #0
 80012f6:	d003      	beq.n	8001300 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e001      	b.n	8001304 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f005 ff56 	bl	80071b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_InitTick+0x88>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02b      	beq.n	8001384 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_InitTick+0x8c>)
 800132e:	681c      	ldr	r4, [r3, #0]
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_InitTick+0x88>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0019      	movs	r1, r3
 8001336:	23fa      	movs	r3, #250	; 0xfa
 8001338:	0098      	lsls	r0, r3, #2
 800133a:	f7fe feed 	bl	8000118 <__udivsi3>
 800133e:	0003      	movs	r3, r0
 8001340:	0019      	movs	r1, r3
 8001342:	0020      	movs	r0, r4
 8001344:	f7fe fee8 	bl	8000118 <__udivsi3>
 8001348:	0003      	movs	r3, r0
 800134a:	0018      	movs	r0, r3
 800134c:	f001 fa03 	bl	8002756 <HAL_SYSTICK_Config>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d112      	bne.n	800137a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d80a      	bhi.n	8001370 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2301      	movs	r3, #1
 800135e:	425b      	negs	r3, r3
 8001360:	2200      	movs	r2, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f001 f9d2 	bl	800270c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_InitTick+0x90>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e00d      	b.n	800138c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e008      	b.n	800138c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800137a:	230f      	movs	r3, #15
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e003      	b.n	800138c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800138c:	230f      	movs	r3, #15
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b005      	add	sp, #20
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	20000004 	.word	0x20000004
 80013a0:	20000020 	.word	0x20000020
 80013a4:	20000000 	.word	0x20000000

080013a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x1c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_IncTick+0x20>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	18d2      	adds	r2, r2, r3
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_IncTick+0x20>)
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	20000004 	.word	0x20000004
 80013c8:	200000a4 	.word	0x200000a4

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <HAL_GetTick+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	200000a4 	.word	0x200000a4

080013e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013f0:	401a      	ands	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	601a      	str	r2, [r3, #0]
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	fe3fffff 	.word	0xfe3fffff

08001408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	23e0      	movs	r3, #224	; 0xe0
 8001416:	045b      	lsls	r3, r3, #17
 8001418:	4013      	ands	r3, r2
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}

08001422 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	2104      	movs	r1, #4
 8001436:	400a      	ands	r2, r1
 8001438:	2107      	movs	r1, #7
 800143a:	4091      	lsls	r1, r2
 800143c:	000a      	movs	r2, r1
 800143e:	43d2      	mvns	r2, r2
 8001440:	401a      	ands	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2104      	movs	r1, #4
 8001446:	400b      	ands	r3, r1
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4099      	lsls	r1, r3
 800144c:	000b      	movs	r3, r1
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}

0800145c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	2104      	movs	r1, #4
 800146e:	400a      	ands	r2, r1
 8001470:	2107      	movs	r1, #7
 8001472:	4091      	lsls	r1, r2
 8001474:	000a      	movs	r2, r1
 8001476:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2104      	movs	r1, #4
 800147c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800147e:	40da      	lsrs	r2, r3
 8001480:	0013      	movs	r3, r2
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}

0800148a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4013      	ands	r3, r2
 800149c:	d101      	bne.n	80014a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	211f      	movs	r1, #31
 80014c0:	400a      	ands	r2, r1
 80014c2:	210f      	movs	r1, #15
 80014c4:	4091      	lsls	r1, r2
 80014c6:	000a      	movs	r2, r1
 80014c8:	43d2      	mvns	r2, r2
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	0e9b      	lsrs	r3, r3, #26
 80014d0:	210f      	movs	r1, #15
 80014d2:	4019      	ands	r1, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	201f      	movs	r0, #31
 80014d8:	4003      	ands	r3, r0
 80014da:	4099      	lsls	r1, r3
 80014dc:	000b      	movs	r3, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	035b      	lsls	r3, r3, #13
 80014fe:	0b5b      	lsrs	r3, r3, #13
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	0352      	lsls	r2, r2, #13
 8001520:	0b52      	lsrs	r2, r2, #13
 8001522:	43d2      	mvns	r2, r2
 8001524:	401a      	ands	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}

08001532 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2203      	movs	r2, #3
 8001540:	4013      	ands	r3, r2
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	0212      	lsls	r2, r2, #8
 8001560:	43d2      	mvns	r2, r2
 8001562:	401a      	ands	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	400b      	ands	r3, r1
 800156c:	4904      	ldr	r1, [pc, #16]	; (8001580 <LL_ADC_SetChannelSamplingTime+0x34>)
 800156e:	400b      	ands	r3, r1
 8001570:	431a      	orrs	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	07ffff00 	.word	0x07ffff00

08001584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001592:	4013      	ands	r3, r2
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	0552      	lsls	r2, r2, #21
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	6fffffe8 	.word	0x6fffffe8

080015ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	055b      	lsls	r3, r3, #21
 80015bc:	401a      	ands	r2, r3
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	055b      	lsls	r3, r3, #21
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d101      	bne.n	80015ca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <LL_ADC_Enable+0x20>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	2201      	movs	r2, #1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	7fffffe8 	.word	0x7fffffe8

080015f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <LL_ADC_Disable+0x20>)
 8001606:	4013      	ands	r3, r2
 8001608:	2202      	movs	r2, #2
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	7fffffe8 	.word	0x7fffffe8

0800161c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <LL_ADC_IsEnabled+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_IsEnabled+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}

0800163e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d101      	bne.n	8001656 <LL_ADC_IsDisableOngoing+0x18>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_ADC_IsDisableOngoing+0x1a>
 8001656:	2300      	movs	r3, #0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <LL_ADC_REG_StartConversion+0x20>)
 800166e:	4013      	ands	r3, r2
 8001670:	2204      	movs	r2, #4
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}
 8001680:	7fffffe8 	.word	0x7fffffe8

08001684 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	2b04      	cmp	r3, #4
 8001696:	d101      	bne.n	800169c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b0:	231f      	movs	r3, #31
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e17f      	b.n	80019ce <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f005 fd8d 	bl	80071f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2254      	movs	r2, #84	; 0x54
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff ff5b 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 80016f6:	1e03      	subs	r3, r0, #0
 80016f8:	d115      	bne.n	8001726 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff ff40 	bl	8001584 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001704:	4bb4      	ldr	r3, [pc, #720]	; (80019d8 <HAL_ADC_Init+0x330>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	49b4      	ldr	r1, [pc, #720]	; (80019dc <HAL_ADC_Init+0x334>)
 800170a:	0018      	movs	r0, r3
 800170c:	f7fe fd04 	bl	8000118 <__udivsi3>
 8001710:	0003      	movs	r3, r0
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001718:	e002      	b.n	8001720 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff ff3e 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d10f      	bne.n	8001754 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	2210      	movs	r2, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2201      	movs	r2, #1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff93 	bl	8001684 <LL_ADC_REG_IsConversionOngoing>
 800175e:	0003      	movs	r3, r0
 8001760:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	2210      	movs	r2, #16
 8001768:	4013      	ands	r3, r2
 800176a:	d000      	beq.n	800176e <HAL_ADC_Init+0xc6>
 800176c:	e122      	b.n	80019b4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d000      	beq.n	8001776 <HAL_ADC_Init+0xce>
 8001774:	e11e      	b.n	80019b4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a99      	ldr	r2, [pc, #612]	; (80019e0 <HAL_ADC_Init+0x338>)
 800177c:	4013      	ands	r3, r2
 800177e:	2202      	movs	r2, #2
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff ff46 	bl	800161c <LL_ADC_IsEnabled>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d000      	beq.n	8001796 <HAL_ADC_Init+0xee>
 8001794:	e0ad      	b.n	80018f2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7e1b      	ldrb	r3, [r3, #24]
 800179e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e5b      	ldrb	r3, [r3, #25]
 80017a6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80017a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7e9b      	ldrb	r3, [r3, #26]
 80017ae:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_ADC_Init+0x118>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	e000      	b.n	80017c2 <HAL_ADC_Init+0x11a>
 80017c0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017c2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017c8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da04      	bge.n	80017dc <HAL_ADC_Init+0x134>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Init+0x138>
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80017e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	212c      	movs	r1, #44	; 0x2c
 80017e6:	5c5b      	ldrb	r3, [r3, r1]
 80017e8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017ea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	5c9b      	ldrb	r3, [r3, r2]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d115      	bne.n	8001828 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e9b      	ldrb	r3, [r3, #26]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	0252      	lsls	r2, r2, #9
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	e00b      	b.n	8001828 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	2220      	movs	r2, #32
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2201      	movs	r2, #1
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00a      	beq.n	8001846 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001834:	23e0      	movs	r3, #224	; 0xe0
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800183e:	4313      	orrs	r3, r2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a65      	ldr	r2, [pc, #404]	; (80019e4 <HAL_ADC_Init+0x33c>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0f9b      	lsrs	r3, r3, #30
 8001862:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001868:	4313      	orrs	r3, r2
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	223c      	movs	r2, #60	; 0x3c
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d111      	bne.n	800189e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	0f9b      	lsrs	r3, r3, #30
 8001880:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001886:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800188c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001892:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	2201      	movs	r2, #1
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4a50      	ldr	r2, [pc, #320]	; (80019e8 <HAL_ADC_Init+0x340>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	061b      	lsls	r3, r3, #24
 80018bc:	429a      	cmp	r2, r3
 80018be:	d018      	beq.n	80018f2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	05db      	lsls	r3, r3, #23
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d012      	beq.n	80018f2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d00c      	beq.n	80018f2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018d8:	4b44      	ldr	r3, [pc, #272]	; (80019ec <HAL_ADC_Init+0x344>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_ADC_Init+0x348>)
 80018de:	4013      	ands	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	23f0      	movs	r3, #240	; 0xf0
 80018e8:	039b      	lsls	r3, r3, #14
 80018ea:	401a      	ands	r2, r3
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_ADC_Init+0x344>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fa:	001a      	movs	r2, r3
 80018fc:	2100      	movs	r1, #0
 80018fe:	f7ff fd90 	bl	8001422 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	493a      	ldr	r1, [pc, #232]	; (80019f4 <HAL_ADC_Init+0x34c>)
 800190c:	001a      	movs	r2, r3
 800190e:	f7ff fd88 	bl	8001422 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2110      	movs	r1, #16
 8001926:	4249      	negs	r1, r1
 8001928:	430a      	orrs	r2, r1
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
 800192c:	e018      	b.n	8001960 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	039b      	lsls	r3, r3, #14
 8001936:	429a      	cmp	r2, r3
 8001938:	d112      	bne.n	8001960 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	3b01      	subs	r3, #1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	221c      	movs	r2, #28
 800194a:	4013      	ands	r3, r2
 800194c:	2210      	movs	r2, #16
 800194e:	4252      	negs	r2, r2
 8001950:	409a      	lsls	r2, r3
 8001952:	0011      	movs	r1, r2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2100      	movs	r1, #0
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff fd78 	bl	800145c <LL_ADC_GetSamplingTimeCommonChannels>
 800196c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001972:	429a      	cmp	r2, r3
 8001974:	d10b      	bne.n	800198e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	2203      	movs	r2, #3
 8001982:	4393      	bics	r3, r2
 8001984:	2201      	movs	r2, #1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800198c:	e01c      	b.n	80019c8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	2212      	movs	r2, #18
 8001994:	4393      	bics	r3, r2
 8001996:	2210      	movs	r2, #16
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2201      	movs	r2, #1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80019aa:	231f      	movs	r3, #31
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019b2:	e009      	b.n	80019c8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	2210      	movs	r2, #16
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019c0:	231f      	movs	r3, #31
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019c8:	231f      	movs	r3, #31
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	781b      	ldrb	r3, [r3, #0]
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b008      	add	sp, #32
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	20000020 	.word	0x20000020
 80019dc:	00030d40 	.word	0x00030d40
 80019e0:	fffffefd 	.word	0xfffffefd
 80019e4:	fffe0201 	.word	0xfffe0201
 80019e8:	1ffffc02 	.word	0x1ffffc02
 80019ec:	40012708 	.word	0x40012708
 80019f0:	ffc3ffff 	.word	0xffc3ffff
 80019f4:	07ffff04 	.word	0x07ffff04

080019f8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff fe3d 	bl	8001684 <LL_ADC_REG_IsConversionOngoing>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d15f      	bne.n	8001ace <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2254      	movs	r2, #84	; 0x54
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_Start_IT+0x24>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e05f      	b.n	8001adc <HAL_ADC_Start_IT+0xe4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2254      	movs	r2, #84	; 0x54
 8001a20:	2101      	movs	r1, #1
 8001a22:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a24:	250f      	movs	r5, #15
 8001a26:	197c      	adds	r4, r7, r5
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fb68 	bl	8002100 <ADC_Enable>
 8001a30:	0003      	movs	r3, r0
 8001a32:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a34:	197b      	adds	r3, r7, r5
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d143      	bne.n	8001ac4 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_ADC_Start_IT+0xec>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	221c      	movs	r2, #28
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2254      	movs	r2, #84	; 0x54
 8001a60:	2100      	movs	r1, #0
 8001a62:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	211c      	movs	r1, #28
 8001a70:	438a      	bics	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d108      	bne.n	8001a8e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2108      	movs	r1, #8
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
          break;
 8001a8c:	e008      	b.n	8001aa0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
          break;
 8001a9e:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff fdcf 	bl	8001660 <LL_ADC_REG_StartConversion>
 8001ac2:	e008      	b.n	8001ad6 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2254      	movs	r2, #84	; 0x54
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]
 8001acc:	e003      	b.n	8001ad6 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ace:	230f      	movs	r3, #15
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	781b      	ldrb	r3, [r3, #0]
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	fffff0fe 	.word	0xfffff0fe

08001ae8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d017      	beq.n	8001b54 <HAL_ADC_IRQHandler+0x54>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	2210      	movs	r2, #16
 8001b32:	4013      	ands	r3, r2
 8001b34:	d106      	bne.n	8001b44 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fd24 	bl	8002594 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2202      	movs	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x64>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d107      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2208      	movs	r2, #8
 8001b68:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b6a:	d04d      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4013      	ands	r3, r2
 8001b72:	d049      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	2210      	movs	r2, #16
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff fc7a 	bl	800148a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d02e      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7e9b      	ldrb	r3, [r3, #26]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12a      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d123      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fd65 	bl	8001684 <LL_ADC_REG_IsConversionOngoing>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d110      	bne.n	8001be0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	210c      	movs	r1, #12
 8001bca:	438a      	bics	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_ADC_IRQHandler+0x22c>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bde:	e00b      	b.n	8001bf8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	2220      	movs	r2, #32
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f005 fab2 	bl	8007164 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	220c      	movs	r2, #12
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x136>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	4013      	ands	r3, r2
 8001c16:	d00e      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	0252      	lsls	r2, r2, #9
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 f881 	bl	8001d30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d014      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x16a>
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d00f      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	0292      	lsls	r2, r2, #10
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 fc8a 	bl	8002574 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	0052      	lsls	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d014      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x19e>
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d00f      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	02d2      	lsls	r2, r2, #11
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 fc78 	bl	8002584 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x1fe>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d027      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e008      	b.n	8001cce <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fc36 	bl	8001532 <LL_ADC_REG_GetDMATransfer>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d110      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	00d2      	lsls	r2, r2, #3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 f825 	bl	8001d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	4013      	ands	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x224>
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d008      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fc45 	bl	80025a4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	0192      	lsls	r2, r2, #6
 8001d22:	601a      	str	r2, [r3, #0]
  }
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b006      	add	sp, #24
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	fffffefe 	.word	0xfffffefe

08001d30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5a:	2317      	movs	r3, #23
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2254      	movs	r2, #84	; 0x54
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x24>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e1c0      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x3a6>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2254      	movs	r2, #84	; 0x54
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fc7f 	bl	8001684 <LL_ADC_REG_IsConversionOngoing>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d000      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0x3c>
 8001d8a:	e1a3      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d100      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x46>
 8001d94:	e143      	b.n	800201e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001da6:	4ac1      	ldr	r2, [pc, #772]	; (80020ac <HAL_ADC_ConfigChannel+0x35c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d108      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0019      	movs	r1, r3
 8001db6:	0010      	movs	r0, r2
 8001db8:	f7ff fb98 	bl	80014ec <LL_ADC_REG_SetSequencerChAdd>
 8001dbc:	e0c9      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	211f      	movs	r1, #31
 8001dc8:	400b      	ands	r3, r1
 8001dca:	210f      	movs	r1, #15
 8001dcc:	4099      	lsls	r1, r3
 8001dce:	000b      	movs	r3, r1
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	035b      	lsls	r3, r3, #13
 8001ddc:	0b5b      	lsrs	r3, r3, #13
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x9c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	221f      	movs	r2, #31
 8001de8:	4013      	ands	r3, r2
 8001dea:	e098      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	d000      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0xa8>
 8001df6:	e091      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1cc>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d000      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0xb4>
 8001e02:	e089      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1c8>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d000      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0xc0>
 8001e0e:	e081      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1c4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2208      	movs	r2, #8
 8001e16:	4013      	ands	r3, r2
 8001e18:	d000      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0xcc>
 8001e1a:	e079      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1c0>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2210      	movs	r2, #16
 8001e22:	4013      	ands	r3, r2
 8001e24:	d000      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0xd8>
 8001e26:	e071      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x1bc>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d000      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0xe4>
 8001e32:	e069      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x1b8>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2240      	movs	r2, #64	; 0x40
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d000      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0xf0>
 8001e3e:	e061      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1b4>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	4013      	ands	r3, r2
 8001e48:	d000      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0xfc>
 8001e4a:	e059      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1b0>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d151      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1ac>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d149      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1a8>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d141      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1a4>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d139      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1a0>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	4013      	ands	r3, r2
 8001e86:	d131      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x19c>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	019b      	lsls	r3, r3, #6
 8001e90:	4013      	ands	r3, r2
 8001e92:	d129      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x198>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	01db      	lsls	r3, r3, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d121      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x194>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d119      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x190>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x18c>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x188>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	02db      	lsls	r3, r3, #11
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x184>
 8001ed0:	2312      	movs	r3, #18
 8001ed2:	e024      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e022      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ed8:	2311      	movs	r3, #17
 8001eda:	e020      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001edc:	2310      	movs	r3, #16
 8001ede:	e01e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	e01c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ee4:	230e      	movs	r3, #14
 8001ee6:	e01a      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ee8:	230d      	movs	r3, #13
 8001eea:	e018      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001eec:	230c      	movs	r3, #12
 8001eee:	e016      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	230b      	movs	r3, #11
 8001ef2:	e014      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	e012      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	2309      	movs	r3, #9
 8001efa:	e010      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	2308      	movs	r3, #8
 8001efe:	e00e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	2307      	movs	r3, #7
 8001f02:	e00c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	2306      	movs	r3, #6
 8001f06:	e00a      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e008      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e006      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e004      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1ce>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	6852      	ldr	r2, [r2, #4]
 8001f22:	201f      	movs	r0, #31
 8001f24:	4002      	ands	r2, r0
 8001f26:	4093      	lsls	r3, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d808      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	f7ff faad 	bl	80014ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	001a      	movs	r2, r3
 8001f60:	f7ff faf4 	bl	800154c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db00      	blt.n	8001f6e <HAL_ADC_ConfigChannel+0x21e>
 8001f6c:	e0bc      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f6e:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fa49 	bl	8001408 <LL_ADC_GetCommonPathInternalCh>
 8001f76:	0003      	movs	r3, r0
 8001f78:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_ADC_ConfigChannel+0x364>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d122      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f8c:	d11d      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	0412      	lsls	r2, r2, #16
 8001f94:	4313      	orrs	r3, r2
 8001f96:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 8001f98:	0019      	movs	r1, r3
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	f7ff fa20 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa0:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HAL_ADC_ConfigChannel+0x368>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4945      	ldr	r1, [pc, #276]	; (80020bc <HAL_ADC_ConfigChannel+0x36c>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7fe f8b6 	bl	8000118 <__udivsi3>
 8001fac:	0003      	movs	r3, r0
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	189b      	adds	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fba:	e002      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f9      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fc8:	e08e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <HAL_ADC_ConfigChannel+0x370>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	045b      	lsls	r3, r3, #17
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0452      	lsls	r2, r2, #17
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 8001fe8:	0019      	movs	r1, r3
 8001fea:	0010      	movs	r0, r2
 8001fec:	f7ff f9f8 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
 8001ff0:	e07a      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a33      	ldr	r2, [pc, #204]	; (80020c4 <HAL_ADC_ConfigChannel+0x374>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d000      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x2ae>
 8001ffc:	e074      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	03db      	lsls	r3, r3, #15
 8002004:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002006:	d000      	beq.n	800200a <HAL_ADC_ConfigChannel+0x2ba>
 8002008:	e06e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	03d2      	lsls	r2, r2, #15
 8002010:	4313      	orrs	r3, r2
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 8002014:	0019      	movs	r1, r3
 8002016:	0010      	movs	r0, r2
 8002018:	f7ff f9e2 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
 800201c:	e064      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	429a      	cmp	r2, r3
 8002028:	d004      	beq.n	8002034 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_ADC_ConfigChannel+0x35c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0019      	movs	r1, r3
 800203e:	0010      	movs	r0, r2
 8002040:	f7ff fa65 	bl	800150e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da4d      	bge.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff f9da 	bl	8001408 <LL_ADC_GetCommonPathInternalCh>
 8002054:	0003      	movs	r3, r0
 8002056:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <HAL_ADC_ConfigChannel+0x364>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_ADC_ConfigChannel+0x378>)
 8002066:	4013      	ands	r3, r2
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 800206a:	0019      	movs	r1, r3
 800206c:	0010      	movs	r0, r2
 800206e:	f7ff f9b7 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
 8002072:	e039      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <HAL_ADC_ConfigChannel+0x370>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_ADC_ConfigChannel+0x37c>)
 8002082:	4013      	ands	r3, r2
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 8002086:	0019      	movs	r1, r3
 8002088:	0010      	movs	r0, r2
 800208a:	f7ff f9a9 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
 800208e:	e02b      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_ADC_ConfigChannel+0x374>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d126      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_ADC_ConfigChannel+0x380>)
 800209e:	4013      	ands	r3, r2
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_ADC_ConfigChannel+0x360>)
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f7ff f99b 	bl	80013e0 <LL_ADC_SetCommonPathInternalCh>
 80020aa:	e01d      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x398>
 80020ac:	80000004 	.word	0x80000004
 80020b0:	40012708 	.word	0x40012708
 80020b4:	b0001000 	.word	0xb0001000
 80020b8:	20000020 	.word	0x20000020
 80020bc:	00030d40 	.word	0x00030d40
 80020c0:	b8004000 	.word	0xb8004000
 80020c4:	b4002000 	.word	0xb4002000
 80020c8:	ff7fffff 	.word	0xff7fffff
 80020cc:	feffffff 	.word	0xfeffffff
 80020d0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	2220      	movs	r2, #32
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2254      	movs	r2, #84	; 0x54
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020f0:	2317      	movs	r3, #23
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	781b      	ldrb	r3, [r3, #0]
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b006      	add	sp, #24
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)

08002100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fa83 	bl	800161c <LL_ADC_IsEnabled>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d000      	beq.n	800211c <ADC_Enable+0x1c>
 800211a:	e069      	b.n	80021f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a36      	ldr	r2, [pc, #216]	; (80021fc <ADC_Enable+0xfc>)
 8002124:	4013      	ands	r3, r2
 8002126:	d00d      	beq.n	8002144 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	2210      	movs	r2, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2201      	movs	r2, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e056      	b.n	80021f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fa43 	bl	80015d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <ADC_Enable+0x100>)
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff f959 	bl	8001408 <LL_ADC_GetCommonPathInternalCh>
 8002156:	0002      	movs	r2, r0
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	4013      	ands	r3, r2
 800215e:	d00f      	beq.n	8002180 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <ADC_Enable+0x104>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4928      	ldr	r1, [pc, #160]	; (8002208 <ADC_Enable+0x108>)
 8002166:	0018      	movs	r0, r3
 8002168:	f7fd ffd6 	bl	8000118 <__udivsi3>
 800216c:	0003      	movs	r3, r0
 800216e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002170:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002172:	e002      	b.n	800217a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	3b01      	subs	r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e5b      	ldrb	r3, [r3, #25]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d033      	beq.n	80021f0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002188:	f7ff f920 	bl	80013cc <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002190:	e027      	b.n	80021e2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff fa40 	bl	800161c <LL_ADC_IsEnabled>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d104      	bne.n	80021aa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fa15 	bl	80015d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021aa:	f7ff f90f 	bl	80013cc <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d914      	bls.n	80021e2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d00d      	beq.n	80021e2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	2210      	movs	r2, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2201      	movs	r2, #1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e007      	b.n	80021f2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d1d0      	bne.n	8002192 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	0018      	movs	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b004      	add	sp, #16
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	80000017 	.word	0x80000017
 8002200:	40012708 	.word	0x40012708
 8002204:	20000020 	.word	0x20000020
 8002208:	00030d40 	.word	0x00030d40

0800220c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fa10 	bl	800163e <LL_ADC_IsDisableOngoing>
 800221e:	0003      	movs	r3, r0
 8002220:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff f9f8 	bl	800161c <LL_ADC_IsEnabled>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d046      	beq.n	80022be <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d143      	bne.n	80022be <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2205      	movs	r2, #5
 800223e:	4013      	ands	r3, r2
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10d      	bne.n	8002260 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff f9d5 	bl	80015f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2203      	movs	r2, #3
 8002254:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7ff f8b9 	bl	80013cc <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800225e:	e028      	b.n	80022b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	2210      	movs	r2, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2201      	movs	r2, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e021      	b.n	80022c0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800227c:	f7ff f8a6 	bl	80013cc <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d913      	bls.n	80022b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2201      	movs	r2, #1
 8002292:	4013      	ands	r3, r2
 8002294:	d00d      	beq.n	80022b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	2210      	movs	r2, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2201      	movs	r2, #1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e006      	b.n	80022c0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1de      	bne.n	800227c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_ADC_SetCalibrationFactor>:
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	22b4      	movs	r2, #180	; 0xb4
 80022d6:	589b      	ldr	r3, [r3, r2]
 80022d8:	227f      	movs	r2, #127	; 0x7f
 80022da:	4393      	bics	r3, r2
 80022dc:	001a      	movs	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	21b4      	movs	r1, #180	; 0xb4
 80022e6:	505a      	str	r2, [r3, r1]
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_ADC_GetCalibrationFactor>:
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	22b4      	movs	r2, #180	; 0xb4
 80022fc:	589b      	ldr	r3, [r3, r2]
 80022fe:	227f      	movs	r2, #127	; 0x7f
 8002300:	4013      	ands	r3, r2
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <LL_ADC_Enable>:
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <LL_ADC_Enable+0x20>)
 800231a:	4013      	ands	r3, r2
 800231c:	2201      	movs	r2, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}
 800232c:	7fffffe8 	.word	0x7fffffe8

08002330 <LL_ADC_Disable>:
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <LL_ADC_Disable+0x20>)
 800233e:	4013      	ands	r3, r2
 8002340:	2202      	movs	r2, #2
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	7fffffe8 	.word	0x7fffffe8

08002354 <LL_ADC_IsEnabled>:
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <LL_ADC_IsEnabled+0x18>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_ADC_IsEnabled+0x1a>
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <LL_ADC_StartCalibration>:
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <LL_ADC_StartCalibration+0x24>)
 8002386:	4013      	ands	r3, r2
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	0612      	lsls	r2, r2, #24
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	7fffffe8 	.word	0x7fffffe8

080023a0 <LL_ADC_IsCalibrationOnGoing>:
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	0fdb      	lsrs	r3, r3, #31
 80023ae:	07da      	lsls	r2, r3, #31
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d101      	bne.n	80023bc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_ADC_IsCalibrationOnGoing+0x1e>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2254      	movs	r2, #84	; 0x54
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0ba      	b.n	800255c <HAL_ADCEx_Calibration_Start+0x194>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2254      	movs	r2, #84	; 0x54
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80023ee:	2317      	movs	r3, #23
 80023f0:	18fc      	adds	r4, r7, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ff09 	bl	800220c <ADC_Disable>
 80023fa:	0003      	movs	r3, r0
 80023fc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff ffa6 	bl	8002354 <LL_ADC_IsEnabled>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d000      	beq.n	800240e <HAL_ADCEx_Calibration_Start+0x46>
 800240c:	e099      	b.n	8002542 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	4a54      	ldr	r2, [pc, #336]	; (8002564 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002414:	4013      	ands	r3, r2
 8002416:	2202      	movs	r2, #2
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002436:	400a      	ands	r2, r1
 8002438:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e02d      	b.n	800249c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff ff97 	bl	8002378 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800244a:	e014      	b.n	8002476 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3301      	adds	r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a46      	ldr	r2, [pc, #280]	; (8002570 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90d      	bls.n	8002476 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	2212      	movs	r2, #18
 8002460:	4393      	bics	r3, r2
 8002462:	2210      	movs	r2, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2254      	movs	r2, #84	; 0x54
 800246e:	2100      	movs	r1, #0
 8002470:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e072      	b.n	800255c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	0018      	movs	r0, r3
 800247c:	f7ff ff90 	bl	80023a0 <LL_ADC_IsCalibrationOnGoing>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d1e3      	bne.n	800244c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <LL_ADC_GetCalibrationFactor>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	189b      	adds	r3, r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d9ce      	bls.n	8002440 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80024a2:	69f9      	ldr	r1, [r7, #28]
 80024a4:	69b8      	ldr	r0, [r7, #24]
 80024a6:	f7fd fe37 	bl	8000118 <__udivsi3>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff ff2a 	bl	800230c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ff01 	bl	80022c8 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff ff30 	bl	8002330 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d0:	f7fe ff7c 	bl	80013cc <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024d8:	e01b      	b.n	8002512 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024da:	f7fe ff77 	bl	80013cc <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d914      	bls.n	8002512 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <LL_ADC_IsEnabled>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d00d      	beq.n	8002512 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	2210      	movs	r2, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e024      	b.n	800255c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff ff1c 	bl	8002354 <LL_ADC_IsEnabled>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d1dc      	bne.n	80024da <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	2203      	movs	r2, #3
 8002536:	4393      	bics	r3, r2
 8002538:	2201      	movs	r2, #1
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
 8002540:	e005      	b.n	800254e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	2210      	movs	r2, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2254      	movs	r2, #84	; 0x54
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002556:	2317      	movs	r3, #23
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b009      	add	sp, #36	; 0x24
 8002562:	bd90      	pop	{r4, r7, pc}
 8002564:	fffffefd 	.word	0xfffffefd
 8002568:	00008003 	.word	0x00008003
 800256c:	ffff7ffc 	.word	0xffff7ffc
 8002570:	0002f1ff 	.word	0x0002f1ff

08002574 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	0002      	movs	r2, r0
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b7f      	cmp	r3, #127	; 0x7f
 80025c6:	d809      	bhi.n	80025dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	001a      	movs	r2, r3
 80025ce:	231f      	movs	r3, #31
 80025d0:	401a      	ands	r2, r3
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_EnableIRQ+0x30>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4091      	lsls	r1, r2
 80025d8:	000a      	movs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b002      	add	sp, #8
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b7f      	cmp	r3, #127	; 0x7f
 80025fc:	d828      	bhi.n	8002650 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <__NVIC_SetPriority+0xd4>)
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b25b      	sxtb	r3, r3
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	33c0      	adds	r3, #192	; 0xc0
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	589b      	ldr	r3, [r3, r2]
 800260e:	1dfa      	adds	r2, r7, #7
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	0011      	movs	r1, r2
 8002614:	2203      	movs	r2, #3
 8002616:	400a      	ands	r2, r1
 8002618:	00d2      	lsls	r2, r2, #3
 800261a:	21ff      	movs	r1, #255	; 0xff
 800261c:	4091      	lsls	r1, r2
 800261e:	000a      	movs	r2, r1
 8002620:	43d2      	mvns	r2, r2
 8002622:	401a      	ands	r2, r3
 8002624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	019b      	lsls	r3, r3, #6
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	401a      	ands	r2, r3
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	0018      	movs	r0, r3
 8002634:	2303      	movs	r3, #3
 8002636:	4003      	ands	r3, r0
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800263c:	481f      	ldr	r0, [pc, #124]	; (80026bc <__NVIC_SetPriority+0xd4>)
 800263e:	1dfb      	adds	r3, r7, #7
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25b      	sxtb	r3, r3
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	430a      	orrs	r2, r1
 8002648:	33c0      	adds	r3, #192	; 0xc0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800264e:	e031      	b.n	80026b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <__NVIC_SetPriority+0xd8>)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	0019      	movs	r1, r3
 8002658:	230f      	movs	r3, #15
 800265a:	400b      	ands	r3, r1
 800265c:	3b08      	subs	r3, #8
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3306      	adds	r3, #6
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	18d3      	adds	r3, r2, r3
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1dfa      	adds	r2, r7, #7
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	0011      	movs	r1, r2
 8002670:	2203      	movs	r2, #3
 8002672:	400a      	ands	r2, r1
 8002674:	00d2      	lsls	r2, r2, #3
 8002676:	21ff      	movs	r1, #255	; 0xff
 8002678:	4091      	lsls	r1, r2
 800267a:	000a      	movs	r2, r1
 800267c:	43d2      	mvns	r2, r2
 800267e:	401a      	ands	r2, r3
 8002680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	401a      	ands	r2, r3
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	2303      	movs	r3, #3
 8002692:	4003      	ands	r3, r0
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <__NVIC_SetPriority+0xd8>)
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	001c      	movs	r4, r3
 80026a0:	230f      	movs	r3, #15
 80026a2:	4023      	ands	r3, r4
 80026a4:	3b08      	subs	r3, #8
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	430a      	orrs	r2, r1
 80026aa:	3306      	adds	r3, #6
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	18c3      	adds	r3, r0, r3
 80026b0:	3304      	adds	r3, #4
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b003      	add	sp, #12
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	045b      	lsls	r3, r3, #17
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d301      	bcc.n	80026dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d8:	2301      	movs	r3, #1
 80026da:	e010      	b.n	80026fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <SysTick_Config+0x44>)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	3a01      	subs	r2, #1
 80026e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e4:	2301      	movs	r3, #1
 80026e6:	425b      	negs	r3, r3
 80026e8:	2103      	movs	r1, #3
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff ff7c 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x44>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x44>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	210f      	movs	r1, #15
 8002718:	187b      	adds	r3, r7, r1
 800271a:	1c02      	adds	r2, r0, #0
 800271c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	187b      	adds	r3, r7, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b25b      	sxtb	r3, r3
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	0002      	movs	r2, r0
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b25b      	sxtb	r3, r3
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff ff33 	bl	80025b4 <__NVIC_EnableIRQ>
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ffaf 	bl	80026c4 <SysTick_Config>
 8002766:	0003      	movs	r3, r0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e050      	b.n	8002824 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2225      	movs	r2, #37	; 0x25
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d008      	beq.n	80027a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	2100      	movs	r1, #0
 800279a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e041      	b.n	8002824 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	210e      	movs	r1, #14
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	491c      	ldr	r1, [pc, #112]	; (800282c <HAL_DMA_Abort+0xbc>)
 80027bc:	400a      	ands	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_DMA_Abort+0xc0>)
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	221c      	movs	r2, #28
 80027da:	4013      	ands	r3, r2
 80027dc:	2201      	movs	r2, #1
 80027de:	409a      	lsls	r2, r3
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_DMA_Abort+0xc0>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <HAL_DMA_Abort+0xbc>)
 8002804:	400a      	ands	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002810:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2225      	movs	r2, #37	; 0x25
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2224      	movs	r2, #36	; 0x24
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}
 800282c:	fffffeff 	.word	0xfffffeff
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	210f      	movs	r1, #15
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2225      	movs	r2, #37	; 0x25
 8002848:	5c9b      	ldrb	r3, [r3, r2]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d006      	beq.n	800285e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e049      	b.n	80028f2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	210e      	movs	r1, #14
 800286a:	438a      	bics	r2, r1
 800286c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	438a      	bics	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	491d      	ldr	r1, [pc, #116]	; (8002900 <HAL_DMA_Abort_IT+0xcc>)
 800288a:	400a      	ands	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_DMA_Abort_IT+0xd0>)
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	221c      	movs	r2, #28
 8002898:	4013      	ands	r3, r2
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_DMA_Abort_IT+0xd0>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	490f      	ldr	r1, [pc, #60]	; (8002900 <HAL_DMA_Abort_IT+0xcc>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2225      	movs	r2, #37	; 0x25
 80028d4:	2101      	movs	r1, #1
 80028d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	0010      	movs	r0, r2
 80028f0:	4798      	blx	r3
    }
  }
  return status;
 80028f2:	230f      	movs	r3, #15
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	781b      	ldrb	r3, [r3, #0]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b004      	add	sp, #16
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	fffffeff 	.word	0xfffffeff
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002916:	e147      	b.n	8002ba8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4091      	lsls	r1, r2
 8002922:	000a      	movs	r2, r1
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d100      	bne.n	8002930 <HAL_GPIO_Init+0x28>
 800292e:	e138      	b.n	8002ba2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	4013      	ands	r3, r2
 8002938:	2b01      	cmp	r3, #1
 800293a:	d005      	beq.n	8002948 <HAL_GPIO_Init+0x40>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d130      	bne.n	80029aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	409a      	lsls	r2, r3
 8002956:	0013      	movs	r3, r2
 8002958:	43da      	mvns	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	409a      	lsls	r2, r3
 800296a:	0013      	movs	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297e:	2201      	movs	r2, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	43da      	mvns	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	2201      	movs	r2, #1
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2203      	movs	r2, #3
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d017      	beq.n	80029e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	409a      	lsls	r2, r3
 80029c4:	0013      	movs	r3, r2
 80029c6:	43da      	mvns	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d123      	bne.n	8002a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	58d3      	ldr	r3, [r2, r3]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2207      	movs	r2, #7
 8002a04:	4013      	ands	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2107      	movs	r1, #7
 8002a1e:	400b      	ands	r3, r1
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	6939      	ldr	r1, [r7, #16]
 8002a38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2203      	movs	r2, #3
 8002a58:	401a      	ands	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	23c0      	movs	r3, #192	; 0xc0
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	4013      	ands	r3, r2
 8002a78:	d100      	bne.n	8002a7c <HAL_GPIO_Init+0x174>
 8002a7a:	e092      	b.n	8002ba2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a7c:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3318      	adds	r3, #24
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	220f      	movs	r2, #15
 8002a94:	409a      	lsls	r2, r3
 8002a96:	0013      	movs	r3, r2
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	23a0      	movs	r3, #160	; 0xa0
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d013      	beq.n	8002ad2 <HAL_GPIO_Init+0x1ca>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <HAL_GPIO_Init+0x2bc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00d      	beq.n	8002ace <HAL_GPIO_Init+0x1c6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a44      	ldr	r2, [pc, #272]	; (8002bc8 <HAL_GPIO_Init+0x2c0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d007      	beq.n	8002aca <HAL_GPIO_Init+0x1c2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_GPIO_Init+0x2c4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_GPIO_Init+0x1be>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x1cc>
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x1cc>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x1cc>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x1cc>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	400a      	ands	r2, r1
 8002ada:	00d2      	lsls	r2, r2, #3
 8002adc:	4093      	lsls	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ae4:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3318      	adds	r3, #24
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	035b      	lsls	r3, r3, #13
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43da      	mvns	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	039b      	lsls	r3, r3, #14
 8002b34:	4013      	ands	r3, r2
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b48:	2384      	movs	r3, #132	; 0x84
 8002b4a:	58d3      	ldr	r3, [r2, r3]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	4013      	ands	r3, r2
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b6c:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	2284      	movs	r2, #132	; 0x84
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	58d3      	ldr	r3, [r2, r3]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b9a:	4909      	ldr	r1, [pc, #36]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	1e13      	subs	r3, r2, #0
 8002bb2:	d000      	beq.n	8002bb6 <HAL_GPIO_Init+0x2ae>
 8002bb4:	e6b0      	b.n	8002918 <HAL_GPIO_Init+0x10>
  }
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b006      	add	sp, #24
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	50000800 	.word	0x50000800
 8002bcc:	50000c00 	.word	0x50000c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	0008      	movs	r0, r1
 8002bda:	0011      	movs	r1, r2
 8002bdc:	1cbb      	adds	r3, r7, #2
 8002bde:	1c02      	adds	r2, r0, #0
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	1c7b      	adds	r3, r7, #1
 8002be4:	1c0a      	adds	r2, r1, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be8:	1c7b      	adds	r3, r7, #1
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf0:	1cbb      	adds	r3, r7, #2
 8002bf2:	881a      	ldrh	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf8:	e003      	b.n	8002c02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfa:	1cbb      	adds	r3, r7, #2
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d11f      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	0013      	movs	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4912      	ldr	r1, [pc, #72]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd fa6a 	bl	8000118 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4a:	e008      	b.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e001      	b.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e009      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	401a      	ands	r2, r3
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0ed      	beq.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	0018      	movs	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b004      	add	sp, #16
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	fffff9ff 	.word	0xfffff9ff
 8002c84:	20000020 	.word	0x20000020
 8002c88:	000f4240 	.word	0x000f4240

08002c8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	23e0      	movs	r3, #224	; 0xe0
 8002c96:	01db      	lsls	r3, r3, #7
 8002c98:	4013      	ands	r3, r2
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e2fe      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1e>
 8002cc0:	e07c      	b.n	8002dbc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	4bc3      	ldr	r3, [pc, #780]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ccc:	4bc0      	ldr	r3, [pc, #768]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3e>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4bb9      	ldr	r3, [pc, #740]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d062      	beq.n	8002dba <HAL_RCC_OscConfig+0x116>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15e      	bne.n	8002dba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e2d9      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x78>
 8002d0c:	4bb0      	ldr	r3, [pc, #704]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4baf      	ldr	r3, [pc, #700]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	0249      	lsls	r1, r1, #9
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e020      	b.n	8002d5e <HAL_RCC_OscConfig+0xba>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	23a0      	movs	r3, #160	; 0xa0
 8002d22:	02db      	lsls	r3, r3, #11
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10e      	bne.n	8002d46 <HAL_RCC_OscConfig+0xa2>
 8002d28:	4ba9      	ldr	r3, [pc, #676]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4ba8      	ldr	r3, [pc, #672]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	02c9      	lsls	r1, r1, #11
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	4ba6      	ldr	r3, [pc, #664]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4ba5      	ldr	r3, [pc, #660]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0249      	lsls	r1, r1, #9
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0xba>
 8002d46:	4ba2      	ldr	r3, [pc, #648]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4ba1      	ldr	r3, [pc, #644]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	49a1      	ldr	r1, [pc, #644]	; (8002fd4 <HAL_RCC_OscConfig+0x330>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b9f      	ldr	r3, [pc, #636]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d58:	499f      	ldr	r1, [pc, #636]	; (8002fd8 <HAL_RCC_OscConfig+0x334>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d014      	beq.n	8002d90 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fb31 	bl	80013cc <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fb2c 	bl	80013cc <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e298      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	4b93      	ldr	r3, [pc, #588]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	029b      	lsls	r3, r3, #10
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xcc>
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fb1c 	bl	80013cc <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fb17 	bl	80013cc <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e283      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0xf6>
 8002db8:	e000      	b.n	8002dbc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x124>
 8002dc6:	e099      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2238      	movs	r2, #56	; 0x38
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0x144>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d002      	beq.n	8002dee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d135      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dee:	4b78      	ldr	r3, [pc, #480]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x162>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e256      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a74      	ldr	r2, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d112      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e22:	4b6b      	ldr	r3, [pc, #428]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x33c>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e36:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	4013      	ands	r3, r2
 8002e40:	4a68      	ldr	r2, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x340>)
 8002e42:	40da      	lsrs	r2, r3
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x344>)
 8002e46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x348>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fe fa61 	bl	8001314 <HAL_InitTick>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d051      	beq.n	8002efa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e22c      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d030      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x33c>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b55      	ldr	r3, [pc, #340]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0049      	lsls	r1, r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe faa2 	bl	80013cc <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fa9d 	bl	80013cc <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e209      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	; (8002fdc <HAL_RCC_OscConfig+0x338>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002eca:	4949      	ldr	r1, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x34c>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fa7c 	bl	80013cc <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fa77 	bl	80013cc <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1e3      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x236>
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002efa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	4013      	ands	r3, r2
 8002f04:	d047      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2238      	movs	r2, #56	; 0x38
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b18      	cmp	r3, #24
 8002f10:	d10a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d03c      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d138      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e1c5      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f34:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fa46 	bl	80013cc <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f46:	f7fe fa41 	bl	80013cc <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1ad      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d0f1      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2a2>
 8002f62:	e018      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fa2c 	bl	80013cc <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fa27 	bl	80013cc <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e193      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d1f1      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2fe>
 8002fa0:	e0c6      	b.n	8003130 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2238      	movs	r2, #56	; 0x38
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d11e      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x31e>
 8002fc0:	e0b6      	b.n	8003130 <HAL_RCC_OscConfig+0x48c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d000      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fca:	e0b1      	b.n	8003130 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e171      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	fffeffff 	.word	0xfffeffff
 8002fd8:	fffbffff 	.word	0xfffbffff
 8002fdc:	ffff80ff 	.word	0xffff80ff
 8002fe0:	ffffc7ff 	.word	0xffffc7ff
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	20000020 	.word	0x20000020
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff4:	4bb1      	ldr	r3, [pc, #708]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8002ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_OscConfig+0x360>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x362>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	4bac      	ldr	r3, [pc, #688]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800300c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800300e:	4bab      	ldr	r3, [pc, #684]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0549      	lsls	r1, r1, #21
 8003014:	430a      	orrs	r2, r1
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
 8003018:	4ba8      	ldr	r3, [pc, #672]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800301a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	055b      	lsls	r3, r3, #21
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003026:	231f      	movs	r3, #31
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4ba4      	ldr	r3, [pc, #656]	; (80032c0 <HAL_RCC_OscConfig+0x61c>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4013      	ands	r3, r2
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303a:	4ba1      	ldr	r3, [pc, #644]	; (80032c0 <HAL_RCC_OscConfig+0x61c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCC_OscConfig+0x61c>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0049      	lsls	r1, r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003048:	f7fe f9c0 	bl	80013cc <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe f9bb 	bl	80013cc <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e127      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003064:	4b96      	ldr	r3, [pc, #600]	; (80032c0 <HAL_RCC_OscConfig+0x61c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x3e2>
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800307a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800307c:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800307e:	2101      	movs	r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c
 8003084:	e01c      	b.n	80030c0 <HAL_RCC_OscConfig+0x41c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x404>
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003092:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003094:	2104      	movs	r1, #4
 8003096:	430a      	orrs	r2, r1
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800309c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800309e:	4b87      	ldr	r3, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x41c>
 80030a8:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030ac:	4b83      	ldr	r3, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b8:	4b80      	ldr	r3, [pc, #512]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030ba:	2104      	movs	r1, #4
 80030bc:	438a      	bics	r2, r1
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe f980 	bl	80013cc <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe f97b 	bl	80013cc <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a79      	ldr	r2, [pc, #484]	; (80032c4 <HAL_RCC_OscConfig+0x620>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0e6      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	4b75      	ldr	r3, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	2202      	movs	r2, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x42e>
 80030f0:	e013      	b.n	800311a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe f96b 	bl	80013cc <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fa:	e009      	b.n	8003110 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe f966 	bl	80013cc <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4a6f      	ldr	r2, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x620>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e0d1      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800311a:	231f      	movs	r3, #31
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800312a:	4967      	ldr	r1, [pc, #412]	; (80032c8 <HAL_RCC_OscConfig+0x624>)
 800312c:	400a      	ands	r2, r1
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x496>
 8003138:	e0bb      	b.n	80032b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313a:	4b60      	ldr	r3, [pc, #384]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2238      	movs	r2, #56	; 0x38
 8003140:	4013      	ands	r3, r2
 8003142:	2b10      	cmp	r3, #16
 8003144:	d100      	bne.n	8003148 <HAL_RCC_OscConfig+0x4a4>
 8003146:	e07b      	b.n	8003240 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d156      	bne.n	80031fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003156:	495d      	ldr	r1, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x628>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe f936 	bl	80013cc <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe f931 	bl	80013cc <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e09d      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003178:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	049b      	lsls	r3, r3, #18
 8003180:	4013      	ands	r3, r2
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_RCC_OscConfig+0x62c>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	431a      	orrs	r2, r3
 80031b2:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0449      	lsls	r1, r1, #17
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0549      	lsls	r1, r1, #21
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe f8fa 	bl	80013cc <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe f8f5 	bl	80013cc <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e061      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	049b      	lsls	r3, r3, #18
 80031f8:	4013      	ands	r3, r2
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x53a>
 80031fc:	e059      	b.n	80032b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003204:	4931      	ldr	r1, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x628>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe f8df 	bl	80013cc <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe f8da 	bl	80013cc <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e046      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 8003238:	4926      	ldr	r1, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x630>)
 800323a:	400a      	ands	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e038      	b.n	80032b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e033      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800324c:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x618>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2203      	movs	r2, #3
 8003256:	401a      	ands	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	429a      	cmp	r2, r3
 800325e:	d126      	bne.n	80032ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2270      	movs	r2, #112	; 0x70
 8003264:	401a      	ands	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d11f      	bne.n	80032ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	23fe      	movs	r3, #254	; 0xfe
 8003272:	01db      	lsls	r3, r3, #7
 8003274:	401a      	ands	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d116      	bne.n	80032ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	23f8      	movs	r3, #248	; 0xf8
 8003284:	039b      	lsls	r3, r3, #14
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d10e      	bne.n	80032ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	23e0      	movs	r3, #224	; 0xe0
 8003294:	051b      	lsls	r3, r3, #20
 8003296:	401a      	ands	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	0f5b      	lsrs	r3, r3, #29
 80032a4:	075a      	lsls	r2, r3, #29
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b008      	add	sp, #32
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
 80032c4:	00001388 	.word	0x00001388
 80032c8:	efffffff 	.word	0xefffffff
 80032cc:	feffffff 	.word	0xfeffffff
 80032d0:	11c1808c 	.word	0x11c1808c
 80032d4:	eefefffc 	.word	0xeefefffc

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0e9      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d91e      	bls.n	8003338 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2207      	movs	r2, #7
 8003300:	4393      	bics	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800330c:	f7fe f85e 	bl	80013cc <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003314:	e009      	b.n	800332a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003316:	f7fe f859 	bl	80013cc <HAL_GetTick>
 800331a:	0002      	movs	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	4a6a      	ldr	r2, [pc, #424]	; (80034cc <HAL_RCC_ClockConfig+0x1f4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0ca      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2207      	movs	r2, #7
 8003330:	4013      	ands	r3, r2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d1ee      	bne.n	8003316 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2202      	movs	r2, #2
 800333e:	4013      	ands	r3, r2
 8003340:	d015      	beq.n	800336e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2204      	movs	r2, #4
 8003348:	4013      	ands	r3, r2
 800334a:	d006      	beq.n	800335a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800334c:	4b60      	ldr	r3, [pc, #384]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003352:	21e0      	movs	r1, #224	; 0xe0
 8003354:	01c9      	lsls	r1, r1, #7
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335a:	4b5d      	ldr	r3, [pc, #372]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	d057      	beq.n	8003428 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	4013      	ands	r3, r2
 800338a:	d12b      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e097      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003398:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	049b      	lsls	r3, r3, #18
 80033a0:	4013      	ands	r3, r2
 80033a2:	d11f      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e08b      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b0:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4013      	ands	r3, r2
 80033ba:	d113      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e07f      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e074      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2202      	movs	r2, #2
 80033dc:	4013      	ands	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e06d      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2207      	movs	r2, #7
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fd ffe8 	bl	80013cc <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	e009      	b.n	8003416 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003402:	f7fd ffe3 	bl	80013cc <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	4a2f      	ldr	r2, [pc, #188]	; (80034cc <HAL_RCC_ClockConfig+0x1f4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e054      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2238      	movs	r2, #56	; 0x38
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	429a      	cmp	r2, r3
 8003426:	d1ec      	bne.n	8003402 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2207      	movs	r2, #7
 800342e:	4013      	ands	r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d21e      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2207      	movs	r2, #7
 800343c:	4393      	bics	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003448:	f7fd ffc0 	bl	80013cc <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003450:	e009      	b.n	8003466 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003452:	f7fd ffbb 	bl	80013cc <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_RCC_ClockConfig+0x1f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e02c      	b.n	80034c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2207      	movs	r2, #7
 800346c:	4013      	ands	r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d1ee      	bne.n	8003452 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2204      	movs	r2, #4
 800347a:	4013      	ands	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <HAL_RCC_ClockConfig+0x200>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003492:	f000 f829 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8003496:	0001      	movs	r1, r0
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_RCC_ClockConfig+0x1f8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	220f      	movs	r2, #15
 80034a0:	401a      	ands	r2, r3
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_RCC_ClockConfig+0x204>)
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	58d3      	ldr	r3, [r2, r3]
 80034a8:	221f      	movs	r2, #31
 80034aa:	4013      	ands	r3, r2
 80034ac:	000a      	movs	r2, r1
 80034ae:	40da      	lsrs	r2, r3
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x208>)
 80034b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x20c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7fd ff2b 	bl	8001314 <HAL_InitTick>
 80034be:	0003      	movs	r3, r0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b004      	add	sp, #16
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40022000 	.word	0x40022000
 80034cc:	00001388 	.word	0x00001388
 80034d0:	40021000 	.word	0x40021000
 80034d4:	fffff0ff 	.word	0xfffff0ff
 80034d8:	ffff8fff 	.word	0xffff8fff
 80034dc:	0800815c 	.word	0x0800815c
 80034e0:	20000020 	.word	0x20000020
 80034e4:	20000000 	.word	0x20000000

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2238      	movs	r2, #56	; 0x38
 80034f4:	4013      	ands	r3, r2
 80034f6:	d10f      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0adb      	lsrs	r3, r3, #11
 80034fe:	2207      	movs	r2, #7
 8003500:	4013      	ands	r3, r2
 8003502:	2201      	movs	r2, #1
 8003504:	409a      	lsls	r2, r3
 8003506:	0013      	movs	r3, r2
 8003508:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	4835      	ldr	r0, [pc, #212]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800350e:	f7fc fe03 	bl	8000118 <__udivsi3>
 8003512:	0003      	movs	r3, r0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e05d      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003518:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2238      	movs	r2, #56	; 0x38
 800351e:	4013      	ands	r3, r2
 8003520:	2b08      	cmp	r3, #8
 8003522:	d102      	bne.n	800352a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e054      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800352a:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2238      	movs	r2, #56	; 0x38
 8003530:	4013      	ands	r3, r2
 8003532:	2b10      	cmp	r3, #16
 8003534:	d138      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003536:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2203      	movs	r2, #3
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	2207      	movs	r2, #7
 8003548:	4013      	ands	r3, r2
 800354a:	3301      	adds	r3, #1
 800354c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d10d      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	4824      	ldr	r0, [pc, #144]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003558:	f7fc fdde 	bl	8000118 <__udivsi3>
 800355c:	0003      	movs	r3, r0
 800355e:	0019      	movs	r1, r3
 8003560:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	227f      	movs	r2, #127	; 0x7f
 8003568:	4013      	ands	r3, r2
 800356a:	434b      	muls	r3, r1
 800356c:	617b      	str	r3, [r7, #20]
        break;
 800356e:	e00d      	b.n	800358c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	481c      	ldr	r0, [pc, #112]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003574:	f7fc fdd0 	bl	8000118 <__udivsi3>
 8003578:	0003      	movs	r3, r0
 800357a:	0019      	movs	r1, r3
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	227f      	movs	r2, #127	; 0x7f
 8003584:	4013      	ands	r3, r2
 8003586:	434b      	muls	r3, r1
 8003588:	617b      	str	r3, [r7, #20]
        break;
 800358a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0f5b      	lsrs	r3, r3, #29
 8003592:	2207      	movs	r2, #7
 8003594:	4013      	ands	r3, r2
 8003596:	3301      	adds	r3, #1
 8003598:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	6978      	ldr	r0, [r7, #20]
 800359e:	f7fc fdbb 	bl	8000118 <__udivsi3>
 80035a2:	0003      	movs	r3, r0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e015      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2238      	movs	r2, #56	; 0x38
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d103      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2238      	movs	r2, #56	; 0x38
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b18      	cmp	r3, #24
 80035c6:	d103      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80035c8:	23fa      	movs	r3, #250	; 0xfa
 80035ca:	01db      	lsls	r3, r3, #7
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e001      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035d4:	693b      	ldr	r3, [r7, #16]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b006      	add	sp, #24
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <HAL_RCC_GetHCLKFreq+0x10>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000020 	.word	0x20000020

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003604:	f7ff fff2 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003608:	0004      	movs	r4, r0
 800360a:	f7ff fb3f 	bl	8002c8c <LL_RCC_GetAPB1Prescaler>
 800360e:	0003      	movs	r3, r0
 8003610:	0b1a      	lsrs	r2, r3, #12
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	58d3      	ldr	r3, [r2, r3]
 8003618:	221f      	movs	r2, #31
 800361a:	4013      	ands	r3, r2
 800361c:	40dc      	lsrs	r4, r3
 800361e:	0023      	movs	r3, r4
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bdb0      	pop	{r4, r5, r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	0800819c 	.word	0x0800819c

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003634:	2313      	movs	r3, #19
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363c:	2312      	movs	r3, #18
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	4013      	ands	r3, r2
 800364e:	d100      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003650:	e0a3      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2011      	movs	r0, #17
 8003654:	183b      	adds	r3, r7, r0
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4ba5      	ldr	r3, [pc, #660]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800365c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	055b      	lsls	r3, r3, #21
 8003662:	4013      	ands	r3, r2
 8003664:	d110      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4ba2      	ldr	r3, [pc, #648]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366a:	4ba1      	ldr	r3, [pc, #644]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0549      	lsls	r1, r1, #21
 8003670:	430a      	orrs	r2, r1
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
 8003674:	4b9e      	ldr	r3, [pc, #632]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	055b      	lsls	r3, r3, #21
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003682:	183b      	adds	r3, r7, r0
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003688:	4b9a      	ldr	r3, [pc, #616]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b99      	ldr	r3, [pc, #612]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	0049      	lsls	r1, r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003696:	f7fd fe99 	bl	80013cc <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800369e:	e00b      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a0:	f7fd fe94 	bl	80013cc <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d904      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80036ae:	2313      	movs	r3, #19
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2203      	movs	r2, #3
 80036b4:	701a      	strb	r2, [r3, #0]
        break;
 80036b6:	e005      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b8:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d0ed      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80036c4:	2313      	movs	r3, #19
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d154      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4013      	ands	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d019      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d014      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036ea:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	4a82      	ldr	r2, [pc, #520]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036f8:	4b7d      	ldr	r3, [pc, #500]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0249      	lsls	r1, r1, #9
 80036fe:	430a      	orrs	r2, r1
 8003700:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003702:	4b7b      	ldr	r3, [pc, #492]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003704:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003706:	4b7a      	ldr	r3, [pc, #488]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003708:	497c      	ldr	r1, [pc, #496]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800370a:	400a      	ands	r2, r1
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800370e:	4b78      	ldr	r3, [pc, #480]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	d016      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fe56 	bl	80013cc <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003724:	e00c      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fd fe51 	bl	80013cc <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	4a73      	ldr	r2, [pc, #460]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d904      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003736:	2313      	movs	r3, #19
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2203      	movs	r2, #3
 800373c:	701a      	strb	r2, [r3, #0]
            break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d0ed      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800374a:	2313      	movs	r3, #19
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	4a67      	ldr	r2, [pc, #412]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003764:	430a      	orrs	r2, r1
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c
 8003768:	e00c      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800376a:	2312      	movs	r3, #18
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	2213      	movs	r2, #19
 8003770:	18ba      	adds	r2, r7, r2
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e005      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	2312      	movs	r3, #18
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2213      	movs	r2, #19
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003784:	2311      	movs	r3, #17
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003792:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003794:	495b      	ldr	r1, [pc, #364]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003796:	400a      	ands	r2, r1
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a4:	4b52      	ldr	r3, [pc, #328]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	2203      	movs	r2, #3
 80037aa:	4393      	bics	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037b4:	430a      	orrs	r2, r1
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2210      	movs	r2, #16
 80037be:	4013      	ands	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c2:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	4a50      	ldr	r2, [pc, #320]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e2:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f2:	430a      	orrs	r2, r1
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4013      	ands	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	4a42      	ldr	r2, [pc, #264]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003812:	430a      	orrs	r2, r1
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2220      	movs	r2, #32
 800381c:	4013      	ands	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003820:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003830:	430a      	orrs	r2, r1
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	01db      	lsls	r3, r3, #7
 800383c:	4013      	ands	r3, r2
 800383e:	d015      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	0899      	lsrs	r1, r3, #2
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800384e:	430a      	orrs	r2, r1
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	05db      	lsls	r3, r3, #23
 800385a:	429a      	cmp	r2, r3
 800385c:	d106      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	0249      	lsls	r1, r1, #9
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	039b      	lsls	r3, r3, #14
 8003874:	4013      	ands	r3, r2
 8003876:	d016      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003888:	430a      	orrs	r2, r1
 800388a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	03db      	lsls	r3, r3, #15
 8003894:	429a      	cmp	r2, r3
 8003896:	d106      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0449      	lsls	r1, r1, #17
 80038a2:	430a      	orrs	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d016      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038c2:	430a      	orrs	r2, r1
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	01db      	lsls	r3, r3, #7
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d106      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0249      	lsls	r1, r1, #9
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80038e0:	2312      	movs	r3, #18
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	781b      	ldrb	r3, [r3, #0]
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b006      	add	sp, #24
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	fffffcff 	.word	0xfffffcff
 80038fc:	fffeffff 	.word	0xfffeffff
 8003900:	00001388 	.word	0x00001388
 8003904:	efffffff 	.word	0xefffffff
 8003908:	fffff3ff 	.word	0xfffff3ff
 800390c:	fff3ffff 	.word	0xfff3ffff
 8003910:	ffcfffff 	.word	0xffcfffff
 8003914:	ffffcfff 	.word	0xffffcfff
 8003918:	ffbfffff 	.word	0xffbfffff
 800391c:	ffff3fff 	.word	0xffff3fff

08003920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e04a      	b.n	80039c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223d      	movs	r2, #61	; 0x3d
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d107      	bne.n	800394e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223c      	movs	r2, #60	; 0x3c
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f003 fca1 	bl	8007290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223d      	movs	r2, #61	; 0x3d
 8003952:	2102      	movs	r1, #2
 8003954:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	0019      	movs	r1, r3
 8003960:	0010      	movs	r0, r2
 8003962:	f000 fb49 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2248      	movs	r2, #72	; 0x48
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	223e      	movs	r2, #62	; 0x3e
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223f      	movs	r2, #63	; 0x3f
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2241      	movs	r2, #65	; 0x41
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2242      	movs	r2, #66	; 0x42
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2243      	movs	r2, #67	; 0x43
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2244      	movs	r2, #68	; 0x44
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2245      	movs	r2, #69	; 0x45
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2246      	movs	r2, #70	; 0x46
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2247      	movs	r2, #71	; 0x47
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223d      	movs	r2, #61	; 0x3d
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e04a      	b.n	8003a78 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	223d      	movs	r2, #61	; 0x3d
 80039e6:	5c9b      	ldrb	r3, [r3, r2]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	223c      	movs	r2, #60	; 0x3c
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 f841 	bl	8003a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223d      	movs	r2, #61	; 0x3d
 8003a02:	2102      	movs	r1, #2
 8003a04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f000 faf1 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2248      	movs	r2, #72	; 0x48
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	223e      	movs	r2, #62	; 0x3e
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223f      	movs	r2, #63	; 0x3f
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2240      	movs	r2, #64	; 0x40
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2241      	movs	r2, #65	; 0x41
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2242      	movs	r2, #66	; 0x42
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2243      	movs	r2, #67	; 0x43
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2244      	movs	r2, #68	; 0x44
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2245      	movs	r2, #69	; 0x45
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2246      	movs	r2, #70	; 0x46
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2247      	movs	r2, #71	; 0x47
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	223d      	movs	r2, #61	; 0x3d
 8003a72:	2101      	movs	r1, #1
 8003a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x22>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223e      	movs	r2, #62	; 0x3e
 8003aa4:	5c9b      	ldrb	r3, [r3, r2]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	1e5a      	subs	r2, r3, #1
 8003aac:	4193      	sbcs	r3, r2
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e037      	b.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d108      	bne.n	8003aca <HAL_TIM_PWM_Start+0x3a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223f      	movs	r2, #63	; 0x3f
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	4193      	sbcs	r3, r2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e02b      	b.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d108      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x52>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	; 0x40
 8003ad4:	5c9b      	ldrb	r3, [r3, r2]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	4193      	sbcs	r3, r2
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e01f      	b.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d108      	bne.n	8003afa <HAL_TIM_PWM_Start+0x6a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2241      	movs	r2, #65	; 0x41
 8003aec:	5c9b      	ldrb	r3, [r3, r2]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	1e5a      	subs	r2, r3, #1
 8003af4:	4193      	sbcs	r3, r2
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e013      	b.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d108      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x82>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2242      	movs	r2, #66	; 0x42
 8003b04:	5c9b      	ldrb	r3, [r3, r2]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	1e5a      	subs	r2, r3, #1
 8003b0c:	4193      	sbcs	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e007      	b.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2243      	movs	r2, #67	; 0x43
 8003b16:	5c9b      	ldrb	r3, [r3, r2]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	4193      	sbcs	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e081      	b.n	8003c2e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start+0xaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	223e      	movs	r2, #62	; 0x3e
 8003b34:	2102      	movs	r1, #2
 8003b36:	5499      	strb	r1, [r3, r2]
 8003b38:	e023      	b.n	8003b82 <HAL_TIM_PWM_Start+0xf2>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0xba>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	223f      	movs	r2, #63	; 0x3f
 8003b44:	2102      	movs	r1, #2
 8003b46:	5499      	strb	r1, [r3, r2]
 8003b48:	e01b      	b.n	8003b82 <HAL_TIM_PWM_Start+0xf2>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xca>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	2102      	movs	r1, #2
 8003b56:	5499      	strb	r1, [r3, r2]
 8003b58:	e013      	b.n	8003b82 <HAL_TIM_PWM_Start+0xf2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xda>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2241      	movs	r2, #65	; 0x41
 8003b64:	2102      	movs	r1, #2
 8003b66:	5499      	strb	r1, [r3, r2]
 8003b68:	e00b      	b.n	8003b82 <HAL_TIM_PWM_Start+0xf2>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xea>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2242      	movs	r2, #66	; 0x42
 8003b74:	2102      	movs	r1, #2
 8003b76:	5499      	strb	r1, [r3, r2]
 8003b78:	e003      	b.n	8003b82 <HAL_TIM_PWM_Start+0xf2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2243      	movs	r2, #67	; 0x43
 8003b7e:	2102      	movs	r1, #2
 8003b80:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 fde2 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a28      	ldr	r2, [pc, #160]	; (8003c38 <HAL_TIM_PWM_Start+0x1a8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIM_PWM_Start+0x11e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <HAL_TIM_PWM_Start+0x1ac>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_PWM_Start+0x11e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_TIM_PWM_Start+0x1b0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x122>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_PWM_Start+0x124>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0209      	lsls	r1, r1, #8
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIM_PWM_Start+0x1a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00a      	beq.n	8003bea <HAL_TIM_PWM_Start+0x15a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	05db      	lsls	r3, r3, #23
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_PWM_Start+0x15a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_TIM_PWM_Start+0x1b4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d116      	bne.n	8003c18 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <HAL_TIM_PWM_Start+0x1b8>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d016      	beq.n	8003c2a <HAL_TIM_PWM_Start+0x19a>
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	025b      	lsls	r3, r3, #9
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d011      	beq.n	8003c2a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2101      	movs	r1, #1
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c16:	e008      	b.n	8003c2a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e000      	b.n	8003c2c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	40000400 	.word	0x40000400
 8003c48:	00010007 	.word	0x00010007

08003c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2317      	movs	r3, #23
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	223c      	movs	r2, #60	; 0x3c
 8003c64:	5c9b      	ldrb	r3, [r3, r2]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0e5      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	223c      	movs	r2, #60	; 0x3c
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b14      	cmp	r3, #20
 8003c7a:	d900      	bls.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c7c:	e0d1      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	4b70      	ldr	r3, [pc, #448]	; (8003e44 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	0011      	movs	r1, r2
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fa26 	bl	80040e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2108      	movs	r1, #8
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	619a      	str	r2, [r3, #24]
      break;
 8003cca:	e0af      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	0011      	movs	r1, r2
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 fa85 	bl	80041e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	0109      	lsls	r1, r1, #4
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4954      	ldr	r1, [pc, #336]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6999      	ldr	r1, [r3, #24]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
      break;
 8003d10:	e08c      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 fae0 	bl	80042e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69d9      	ldr	r1, [r3, #28]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	61da      	str	r2, [r3, #28]
      break;
 8003d52:	e06b      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 fb41 	bl	80043e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0109      	lsls	r1, r1, #4
 8003d70:	430a      	orrs	r2, r1
 8003d72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4932      	ldr	r1, [pc, #200]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69d9      	ldr	r1, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	61da      	str	r2, [r3, #28]
      break;
 8003d98:	e048      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 fb82 	bl	80044ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2108      	movs	r1, #8
 8003db4:	430a      	orrs	r2, r1
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dda:	e027      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fbbb 	bl	8004560 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0109      	lsls	r1, r1, #4
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4910      	ldr	r1, [pc, #64]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e20:	e004      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003e22:	2317      	movs	r3, #23
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
      break;
 8003e2a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	223c      	movs	r2, #60	; 0x3c
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

  return status;
 8003e34:	2317      	movs	r3, #23
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	080080f0 	.word	0x080080f0
 8003e48:	fffffbff 	.word	0xfffffbff

08003e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	230f      	movs	r3, #15
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223c      	movs	r2, #60	; 0x3c
 8003e62:	5c9b      	ldrb	r3, [r3, r2]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIM_ConfigClockSource+0x20>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0bc      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x19a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223c      	movs	r2, #60	; 0x3c
 8003e70:	2101      	movs	r1, #1
 8003e72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	223d      	movs	r2, #61	; 0x3d
 8003e78:	2102      	movs	r1, #2
 8003e7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a5a      	ldr	r2, [pc, #360]	; (8003ff0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4a59      	ldr	r2, [pc, #356]	; (8003ff4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	0192      	lsls	r2, r2, #6
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d040      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xde>
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	0192      	lsls	r2, r2, #6
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d900      	bls.n	8003eb2 <HAL_TIM_ConfigClockSource+0x66>
 8003eb0:	e088      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	0152      	lsls	r2, r2, #5
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d100      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x70>
 8003eba:	e088      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x182>
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0152      	lsls	r2, r2, #5
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d900      	bls.n	8003ec6 <HAL_TIM_ConfigClockSource+0x7a>
 8003ec4:	e07e      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ec6:	2b70      	cmp	r3, #112	; 0x70
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0xb0>
 8003eca:	d900      	bls.n	8003ece <HAL_TIM_ConfigClockSource+0x82>
 8003ecc:	e07a      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ece:	2b60      	cmp	r3, #96	; 0x60
 8003ed0:	d04f      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x126>
 8003ed2:	d900      	bls.n	8003ed6 <HAL_TIM_ConfigClockSource+0x8a>
 8003ed4:	e076      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ed6:	2b50      	cmp	r3, #80	; 0x50
 8003ed8:	d03b      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x106>
 8003eda:	d900      	bls.n	8003ede <HAL_TIM_ConfigClockSource+0x92>
 8003edc:	e072      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d057      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x146>
 8003ee2:	d900      	bls.n	8003ee6 <HAL_TIM_ConfigClockSource+0x9a>
 8003ee4:	e06e      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ee6:	2b30      	cmp	r3, #48	; 0x30
 8003ee8:	d063      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x166>
 8003eea:	d86b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d060      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x166>
 8003ef0:	d868      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d05d      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x166>
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d05b      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x166>
 8003efa:	e063      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f000 fc02 	bl	8004714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2277      	movs	r2, #119	; 0x77
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	609a      	str	r2, [r3, #8]
      break;
 8003f28:	e052      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f000 fbeb 	bl	8004714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	01c9      	lsls	r1, r1, #7
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e03e      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	001a      	movs	r2, r3
 8003f60:	f000 fb5c 	bl	800461c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2150      	movs	r1, #80	; 0x50
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fbb6 	bl	80046dc <TIM_ITRx_SetConfig>
      break;
 8003f70:	e02e      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	001a      	movs	r2, r3
 8003f80:	f000 fb7a 	bl	8004678 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2160      	movs	r1, #96	; 0x60
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fba6 	bl	80046dc <TIM_ITRx_SetConfig>
      break;
 8003f90:	e01e      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	f000 fb3c 	bl	800461c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2140      	movs	r1, #64	; 0x40
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 fb96 	bl	80046dc <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e00e      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0019      	movs	r1, r3
 8003fbc:	0010      	movs	r0, r2
 8003fbe:	f000 fb8d 	bl	80046dc <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e005      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003fc4:	230f      	movs	r3, #15
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
      break;
 8003fcc:	e000      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003fce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	223d      	movs	r2, #61	; 0x3d
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223c      	movs	r2, #60	; 0x3c
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

  return status;
 8003fe0:	230f      	movs	r3, #15
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	ffceff88 	.word	0xffceff88
 8003ff4:	ffff00ff 	.word	0xffff00ff

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a30      	ldr	r2, [pc, #192]	; (80040cc <TIM_Base_SetConfig+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d008      	beq.n	8004022 <TIM_Base_SetConfig+0x2a>
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	05db      	lsls	r3, r3, #23
 8004016:	429a      	cmp	r2, r3
 8004018:	d003      	beq.n	8004022 <TIM_Base_SetConfig+0x2a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <TIM_Base_SetConfig+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2270      	movs	r2, #112	; 0x70
 8004026:	4393      	bics	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a25      	ldr	r2, [pc, #148]	; (80040cc <TIM_Base_SetConfig+0xd4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d014      	beq.n	8004066 <TIM_Base_SetConfig+0x6e>
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	05db      	lsls	r3, r3, #23
 8004042:	429a      	cmp	r2, r3
 8004044:	d00f      	beq.n	8004066 <TIM_Base_SetConfig+0x6e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <TIM_Base_SetConfig+0xd8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0x6e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <TIM_Base_SetConfig+0xdc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0x6e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <TIM_Base_SetConfig+0xe0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0x6e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <TIM_Base_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <TIM_Base_SetConfig+0xe8>)
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	4393      	bics	r3, r2
 800407e:	001a      	movs	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <TIM_Base_SetConfig+0xd4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0xbe>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <TIM_Base_SetConfig+0xe0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0xbe>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <TIM_Base_SetConfig+0xe4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d103      	bne.n	80040be <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	615a      	str	r2, [r3, #20]
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40002000 	.word	0x40002000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	fffffcff 	.word	0xfffffcff

080040e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	2201      	movs	r2, #1
 80040f4:	4393      	bics	r3, r2
 80040f6:	001a      	movs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <TIM_OC1_SetConfig+0xe8>)
 8004112:	4013      	ands	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2203      	movs	r2, #3
 800411a:	4393      	bics	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2202      	movs	r2, #2
 800412c:	4393      	bics	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <TIM_OC1_SetConfig+0xec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_OC1_SetConfig+0x6e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <TIM_OC1_SetConfig+0xf0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC1_SetConfig+0x6e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <TIM_OC1_SetConfig+0xf4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10c      	bne.n	800416c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2208      	movs	r2, #8
 8004156:	4393      	bics	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2204      	movs	r2, #4
 8004168:	4393      	bics	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <TIM_OC1_SetConfig+0xec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_OC1_SetConfig+0xa0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <TIM_OC1_SetConfig+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_OC1_SetConfig+0xa0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <TIM_OC1_SetConfig+0xf4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d111      	bne.n	80041a8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4a15      	ldr	r2, [pc, #84]	; (80041dc <TIM_OC1_SetConfig+0xf8>)
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <TIM_OC1_SetConfig+0xfc>)
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	fffeff8f 	.word	0xfffeff8f
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	fffffeff 	.word	0xfffffeff
 80041e0:	fffffdff 	.word	0xfffffdff

080041e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	2210      	movs	r2, #16
 80041f4:	4393      	bics	r3, r2
 80041f6:	001a      	movs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <TIM_OC2_SetConfig+0xe0>)
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <TIM_OC2_SetConfig+0xe4>)
 800421a:	4013      	ands	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2220      	movs	r2, #32
 800422e:	4393      	bics	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_OC2_SetConfig+0xe8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10d      	bne.n	8004262 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	4393      	bics	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	4393      	bics	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <TIM_OC2_SetConfig+0xe8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d007      	beq.n	800427a <TIM_OC2_SetConfig+0x96>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <TIM_OC2_SetConfig+0xec>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC2_SetConfig+0x96>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <TIM_OC2_SetConfig+0xf0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <TIM_OC2_SetConfig+0xf4>)
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <TIM_OC2_SetConfig+0xf8>)
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b006      	add	sp, #24
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	feff8fff 	.word	0xfeff8fff
 80042c8:	fffffcff 	.word	0xfffffcff
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	fffffbff 	.word	0xfffffbff
 80042dc:	fffff7ff 	.word	0xfffff7ff

080042e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4a33      	ldr	r2, [pc, #204]	; (80043bc <TIM_OC3_SetConfig+0xdc>)
 80042f0:	401a      	ands	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <TIM_OC3_SetConfig+0xe0>)
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	4393      	bics	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <TIM_OC3_SetConfig+0xe4>)
 8004326:	4013      	ands	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_OC3_SetConfig+0xe8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10d      	bne.n	800435a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <TIM_OC3_SetConfig+0xec>)
 8004342:	4013      	ands	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <TIM_OC3_SetConfig+0xf0>)
 8004356:	4013      	ands	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1a      	ldr	r2, [pc, #104]	; (80043c8 <TIM_OC3_SetConfig+0xe8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC3_SetConfig+0x92>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <TIM_OC3_SetConfig+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x92>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <TIM_OC3_SetConfig+0xf8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <TIM_OC3_SetConfig+0xfc>)
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <TIM_OC3_SetConfig+0x100>)
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b006      	add	sp, #24
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	fffffeff 	.word	0xfffffeff
 80043c0:	fffeff8f 	.word	0xfffeff8f
 80043c4:	fffffdff 	.word	0xfffffdff
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	fffff7ff 	.word	0xfffff7ff
 80043d0:	fffffbff 	.word	0xfffffbff
 80043d4:	40014400 	.word	0x40014400
 80043d8:	40014800 	.word	0x40014800
 80043dc:	ffffefff 	.word	0xffffefff
 80043e0:	ffffdfff 	.word	0xffffdfff

080043e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_OC4_SetConfig+0xa8>)
 80043f4:	401a      	ands	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <TIM_OC4_SetConfig+0xac>)
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <TIM_OC4_SetConfig+0xb0>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <TIM_OC4_SetConfig+0xb4>)
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a17      	ldr	r2, [pc, #92]	; (800449c <TIM_OC4_SetConfig+0xb8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_OC4_SetConfig+0x70>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <TIM_OC4_SetConfig+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC4_SetConfig+0x70>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <TIM_OC4_SetConfig+0xc0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d109      	bne.n	8004468 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC4_SetConfig+0xc4>)
 8004458:	4013      	ands	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b006      	add	sp, #24
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	ffffefff 	.word	0xffffefff
 8004490:	feff8fff 	.word	0xfeff8fff
 8004494:	fffffcff 	.word	0xfffffcff
 8004498:	ffffdfff 	.word	0xffffdfff
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	ffffbfff 	.word	0xffffbfff

080044ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a23      	ldr	r2, [pc, #140]	; (8004548 <TIM_OC5_SetConfig+0x9c>)
 80044bc:	401a      	ands	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <TIM_OC5_SetConfig+0xa0>)
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4a19      	ldr	r2, [pc, #100]	; (8004550 <TIM_OC5_SetConfig+0xa4>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <TIM_OC5_SetConfig+0xa8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC5_SetConfig+0x66>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <TIM_OC5_SetConfig+0xac>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC5_SetConfig+0x66>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <TIM_OC5_SetConfig+0xb0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d109      	bne.n	8004526 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <TIM_OC5_SetConfig+0x9c>)
 8004516:	4013      	ands	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b006      	add	sp, #24
 8004546:	bd80      	pop	{r7, pc}
 8004548:	fffeffff 	.word	0xfffeffff
 800454c:	fffeff8f 	.word	0xfffeff8f
 8004550:	fffdffff 	.word	0xfffdffff
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40014400 	.word	0x40014400
 800455c:	40014800 	.word	0x40014800

08004560 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a24      	ldr	r2, [pc, #144]	; (8004600 <TIM_OC6_SetConfig+0xa0>)
 8004570:	401a      	ands	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <TIM_OC6_SetConfig+0xa4>)
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <TIM_OC6_SetConfig+0xa8>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	051b      	lsls	r3, r3, #20
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a16      	ldr	r2, [pc, #88]	; (800460c <TIM_OC6_SetConfig+0xac>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_OC6_SetConfig+0x68>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <TIM_OC6_SetConfig+0xb0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_OC6_SetConfig+0x68>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a14      	ldr	r2, [pc, #80]	; (8004614 <TIM_OC6_SetConfig+0xb4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d109      	bne.n	80045dc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <TIM_OC6_SetConfig+0xb8>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	029b      	lsls	r3, r3, #10
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b006      	add	sp, #24
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	ffefffff 	.word	0xffefffff
 8004604:	feff8fff 	.word	0xfeff8fff
 8004608:	ffdfffff 	.word	0xffdfffff
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800
 8004618:	fffbffff 	.word	0xfffbffff

0800461c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	2201      	movs	r2, #1
 8004634:	4393      	bics	r3, r2
 8004636:	001a      	movs	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	22f0      	movs	r2, #240	; 0xf0
 8004646:	4393      	bics	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	220a      	movs	r2, #10
 8004658:	4393      	bics	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	2210      	movs	r2, #16
 800468a:	4393      	bics	r3, r2
 800468c:	001a      	movs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <TIM_TI2_ConfigInputStage+0x60>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	031b      	lsls	r3, r3, #12
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	22a0      	movs	r2, #160	; 0xa0
 80046b4:	4393      	bics	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b006      	add	sp, #24
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	ffff0fff 	.word	0xffff0fff

080046dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <TIM_ITRx_SetConfig+0x34>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	2207      	movs	r2, #7
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	609a      	str	r2, [r3, #8]
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	ffcfff8f 	.word	0xffcfff8f

08004714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <TIM_ETR_SetConfig+0x3c>)
 800472c:	4013      	ands	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	431a      	orrs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b006      	add	sp, #24
 800474e:	bd80      	pop	{r7, pc}
 8004750:	ffff00ff 	.word	0xffff00ff

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	221f      	movs	r2, #31
 8004764:	4013      	ands	r3, r2
 8004766:	2201      	movs	r2, #1
 8004768:	409a      	lsls	r2, r3
 800476a:	0013      	movs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	43d2      	mvns	r2, r2
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	211f      	movs	r1, #31
 8004784:	400b      	ands	r3, r1
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4099      	lsls	r1, r3
 800478a:	000b      	movs	r3, r1
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b006      	add	sp, #24
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	223c      	movs	r2, #60	; 0x3c
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e050      	b.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	223c      	movs	r2, #60	; 0x3c
 80047b8:	2101      	movs	r1, #1
 80047ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223d      	movs	r2, #61	; 0x3d
 80047c0:	2102      	movs	r1, #2
 80047c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a21      	ldr	r2, [pc, #132]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2270      	movs	r2, #112	; 0x70
 80047f4:	4393      	bics	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a14      	ldr	r2, [pc, #80]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00a      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	05db      	lsls	r3, r3, #23
 800481c:	429a      	cmp	r2, r3
 800481e:	d004      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10c      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	4393      	bics	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223d      	movs	r2, #61	; 0x3d
 8004848:	2101      	movs	r1, #1
 800484a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223c      	movs	r2, #60	; 0x3c
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	40012c00 	.word	0x40012c00
 8004864:	ff0fffff 	.word	0xff0fffff
 8004868:	40000400 	.word	0x40000400

0800486c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	223c      	movs	r2, #60	; 0x3c
 800487e:	5c9b      	ldrb	r3, [r3, r2]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e079      	b.n	800497c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	223c      	movs	r2, #60	; 0x3c
 800488c:	2101      	movs	r1, #1
 800488e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	4393      	bics	r3, r2
 8004896:	001a      	movs	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80048a4:	401a      	ands	r2, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a35      	ldr	r2, [pc, #212]	; (8004988 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80048b2:	401a      	ands	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a33      	ldr	r2, [pc, #204]	; (800498c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80048c0:	401a      	ands	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80048ce:	401a      	ands	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80048dc:	401a      	ands	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80048ea:	401a      	ands	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80048f8:	401a      	ands	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d106      	bne.n	800491c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004912:	401a      	ands	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d121      	bne.n	800496a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800492a:	401a      	ands	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800493a:	401a      	ands	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004948:	401a      	ands	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d106      	bne.n	800496a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004960:	401a      	ands	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	223c      	movs	r2, #60	; 0x3c
 8004976:	2100      	movs	r1, #0
 8004978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	fffffcff 	.word	0xfffffcff
 8004988:	fffffbff 	.word	0xfffffbff
 800498c:	fffff7ff 	.word	0xfffff7ff
 8004990:	ffffefff 	.word	0xffffefff
 8004994:	ffffdfff 	.word	0xffffdfff
 8004998:	ffffbfff 	.word	0xffffbfff
 800499c:	fff0ffff 	.word	0xfff0ffff
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	efffffff 	.word	0xefffffff
 80049a8:	ff0fffff 	.word	0xff0fffff
 80049ac:	feffffff 	.word	0xfeffffff
 80049b0:	fdffffff 	.word	0xfdffffff
 80049b4:	dfffffff 	.word	0xdfffffff

080049b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e046      	b.n	8004a58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2288      	movs	r2, #136	; 0x88
 80049ce:	589b      	ldr	r3, [r3, r2]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0018      	movs	r0, r3
 80049e0:	f002 fcde 	bl	80073a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2288      	movs	r2, #136	; 0x88
 80049e8:	2124      	movs	r1, #36	; 0x24
 80049ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	438a      	bics	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 fc6c 	bl	80052dc <UART_SetConfig>
 8004a04:	0003      	movs	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e024      	b.n	8004a58 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 fed7 	bl	80057cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	490d      	ldr	r1, [pc, #52]	; (8004a60 <HAL_UART_Init+0xa8>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	212a      	movs	r1, #42	; 0x2a
 8004a3a:	438a      	bics	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 ff6f 	bl	8005934 <UART_CheckIdleState>
 8004a56:	0003      	movs	r3, r0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	ffffb7ff 	.word	0xffffb7ff

08004a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2288      	movs	r2, #136	; 0x88
 8004a78:	589b      	ldr	r3, [r3, r2]
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d000      	beq.n	8004a80 <HAL_UART_Transmit+0x1c>
 8004a7e:	e088      	b.n	8004b92 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_Transmit+0x2a>
 8004a86:	1dbb      	adds	r3, r7, #6
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e080      	b.n	8004b94 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	015b      	lsls	r3, r3, #5
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d109      	bne.n	8004ab2 <HAL_UART_Transmit+0x4e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d001      	beq.n	8004ab2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e070      	b.n	8004b94 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2290      	movs	r2, #144	; 0x90
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2288      	movs	r2, #136	; 0x88
 8004abe:	2121      	movs	r1, #33	; 0x21
 8004ac0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fc fc83 	bl	80013cc <HAL_GetTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1dba      	adds	r2, r7, #6
 8004ace:	2154      	movs	r1, #84	; 0x54
 8004ad0:	8812      	ldrh	r2, [r2, #0]
 8004ad2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1dba      	adds	r2, r7, #6
 8004ad8:	2156      	movs	r1, #86	; 0x56
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	015b      	lsls	r3, r3, #5
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d108      	bne.n	8004afc <HAL_UART_Transmit+0x98>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e003      	b.n	8004b04 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b04:	e02c      	b.n	8004b60 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	0013      	movs	r3, r2
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	f000 ff5c 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e039      	b.n	8004b94 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	05d2      	lsls	r2, r2, #23
 8004b32:	0dd2      	lsrs	r2, r2, #23
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e007      	b.n	8004b4e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2256      	movs	r2, #86	; 0x56
 8004b52:	5a9b      	ldrh	r3, [r3, r2]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b299      	uxth	r1, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2256      	movs	r2, #86	; 0x56
 8004b5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2256      	movs	r2, #86	; 0x56
 8004b64:	5a9b      	ldrh	r3, [r3, r2]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1cc      	bne.n	8004b06 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	0013      	movs	r3, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	2140      	movs	r1, #64	; 0x40
 8004b7a:	f000 ff29 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 8004b7e:	1e03      	subs	r3, r0, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e006      	b.n	8004b94 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2288      	movs	r2, #136	; 0x88
 8004b8a:	2120      	movs	r1, #32
 8004b8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b008      	add	sp, #32
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	1dbb      	adds	r3, r7, #6
 8004ba8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	228c      	movs	r2, #140	; 0x8c
 8004bae:	589b      	ldr	r3, [r3, r2]
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d14a      	bne.n	8004c4a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_UART_Receive_IT+0x26>
 8004bba:	1dbb      	adds	r3, r7, #6
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e042      	b.n	8004c4c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	015b      	lsls	r3, r3, #5
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d109      	bne.n	8004be6 <HAL_UART_Receive_IT+0x4a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	d001      	beq.n	8004be6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e032      	b.n	8004c4c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_UART_Receive_IT+0xb8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d020      	beq.n	8004c38 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	4013      	ands	r3, r2
 8004c02:	d019      	beq.n	8004c38 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c04:	f3ef 8310 	mrs	r3, PRIMASK
 8004c08:	613b      	str	r3, [r7, #16]
  return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	04c9      	lsls	r1, r1, #19
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	881a      	ldrh	r2, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 ff8d 	bl	8005b60 <UART_Start_Receive_IT>
 8004c46:	0003      	movs	r3, r0
 8004c48:	e000      	b.n	8004c4c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b008      	add	sp, #32
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40008000 	.word	0x40008000

08004c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c58:	b5b0      	push	{r4, r5, r7, lr}
 8004c5a:	b0aa      	sub	sp, #168	; 0xa8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	22a4      	movs	r2, #164	; 0xa4
 8004c68:	18b9      	adds	r1, r7, r2
 8004c6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	20a0      	movs	r0, #160	; 0xa0
 8004c74:	1839      	adds	r1, r7, r0
 8004c76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	249c      	movs	r4, #156	; 0x9c
 8004c80:	1939      	adds	r1, r7, r4
 8004c82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c84:	0011      	movs	r1, r2
 8004c86:	18bb      	adds	r3, r7, r2
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4aa2      	ldr	r2, [pc, #648]	; (8004f14 <HAL_UART_IRQHandler+0x2bc>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2298      	movs	r2, #152	; 0x98
 8004c90:	18bd      	adds	r5, r7, r2
 8004c92:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004c94:	18bb      	adds	r3, r7, r2
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11a      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d015      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	4013      	ands	r3, r2
 8004cae:	d105      	bne.n	8004cbc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cb0:	193b      	adds	r3, r7, r4
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	055b      	lsls	r3, r3, #21
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d00a      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d100      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x6e>
 8004cc4:	e2dc      	b.n	8005280 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	0010      	movs	r0, r2
 8004cce:	4798      	blx	r3
      }
      return;
 8004cd0:	e2d6      	b.n	8005280 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cd2:	2398      	movs	r3, #152	; 0x98
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d100      	bne.n	8004cde <HAL_UART_IRQHandler+0x86>
 8004cdc:	e122      	b.n	8004f24 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cde:	239c      	movs	r3, #156	; 0x9c
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a8c      	ldr	r2, [pc, #560]	; (8004f18 <HAL_UART_IRQHandler+0x2c0>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d106      	bne.n	8004cf8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cea:	23a0      	movs	r3, #160	; 0xa0
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a8a      	ldr	r2, [pc, #552]	; (8004f1c <HAL_UART_IRQHandler+0x2c4>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d100      	bne.n	8004cf8 <HAL_UART_IRQHandler+0xa0>
 8004cf6:	e115      	b.n	8004f24 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cf8:	23a4      	movs	r3, #164	; 0xa4
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4013      	ands	r3, r2
 8004d02:	d012      	beq.n	8004d2a <HAL_UART_IRQHandler+0xd2>
 8004d04:	23a0      	movs	r3, #160	; 0xa0
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2290      	movs	r2, #144	; 0x90
 8004d1e:	589b      	ldr	r3, [r3, r2]
 8004d20:	2201      	movs	r2, #1
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2190      	movs	r1, #144	; 0x90
 8004d28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2a:	23a4      	movs	r3, #164	; 0xa4
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2202      	movs	r2, #2
 8004d32:	4013      	ands	r3, r2
 8004d34:	d011      	beq.n	8004d5a <HAL_UART_IRQHandler+0x102>
 8004d36:	239c      	movs	r3, #156	; 0x9c
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2202      	movs	r2, #2
 8004d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2290      	movs	r2, #144	; 0x90
 8004d4e:	589b      	ldr	r3, [r3, r2]
 8004d50:	2204      	movs	r2, #4
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2190      	movs	r1, #144	; 0x90
 8004d58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d5a:	23a4      	movs	r3, #164	; 0xa4
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2204      	movs	r2, #4
 8004d62:	4013      	ands	r3, r2
 8004d64:	d011      	beq.n	8004d8a <HAL_UART_IRQHandler+0x132>
 8004d66:	239c      	movs	r3, #156	; 0x9c
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2290      	movs	r2, #144	; 0x90
 8004d7e:	589b      	ldr	r3, [r3, r2]
 8004d80:	2202      	movs	r2, #2
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2190      	movs	r1, #144	; 0x90
 8004d88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d8a:	23a4      	movs	r3, #164	; 0xa4
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	4013      	ands	r3, r2
 8004d94:	d017      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d96:	23a0      	movs	r3, #160	; 0xa0
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d105      	bne.n	8004dae <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004da2:	239c      	movs	r3, #156	; 0x9c
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5b      	ldr	r2, [pc, #364]	; (8004f18 <HAL_UART_IRQHandler+0x2c0>)
 8004daa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dac:	d00b      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2208      	movs	r2, #8
 8004db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2290      	movs	r2, #144	; 0x90
 8004dba:	589b      	ldr	r3, [r3, r2]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2190      	movs	r1, #144	; 0x90
 8004dc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dc6:	23a4      	movs	r3, #164	; 0xa4
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <HAL_UART_IRQHandler+0x1a4>
 8004dd4:	23a0      	movs	r3, #160	; 0xa0
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	04db      	lsls	r3, r3, #19
 8004dde:	4013      	ands	r3, r2
 8004de0:	d00c      	beq.n	8004dfc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	0112      	lsls	r2, r2, #4
 8004dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2290      	movs	r2, #144	; 0x90
 8004df0:	589b      	ldr	r3, [r3, r2]
 8004df2:	2220      	movs	r2, #32
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2190      	movs	r1, #144	; 0x90
 8004dfa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2290      	movs	r2, #144	; 0x90
 8004e00:	589b      	ldr	r3, [r3, r2]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d100      	bne.n	8004e08 <HAL_UART_IRQHandler+0x1b0>
 8004e06:	e23d      	b.n	8005284 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e08:	23a4      	movs	r3, #164	; 0xa4
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	4013      	ands	r3, r2
 8004e12:	d015      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e14:	23a0      	movs	r3, #160	; 0xa0
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d106      	bne.n	8004e2e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e20:	239c      	movs	r3, #156	; 0x9c
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	055b      	lsls	r3, r3, #21
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d008      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	0010      	movs	r0, r2
 8004e3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2290      	movs	r2, #144	; 0x90
 8004e44:	589b      	ldr	r3, [r3, r2]
 8004e46:	2194      	movs	r1, #148	; 0x94
 8004e48:	187a      	adds	r2, r7, r1
 8004e4a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d004      	beq.n	8004e64 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2228      	movs	r2, #40	; 0x28
 8004e60:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e62:	d04c      	beq.n	8004efe <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f000 ff9e 	bl	8005da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d13c      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	2090      	movs	r0, #144	; 0x90
 8004e84:	183a      	adds	r2, r7, r0
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2140      	movs	r1, #64	; 0x40
 8004ea0:	438a      	bics	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	183b      	adds	r3, r7, r0
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eac:	f383 8810 	msr	PRIMASK, r3
}
 8004eb0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	589b      	ldr	r3, [r3, r2]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d016      	beq.n	8004eea <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	589b      	ldr	r3, [r3, r2]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_UART_IRQHandler+0x2c8>)
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	589b      	ldr	r3, [r3, r2]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7fd fcb1 	bl	8002834 <HAL_DMA_Abort_IT>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d01c      	beq.n	8004f10 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	5852      	ldr	r2, [r2, r1]
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	e012      	b.n	8004f10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 f9e1 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef2:	e00d      	b.n	8004f10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 f9dc 	bl	80052b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	e008      	b.n	8004f10 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 f9d7 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2290      	movs	r2, #144	; 0x90
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004f0e:	e1b9      	b.n	8005284 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	46c0      	nop			; (mov r8, r8)
    return;
 8004f12:	e1b7      	b.n	8005284 <HAL_UART_IRQHandler+0x62c>
 8004f14:	0000080f 	.word	0x0000080f
 8004f18:	10000001 	.word	0x10000001
 8004f1c:	04000120 	.word	0x04000120
 8004f20:	08005e75 	.word	0x08005e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d000      	beq.n	8004f2e <HAL_UART_IRQHandler+0x2d6>
 8004f2c:	e13e      	b.n	80051ac <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f2e:	23a4      	movs	r3, #164	; 0xa4
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2210      	movs	r2, #16
 8004f36:	4013      	ands	r3, r2
 8004f38:	d100      	bne.n	8004f3c <HAL_UART_IRQHandler+0x2e4>
 8004f3a:	e137      	b.n	80051ac <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f3c:	23a0      	movs	r3, #160	; 0xa0
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2210      	movs	r2, #16
 8004f44:	4013      	ands	r3, r2
 8004f46:	d100      	bne.n	8004f4a <HAL_UART_IRQHandler+0x2f2>
 8004f48:	e130      	b.n	80051ac <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d000      	beq.n	8004f62 <HAL_UART_IRQHandler+0x30a>
 8004f60:	e0a4      	b.n	80050ac <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	589b      	ldr	r3, [r3, r2]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	217e      	movs	r1, #126	; 0x7e
 8004f6e:	187b      	adds	r3, r7, r1
 8004f70:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d100      	bne.n	8004f7c <HAL_UART_IRQHandler+0x324>
 8004f7a:	e185      	b.n	8005288 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	225c      	movs	r2, #92	; 0x5c
 8004f80:	5a9b      	ldrh	r3, [r3, r2]
 8004f82:	187a      	adds	r2, r7, r1
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d300      	bcc.n	8004f8c <HAL_UART_IRQHandler+0x334>
 8004f8a:	e17d      	b.n	8005288 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	187a      	adds	r2, r7, r1
 8004f90:	215e      	movs	r1, #94	; 0x5e
 8004f92:	8812      	ldrh	r2, [r2, #0]
 8004f94:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	589b      	ldr	r3, [r3, r2]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d170      	bne.n	8005088 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fae:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	49b4      	ldr	r1, [pc, #720]	; (8005298 <HAL_UART_IRQHandler+0x640>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f383 8810 	msr	PRIMASK, r3
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	438a      	bics	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005010:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005012:	673b      	str	r3, [r7, #112]	; 0x70
 8005014:	2301      	movs	r3, #1
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	438a      	bics	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005032:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	228c      	movs	r2, #140	; 0x8c
 8005040:	2120      	movs	r1, #32
 8005042:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504a:	f3ef 8310 	mrs	r3, PRIMASK
 800504e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005050:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005054:	2301      	movs	r3, #1
 8005056:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2110      	movs	r1, #16
 800506c:	438a      	bics	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005076:	f383 8810 	msr	PRIMASK, r3
}
 800507a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	589b      	ldr	r3, [r3, r2]
 8005082:	0018      	movs	r0, r3
 8005084:	f7fd fb74 	bl	8002770 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	225c      	movs	r2, #92	; 0x5c
 8005092:	5a9a      	ldrh	r2, [r3, r2]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	215e      	movs	r1, #94	; 0x5e
 8005098:	5a5b      	ldrh	r3, [r3, r1]
 800509a:	b29b      	uxth	r3, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	b29a      	uxth	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 f90d 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050aa:	e0ed      	b.n	8005288 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	225c      	movs	r2, #92	; 0x5c
 80050b0:	5a99      	ldrh	r1, [r3, r2]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	225e      	movs	r2, #94	; 0x5e
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	208e      	movs	r0, #142	; 0x8e
 80050bc:	183b      	adds	r3, r7, r0
 80050be:	1a8a      	subs	r2, r1, r2
 80050c0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	225e      	movs	r2, #94	; 0x5e
 80050c6:	5a9b      	ldrh	r3, [r3, r2]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d100      	bne.n	80050d0 <HAL_UART_IRQHandler+0x478>
 80050ce:	e0dd      	b.n	800528c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80050d0:	183b      	adds	r3, r7, r0
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d100      	bne.n	80050da <HAL_UART_IRQHandler+0x482>
 80050d8:	e0d8      	b.n	800528c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050da:	f3ef 8310 	mrs	r3, PRIMASK
 80050de:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050e2:	2488      	movs	r4, #136	; 0x88
 80050e4:	193a      	adds	r2, r7, r4
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	2301      	movs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4967      	ldr	r1, [pc, #412]	; (800529c <HAL_UART_IRQHandler+0x644>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	193b      	adds	r3, r7, r4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f383 8810 	msr	PRIMASK, r3
}
 8005110:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005112:	f3ef 8310 	mrs	r3, PRIMASK
 8005116:	61bb      	str	r3, [r7, #24]
  return(result);
 8005118:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800511a:	2484      	movs	r4, #132	; 0x84
 800511c:	193a      	adds	r2, r7, r4
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	2301      	movs	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	495a      	ldr	r1, [pc, #360]	; (80052a0 <HAL_UART_IRQHandler+0x648>)
 8005138:	400a      	ands	r2, r1
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	193b      	adds	r3, r7, r4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	228c      	movs	r2, #140	; 0x8c
 800514e:	2120      	movs	r1, #32
 8005150:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515e:	f3ef 8310 	mrs	r3, PRIMASK
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	2480      	movs	r4, #128	; 0x80
 8005168:	193a      	adds	r2, r7, r4
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	2301      	movs	r3, #1
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2110      	movs	r1, #16
 8005184:	438a      	bics	r2, r1
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	193b      	adds	r3, r7, r4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	f383 8810 	msr	PRIMASK, r3
}
 8005194:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800519c:	183b      	adds	r3, r7, r0
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0011      	movs	r1, r2
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 f88d 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051aa:	e06f      	b.n	800528c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ac:	23a4      	movs	r3, #164	; 0xa4
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	035b      	lsls	r3, r3, #13
 80051b6:	4013      	ands	r3, r2
 80051b8:	d010      	beq.n	80051dc <HAL_UART_IRQHandler+0x584>
 80051ba:	239c      	movs	r3, #156	; 0x9c
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	03db      	lsls	r3, r3, #15
 80051c4:	4013      	ands	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2280      	movs	r2, #128	; 0x80
 80051ce:	0352      	lsls	r2, r2, #13
 80051d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f001 faf1 	bl	80067bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051da:	e05a      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051dc:	23a4      	movs	r3, #164	; 0xa4
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	4013      	ands	r3, r2
 80051e6:	d016      	beq.n	8005216 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051e8:	23a0      	movs	r3, #160	; 0xa0
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2280      	movs	r2, #128	; 0x80
 80051f0:	4013      	ands	r3, r2
 80051f2:	d106      	bne.n	8005202 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051f4:	239c      	movs	r3, #156	; 0x9c
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	4013      	ands	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005206:	2b00      	cmp	r3, #0
 8005208:	d042      	beq.n	8005290 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	0010      	movs	r0, r2
 8005212:	4798      	blx	r3
    }
    return;
 8005214:	e03c      	b.n	8005290 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005216:	23a4      	movs	r3, #164	; 0xa4
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2240      	movs	r2, #64	; 0x40
 800521e:	4013      	ands	r3, r2
 8005220:	d00a      	beq.n	8005238 <HAL_UART_IRQHandler+0x5e0>
 8005222:	23a0      	movs	r3, #160	; 0xa0
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2240      	movs	r2, #64	; 0x40
 800522a:	4013      	ands	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0018      	movs	r0, r3
 8005232:	f000 fe36 	bl	8005ea2 <UART_EndTransmit_IT>
    return;
 8005236:	e02c      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005238:	23a4      	movs	r3, #164	; 0xa4
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	4013      	ands	r3, r2
 8005244:	d00b      	beq.n	800525e <HAL_UART_IRQHandler+0x606>
 8005246:	23a0      	movs	r3, #160	; 0xa0
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	05db      	lsls	r3, r3, #23
 8005250:	4013      	ands	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f001 fac0 	bl	80067dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800525c:	e019      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800525e:	23a4      	movs	r3, #164	; 0xa4
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	045b      	lsls	r3, r3, #17
 8005268:	4013      	ands	r3, r2
 800526a:	d012      	beq.n	8005292 <HAL_UART_IRQHandler+0x63a>
 800526c:	23a0      	movs	r3, #160	; 0xa0
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0d      	bge.n	8005292 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f001 faa7 	bl	80067cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800527e:	e008      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
      return;
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	e006      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
    return;
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	e004      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
      return;
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	e002      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
      return;
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	e000      	b.n	8005292 <HAL_UART_IRQHandler+0x63a>
    return;
 8005290:	46c0      	nop			; (mov r8, r8)
  }
}
 8005292:	46bd      	mov	sp, r7
 8005294:	b02a      	add	sp, #168	; 0xa8
 8005296:	bdb0      	pop	{r4, r5, r7, pc}
 8005298:	fffffeff 	.word	0xfffffeff
 800529c:	fffffedf 	.word	0xfffffedf
 80052a0:	effffffe 	.word	0xeffffffe

080052a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	000a      	movs	r2, r1
 80052ce:	1cbb      	adds	r3, r7, #2
 80052d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b002      	add	sp, #8
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b090      	sub	sp, #64	; 0x40
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052e4:	231a      	movs	r3, #26
 80052e6:	2220      	movs	r2, #32
 80052e8:	189b      	adds	r3, r3, r2
 80052ea:	19db      	adds	r3, r3, r7
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	431a      	orrs	r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	4313      	orrs	r3, r2
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4ac4      	ldr	r2, [pc, #784]	; (8005620 <UART_SetConfig+0x344>)
 8005310:	4013      	ands	r3, r2
 8005312:	0019      	movs	r1, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	430b      	orrs	r3, r1
 800531c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4abf      	ldr	r2, [pc, #764]	; (8005624 <UART_SetConfig+0x348>)
 8005326:	4013      	ands	r3, r2
 8005328:	0018      	movs	r0, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	68d9      	ldr	r1, [r3, #12]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	0003      	movs	r3, r0
 8005334:	430b      	orrs	r3, r1
 8005336:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4ab9      	ldr	r2, [pc, #740]	; (8005628 <UART_SetConfig+0x34c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800534e:	4313      	orrs	r3, r2
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4ab4      	ldr	r2, [pc, #720]	; (800562c <UART_SetConfig+0x350>)
 800535a:	4013      	ands	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	430b      	orrs	r3, r1
 8005366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	220f      	movs	r2, #15
 8005370:	4393      	bics	r3, r2
 8005372:	0018      	movs	r0, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	0003      	movs	r3, r0
 800537e:	430b      	orrs	r3, r1
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4aaa      	ldr	r2, [pc, #680]	; (8005630 <UART_SetConfig+0x354>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d131      	bne.n	80053f0 <UART_SetConfig+0x114>
 800538c:	4ba9      	ldr	r3, [pc, #676]	; (8005634 <UART_SetConfig+0x358>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	2203      	movs	r2, #3
 8005392:	4013      	ands	r3, r2
 8005394:	2b03      	cmp	r3, #3
 8005396:	d01d      	beq.n	80053d4 <UART_SetConfig+0xf8>
 8005398:	d823      	bhi.n	80053e2 <UART_SetConfig+0x106>
 800539a:	2b02      	cmp	r3, #2
 800539c:	d00c      	beq.n	80053b8 <UART_SetConfig+0xdc>
 800539e:	d820      	bhi.n	80053e2 <UART_SetConfig+0x106>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <UART_SetConfig+0xce>
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d00e      	beq.n	80053c6 <UART_SetConfig+0xea>
 80053a8:	e01b      	b.n	80053e2 <UART_SetConfig+0x106>
 80053aa:	231b      	movs	r3, #27
 80053ac:	2220      	movs	r2, #32
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	19db      	adds	r3, r3, r7
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e071      	b.n	800549c <UART_SetConfig+0x1c0>
 80053b8:	231b      	movs	r3, #27
 80053ba:	2220      	movs	r2, #32
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	19db      	adds	r3, r3, r7
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e06a      	b.n	800549c <UART_SetConfig+0x1c0>
 80053c6:	231b      	movs	r3, #27
 80053c8:	2220      	movs	r2, #32
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	19db      	adds	r3, r3, r7
 80053ce:	2204      	movs	r2, #4
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e063      	b.n	800549c <UART_SetConfig+0x1c0>
 80053d4:	231b      	movs	r3, #27
 80053d6:	2220      	movs	r2, #32
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	19db      	adds	r3, r3, r7
 80053dc:	2208      	movs	r2, #8
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e05c      	b.n	800549c <UART_SetConfig+0x1c0>
 80053e2:	231b      	movs	r3, #27
 80053e4:	2220      	movs	r2, #32
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	19db      	adds	r3, r3, r7
 80053ea:	2210      	movs	r2, #16
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e055      	b.n	800549c <UART_SetConfig+0x1c0>
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a90      	ldr	r2, [pc, #576]	; (8005638 <UART_SetConfig+0x35c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d106      	bne.n	8005408 <UART_SetConfig+0x12c>
 80053fa:	231b      	movs	r3, #27
 80053fc:	2220      	movs	r2, #32
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e049      	b.n	800549c <UART_SetConfig+0x1c0>
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a86      	ldr	r2, [pc, #536]	; (8005628 <UART_SetConfig+0x34c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d13e      	bne.n	8005490 <UART_SetConfig+0x1b4>
 8005412:	4b88      	ldr	r3, [pc, #544]	; (8005634 <UART_SetConfig+0x358>)
 8005414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005416:	23c0      	movs	r3, #192	; 0xc0
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	4013      	ands	r3, r2
 800541c:	22c0      	movs	r2, #192	; 0xc0
 800541e:	0112      	lsls	r2, r2, #4
 8005420:	4293      	cmp	r3, r2
 8005422:	d027      	beq.n	8005474 <UART_SetConfig+0x198>
 8005424:	22c0      	movs	r2, #192	; 0xc0
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	4293      	cmp	r3, r2
 800542a:	d82a      	bhi.n	8005482 <UART_SetConfig+0x1a6>
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	4293      	cmp	r3, r2
 8005432:	d011      	beq.n	8005458 <UART_SetConfig+0x17c>
 8005434:	2280      	movs	r2, #128	; 0x80
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	4293      	cmp	r3, r2
 800543a:	d822      	bhi.n	8005482 <UART_SetConfig+0x1a6>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <UART_SetConfig+0x16e>
 8005440:	2280      	movs	r2, #128	; 0x80
 8005442:	00d2      	lsls	r2, r2, #3
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <UART_SetConfig+0x18a>
 8005448:	e01b      	b.n	8005482 <UART_SetConfig+0x1a6>
 800544a:	231b      	movs	r3, #27
 800544c:	2220      	movs	r2, #32
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e021      	b.n	800549c <UART_SetConfig+0x1c0>
 8005458:	231b      	movs	r3, #27
 800545a:	2220      	movs	r2, #32
 800545c:	189b      	adds	r3, r3, r2
 800545e:	19db      	adds	r3, r3, r7
 8005460:	2202      	movs	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e01a      	b.n	800549c <UART_SetConfig+0x1c0>
 8005466:	231b      	movs	r3, #27
 8005468:	2220      	movs	r2, #32
 800546a:	189b      	adds	r3, r3, r2
 800546c:	19db      	adds	r3, r3, r7
 800546e:	2204      	movs	r2, #4
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e013      	b.n	800549c <UART_SetConfig+0x1c0>
 8005474:	231b      	movs	r3, #27
 8005476:	2220      	movs	r2, #32
 8005478:	189b      	adds	r3, r3, r2
 800547a:	19db      	adds	r3, r3, r7
 800547c:	2208      	movs	r2, #8
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x1c0>
 8005482:	231b      	movs	r3, #27
 8005484:	2220      	movs	r2, #32
 8005486:	189b      	adds	r3, r3, r2
 8005488:	19db      	adds	r3, r3, r7
 800548a:	2210      	movs	r2, #16
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e005      	b.n	800549c <UART_SetConfig+0x1c0>
 8005490:	231b      	movs	r3, #27
 8005492:	2220      	movs	r2, #32
 8005494:	189b      	adds	r3, r3, r2
 8005496:	19db      	adds	r3, r3, r7
 8005498:	2210      	movs	r2, #16
 800549a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a61      	ldr	r2, [pc, #388]	; (8005628 <UART_SetConfig+0x34c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d000      	beq.n	80054a8 <UART_SetConfig+0x1cc>
 80054a6:	e092      	b.n	80055ce <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054a8:	231b      	movs	r3, #27
 80054aa:	2220      	movs	r2, #32
 80054ac:	189b      	adds	r3, r3, r2
 80054ae:	19db      	adds	r3, r3, r7
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d015      	beq.n	80054e2 <UART_SetConfig+0x206>
 80054b6:	dc18      	bgt.n	80054ea <UART_SetConfig+0x20e>
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d00d      	beq.n	80054d8 <UART_SetConfig+0x1fc>
 80054bc:	dc15      	bgt.n	80054ea <UART_SetConfig+0x20e>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <UART_SetConfig+0x1ec>
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d005      	beq.n	80054d2 <UART_SetConfig+0x1f6>
 80054c6:	e010      	b.n	80054ea <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fe f89a 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80054cc:	0003      	movs	r3, r0
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d0:	e014      	b.n	80054fc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d2:	4b5a      	ldr	r3, [pc, #360]	; (800563c <UART_SetConfig+0x360>)
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d6:	e011      	b.n	80054fc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d8:	f7fe f806 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 80054dc:	0003      	movs	r3, r0
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e0:	e00c      	b.n	80054fc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e8:	e008      	b.n	80054fc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054ee:	231a      	movs	r3, #26
 80054f0:	2220      	movs	r2, #32
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	19db      	adds	r3, r3, r7
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
        break;
 80054fa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d100      	bne.n	8005504 <UART_SetConfig+0x228>
 8005502:	e147      	b.n	8005794 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <UART_SetConfig+0x364>)
 800550a:	0052      	lsls	r2, r2, #1
 800550c:	5ad3      	ldrh	r3, [r2, r3]
 800550e:	0019      	movs	r1, r3
 8005510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005512:	f7fa fe01 	bl	8000118 <__udivsi3>
 8005516:	0003      	movs	r3, r0
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	0013      	movs	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	189b      	adds	r3, r3, r2
 8005524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005526:	429a      	cmp	r2, r3
 8005528:	d305      	bcc.n	8005536 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005532:	429a      	cmp	r2, r3
 8005534:	d906      	bls.n	8005544 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005536:	231a      	movs	r3, #26
 8005538:	2220      	movs	r2, #32
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e127      	b.n	8005794 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005550:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <UART_SetConfig+0x364>)
 8005552:	0052      	lsls	r2, r2, #1
 8005554:	5ad3      	ldrh	r3, [r2, r3]
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	69b8      	ldr	r0, [r7, #24]
 8005562:	69f9      	ldr	r1, [r7, #28]
 8005564:	f7fa fe9e 	bl	80002a4 <__aeabi_uldivmod>
 8005568:	0002      	movs	r2, r0
 800556a:	000b      	movs	r3, r1
 800556c:	0e11      	lsrs	r1, r2, #24
 800556e:	021d      	lsls	r5, r3, #8
 8005570:	430d      	orrs	r5, r1
 8005572:	0214      	lsls	r4, r2, #8
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68b8      	ldr	r0, [r7, #8]
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	1900      	adds	r0, r0, r4
 8005586:	4169      	adcs	r1, r5
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f7fa fe85 	bl	80002a4 <__aeabi_uldivmod>
 800559a:	0002      	movs	r2, r0
 800559c:	000b      	movs	r3, r1
 800559e:	0013      	movs	r3, r2
 80055a0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	23c0      	movs	r3, #192	; 0xc0
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d309      	bcc.n	80055c0 <UART_SetConfig+0x2e4>
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	035b      	lsls	r3, r3, #13
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d204      	bcs.n	80055c0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	e0e9      	b.n	8005794 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80055c0:	231a      	movs	r3, #26
 80055c2:	2220      	movs	r2, #32
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	19db      	adds	r3, r3, r7
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e0e2      	b.n	8005794 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d000      	beq.n	80055dc <UART_SetConfig+0x300>
 80055da:	e083      	b.n	80056e4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80055dc:	231b      	movs	r3, #27
 80055de:	2220      	movs	r2, #32
 80055e0:	189b      	adds	r3, r3, r2
 80055e2:	19db      	adds	r3, r3, r7
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d015      	beq.n	8005616 <UART_SetConfig+0x33a>
 80055ea:	dc2b      	bgt.n	8005644 <UART_SetConfig+0x368>
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d00d      	beq.n	800560c <UART_SetConfig+0x330>
 80055f0:	dc28      	bgt.n	8005644 <UART_SetConfig+0x368>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0x320>
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d005      	beq.n	8005606 <UART_SetConfig+0x32a>
 80055fa:	e023      	b.n	8005644 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe f800 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005600:	0003      	movs	r3, r0
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005604:	e027      	b.n	8005656 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x360>)
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800560a:	e024      	b.n	8005656 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560c:	f7fd ff6c 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8005610:	0003      	movs	r3, r0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005614:	e01f      	b.n	8005656 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800561c:	e01b      	b.n	8005656 <UART_SetConfig+0x37a>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	cfff69f3 	.word	0xcfff69f3
 8005624:	ffffcfff 	.word	0xffffcfff
 8005628:	40008000 	.word	0x40008000
 800562c:	11fff4ff 	.word	0x11fff4ff
 8005630:	40013800 	.word	0x40013800
 8005634:	40021000 	.word	0x40021000
 8005638:	40004400 	.word	0x40004400
 800563c:	00f42400 	.word	0x00f42400
 8005640:	08008144 	.word	0x08008144
      default:
        pclk = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005648:	231a      	movs	r3, #26
 800564a:	2220      	movs	r2, #32
 800564c:	189b      	adds	r3, r3, r2
 800564e:	19db      	adds	r3, r3, r7
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
        break;
 8005654:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d100      	bne.n	800565e <UART_SetConfig+0x382>
 800565c:	e09a      	b.n	8005794 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005662:	4b58      	ldr	r3, [pc, #352]	; (80057c4 <UART_SetConfig+0x4e8>)
 8005664:	0052      	lsls	r2, r2, #1
 8005666:	5ad3      	ldrh	r3, [r2, r3]
 8005668:	0019      	movs	r1, r3
 800566a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800566c:	f7fa fd54 	bl	8000118 <__udivsi3>
 8005670:	0003      	movs	r3, r0
 8005672:	005a      	lsls	r2, r3, #1
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	18d2      	adds	r2, r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0019      	movs	r1, r3
 8005682:	0010      	movs	r0, r2
 8005684:	f7fa fd48 	bl	8000118 <__udivsi3>
 8005688:	0003      	movs	r3, r0
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d921      	bls.n	80056d6 <UART_SetConfig+0x3fa>
 8005692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	025b      	lsls	r3, r3, #9
 8005698:	429a      	cmp	r2, r3
 800569a:	d21c      	bcs.n	80056d6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	b29a      	uxth	r2, r3
 80056a0:	200e      	movs	r0, #14
 80056a2:	2420      	movs	r4, #32
 80056a4:	1903      	adds	r3, r0, r4
 80056a6:	19db      	adds	r3, r3, r7
 80056a8:	210f      	movs	r1, #15
 80056aa:	438a      	bics	r2, r1
 80056ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2207      	movs	r2, #7
 80056b6:	4013      	ands	r3, r2
 80056b8:	b299      	uxth	r1, r3
 80056ba:	1903      	adds	r3, r0, r4
 80056bc:	19db      	adds	r3, r3, r7
 80056be:	1902      	adds	r2, r0, r4
 80056c0:	19d2      	adds	r2, r2, r7
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1902      	adds	r2, r0, r4
 80056ce:	19d2      	adds	r2, r2, r7
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	60da      	str	r2, [r3, #12]
 80056d4:	e05e      	b.n	8005794 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80056d6:	231a      	movs	r3, #26
 80056d8:	2220      	movs	r2, #32
 80056da:	189b      	adds	r3, r3, r2
 80056dc:	19db      	adds	r3, r3, r7
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e057      	b.n	8005794 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e4:	231b      	movs	r3, #27
 80056e6:	2220      	movs	r2, #32
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	19db      	adds	r3, r3, r7
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d015      	beq.n	800571e <UART_SetConfig+0x442>
 80056f2:	dc18      	bgt.n	8005726 <UART_SetConfig+0x44a>
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d00d      	beq.n	8005714 <UART_SetConfig+0x438>
 80056f8:	dc15      	bgt.n	8005726 <UART_SetConfig+0x44a>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <UART_SetConfig+0x428>
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d005      	beq.n	800570e <UART_SetConfig+0x432>
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fd ff7c 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005708:	0003      	movs	r3, r0
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570c:	e014      	b.n	8005738 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <UART_SetConfig+0x4ec>)
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005712:	e011      	b.n	8005738 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005714:	f7fd fee8 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8005718:	0003      	movs	r3, r0
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800571c:	e00c      	b.n	8005738 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005724:	e008      	b.n	8005738 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800572a:	231a      	movs	r3, #26
 800572c:	2220      	movs	r2, #32
 800572e:	189b      	adds	r3, r3, r2
 8005730:	19db      	adds	r3, r3, r7
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
        break;
 8005736:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	2b00      	cmp	r3, #0
 800573c:	d02a      	beq.n	8005794 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <UART_SetConfig+0x4e8>)
 8005744:	0052      	lsls	r2, r2, #1
 8005746:	5ad3      	ldrh	r3, [r2, r3]
 8005748:	0019      	movs	r1, r3
 800574a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800574c:	f7fa fce4 	bl	8000118 <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	001a      	movs	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	18d2      	adds	r2, r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	0019      	movs	r1, r3
 8005762:	0010      	movs	r0, r2
 8005764:	f7fa fcd8 	bl	8000118 <__udivsi3>
 8005768:	0003      	movs	r3, r0
 800576a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2b0f      	cmp	r3, #15
 8005770:	d90a      	bls.n	8005788 <UART_SetConfig+0x4ac>
 8005772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	025b      	lsls	r3, r3, #9
 8005778:	429a      	cmp	r2, r3
 800577a:	d205      	bcs.n	8005788 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	b29a      	uxth	r2, r3
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e005      	b.n	8005794 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	231a      	movs	r3, #26
 800578a:	2220      	movs	r2, #32
 800578c:	189b      	adds	r3, r3, r2
 800578e:	19db      	adds	r3, r3, r7
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	226a      	movs	r2, #106	; 0x6a
 8005798:	2101      	movs	r1, #1
 800579a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	2268      	movs	r2, #104	; 0x68
 80057a0:	2101      	movs	r1, #1
 80057a2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	2200      	movs	r2, #0
 80057a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	2200      	movs	r2, #0
 80057ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80057b0:	231a      	movs	r3, #26
 80057b2:	2220      	movs	r2, #32
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	19db      	adds	r3, r3, r7
 80057b8:	781b      	ldrb	r3, [r3, #0]
}
 80057ba:	0018      	movs	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	b010      	add	sp, #64	; 0x40
 80057c0:	bdb0      	pop	{r4, r5, r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	08008144 	.word	0x08008144
 80057c8:	00f42400 	.word	0x00f42400

080057cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	2201      	movs	r2, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <UART_AdvFeatureConfig+0x144>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	0019      	movs	r1, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	2202      	movs	r2, #2
 80057fc:	4013      	ands	r3, r2
 80057fe:	d00b      	beq.n	8005818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a43      	ldr	r2, [pc, #268]	; (8005914 <UART_AdvFeatureConfig+0x148>)
 8005808:	4013      	ands	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	2204      	movs	r2, #4
 800581e:	4013      	ands	r3, r2
 8005820:	d00b      	beq.n	800583a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a3b      	ldr	r2, [pc, #236]	; (8005918 <UART_AdvFeatureConfig+0x14c>)
 800582a:	4013      	ands	r3, r2
 800582c:	0019      	movs	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	2208      	movs	r2, #8
 8005840:	4013      	ands	r3, r2
 8005842:	d00b      	beq.n	800585c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4a34      	ldr	r2, [pc, #208]	; (800591c <UART_AdvFeatureConfig+0x150>)
 800584c:	4013      	ands	r3, r2
 800584e:	0019      	movs	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	2210      	movs	r2, #16
 8005862:	4013      	ands	r3, r2
 8005864:	d00b      	beq.n	800587e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <UART_AdvFeatureConfig+0x154>)
 800586e:	4013      	ands	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	2220      	movs	r2, #32
 8005884:	4013      	ands	r3, r2
 8005886:	d00b      	beq.n	80058a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4a25      	ldr	r2, [pc, #148]	; (8005924 <UART_AdvFeatureConfig+0x158>)
 8005890:	4013      	ands	r3, r2
 8005892:	0019      	movs	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	4013      	ands	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <UART_AdvFeatureConfig+0x15c>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	035b      	lsls	r3, r3, #13
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d10b      	bne.n	80058e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a15      	ldr	r2, [pc, #84]	; (800592c <UART_AdvFeatureConfig+0x160>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	4013      	ands	r3, r2
 80058ee:	d00b      	beq.n	8005908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <UART_AdvFeatureConfig+0x164>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}
 8005910:	fffdffff 	.word	0xfffdffff
 8005914:	fffeffff 	.word	0xfffeffff
 8005918:	fffbffff 	.word	0xfffbffff
 800591c:	ffff7fff 	.word	0xffff7fff
 8005920:	ffffefff 	.word	0xffffefff
 8005924:	ffffdfff 	.word	0xffffdfff
 8005928:	ffefffff 	.word	0xffefffff
 800592c:	ff9fffff 	.word	0xff9fffff
 8005930:	fff7ffff 	.word	0xfff7ffff

08005934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2290      	movs	r2, #144	; 0x90
 8005940:	2100      	movs	r1, #0
 8005942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005944:	f7fb fd42 	bl	80013cc <HAL_GetTick>
 8005948:	0003      	movs	r3, r0
 800594a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2208      	movs	r2, #8
 8005954:	4013      	ands	r3, r2
 8005956:	2b08      	cmp	r3, #8
 8005958:	d10c      	bne.n	8005974 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	0391      	lsls	r1, r2, #14
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <UART_CheckIdleState+0x98>)
 8005964:	9200      	str	r2, [sp, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	f000 f832 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d001      	beq.n	8005974 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e026      	b.n	80059c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2204      	movs	r2, #4
 800597c:	4013      	ands	r3, r2
 800597e:	2b04      	cmp	r3, #4
 8005980:	d10c      	bne.n	800599c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	03d1      	lsls	r1, r2, #15
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4a10      	ldr	r2, [pc, #64]	; (80059cc <UART_CheckIdleState+0x98>)
 800598c:	9200      	str	r2, [sp, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	f000 f81e 	bl	80059d0 <UART_WaitOnFlagUntilTimeout>
 8005994:	1e03      	subs	r3, r0, #0
 8005996:	d001      	beq.n	800599c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e012      	b.n	80059c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2288      	movs	r2, #136	; 0x88
 80059a0:	2120      	movs	r1, #32
 80059a2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	228c      	movs	r2, #140	; 0x8c
 80059a8:	2120      	movs	r1, #32
 80059aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2284      	movs	r2, #132	; 0x84
 80059bc:	2100      	movs	r1, #0
 80059be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b004      	add	sp, #16
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	01ffffff 	.word	0x01ffffff

080059d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b094      	sub	sp, #80	; 0x50
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e0:	e0a7      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e4:	3301      	adds	r3, #1
 80059e6:	d100      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80059e8:	e0a3      	b.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fb fcef 	bl	80013cc <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80059fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d13f      	bne.n	8005a80 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a08:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	494e      	ldr	r1, [pc, #312]	; (8005b5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a22:	400a      	ands	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a32:	f3ef 8310 	mrs	r3, PRIMASK
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	f383 8810 	msr	PRIMASK, r3
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2101      	movs	r1, #1
 8005a54:	438a      	bics	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	f383 8810 	msr	PRIMASK, r3
}
 8005a62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2288      	movs	r2, #136	; 0x88
 8005a68:	2120      	movs	r1, #32
 8005a6a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	228c      	movs	r2, #140	; 0x8c
 8005a70:	2120      	movs	r1, #32
 8005a72:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2284      	movs	r2, #132	; 0x84
 8005a78:	2100      	movs	r1, #0
 8005a7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e069      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2204      	movs	r2, #4
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d052      	beq.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	401a      	ands	r2, r3
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d148      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005aae:	613b      	str	r3, [r7, #16]
  return(result);
 8005ab0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f383 8810 	msr	PRIMASK, r3
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4924      	ldr	r1, [pc, #144]	; (8005b5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005acc:	400a      	ands	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005adc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f383 8810 	msr	PRIMASK, r3
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	438a      	bics	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2288      	movs	r2, #136	; 0x88
 8005b12:	2120      	movs	r1, #32
 8005b14:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	228c      	movs	r2, #140	; 0x8c
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2290      	movs	r2, #144	; 0x90
 8005b22:	2120      	movs	r1, #32
 8005b24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2284      	movs	r2, #132	; 0x84
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e010      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	425a      	negs	r2, r3
 8005b42:	4153      	adcs	r3, r2
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	001a      	movs	r2, r3
 8005b48:	1dfb      	adds	r3, r7, #7
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d100      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x182>
 8005b50:	e747      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b014      	add	sp, #80	; 0x50
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	fffffe5f 	.word	0xfffffe5f

08005b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b098      	sub	sp, #96	; 0x60
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	1dbb      	adds	r3, r7, #6
 8005b6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1dba      	adds	r2, r7, #6
 8005b78:	215c      	movs	r1, #92	; 0x5c
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1dba      	adds	r2, r7, #6
 8005b82:	215e      	movs	r1, #94	; 0x5e
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	015b      	lsls	r3, r3, #5
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d10d      	bne.n	8005bb6 <UART_Start_Receive_IT+0x56>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <UART_Start_Receive_IT+0x4c>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2260      	movs	r2, #96	; 0x60
 8005ba6:	497b      	ldr	r1, [pc, #492]	; (8005d94 <UART_Start_Receive_IT+0x234>)
 8005ba8:	5299      	strh	r1, [r3, r2]
 8005baa:	e02e      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2260      	movs	r2, #96	; 0x60
 8005bb0:	21ff      	movs	r1, #255	; 0xff
 8005bb2:	5299      	strh	r1, [r3, r2]
 8005bb4:	e029      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <UART_Start_Receive_IT+0x7a>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <UART_Start_Receive_IT+0x70>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2260      	movs	r2, #96	; 0x60
 8005bca:	21ff      	movs	r1, #255	; 0xff
 8005bcc:	5299      	strh	r1, [r3, r2]
 8005bce:	e01c      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2260      	movs	r2, #96	; 0x60
 8005bd4:	217f      	movs	r1, #127	; 0x7f
 8005bd6:	5299      	strh	r1, [r3, r2]
 8005bd8:	e017      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	055b      	lsls	r3, r3, #21
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d10d      	bne.n	8005c02 <UART_Start_Receive_IT+0xa2>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <UART_Start_Receive_IT+0x98>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2260      	movs	r2, #96	; 0x60
 8005bf2:	217f      	movs	r1, #127	; 0x7f
 8005bf4:	5299      	strh	r1, [r3, r2]
 8005bf6:	e008      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2260      	movs	r2, #96	; 0x60
 8005bfc:	213f      	movs	r1, #63	; 0x3f
 8005bfe:	5299      	strh	r1, [r3, r2]
 8005c00:	e003      	b.n	8005c0a <UART_Start_Receive_IT+0xaa>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2260      	movs	r2, #96	; 0x60
 8005c06:	2100      	movs	r1, #0
 8005c08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2290      	movs	r2, #144	; 0x90
 8005c0e:	2100      	movs	r1, #0
 8005c10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	228c      	movs	r2, #140	; 0x8c
 8005c16:	2122      	movs	r1, #34	; 0x22
 8005c18:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c24:	2301      	movs	r3, #1
 8005c26:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	f383 8810 	msr	PRIMASK, r3
}
 8005c4a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	059b      	lsls	r3, r3, #22
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d150      	bne.n	8005cfa <UART_Start_Receive_IT+0x19a>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2268      	movs	r2, #104	; 0x68
 8005c5c:	5a9b      	ldrh	r3, [r3, r2]
 8005c5e:	1dba      	adds	r2, r7, #6
 8005c60:	8812      	ldrh	r2, [r2, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d349      	bcc.n	8005cfa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	015b      	lsls	r3, r3, #5
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d107      	bne.n	8005c82 <UART_Start_Receive_IT+0x122>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a46      	ldr	r2, [pc, #280]	; (8005d98 <UART_Start_Receive_IT+0x238>)
 8005c7e:	675a      	str	r2, [r3, #116]	; 0x74
 8005c80:	e002      	b.n	8005c88 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a45      	ldr	r2, [pc, #276]	; (8005d9c <UART_Start_Receive_IT+0x23c>)
 8005c86:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d019      	beq.n	8005cc4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c90:	f3ef 8310 	mrs	r3, PRIMASK
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	f383 8810 	msr	PRIMASK, r3
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	0049      	lsls	r1, r1, #1
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cce:	2301      	movs	r3, #1
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	0549      	lsls	r1, r1, #21
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f383 8810 	msr	PRIMASK, r3
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	e047      	b.n	8005d8a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	015b      	lsls	r3, r3, #5
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d107      	bne.n	8005d16 <UART_Start_Receive_IT+0x1b6>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a23      	ldr	r2, [pc, #140]	; (8005da0 <UART_Start_Receive_IT+0x240>)
 8005d12:	675a      	str	r2, [r3, #116]	; 0x74
 8005d14:	e002      	b.n	8005d1c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <UART_Start_Receive_IT+0x244>)
 8005d1a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d019      	beq.n	8005d58 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d24:	f3ef 8310 	mrs	r3, PRIMASK
 8005d28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2e:	2301      	movs	r3, #1
 8005d30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f383 8810 	msr	PRIMASK, r3
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2190      	movs	r1, #144	; 0x90
 8005d46:	0049      	lsls	r1, r1, #1
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f383 8810 	msr	PRIMASK, r3
}
 8005d56:	e018      	b.n	8005d8a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d58:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f383 8810 	msr	PRIMASK, r3
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2120      	movs	r1, #32
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f383 8810 	msr	PRIMASK, r3
}
 8005d88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b018      	add	sp, #96	; 0x60
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	000001ff 	.word	0x000001ff
 8005d98:	080064d1 	.word	0x080064d1
 8005d9c:	080061e5 	.word	0x080061e5
 8005da0:	08006071 	.word	0x08006071
 8005da4:	08005efd 	.word	0x08005efd

08005da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	; 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	617b      	str	r3, [r7, #20]
  return(result);
 8005db6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f383 8810 	msr	PRIMASK, r3
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4926      	ldr	r1, [pc, #152]	; (8005e6c <UART_EndRxTransfer+0xc4>)
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de2:	f3ef 8310 	mrs	r3, PRIMASK
 8005de6:	623b      	str	r3, [r7, #32]
  return(result);
 8005de8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
 8005dec:	2301      	movs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	491b      	ldr	r1, [pc, #108]	; (8005e70 <UART_EndRxTransfer+0xc8>)
 8005e04:	400a      	ands	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	f383 8810 	msr	PRIMASK, r3
}
 8005e12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d118      	bne.n	8005e4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e26:	2301      	movs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			; (mov r8, r8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2110      	movs	r1, #16
 8005e3e:	438a      	bics	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f383 8810 	msr	PRIMASK, r3
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	228c      	movs	r2, #140	; 0x8c
 8005e52:	2120      	movs	r1, #32
 8005e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b00e      	add	sp, #56	; 0x38
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	fffffedf 	.word	0xfffffedf
 8005e70:	effffffe 	.word	0xeffffffe

08005e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	225e      	movs	r2, #94	; 0x5e
 8005e86:	2100      	movs	r1, #0
 8005e88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2256      	movs	r2, #86	; 0x56
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff fa0d 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b004      	add	sp, #16
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f383 8810 	msr	PRIMASK, r3
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2140      	movs	r1, #64	; 0x40
 8005ecc:	438a      	bics	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2288      	movs	r2, #136	; 0x88
 8005ee0:	2120      	movs	r1, #32
 8005ee2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f7ff f9d9 	bl	80052a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b006      	add	sp, #24
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b090      	sub	sp, #64	; 0x40
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f04:	203e      	movs	r0, #62	; 0x3e
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	2160      	movs	r1, #96	; 0x60
 8005f0c:	5a52      	ldrh	r2, [r2, r1]
 8005f0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	228c      	movs	r2, #140	; 0x8c
 8005f14:	589b      	ldr	r3, [r3, r2]
 8005f16:	2b22      	cmp	r3, #34	; 0x22
 8005f18:	d000      	beq.n	8005f1c <UART_RxISR_8BIT+0x20>
 8005f1a:	e09a      	b.n	8006052 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f22:	213c      	movs	r1, #60	; 0x3c
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	183b      	adds	r3, r7, r0
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b2d9      	uxtb	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	400a      	ands	r2, r1
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	225e      	movs	r2, #94	; 0x5e
 8005f4c:	5a9b      	ldrh	r3, [r3, r2]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b299      	uxth	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	225e      	movs	r2, #94	; 0x5e
 8005f58:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	225e      	movs	r2, #94	; 0x5e
 8005f5e:	5a9b      	ldrh	r3, [r3, r2]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d000      	beq.n	8005f68 <UART_RxISR_8BIT+0x6c>
 8005f66:	e07c      	b.n	8006062 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f68:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f72:	2301      	movs	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			; (mov r8, r8)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4938      	ldr	r1, [pc, #224]	; (800606c <UART_RxISR_8BIT+0x170>)
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f383 8810 	msr	PRIMASK, r3
}
 8005f98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	f383 8810 	msr	PRIMASK, r3
}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2101      	movs	r1, #1
 8005fbc:	438a      	bics	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	f383 8810 	msr	PRIMASK, r3
}
 8005fca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	228c      	movs	r2, #140	; 0x8c
 8005fd0:	2120      	movs	r1, #32
 8005fd2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d12f      	bne.n	8006048 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fee:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f383 8810 	msr	PRIMASK, r3
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2110      	movs	r1, #16
 8006010:	438a      	bics	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2210      	movs	r2, #16
 8006028:	4013      	ands	r3, r2
 800602a:	2b10      	cmp	r3, #16
 800602c:	d103      	bne.n	8006036 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	225c      	movs	r2, #92	; 0x5c
 800603a:	5a9a      	ldrh	r2, [r3, r2]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f7ff f93f 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006046:	e00c      	b.n	8006062 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0018      	movs	r0, r3
 800604c:	f000 fed6 	bl	8006dfc <HAL_UART_RxCpltCallback>
}
 8006050:	e007      	b.n	8006062 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2108      	movs	r1, #8
 800605e:	430a      	orrs	r2, r1
 8006060:	619a      	str	r2, [r3, #24]
}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	46bd      	mov	sp, r7
 8006066:	b010      	add	sp, #64	; 0x40
 8006068:	bd80      	pop	{r7, pc}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	fffffedf 	.word	0xfffffedf

08006070 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b090      	sub	sp, #64	; 0x40
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006078:	203e      	movs	r0, #62	; 0x3e
 800607a:	183b      	adds	r3, r7, r0
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	2160      	movs	r1, #96	; 0x60
 8006080:	5a52      	ldrh	r2, [r2, r1]
 8006082:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	228c      	movs	r2, #140	; 0x8c
 8006088:	589b      	ldr	r3, [r3, r2]
 800608a:	2b22      	cmp	r3, #34	; 0x22
 800608c:	d000      	beq.n	8006090 <UART_RxISR_16BIT+0x20>
 800608e:	e09a      	b.n	80061c6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006096:	213c      	movs	r1, #60	; 0x3c
 8006098:	187b      	adds	r3, r7, r1
 800609a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	183a      	adds	r2, r7, r0
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	8812      	ldrh	r2, [r2, #0]
 80060aa:	4013      	ands	r3, r2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	225e      	movs	r2, #94	; 0x5e
 80060c0:	5a9b      	ldrh	r3, [r3, r2]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b299      	uxth	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	225e      	movs	r2, #94	; 0x5e
 80060cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	225e      	movs	r2, #94	; 0x5e
 80060d2:	5a9b      	ldrh	r3, [r3, r2]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d000      	beq.n	80060dc <UART_RxISR_16BIT+0x6c>
 80060da:	e07c      	b.n	80061d6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060dc:	f3ef 8310 	mrs	r3, PRIMASK
 80060e0:	617b      	str	r3, [r7, #20]
  return(result);
 80060e2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	2301      	movs	r3, #1
 80060e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f383 8810 	msr	PRIMASK, r3
}
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4938      	ldr	r1, [pc, #224]	; (80061e0 <UART_RxISR_16BIT+0x170>)
 80060fe:	400a      	ands	r2, r1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f383 8810 	msr	PRIMASK, r3
}
 800610c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610e:	f3ef 8310 	mrs	r3, PRIMASK
 8006112:	623b      	str	r3, [r7, #32]
  return(result);
 8006114:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
 8006118:	2301      	movs	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	f383 8810 	msr	PRIMASK, r3
}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	f383 8810 	msr	PRIMASK, r3
}
 800613e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	228c      	movs	r2, #140	; 0x8c
 8006144:	2120      	movs	r1, #32
 8006146:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d12f      	bne.n	80061bc <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006162:	f3ef 8310 	mrs	r3, PRIMASK
 8006166:	60bb      	str	r3, [r7, #8]
  return(result);
 8006168:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616c:	2301      	movs	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f383 8810 	msr	PRIMASK, r3
}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2110      	movs	r1, #16
 8006184:	438a      	bics	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2210      	movs	r2, #16
 800619c:	4013      	ands	r3, r2
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d103      	bne.n	80061aa <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2210      	movs	r2, #16
 80061a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	225c      	movs	r2, #92	; 0x5c
 80061ae:	5a9a      	ldrh	r2, [r3, r2]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0011      	movs	r1, r2
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff f885 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ba:	e00c      	b.n	80061d6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 fe1c 	bl	8006dfc <HAL_UART_RxCpltCallback>
}
 80061c4:	e007      	b.n	80061d6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2108      	movs	r1, #8
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	46bd      	mov	sp, r7
 80061da:	b010      	add	sp, #64	; 0x40
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	fffffedf 	.word	0xfffffedf

080061e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b09c      	sub	sp, #112	; 0x70
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80061ec:	236a      	movs	r3, #106	; 0x6a
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	2160      	movs	r1, #96	; 0x60
 80061f4:	5a52      	ldrh	r2, [r2, r1]
 80061f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	228c      	movs	r2, #140	; 0x8c
 8006214:	589b      	ldr	r3, [r3, r2]
 8006216:	2b22      	cmp	r3, #34	; 0x22
 8006218:	d000      	beq.n	800621c <UART_RxISR_8BIT_FIFOEN+0x38>
 800621a:	e144      	b.n	80064a6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800621c:	235e      	movs	r3, #94	; 0x5e
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	2168      	movs	r1, #104	; 0x68
 8006224:	5a52      	ldrh	r2, [r2, r1]
 8006226:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006228:	e0eb      	b.n	8006402 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006230:	215c      	movs	r1, #92	; 0x5c
 8006232:	187b      	adds	r3, r7, r1
 8006234:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006236:	187b      	adds	r3, r7, r1
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b2da      	uxtb	r2, r3
 800623c:	236a      	movs	r3, #106	; 0x6a
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b2d9      	uxtb	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006248:	400a      	ands	r2, r1
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	225e      	movs	r2, #94	; 0x5e
 800625c:	5a9b      	ldrh	r3, [r3, r2]
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b299      	uxth	r1, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	225e      	movs	r2, #94	; 0x5e
 8006268:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	2207      	movs	r2, #7
 8006276:	4013      	ands	r3, r2
 8006278:	d049      	beq.n	800630e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	2201      	movs	r2, #1
 800627e:	4013      	ands	r3, r2
 8006280:	d010      	beq.n	80062a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006282:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d00b      	beq.n	80062a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2290      	movs	r2, #144	; 0x90
 8006298:	589b      	ldr	r3, [r3, r2]
 800629a:	2201      	movs	r2, #1
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2190      	movs	r1, #144	; 0x90
 80062a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	d00f      	beq.n	80062cc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80062ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ae:	2201      	movs	r2, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00b      	beq.n	80062cc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2202      	movs	r2, #2
 80062ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2290      	movs	r2, #144	; 0x90
 80062c0:	589b      	ldr	r3, [r3, r2]
 80062c2:	2204      	movs	r2, #4
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2190      	movs	r1, #144	; 0x90
 80062ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ce:	2204      	movs	r2, #4
 80062d0:	4013      	ands	r3, r2
 80062d2:	d00f      	beq.n	80062f4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80062d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d6:	2201      	movs	r2, #1
 80062d8:	4013      	ands	r3, r2
 80062da:	d00b      	beq.n	80062f4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2204      	movs	r2, #4
 80062e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2290      	movs	r2, #144	; 0x90
 80062e8:	589b      	ldr	r3, [r3, r2]
 80062ea:	2202      	movs	r2, #2
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2190      	movs	r1, #144	; 0x90
 80062f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2290      	movs	r2, #144	; 0x90
 80062f8:	589b      	ldr	r3, [r3, r2]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0018      	movs	r0, r3
 8006302:	f7fe ffd7 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2290      	movs	r2, #144	; 0x90
 800630a:	2100      	movs	r1, #0
 800630c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	225e      	movs	r2, #94	; 0x5e
 8006312:	5a9b      	ldrh	r3, [r3, r2]
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d173      	bne.n	8006402 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631a:	f3ef 8310 	mrs	r3, PRIMASK
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006322:	65bb      	str	r3, [r7, #88]	; 0x58
 8006324:	2301      	movs	r3, #1
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	f383 8810 	msr	PRIMASK, r3
}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4961      	ldr	r1, [pc, #388]	; (80064c0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800633c:	400a      	ands	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006354:	657b      	str	r3, [r7, #84]	; 0x54
 8006356:	2301      	movs	r3, #1
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4955      	ldr	r1, [pc, #340]	; (80064c4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800636e:	400a      	ands	r2, r1
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006374:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006378:	f383 8810 	msr	PRIMASK, r3
}
 800637c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	228c      	movs	r2, #140	; 0x8c
 8006382:	2120      	movs	r1, #32
 8006384:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d12f      	bne.n	80063fa <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a0:	f3ef 8310 	mrs	r3, PRIMASK
 80063a4:	623b      	str	r3, [r7, #32]
  return(result);
 80063a6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
 80063aa:	2301      	movs	r3, #1
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	f383 8810 	msr	PRIMASK, r3
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2110      	movs	r1, #16
 80063c2:	438a      	bics	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	f383 8810 	msr	PRIMASK, r3
}
 80063d0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	2210      	movs	r2, #16
 80063da:	4013      	ands	r3, r2
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d103      	bne.n	80063e8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2210      	movs	r2, #16
 80063e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	225c      	movs	r2, #92	; 0x5c
 80063ec:	5a9a      	ldrh	r2, [r3, r2]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f7fe ff66 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
 80063f8:	e003      	b.n	8006402 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fcfd 	bl	8006dfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006402:	235e      	movs	r3, #94	; 0x5e
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <UART_RxISR_8BIT_FIFOEN+0x232>
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	2220      	movs	r2, #32
 8006410:	4013      	ands	r3, r2
 8006412:	d000      	beq.n	8006416 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006414:	e709      	b.n	800622a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006416:	204e      	movs	r0, #78	; 0x4e
 8006418:	183b      	adds	r3, r7, r0
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	215e      	movs	r1, #94	; 0x5e
 800641e:	5a52      	ldrh	r2, [r2, r1]
 8006420:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006422:	0001      	movs	r1, r0
 8006424:	187b      	adds	r3, r7, r1
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d044      	beq.n	80064b6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2268      	movs	r2, #104	; 0x68
 8006430:	5a9b      	ldrh	r3, [r3, r2]
 8006432:	187a      	adds	r2, r7, r1
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d23d      	bcs.n	80064b6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006440:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
 8006444:	2301      	movs	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f383 8810 	msr	PRIMASK, r3
}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	491b      	ldr	r1, [pc, #108]	; (80064c8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800645c:	400a      	ands	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f383 8810 	msr	PRIMASK, r3
}
 800646a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8006470:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	617b      	str	r3, [r7, #20]
  return(result);
 8006478:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
 800647c:	2301      	movs	r3, #1
 800647e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f383 8810 	msr	PRIMASK, r3
}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2120      	movs	r1, #32
 8006494:	430a      	orrs	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064a4:	e007      	b.n	80064b6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2108      	movs	r1, #8
 80064b2:	430a      	orrs	r2, r1
 80064b4:	619a      	str	r2, [r3, #24]
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b01c      	add	sp, #112	; 0x70
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	fffffeff 	.word	0xfffffeff
 80064c4:	effffffe 	.word	0xeffffffe
 80064c8:	efffffff 	.word	0xefffffff
 80064cc:	08005efd 	.word	0x08005efd

080064d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b09e      	sub	sp, #120	; 0x78
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80064d8:	2372      	movs	r3, #114	; 0x72
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	2160      	movs	r1, #96	; 0x60
 80064e0:	5a52      	ldrh	r2, [r2, r1]
 80064e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	228c      	movs	r2, #140	; 0x8c
 8006500:	589b      	ldr	r3, [r3, r2]
 8006502:	2b22      	cmp	r3, #34	; 0x22
 8006504:	d000      	beq.n	8006508 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006506:	e144      	b.n	8006792 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006508:	2366      	movs	r3, #102	; 0x66
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	2168      	movs	r1, #104	; 0x68
 8006510:	5a52      	ldrh	r2, [r2, r1]
 8006512:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006514:	e0eb      	b.n	80066ee <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800651c:	2164      	movs	r1, #100	; 0x64
 800651e:	187b      	adds	r3, r7, r1
 8006520:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006528:	187b      	adds	r3, r7, r1
 800652a:	2272      	movs	r2, #114	; 0x72
 800652c:	18ba      	adds	r2, r7, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	8812      	ldrh	r2, [r2, #0]
 8006532:	4013      	ands	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006538:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	225e      	movs	r2, #94	; 0x5e
 8006548:	5a9b      	ldrh	r3, [r3, r2]
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b299      	uxth	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	225e      	movs	r2, #94	; 0x5e
 8006554:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800655e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006560:	2207      	movs	r2, #7
 8006562:	4013      	ands	r3, r2
 8006564:	d049      	beq.n	80065fa <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006568:	2201      	movs	r2, #1
 800656a:	4013      	ands	r3, r2
 800656c:	d010      	beq.n	8006590 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800656e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	4013      	ands	r3, r2
 8006576:	d00b      	beq.n	8006590 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2290      	movs	r2, #144	; 0x90
 8006584:	589b      	ldr	r3, [r3, r2]
 8006586:	2201      	movs	r2, #1
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2190      	movs	r1, #144	; 0x90
 800658e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006592:	2202      	movs	r2, #2
 8006594:	4013      	ands	r3, r2
 8006596:	d00f      	beq.n	80065b8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800659a:	2201      	movs	r2, #1
 800659c:	4013      	ands	r3, r2
 800659e:	d00b      	beq.n	80065b8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2202      	movs	r2, #2
 80065a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2290      	movs	r2, #144	; 0x90
 80065ac:	589b      	ldr	r3, [r3, r2]
 80065ae:	2204      	movs	r2, #4
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2190      	movs	r1, #144	; 0x90
 80065b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ba:	2204      	movs	r2, #4
 80065bc:	4013      	ands	r3, r2
 80065be:	d00f      	beq.n	80065e0 <UART_RxISR_16BIT_FIFOEN+0x110>
 80065c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c2:	2201      	movs	r2, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2204      	movs	r2, #4
 80065ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2290      	movs	r2, #144	; 0x90
 80065d4:	589b      	ldr	r3, [r3, r2]
 80065d6:	2202      	movs	r2, #2
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2190      	movs	r1, #144	; 0x90
 80065de:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2290      	movs	r2, #144	; 0x90
 80065e4:	589b      	ldr	r3, [r3, r2]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7fe fe61 	bl	80052b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2290      	movs	r2, #144	; 0x90
 80065f6:	2100      	movs	r1, #0
 80065f8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	225e      	movs	r2, #94	; 0x5e
 80065fe:	5a9b      	ldrh	r3, [r3, r2]
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d173      	bne.n	80066ee <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006606:	f3ef 8310 	mrs	r3, PRIMASK
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800660e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006610:	2301      	movs	r3, #1
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	f383 8810 	msr	PRIMASK, r3
}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4961      	ldr	r1, [pc, #388]	; (80067ac <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006628:	400a      	ands	r2, r1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	f383 8810 	msr	PRIMASK, r3
}
 8006636:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006638:	f3ef 8310 	mrs	r3, PRIMASK
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006640:	65bb      	str	r3, [r7, #88]	; 0x58
 8006642:	2301      	movs	r3, #1
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006648:	f383 8810 	msr	PRIMASK, r3
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4955      	ldr	r1, [pc, #340]	; (80067b0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800665a:	400a      	ands	r2, r1
 800665c:	609a      	str	r2, [r3, #8]
 800665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006664:	f383 8810 	msr	PRIMASK, r3
}
 8006668:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	228c      	movs	r2, #140	; 0x8c
 800666e:	2120      	movs	r1, #32
 8006670:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d12f      	bne.n	80066e6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668c:	f3ef 8310 	mrs	r3, PRIMASK
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	657b      	str	r3, [r7, #84]	; 0x54
 8006696:	2301      	movs	r3, #1
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	f383 8810 	msr	PRIMASK, r3
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2110      	movs	r1, #16
 80066ae:	438a      	bics	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	2210      	movs	r2, #16
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d103      	bne.n	80066d4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2210      	movs	r2, #16
 80066d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	225c      	movs	r2, #92	; 0x5c
 80066d8:	5a9a      	ldrh	r2, [r3, r2]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f7fe fdf0 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
 80066e4:	e003      	b.n	80066ee <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 fb87 	bl	8006dfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066ee:	2366      	movs	r3, #102	; 0x66
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <UART_RxISR_16BIT_FIFOEN+0x232>
 80066f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066fa:	2220      	movs	r2, #32
 80066fc:	4013      	ands	r3, r2
 80066fe:	d000      	beq.n	8006702 <UART_RxISR_16BIT_FIFOEN+0x232>
 8006700:	e709      	b.n	8006516 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006702:	2052      	movs	r0, #82	; 0x52
 8006704:	183b      	adds	r3, r7, r0
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	215e      	movs	r1, #94	; 0x5e
 800670a:	5a52      	ldrh	r2, [r2, r1]
 800670c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800670e:	0001      	movs	r1, r0
 8006710:	187b      	adds	r3, r7, r1
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d044      	beq.n	80067a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2268      	movs	r2, #104	; 0x68
 800671c:	5a9b      	ldrh	r3, [r3, r2]
 800671e:	187a      	adds	r2, r7, r1
 8006720:	8812      	ldrh	r2, [r2, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d23d      	bcs.n	80067a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006726:	f3ef 8310 	mrs	r3, PRIMASK
 800672a:	60fb      	str	r3, [r7, #12]
  return(result);
 800672c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	2301      	movs	r3, #1
 8006732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	491b      	ldr	r1, [pc, #108]	; (80067b4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006748:	400a      	ands	r2, r1
 800674a:	609a      	str	r2, [r3, #8]
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800675c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	61bb      	str	r3, [r7, #24]
  return(result);
 8006764:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006766:	64bb      	str	r3, [r7, #72]	; 0x48
 8006768:	2301      	movs	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2120      	movs	r1, #32
 8006780:	430a      	orrs	r2, r1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006786:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	f383 8810 	msr	PRIMASK, r3
}
 800678e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006790:	e007      	b.n	80067a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2108      	movs	r1, #8
 800679e:	430a      	orrs	r2, r1
 80067a0:	619a      	str	r2, [r3, #24]
}
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b01e      	add	sp, #120	; 0x78
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	fffffeff 	.word	0xfffffeff
 80067b0:	effffffe 	.word	0xeffffffe
 80067b4:	efffffff 	.word	0xefffffff
 80067b8:	08006071 	.word	0x08006071

080067bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}

080067ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067f0:	f7fa fd70 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067f4:	f000 f84a 	bl	800688c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067f8:	f000 fa9e 	bl	8006d38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80067fc:	f000 fa68 	bl	8006cd0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8006800:	f000 f8a2 	bl	8006948 <MX_ADC1_Init>
  MX_TIM1_Init();
 8006804:	f000 f90c 	bl	8006a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8006808:	f000 f9e6 	bl	8006bd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Initialize PWM Channel 1
 800680c:	4b17      	ldr	r3, [pc, #92]	; (800686c <main+0x80>)
 800680e:	2100      	movs	r1, #0
 8006810:	0018      	movs	r0, r3
 8006812:	f7fd f93d 	bl	8003a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Initialize PWM Channel 2
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <main+0x80>)
 8006818:	2104      	movs	r1, #4
 800681a:	0018      	movs	r0, r3
 800681c:	f7fd f938 	bl	8003a90 <HAL_TIM_PWM_Start>


  UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "STM32-SMPS Initialized!\r\n");	 // Transmit UART Startup message
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <main+0x84>)
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <main+0x88>)
 8006824:	0011      	movs	r1, r2
 8006826:	0018      	movs	r0, r3
 8006828:	f000 feda 	bl	80075e0 <siprintf>
 800682c:	0003      	movs	r3, r0
 800682e:	b29a      	uxth	r2, r3
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <main+0x8c>)
 8006832:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
 8006834:	4b10      	ldr	r3, [pc, #64]	; (8006878 <main+0x8c>)
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	490e      	ldr	r1, [pc, #56]	; (8006874 <main+0x88>)
 800683a:	4810      	ldr	r0, [pc, #64]	; (800687c <main+0x90>)
 800683c:	2364      	movs	r3, #100	; 0x64
 800683e:	f7fe f911 	bl	8004a64 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4);		// Initialize UART Interrupt transmission
 8006842:	490f      	ldr	r1, [pc, #60]	; (8006880 <main+0x94>)
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <main+0x90>)
 8006846:	2204      	movs	r2, #4
 8006848:	0018      	movs	r0, r3
 800684a:	f7fe f9a7 	bl	8004b9c <HAL_UART_Receive_IT>
  	  // Set to receive 4 bytes (123\n)
  	  // Consider replacing with DMA based receive?

  HAL_ADCEx_Calibration_Start(&hadc1);
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <main+0x98>)
 8006850:	0018      	movs	r0, r3
 8006852:	f7fb fdb9 	bl	80023c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <main+0x98>)
 8006858:	0018      	movs	r0, r3
 800685a:	f7fb f8cd 	bl	80019f8 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <main+0x9c>)
 8006860:	2100      	movs	r1, #0
 8006862:	0018      	movs	r0, r3
 8006864:	f7fd f914 	bl	8003a90 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006868:	e7fe      	b.n	8006868 <main+0x7c>
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	2000010c 	.word	0x2000010c
 8006870:	08008000 	.word	0x08008000
 8006874:	20000238 	.word	0x20000238
 8006878:	2000029c 	.word	0x2000029c
 800687c:	200001a4 	.word	0x200001a4
 8006880:	200002a0 	.word	0x200002a0
 8006884:	200000a8 	.word	0x200000a8
 8006888:	20000158 	.word	0x20000158

0800688c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b093      	sub	sp, #76	; 0x4c
 8006890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006892:	2410      	movs	r4, #16
 8006894:	193b      	adds	r3, r7, r4
 8006896:	0018      	movs	r0, r3
 8006898:	2338      	movs	r3, #56	; 0x38
 800689a:	001a      	movs	r2, r3
 800689c:	2100      	movs	r1, #0
 800689e:	f000 fe97 	bl	80075d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80068a2:	003b      	movs	r3, r7
 80068a4:	0018      	movs	r0, r3
 80068a6:	2310      	movs	r3, #16
 80068a8:	001a      	movs	r2, r3
 80068aa:	2100      	movs	r1, #0
 80068ac:	f000 fe90 	bl	80075d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7fc f9a9 	bl	8002c0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80068ba:	193b      	adds	r3, r7, r4
 80068bc:	2202      	movs	r2, #2
 80068be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80068c0:	193b      	adds	r3, r7, r4
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	0052      	lsls	r2, r2, #1
 80068c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80068c8:	0021      	movs	r1, r4
 80068ca:	187b      	adds	r3, r7, r1
 80068cc:	2200      	movs	r2, #0
 80068ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80068d0:	187b      	adds	r3, r7, r1
 80068d2:	2240      	movs	r2, #64	; 0x40
 80068d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80068d6:	187b      	adds	r3, r7, r1
 80068d8:	2202      	movs	r2, #2
 80068da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	2202      	movs	r2, #2
 80068e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80068e2:	187b      	adds	r3, r7, r1
 80068e4:	2200      	movs	r2, #0
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	2210      	movs	r2, #16
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80068ee:	187b      	adds	r3, r7, r1
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	0292      	lsls	r2, r2, #10
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80068f6:	187b      	adds	r3, r7, r1
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	0492      	lsls	r2, r2, #18
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80068fe:	187b      	adds	r3, r7, r1
 8006900:	22c0      	movs	r2, #192	; 0xc0
 8006902:	05d2      	lsls	r2, r2, #23
 8006904:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006906:	187b      	adds	r3, r7, r1
 8006908:	0018      	movs	r0, r3
 800690a:	f7fc f9cb 	bl	8002ca4 <HAL_RCC_OscConfig>
 800690e:	1e03      	subs	r3, r0, #0
 8006910:	d001      	beq.n	8006916 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006912:	f000 fc47 	bl	80071a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006916:	003b      	movs	r3, r7
 8006918:	2207      	movs	r2, #7
 800691a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800691c:	003b      	movs	r3, r7
 800691e:	2202      	movs	r2, #2
 8006920:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006922:	003b      	movs	r3, r7
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006928:	003b      	movs	r3, r7
 800692a:	2200      	movs	r2, #0
 800692c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800692e:	003b      	movs	r3, r7
 8006930:	2102      	movs	r1, #2
 8006932:	0018      	movs	r0, r3
 8006934:	f7fc fcd0 	bl	80032d8 <HAL_RCC_ClockConfig>
 8006938:	1e03      	subs	r3, r0, #0
 800693a:	d001      	beq.n	8006940 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800693c:	f000 fc32 	bl	80071a4 <Error_Handler>
  }
}
 8006940:	46c0      	nop			; (mov r8, r8)
 8006942:	46bd      	mov	sp, r7
 8006944:	b013      	add	sp, #76	; 0x4c
 8006946:	bd90      	pop	{r4, r7, pc}

08006948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	0018      	movs	r0, r3
 8006952:	230c      	movs	r3, #12
 8006954:	001a      	movs	r2, r3
 8006956:	2100      	movs	r1, #0
 8006958:	f000 fe3a 	bl	80075d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800695c:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <MX_ADC1_Init+0xd0>)
 800695e:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <MX_ADC1_Init+0xd4>)
 8006960:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006962:	4b2d      	ldr	r3, [pc, #180]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	05d2      	lsls	r2, r2, #23
 8006968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800696a:	4b2b      	ldr	r3, [pc, #172]	; (8006a18 <MX_ADC1_Init+0xd0>)
 800696c:	2200      	movs	r2, #0
 800696e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006970:	4b29      	ldr	r3, [pc, #164]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006972:	2200      	movs	r2, #0
 8006974:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006976:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006978:	2200      	movs	r2, #0
 800697a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <MX_ADC1_Init+0xd0>)
 800697e:	2204      	movs	r2, #4
 8006980:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006982:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006984:	2200      	movs	r2, #0
 8006986:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006988:	4b23      	ldr	r3, [pc, #140]	; (8006a18 <MX_ADC1_Init+0xd0>)
 800698a:	2200      	movs	r2, #0
 800698c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800698e:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006990:	2200      	movs	r2, #0
 8006992:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006996:	2201      	movs	r2, #1
 8006998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800699a:	4b1f      	ldr	r3, [pc, #124]	; (8006a18 <MX_ADC1_Init+0xd0>)
 800699c:	2220      	movs	r2, #32
 800699e:	2100      	movs	r1, #0
 80069a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069a4:	2290      	movs	r2, #144	; 0x90
 80069a6:	00d2      	lsls	r2, r2, #3
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80069aa:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	00d2      	lsls	r2, r2, #3
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80069b2:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069b4:	222c      	movs	r2, #44	; 0x2c
 80069b6:	2100      	movs	r1, #0
 80069b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80069c0:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069c2:	2207      	movs	r2, #7
 80069c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80069c6:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069c8:	2207      	movs	r2, #7
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80069cc:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069ce:	223c      	movs	r2, #60	; 0x3c
 80069d0:	2100      	movs	r1, #0
 80069d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80069da:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <MX_ADC1_Init+0xd0>)
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fa fe63 	bl	80016a8 <HAL_ADC_Init>
 80069e2:	1e03      	subs	r3, r0, #0
 80069e4:	d001      	beq.n	80069ea <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80069e6:	f000 fbdd 	bl	80071a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	2200      	movs	r2, #0
 80069f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	2200      	movs	r2, #0
 80069fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80069fc:	1d3a      	adds	r2, r7, #4
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <MX_ADC1_Init+0xd0>)
 8006a00:	0011      	movs	r1, r2
 8006a02:	0018      	movs	r0, r3
 8006a04:	f7fb f9a4 	bl	8001d50 <HAL_ADC_ConfigChannel>
 8006a08:	1e03      	subs	r3, r0, #0
 8006a0a:	d001      	beq.n	8006a10 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006a0c:	f000 fbca 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b004      	add	sp, #16
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200000a8 	.word	0x200000a8
 8006a1c:	40012400 	.word	0x40012400

08006a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b09c      	sub	sp, #112	; 0x70
 8006a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a26:	2360      	movs	r3, #96	; 0x60
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	001a      	movs	r2, r3
 8006a30:	2100      	movs	r1, #0
 8006a32:	f000 fdcd 	bl	80075d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a36:	2354      	movs	r3, #84	; 0x54
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	001a      	movs	r2, r3
 8006a40:	2100      	movs	r1, #0
 8006a42:	f000 fdc5 	bl	80075d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a46:	2338      	movs	r3, #56	; 0x38
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	231c      	movs	r3, #28
 8006a4e:	001a      	movs	r2, r3
 8006a50:	2100      	movs	r1, #0
 8006a52:	f000 fdbd 	bl	80075d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	0018      	movs	r0, r3
 8006a5a:	2334      	movs	r3, #52	; 0x34
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2100      	movs	r1, #0
 8006a60:	f000 fdb6 	bl	80075d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006a64:	4b5a      	ldr	r3, [pc, #360]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a66:	4a5b      	ldr	r2, [pc, #364]	; (8006bd4 <MX_TIM1_Init+0x1b4>)
 8006a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006a6a:	4b59      	ldr	r3, [pc, #356]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006a70:	4b57      	ldr	r3, [pc, #348]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a72:	2220      	movs	r2, #32
 8006a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 8006a76:	4b56      	ldr	r3, [pc, #344]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a78:	22a0      	movs	r2, #160	; 0xa0
 8006a7a:	0092      	lsls	r2, r2, #2
 8006a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a7e:	4b54      	ldr	r3, [pc, #336]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006a84:	4b52      	ldr	r3, [pc, #328]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a8a:	4b51      	ldr	r3, [pc, #324]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006a90:	4b4f      	ldr	r3, [pc, #316]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fc ff44 	bl	8003920 <HAL_TIM_Base_Init>
 8006a98:	1e03      	subs	r3, r0, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8006a9c:	f000 fb82 	bl	80071a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aa0:	2160      	movs	r1, #96	; 0x60
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	0152      	lsls	r2, r2, #5
 8006aa8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006aaa:	187a      	adds	r2, r7, r1
 8006aac:	4b48      	ldr	r3, [pc, #288]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7fd f9cb 	bl	8003e4c <HAL_TIM_ConfigClockSource>
 8006ab6:	1e03      	subs	r3, r0, #0
 8006ab8:	d001      	beq.n	8006abe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8006aba:	f000 fb73 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006abe:	4b44      	ldr	r3, [pc, #272]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7fc ff85 	bl	80039d0 <HAL_TIM_PWM_Init>
 8006ac6:	1e03      	subs	r3, r0, #0
 8006ac8:	d001      	beq.n	8006ace <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8006aca:	f000 fb6b 	bl	80071a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ace:	2154      	movs	r1, #84	; 0x54
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006ad6:	187b      	adds	r3, r7, r1
 8006ad8:	2200      	movs	r2, #0
 8006ada:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006adc:	187b      	adds	r3, r7, r1
 8006ade:	2200      	movs	r2, #0
 8006ae0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006ae2:	187a      	adds	r2, r7, r1
 8006ae4:	4b3a      	ldr	r3, [pc, #232]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fd fe57 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8006aee:	1e03      	subs	r3, r0, #0
 8006af0:	d001      	beq.n	8006af6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8006af2:	f000 fb57 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006af6:	2138      	movs	r1, #56	; 0x38
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	2260      	movs	r2, #96	; 0x60
 8006afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 160;
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	22a0      	movs	r2, #160	; 0xa0
 8006b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	2204      	movs	r2, #4
 8006b14:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	2200      	movs	r2, #0
 8006b1a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006b1c:	187b      	adds	r3, r7, r1
 8006b1e:	2200      	movs	r2, #0
 8006b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b22:	1879      	adds	r1, r7, r1
 8006b24:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7fd f88f 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 8006b2e:	1e03      	subs	r3, r0, #0
 8006b30:	d001      	beq.n	8006b36 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8006b32:	f000 fb37 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.Pulse = 480;
 8006b36:	2138      	movs	r1, #56	; 0x38
 8006b38:	187b      	adds	r3, r7, r1
 8006b3a:	22f0      	movs	r2, #240	; 0xf0
 8006b3c:	0052      	lsls	r2, r2, #1
 8006b3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006b40:	187b      	adds	r3, r7, r1
 8006b42:	2202      	movs	r2, #2
 8006b44:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006b46:	1879      	adds	r1, r7, r1
 8006b48:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7fd f87d 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d001      	beq.n	8006b5a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8006b56:	f000 fb25 	bl	80071a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006b60:	1d3b      	adds	r3, r7, #4
 8006b62:	2200      	movs	r2, #0
 8006b64:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	2200      	movs	r2, #0
 8006b6a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006b6c:	1d3b      	adds	r3, r7, #4
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	2200      	movs	r2, #0
 8006b76:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	2280      	movs	r2, #128	; 0x80
 8006b7c:	0192      	lsls	r2, r2, #6
 8006b7e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	2200      	movs	r2, #0
 8006b84:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	2200      	movs	r2, #0
 8006b8a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	2200      	movs	r2, #0
 8006b90:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	0492      	lsls	r2, r2, #18
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006bac:	1d3a      	adds	r2, r7, #4
 8006bae:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006bb0:	0011      	movs	r1, r2
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7fd fe5a 	bl	800486c <HAL_TIMEx_ConfigBreakDeadTime>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d001      	beq.n	8006bc0 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 8006bbc:	f000 faf2 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <MX_TIM1_Init+0x1b0>)
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f000 fbae 	bl	8007324 <HAL_TIM_MspPostInit>

}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b01c      	add	sp, #112	; 0x70
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	2000010c 	.word	0x2000010c
 8006bd4:	40012c00 	.word	0x40012c00

08006bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	; 0x38
 8006bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bde:	2328      	movs	r3, #40	; 0x28
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	0018      	movs	r0, r3
 8006be4:	2310      	movs	r3, #16
 8006be6:	001a      	movs	r2, r3
 8006be8:	2100      	movs	r1, #0
 8006bea:	f000 fcf1 	bl	80075d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bee:	231c      	movs	r3, #28
 8006bf0:	18fb      	adds	r3, r7, r3
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f000 fce9 	bl	80075d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bfe:	003b      	movs	r3, r7
 8006c00:	0018      	movs	r0, r3
 8006c02:	231c      	movs	r3, #28
 8006c04:	001a      	movs	r2, r3
 8006c06:	2100      	movs	r1, #0
 8006c08:	f000 fce2 	bl	80075d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	05d2      	lsls	r2, r2, #23
 8006c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006c14:	4b2d      	ldr	r3, [pc, #180]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c1a:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 640;
 8006c20:	4b2a      	ldr	r3, [pc, #168]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c22:	22a0      	movs	r2, #160	; 0xa0
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c28:	4b28      	ldr	r3, [pc, #160]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c2e:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006c34:	4b25      	ldr	r3, [pc, #148]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c36:	0018      	movs	r0, r3
 8006c38:	f7fc fe72 	bl	8003920 <HAL_TIM_Base_Init>
 8006c3c:	1e03      	subs	r3, r0, #0
 8006c3e:	d001      	beq.n	8006c44 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8006c40:	f000 fab0 	bl	80071a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c44:	2128      	movs	r1, #40	; 0x28
 8006c46:	187b      	adds	r3, r7, r1
 8006c48:	2280      	movs	r2, #128	; 0x80
 8006c4a:	0152      	lsls	r2, r2, #5
 8006c4c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006c4e:	187a      	adds	r2, r7, r1
 8006c50:	4b1e      	ldr	r3, [pc, #120]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7fd f8f9 	bl	8003e4c <HAL_TIM_ConfigClockSource>
 8006c5a:	1e03      	subs	r3, r0, #0
 8006c5c:	d001      	beq.n	8006c62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006c5e:	f000 faa1 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7fc feb3 	bl	80039d0 <HAL_TIM_PWM_Init>
 8006c6a:	1e03      	subs	r3, r0, #0
 8006c6c:	d001      	beq.n	8006c72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8006c6e:	f000 fa99 	bl	80071a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006c72:	211c      	movs	r1, #28
 8006c74:	187b      	adds	r3, r7, r1
 8006c76:	2220      	movs	r2, #32
 8006c78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c7a:	187b      	adds	r3, r7, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c80:	187a      	adds	r2, r7, r1
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006c84:	0011      	movs	r1, r2
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fd fd88 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8006c8c:	1e03      	subs	r3, r0, #0
 8006c8e:	d001      	beq.n	8006c94 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8006c90:	f000 fa88 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c94:	003b      	movs	r3, r7
 8006c96:	2260      	movs	r2, #96	; 0x60
 8006c98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 320;
 8006c9a:	003b      	movs	r3, r7
 8006c9c:	22a0      	movs	r2, #160	; 0xa0
 8006c9e:	0052      	lsls	r2, r2, #1
 8006ca0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ca2:	003b      	movs	r3, r7
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006ca8:	003b      	movs	r3, r7
 8006caa:	2204      	movs	r2, #4
 8006cac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cae:	0039      	movs	r1, r7
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <MX_TIM2_Init+0xf4>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7fc ffc9 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 8006cba:	1e03      	subs	r3, r0, #0
 8006cbc:	d001      	beq.n	8006cc2 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8006cbe:	f000 fa71 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b00e      	add	sp, #56	; 0x38
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	20000158 	.word	0x20000158

08006cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006cd4:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <MX_USART2_UART_Init+0x64>)
 8006cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cdc:	22e1      	movs	r2, #225	; 0xe1
 8006cde:	0252      	lsls	r2, r2, #9
 8006ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cf6:	220c      	movs	r2, #12
 8006cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <MX_USART2_UART_Init+0x60>)
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7fd fe4c 	bl	80049b8 <HAL_UART_Init>
 8006d20:	1e03      	subs	r3, r0, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006d24:	f000 fa3e 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006d28:	46c0      	nop			; (mov r8, r8)
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	200001a4 	.word	0x200001a4
 8006d34:	40004400 	.word	0x40004400

08006d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b089      	sub	sp, #36	; 0x24
 8006d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d3e:	240c      	movs	r4, #12
 8006d40:	193b      	adds	r3, r7, r4
 8006d42:	0018      	movs	r0, r3
 8006d44:	2314      	movs	r3, #20
 8006d46:	001a      	movs	r2, r3
 8006d48:	2100      	movs	r1, #0
 8006d4a:	f000 fc41 	bl	80075d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d4e:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d52:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d54:	2104      	movs	r1, #4
 8006d56:	430a      	orrs	r2, r1
 8006d58:	635a      	str	r2, [r3, #52]	; 0x34
 8006d5a:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5e:	2204      	movs	r2, #4
 8006d60:	4013      	ands	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d66:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d6c:	2120      	movs	r1, #32
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	635a      	str	r2, [r3, #52]	; 0x34
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	2220      	movs	r2, #32
 8006d78:	4013      	ands	r3, r2
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d82:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d84:	2101      	movs	r1, #1
 8006d86:	430a      	orrs	r2, r1
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <MX_GPIO_Init+0xb8>)
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4013      	ands	r3, r2
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006d96:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <MX_GPIO_Init+0xbc>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2140      	movs	r1, #64	; 0x40
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7fb ff17 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8006da2:	193b      	adds	r3, r7, r4
 8006da4:	2204      	movs	r2, #4
 8006da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	2288      	movs	r2, #136	; 0x88
 8006dac:	0352      	lsls	r2, r2, #13
 8006dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	193b      	adds	r3, r7, r4
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	4a0f      	ldr	r2, [pc, #60]	; (8006df8 <MX_GPIO_Init+0xc0>)
 8006dba:	0019      	movs	r1, r3
 8006dbc:	0010      	movs	r0, r2
 8006dbe:	f7fb fda3 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006dc2:	0021      	movs	r1, r4
 8006dc4:	187b      	adds	r3, r7, r1
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dca:	187b      	adds	r3, r7, r1
 8006dcc:	2201      	movs	r2, #1
 8006dce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	2200      	movs	r2, #0
 8006dda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006ddc:	187b      	adds	r3, r7, r1
 8006dde:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <MX_GPIO_Init+0xbc>)
 8006de0:	0019      	movs	r1, r3
 8006de2:	0010      	movs	r0, r2
 8006de4:	f7fb fd90 	bl	8002908 <HAL_GPIO_Init>

}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b009      	add	sp, #36	; 0x24
 8006dee:	bd90      	pop	{r4, r7, pc}
 8006df0:	40021000 	.word	0x40021000
 8006df4:	50000800 	.word	0x50000800
 8006df8:	50001400 	.word	0x50001400

08006dfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	// Interrupt when buffer is full ("213\n"
    ADCFlag = 0;	// Disable ADC control
 8006e04:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <HAL_UART_RxCpltCallback+0x90>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
	pulsewidth= atoi(UART_RX_BUFF); // Convert buffer to received value
 8006e0a:	4b21      	ldr	r3, [pc, #132]	; (8006e90 <HAL_UART_RxCpltCallback+0x94>)
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f000 fbae 	bl	800756e <atoi>
 8006e12:	0003      	movs	r3, r0
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e18:	801a      	strh	r2, [r3, #0]
    if(pulsewidth > PULSE_MAX)	//
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	001a      	movs	r2, r3
 8006e20:	233c      	movs	r3, #60	; 0x3c
 8006e22:	33ff      	adds	r3, #255	; 0xff
 8006e24:	429a      	cmp	r2, r3
 8006e26:	dd07      	ble.n	8006e38 <HAL_UART_RxCpltCallback+0x3c>
    {
    	pulsewidth = PULSE_MAX;	// If pulsewidth is given as larger than max, set to max
 8006e28:	233c      	movs	r3, #60	; 0x3c
 8006e2a:	33ff      	adds	r3, #255	; 0xff
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e30:	801a      	strh	r2, [r3, #0]
    	ADCFlag=1;	// And enable ADC Control
 8006e32:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <HAL_UART_RxCpltCallback+0x90>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
    }
    UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "Pulse width: %d\r\n", pulsewidth);
 8006e38:	4b16      	ldr	r3, [pc, #88]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	4916      	ldr	r1, [pc, #88]	; (8006e98 <HAL_UART_RxCpltCallback+0x9c>)
 8006e40:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <HAL_UART_RxCpltCallback+0xa0>)
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 fbcc 	bl	80075e0 <siprintf>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <HAL_UART_RxCpltCallback+0xa4>)
 8006e4e:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100); // Echo pulse width
 8006e50:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <HAL_UART_RxCpltCallback+0xa4>)
 8006e52:	881a      	ldrh	r2, [r3, #0]
 8006e54:	4911      	ldr	r1, [pc, #68]	; (8006e9c <HAL_UART_RxCpltCallback+0xa0>)
 8006e56:	4813      	ldr	r0, [pc, #76]	; (8006ea4 <HAL_UART_RxCpltCallback+0xa8>)
 8006e58:	2364      	movs	r3, #100	; 0x64
 8006e5a:	f7fd fe03 	bl	8004a64 <HAL_UART_Transmit>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth); // Update PWM CH 1
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <HAL_UART_RxCpltCallback+0xac>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth); // Update PWM CH 2
 8006e68:	23a0      	movs	r3, #160	; 0xa0
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_UART_RxCpltCallback+0x98>)
 8006e6e:	8812      	ldrh	r2, [r2, #0]
 8006e70:	1a9a      	subs	r2, r3, r2
 8006e72:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <HAL_UART_RxCpltCallback+0xac>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4); // Enable next UART Receive interrupt
 8006e78:	4905      	ldr	r1, [pc, #20]	; (8006e90 <HAL_UART_RxCpltCallback+0x94>)
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <HAL_UART_RxCpltCallback+0xa8>)
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f7fd fe8c 	bl	8004b9c <HAL_UART_Receive_IT>
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b002      	add	sp, #8
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000008 	.word	0x20000008
 8006e90:	200002a0 	.word	0x200002a0
 8006e94:	20000006 	.word	0x20000006
 8006e98:	0800801c 	.word	0x0800801c
 8006e9c:	20000238 	.word	0x20000238
 8006ea0:	2000029c 	.word	0x2000029c
 8006ea4:	200001a4 	.word	0x200001a4
 8006ea8:	2000010c 	.word	0x2000010c

08006eac <PID_update>:

void PID_update()
{
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	af00      	add	r7, sp, #0
	error = AD_RES - ADC_REFERENCE	;
 8006eb0:	4b64      	ldr	r3, [pc, #400]	; (8007044 <PID_update+0x198>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	5e9b      	ldrsh	r3, [r3, r2]
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f7fa f952 	bl	8001160 <__aeabi_i2f>
 8006ebc:	1c03      	adds	r3, r0, #0
 8006ebe:	4a62      	ldr	r2, [pc, #392]	; (8007048 <PID_update+0x19c>)
 8006ec0:	1c11      	adds	r1, r2, #0
 8006ec2:	1c18      	adds	r0, r3, #0
 8006ec4:	f7f9 ff7e 	bl	8000dc4 <__aeabi_fsub>
 8006ec8:	1c03      	adds	r3, r0, #0
 8006eca:	1c1a      	adds	r2, r3, #0
 8006ecc:	4b5f      	ldr	r3, [pc, #380]	; (800704c <PID_update+0x1a0>)
 8006ece:	601a      	str	r2, [r3, #0]

	//pulsewidth = PULSE_STEP *  (Kp * AD_RES ) + PULSE_HALF;
	// We use a constant sampling rate, as such we do not need time.
	// The ki and kd are now dependent on the sampling rate (and must be scaled accordingly).

	ITerm += ki * error;	// Calculate Integral term
 8006ed0:	4b5f      	ldr	r3, [pc, #380]	; (8007050 <PID_update+0x1a4>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b5d      	ldr	r3, [pc, #372]	; (800704c <PID_update+0x1a0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	1c19      	adds	r1, r3, #0
 8006eda:	1c10      	adds	r0, r2, #0
 8006edc:	f7f9 fe4c 	bl	8000b78 <__aeabi_fmul>
 8006ee0:	1c03      	adds	r3, r0, #0
 8006ee2:	1c1a      	adds	r2, r3, #0
 8006ee4:	4b5b      	ldr	r3, [pc, #364]	; (8007054 <PID_update+0x1a8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	1c19      	adds	r1, r3, #0
 8006eea:	1c10      	adds	r0, r2, #0
 8006eec:	f7f9 fade 	bl	80004ac <__aeabi_fadd>
 8006ef0:	1c03      	adds	r3, r0, #0
 8006ef2:	1c1a      	adds	r2, r3, #0
 8006ef4:	4b57      	ldr	r3, [pc, #348]	; (8007054 <PID_update+0x1a8>)
 8006ef6:	601a      	str	r2, [r3, #0]

	if(ITerm > PULSE_HALF) // Prevent integral windup / integral lag
 8006ef8:	23a0      	movs	r3, #160	; 0xa0
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7fa f930 	bl	8001160 <__aeabi_i2f>
 8006f00:	1c02      	adds	r2, r0, #0
 8006f02:	4b54      	ldr	r3, [pc, #336]	; (8007054 <PID_update+0x1a8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	1c19      	adds	r1, r3, #0
 8006f08:	1c10      	adds	r0, r2, #0
 8006f0a:	f7f9 f9a3 	bl	8000254 <__aeabi_fcmplt>
 8006f0e:	1e03      	subs	r3, r0, #0
 8006f10:	d007      	beq.n	8006f22 <PID_update+0x76>
	{
		ITerm = PULSE_HALF;
 8006f12:	23a0      	movs	r3, #160	; 0xa0
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7fa f971 	bl	80011fc <__aeabi_ui2f>
 8006f1a:	1c02      	adds	r2, r0, #0
 8006f1c:	4b4d      	ldr	r3, [pc, #308]	; (8007054 <PID_update+0x1a8>)
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e015      	b.n	8006f4e <PID_update+0xa2>
	}
	else if(ITerm < -PULSE_HALF) // THis is wrong
 8006f22:	23a0      	movs	r3, #160	; 0xa0
 8006f24:	425b      	negs	r3, r3
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7fa f91a 	bl	8001160 <__aeabi_i2f>
 8006f2c:	1c02      	adds	r2, r0, #0
 8006f2e:	4b49      	ldr	r3, [pc, #292]	; (8007054 <PID_update+0x1a8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	1c19      	adds	r1, r3, #0
 8006f34:	1c10      	adds	r0, r2, #0
 8006f36:	f7f9 f9a1 	bl	800027c <__aeabi_fcmpgt>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d007      	beq.n	8006f4e <PID_update+0xa2>
	{
		ITerm = -PULSE_HALF;
 8006f3e:	23a0      	movs	r3, #160	; 0xa0
 8006f40:	425b      	negs	r3, r3
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7fa f90c 	bl	8001160 <__aeabi_i2f>
 8006f48:	1c02      	adds	r2, r0, #0
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <PID_update+0x1a8>)
 8006f4c:	601a      	str	r2, [r3, #0]
	}

	d_error = error - last_error; // Calculate derivative term
 8006f4e:	4b3f      	ldr	r3, [pc, #252]	; (800704c <PID_update+0x1a0>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b41      	ldr	r3, [pc, #260]	; (8007058 <PID_update+0x1ac>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	1c19      	adds	r1, r3, #0
 8006f58:	1c10      	adds	r0, r2, #0
 8006f5a:	f7f9 ff33 	bl	8000dc4 <__aeabi_fsub>
 8006f5e:	1c03      	adds	r3, r0, #0
 8006f60:	1c1a      	adds	r2, r3, #0
 8006f62:	4b3e      	ldr	r3, [pc, #248]	; (800705c <PID_update+0x1b0>)
 8006f64:	601a      	str	r2, [r3, #0]

	pulse_result = (kp * error + ITerm + kd * d_error);  // Calculate output from PID
 8006f66:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <PID_update+0x1b4>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b38      	ldr	r3, [pc, #224]	; (800704c <PID_update+0x1a0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	1c19      	adds	r1, r3, #0
 8006f70:	1c10      	adds	r0, r2, #0
 8006f72:	f7f9 fe01 	bl	8000b78 <__aeabi_fmul>
 8006f76:	1c03      	adds	r3, r0, #0
 8006f78:	1c1a      	adds	r2, r3, #0
 8006f7a:	4b36      	ldr	r3, [pc, #216]	; (8007054 <PID_update+0x1a8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	1c19      	adds	r1, r3, #0
 8006f80:	1c10      	adds	r0, r2, #0
 8006f82:	f7f9 fa93 	bl	80004ac <__aeabi_fadd>
 8006f86:	1c03      	adds	r3, r0, #0
 8006f88:	1c1c      	adds	r4, r3, #0
 8006f8a:	4b36      	ldr	r3, [pc, #216]	; (8007064 <PID_update+0x1b8>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b33      	ldr	r3, [pc, #204]	; (800705c <PID_update+0x1b0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	1c19      	adds	r1, r3, #0
 8006f94:	1c10      	adds	r0, r2, #0
 8006f96:	f7f9 fdef 	bl	8000b78 <__aeabi_fmul>
 8006f9a:	1c03      	adds	r3, r0, #0
 8006f9c:	1c19      	adds	r1, r3, #0
 8006f9e:	1c20      	adds	r0, r4, #0
 8006fa0:	f7f9 fa84 	bl	80004ac <__aeabi_fadd>
 8006fa4:	1c03      	adds	r3, r0, #0
 8006fa6:	1c1a      	adds	r2, r3, #0
 8006fa8:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <PID_update+0x1bc>)
 8006faa:	601a      	str	r2, [r3, #0]
	if(pulse_result > PULSE_HALF) // Prevent output going above max
 8006fac:	23a0      	movs	r3, #160	; 0xa0
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fa f8d6 	bl	8001160 <__aeabi_i2f>
 8006fb4:	1c02      	adds	r2, r0, #0
 8006fb6:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <PID_update+0x1bc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	1c19      	adds	r1, r3, #0
 8006fbc:	1c10      	adds	r0, r2, #0
 8006fbe:	f7f9 f949 	bl	8000254 <__aeabi_fcmplt>
 8006fc2:	1e03      	subs	r3, r0, #0
 8006fc4:	d005      	beq.n	8006fd2 <PID_update+0x126>
	{
		pulsewidth = PULSE_MAX;
 8006fc6:	233c      	movs	r3, #60	; 0x3c
 8006fc8:	33ff      	adds	r3, #255	; 0xff
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <PID_update+0x1c0>)
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e024      	b.n	800701c <PID_update+0x170>
	}
	else if(pulse_result < -PULSE_HALF)
 8006fd2:	23a0      	movs	r3, #160	; 0xa0
 8006fd4:	425b      	negs	r3, r3
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7fa f8c2 	bl	8001160 <__aeabi_i2f>
 8006fdc:	1c02      	adds	r2, r0, #0
 8006fde:	4b22      	ldr	r3, [pc, #136]	; (8007068 <PID_update+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	1c19      	adds	r1, r3, #0
 8006fe4:	1c10      	adds	r0, r2, #0
 8006fe6:	f7f9 f949 	bl	800027c <__aeabi_fcmpgt>
 8006fea:	1e03      	subs	r3, r0, #0
 8006fec:	d003      	beq.n	8006ff6 <PID_update+0x14a>
	{
		pulsewidth = 0;
 8006fee:	4b1f      	ldr	r3, [pc, #124]	; (800706c <PID_update+0x1c0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e012      	b.n	800701c <PID_update+0x170>
	}
	else{
		pulsewidth = pulse_result + PULSE_HALF;
 8006ff6:	23a0      	movs	r3, #160	; 0xa0
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7fa f8b1 	bl	8001160 <__aeabi_i2f>
 8006ffe:	1c02      	adds	r2, r0, #0
 8007000:	4b19      	ldr	r3, [pc, #100]	; (8007068 <PID_update+0x1bc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	1c19      	adds	r1, r3, #0
 8007006:	1c10      	adds	r0, r2, #0
 8007008:	f7f9 fa50 	bl	80004ac <__aeabi_fadd>
 800700c:	1c03      	adds	r3, r0, #0
 800700e:	1c18      	adds	r0, r3, #0
 8007010:	f7f9 f968 	bl	80002e4 <__aeabi_f2uiz>
 8007014:	0003      	movs	r3, r0
 8007016:	b29a      	uxth	r2, r3
 8007018:	4b14      	ldr	r3, [pc, #80]	; (800706c <PID_update+0x1c0>)
 800701a:	801a      	strh	r2, [r3, #0]
	}

	last_error = error; // Store last error term
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <PID_update+0x1a0>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <PID_update+0x1ac>)
 8007022:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth);
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <PID_update+0x1c0>)
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	4b11      	ldr	r3, [pc, #68]	; (8007070 <PID_update+0x1c4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth);
 800702e:	23a0      	movs	r3, #160	; 0xa0
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a0e      	ldr	r2, [pc, #56]	; (800706c <PID_update+0x1c0>)
 8007034:	8812      	ldrh	r2, [r2, #0]
 8007036:	1a9a      	subs	r2, r3, r2
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <PID_update+0x1c4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	46bd      	mov	sp, r7
 8007042:	bdb0      	pop	{r4, r5, r7, pc}
 8007044:	2000000a 	.word	0x2000000a
 8007048:	44d360e5 	.word	0x44d360e5
 800704c:	200002ac 	.word	0x200002ac
 8007050:	20000010 	.word	0x20000010
 8007054:	200002a8 	.word	0x200002a8
 8007058:	200002b0 	.word	0x200002b0
 800705c:	200002b4 	.word	0x200002b4
 8007060:	2000000c 	.word	0x2000000c
 8007064:	200002a4 	.word	0x200002a4
 8007068:	200002b8 	.word	0x200002b8
 800706c:	20000006 	.word	0x20000006
 8007070:	2000010c 	.word	0x2000010c

08007074 <kalman_filter>:

unsigned long kalman_filter(unsigned long ADC_Value)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old=0;
    Z_k = ADC_Value;
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7fa f8bd 	bl	80011fc <__aeabi_ui2f>
 8007082:	1c03      	adds	r3, r0, #0
 8007084:	617b      	str	r3, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8007086:	4b30      	ldr	r3, [pc, #192]	; (8007148 <kalman_filter+0xd4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8007090:	4b2e      	ldr	r3, [pc, #184]	; (800714c <kalman_filter+0xd8>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <kalman_filter+0xdc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	1c19      	adds	r1, r3, #0
 800709a:	1c10      	adds	r0, r2, #0
 800709c:	f7f9 fa06 	bl	80004ac <__aeabi_fadd>
 80070a0:	1c03      	adds	r3, r0, #0
 80070a2:	1c1a      	adds	r2, r3, #0
 80070a4:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <kalman_filter+0xe0>)
 80070a6:	601a      	str	r2, [r3, #0]

    Kg = P_k_k1/(P_k_k1 + R);
 80070a8:	4b2a      	ldr	r3, [pc, #168]	; (8007154 <kalman_filter+0xe0>)
 80070aa:	681c      	ldr	r4, [r3, #0]
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <kalman_filter+0xe0>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b29      	ldr	r3, [pc, #164]	; (8007158 <kalman_filter+0xe4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1c19      	adds	r1, r3, #0
 80070b6:	1c10      	adds	r0, r2, #0
 80070b8:	f7f9 f9f8 	bl	80004ac <__aeabi_fadd>
 80070bc:	1c03      	adds	r3, r0, #0
 80070be:	1c19      	adds	r1, r3, #0
 80070c0:	1c20      	adds	r0, r4, #0
 80070c2:	f7f9 fb91 	bl	80007e8 <__aeabi_fdiv>
 80070c6:	1c03      	adds	r3, r0, #0
 80070c8:	1c1a      	adds	r2, r3, #0
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <kalman_filter+0xe8>)
 80070cc:	601a      	str	r2, [r3, #0]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80070ce:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <kalman_filter+0xd4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1c19      	adds	r1, r3, #0
 80070d4:	6978      	ldr	r0, [r7, #20]
 80070d6:	f7f9 fe75 	bl	8000dc4 <__aeabi_fsub>
 80070da:	1c03      	adds	r3, r0, #0
 80070dc:	1c1a      	adds	r2, r3, #0
 80070de:	4b1f      	ldr	r3, [pc, #124]	; (800715c <kalman_filter+0xe8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	1c19      	adds	r1, r3, #0
 80070e4:	1c10      	adds	r0, r2, #0
 80070e6:	f7f9 fd47 	bl	8000b78 <__aeabi_fmul>
 80070ea:	1c03      	adds	r3, r0, #0
 80070ec:	1c19      	adds	r1, r3, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7f9 f9dc 	bl	80004ac <__aeabi_fadd>
 80070f4:	1c03      	adds	r3, r0, #0
 80070f6:	60bb      	str	r3, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 80070f8:	4b18      	ldr	r3, [pc, #96]	; (800715c <kalman_filter+0xe8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	1c19      	adds	r1, r3, #0
 80070fe:	20fe      	movs	r0, #254	; 0xfe
 8007100:	0580      	lsls	r0, r0, #22
 8007102:	f7f9 fe5f 	bl	8000dc4 <__aeabi_fsub>
 8007106:	1c03      	adds	r3, r0, #0
 8007108:	1c1a      	adds	r2, r3, #0
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <kalman_filter+0xe0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	1c19      	adds	r1, r3, #0
 8007110:	1c10      	adds	r0, r2, #0
 8007112:	f7f9 fd31 	bl	8000b78 <__aeabi_fmul>
 8007116:	1c03      	adds	r3, r0, #0
 8007118:	1c1a      	adds	r2, r3, #0
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <kalman_filter+0xd8>)
 800711c:	601a      	str	r2, [r3, #0]
    P_k_k1 = P_k1_k1;
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <kalman_filter+0xd8>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <kalman_filter+0xe0>)
 8007124:	601a      	str	r2, [r3, #0]

    ADC_OLD_Value = ADC_Value;
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fa f868 	bl	80011fc <__aeabi_ui2f>
 800712c:	1c02      	adds	r2, r0, #0
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <kalman_filter+0xec>)
 8007130:	601a      	str	r2, [r3, #0]
    kalman_adc_old = kalman_adc;
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <kalman_filter+0xd4>)
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	601a      	str	r2, [r3, #0]

    return kalman_adc;
 8007138:	68b8      	ldr	r0, [r7, #8]
 800713a:	f7f9 f8d3 	bl	80002e4 <__aeabi_f2uiz>
 800713e:	0003      	movs	r3, r0
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b007      	add	sp, #28
 8007146:	bd90      	pop	{r4, r7, pc}
 8007148:	200002bc 	.word	0x200002bc
 800714c:	200002c0 	.word	0x200002c0
 8007150:	20000014 	.word	0x20000014
 8007154:	20000018 	.word	0x20000018
 8007158:	2000001c 	.word	0x2000001c
 800715c:	200002c4 	.word	0x200002c4
 8007160:	200002c8 	.word	0x200002c8

08007164 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	//AD_RES = HAL_ADC_GetValue(&hadc1);
	//UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "ADC Value: %d\r\n", AD_RES);
	//HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
	if(ADCFlag)
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <HAL_ADC_ConvCpltCallback+0x34>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		AD_RES = kalman_filter(HAL_ADC_GetValue(&hadc1));
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <HAL_ADC_ConvCpltCallback+0x38>)
 8007176:	0018      	movs	r0, r3
 8007178:	f7fa fcb6 	bl	8001ae8 <HAL_ADC_GetValue>
 800717c:	0003      	movs	r3, r0
 800717e:	0018      	movs	r0, r3
 8007180:	f7ff ff78 	bl	8007074 <kalman_filter>
 8007184:	0003      	movs	r3, r0
 8007186:	b21a      	sxth	r2, r3
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800718a:	801a      	strh	r2, [r3, #0]
		//AD_RES = HAL_ADC_GetValue(&hadc1);
		PID_update();
 800718c:	f7ff fe8e 	bl	8006eac <PID_update>

	}

	//HAL_ADC_Start_IT(&hadc1);
}
 8007190:	46c0      	nop			; (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	b002      	add	sp, #8
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000008 	.word	0x20000008
 800719c:	200000a8 	.word	0x200000a8
 80071a0:	2000000a 	.word	0x2000000a

080071a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80071a8:	b672      	cpsid	i
}
 80071aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80071ac:	e7fe      	b.n	80071ac <Error_Handler+0x8>
	...

080071b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <HAL_MspInit+0x44>)
 80071b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ba:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <HAL_MspInit+0x44>)
 80071bc:	2101      	movs	r1, #1
 80071be:	430a      	orrs	r2, r1
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
 80071c2:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <HAL_MspInit+0x44>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	2201      	movs	r2, #1
 80071c8:	4013      	ands	r3, r2
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_MspInit+0x44>)
 80071d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <HAL_MspInit+0x44>)
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	0549      	lsls	r1, r1, #21
 80071d8:	430a      	orrs	r2, r1
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_MspInit+0x44>)
 80071de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e0:	2380      	movs	r3, #128	; 0x80
 80071e2:	055b      	lsls	r3, r3, #21
 80071e4:	4013      	ands	r3, r2
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	46bd      	mov	sp, r7
 80071ee:	b002      	add	sp, #8
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	40021000 	.word	0x40021000

080071f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b08b      	sub	sp, #44	; 0x2c
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	2414      	movs	r4, #20
 8007202:	193b      	adds	r3, r7, r4
 8007204:	0018      	movs	r0, r3
 8007206:	2314      	movs	r3, #20
 8007208:	001a      	movs	r2, r3
 800720a:	2100      	movs	r1, #0
 800720c:	f000 f9e0 	bl	80075d0 <memset>
  if(hadc->Instance==ADC1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <HAL_ADC_MspInit+0x90>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d131      	bne.n	800727e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800721a:	4b1c      	ldr	r3, [pc, #112]	; (800728c <HAL_ADC_MspInit+0x94>)
 800721c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <HAL_ADC_MspInit+0x94>)
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	0349      	lsls	r1, r1, #13
 8007224:	430a      	orrs	r2, r1
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
 8007228:	4b18      	ldr	r3, [pc, #96]	; (800728c <HAL_ADC_MspInit+0x94>)
 800722a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	035b      	lsls	r3, r3, #13
 8007230:	4013      	ands	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <HAL_ADC_MspInit+0x94>)
 8007238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <HAL_ADC_MspInit+0x94>)
 800723c:	2101      	movs	r1, #1
 800723e:	430a      	orrs	r2, r1
 8007240:	635a      	str	r2, [r3, #52]	; 0x34
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <HAL_ADC_MspInit+0x94>)
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	2201      	movs	r2, #1
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800724e:	193b      	adds	r3, r7, r4
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007254:	193b      	adds	r3, r7, r4
 8007256:	2203      	movs	r2, #3
 8007258:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725a:	193b      	adds	r3, r7, r4
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007260:	193a      	adds	r2, r7, r4
 8007262:	23a0      	movs	r3, #160	; 0xa0
 8007264:	05db      	lsls	r3, r3, #23
 8007266:	0011      	movs	r1, r2
 8007268:	0018      	movs	r0, r3
 800726a:	f7fb fb4d 	bl	8002908 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	200c      	movs	r0, #12
 8007274:	f7fb fa4a 	bl	800270c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8007278:	200c      	movs	r0, #12
 800727a:	f7fb fa5c 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	46bd      	mov	sp, r7
 8007282:	b00b      	add	sp, #44	; 0x2c
 8007284:	bd90      	pop	{r4, r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	40012400 	.word	0x40012400
 800728c:	40021000 	.word	0x40021000

08007290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b08f      	sub	sp, #60	; 0x3c
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007298:	2410      	movs	r4, #16
 800729a:	193b      	adds	r3, r7, r4
 800729c:	0018      	movs	r0, r3
 800729e:	2328      	movs	r3, #40	; 0x28
 80072a0:	001a      	movs	r2, r3
 80072a2:	2100      	movs	r1, #0
 80072a4:	f000 f994 	bl	80075d0 <memset>
  if(htim_base->Instance==TIM1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1b      	ldr	r2, [pc, #108]	; (800731c <HAL_TIM_Base_MspInit+0x8c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d11e      	bne.n	80072f0 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80072b2:	193b      	adds	r3, r7, r4
 80072b4:	2280      	movs	r2, #128	; 0x80
 80072b6:	0392      	lsls	r2, r2, #14
 80072b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 80072ba:	193b      	adds	r3, r7, r4
 80072bc:	2280      	movs	r2, #128	; 0x80
 80072be:	03d2      	lsls	r2, r2, #15
 80072c0:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80072c2:	193b      	adds	r3, r7, r4
 80072c4:	0018      	movs	r0, r3
 80072c6:	f7fc f9b1 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 80072ca:	1e03      	subs	r3, r0, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 80072ce:	f7ff ff69 	bl	80071a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 80072d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 80072d8:	2180      	movs	r1, #128	; 0x80
 80072da:	0109      	lsls	r1, r1, #4
 80072dc:	430a      	orrs	r2, r1
 80072de:	641a      	str	r2, [r3, #64]	; 0x40
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 80072e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	4013      	ands	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80072ee:	e011      	b.n	8007314 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	05db      	lsls	r3, r3, #23
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d10b      	bne.n	8007314 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 80072fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 8007302:	2101      	movs	r1, #1
 8007304:	430a      	orrs	r2, r1
 8007306:	63da      	str	r2, [r3, #60]	; 0x3c
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_TIM_Base_MspInit+0x90>)
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	2201      	movs	r2, #1
 800730e:	4013      	ands	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
}
 8007314:	46c0      	nop			; (mov r8, r8)
 8007316:	46bd      	mov	sp, r7
 8007318:	b00f      	add	sp, #60	; 0x3c
 800731a:	bd90      	pop	{r4, r7, pc}
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40021000 	.word	0x40021000

08007324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800732c:	240c      	movs	r4, #12
 800732e:	193b      	adds	r3, r7, r4
 8007330:	0018      	movs	r0, r3
 8007332:	2314      	movs	r3, #20
 8007334:	001a      	movs	r2, r3
 8007336:	2100      	movs	r1, #0
 8007338:	f000 f94a 	bl	80075d0 <memset>
  if(htim->Instance==TIM1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a15      	ldr	r2, [pc, #84]	; (8007398 <HAL_TIM_MspPostInit+0x74>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d123      	bne.n	800738e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <HAL_TIM_MspPostInit+0x78>)
 8007348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <HAL_TIM_MspPostInit+0x78>)
 800734c:	2101      	movs	r1, #1
 800734e:	430a      	orrs	r2, r1
 8007350:	635a      	str	r2, [r3, #52]	; 0x34
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <HAL_TIM_MspPostInit+0x78>)
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	2201      	movs	r2, #1
 8007358:	4013      	ands	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800735e:	193b      	adds	r3, r7, r4
 8007360:	22c0      	movs	r2, #192	; 0xc0
 8007362:	0092      	lsls	r2, r2, #2
 8007364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007366:	0021      	movs	r1, r4
 8007368:	187b      	adds	r3, r7, r1
 800736a:	2202      	movs	r2, #2
 800736c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736e:	187b      	adds	r3, r7, r1
 8007370:	2200      	movs	r2, #0
 8007372:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007374:	187b      	adds	r3, r7, r1
 8007376:	2200      	movs	r2, #0
 8007378:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800737a:	187b      	adds	r3, r7, r1
 800737c:	2202      	movs	r2, #2
 800737e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007380:	187a      	adds	r2, r7, r1
 8007382:	23a0      	movs	r3, #160	; 0xa0
 8007384:	05db      	lsls	r3, r3, #23
 8007386:	0011      	movs	r1, r2
 8007388:	0018      	movs	r0, r3
 800738a:	f7fb fabd 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b009      	add	sp, #36	; 0x24
 8007394:	bd90      	pop	{r4, r7, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	40012c00 	.word	0x40012c00
 800739c:	40021000 	.word	0x40021000

080073a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b08b      	sub	sp, #44	; 0x2c
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a8:	2414      	movs	r4, #20
 80073aa:	193b      	adds	r3, r7, r4
 80073ac:	0018      	movs	r0, r3
 80073ae:	2314      	movs	r3, #20
 80073b0:	001a      	movs	r2, r3
 80073b2:	2100      	movs	r1, #0
 80073b4:	f000 f90c 	bl	80075d0 <memset>
  if(huart->Instance==USART2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1f      	ldr	r2, [pc, #124]	; (800743c <HAL_UART_MspInit+0x9c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d138      	bne.n	8007434 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80073c2:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	0289      	lsls	r1, r1, #10
 80073cc:	430a      	orrs	r2, r1
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	029b      	lsls	r3, r3, #10
 80073d8:	4013      	ands	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073e4:	2101      	movs	r1, #1
 80073e6:	430a      	orrs	r2, r1
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34
 80073ea:	4b15      	ldr	r3, [pc, #84]	; (8007440 <HAL_UART_MspInit+0xa0>)
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	2201      	movs	r2, #1
 80073f0:	4013      	ands	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80073f6:	0021      	movs	r1, r4
 80073f8:	187b      	adds	r3, r7, r1
 80073fa:	220c      	movs	r2, #12
 80073fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	2202      	movs	r2, #2
 8007402:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007404:	187b      	adds	r3, r7, r1
 8007406:	2201      	movs	r2, #1
 8007408:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800740a:	187b      	adds	r3, r7, r1
 800740c:	2200      	movs	r2, #0
 800740e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007410:	187b      	adds	r3, r7, r1
 8007412:	2201      	movs	r2, #1
 8007414:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007416:	187a      	adds	r2, r7, r1
 8007418:	23a0      	movs	r3, #160	; 0xa0
 800741a:	05db      	lsls	r3, r3, #23
 800741c:	0011      	movs	r1, r2
 800741e:	0018      	movs	r0, r3
 8007420:	f7fb fa72 	bl	8002908 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	201c      	movs	r0, #28
 800742a:	f7fb f96f 	bl	800270c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800742e:	201c      	movs	r0, #28
 8007430:	f7fb f981 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b00b      	add	sp, #44	; 0x2c
 800743a:	bd90      	pop	{r4, r7, pc}
 800743c:	40004400 	.word	0x40004400
 8007440:	40021000 	.word	0x40021000

08007444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007448:	e7fe      	b.n	8007448 <NMI_Handler+0x4>

0800744a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800744e:	e7fe      	b.n	800744e <HardFault_Handler+0x4>

08007450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007468:	f7f9 ff9e 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <ADC1_IRQHandler+0x14>)
 800747a:	0018      	movs	r0, r3
 800747c:	f7fa fb40 	bl	8001b00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8007480:	46c0      	nop			; (mov r8, r8)
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	200000a8 	.word	0x200000a8

0800748c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007490:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <USART2_IRQHandler+0x14>)
 8007492:	0018      	movs	r0, r3
 8007494:	f7fd fbe0 	bl	8004c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007498:	46c0      	nop			; (mov r8, r8)
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	200001a4 	.word	0x200001a4

080074a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074ac:	4a14      	ldr	r2, [pc, #80]	; (8007500 <_sbrk+0x5c>)
 80074ae:	4b15      	ldr	r3, [pc, #84]	; (8007504 <_sbrk+0x60>)
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80074b8:	4b13      	ldr	r3, [pc, #76]	; (8007508 <_sbrk+0x64>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074c0:	4b11      	ldr	r3, [pc, #68]	; (8007508 <_sbrk+0x64>)
 80074c2:	4a12      	ldr	r2, [pc, #72]	; (800750c <_sbrk+0x68>)
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <_sbrk+0x64>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	18d3      	adds	r3, r2, r3
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d207      	bcs.n	80074e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074d4:	f000 f852 	bl	800757c <__errno>
 80074d8:	0003      	movs	r3, r0
 80074da:	220c      	movs	r2, #12
 80074dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074de:	2301      	movs	r3, #1
 80074e0:	425b      	negs	r3, r3
 80074e2:	e009      	b.n	80074f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074e4:	4b08      	ldr	r3, [pc, #32]	; (8007508 <_sbrk+0x64>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <_sbrk+0x64>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	18d2      	adds	r2, r2, r3
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <_sbrk+0x64>)
 80074f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	0018      	movs	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b006      	add	sp, #24
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20002000 	.word	0x20002000
 8007504:	00000400 	.word	0x00000400
 8007508:	200002cc 	.word	0x200002cc
 800750c:	200002e0 	.word	0x200002e0

08007510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007514:	46c0      	nop			; (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800751c:	480d      	ldr	r0, [pc, #52]	; (8007554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800751e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007520:	f7ff fff6 	bl	8007510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007524:	480c      	ldr	r0, [pc, #48]	; (8007558 <LoopForever+0x6>)
  ldr r1, =_edata
 8007526:	490d      	ldr	r1, [pc, #52]	; (800755c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <LoopForever+0xe>)
  movs r3, #0
 800752a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800752c:	e002      	b.n	8007534 <LoopCopyDataInit>

0800752e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800752e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007532:	3304      	adds	r3, #4

08007534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007538:	d3f9      	bcc.n	800752e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800753a:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800753c:	4c0a      	ldr	r4, [pc, #40]	; (8007568 <LoopForever+0x16>)
  movs r3, #0
 800753e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007540:	e001      	b.n	8007546 <LoopFillZerobss>

08007542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007544:	3204      	adds	r2, #4

08007546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007548:	d3fb      	bcc.n	8007542 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800754a:	f000 f81d 	bl	8007588 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800754e:	f7ff f94d 	bl	80067ec <main>

08007552 <LoopForever>:

LoopForever:
  b LoopForever
 8007552:	e7fe      	b.n	8007552 <LoopForever>
  ldr   r0, =_estack
 8007554:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800755c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8007560:	08008300 	.word	0x08008300
  ldr r2, =_sbss
 8007564:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8007568:	200002e0 	.word	0x200002e0

0800756c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800756c:	e7fe      	b.n	800756c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

0800756e <atoi>:
 800756e:	b510      	push	{r4, lr}
 8007570:	220a      	movs	r2, #10
 8007572:	2100      	movs	r1, #0
 8007574:	f000 f8e2 	bl	800773c <strtol>
 8007578:	bd10      	pop	{r4, pc}
	...

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	20000024 	.word	0x20000024

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	2600      	movs	r6, #0
 800758c:	4d0c      	ldr	r5, [pc, #48]	; (80075c0 <__libc_init_array+0x38>)
 800758e:	4c0d      	ldr	r4, [pc, #52]	; (80075c4 <__libc_init_array+0x3c>)
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	2600      	movs	r6, #0
 800759a:	f000 fd25 	bl	8007fe8 <_init>
 800759e:	4d0a      	ldr	r5, [pc, #40]	; (80075c8 <__libc_init_array+0x40>)
 80075a0:	4c0a      	ldr	r4, [pc, #40]	; (80075cc <__libc_init_array+0x44>)
 80075a2:	1b64      	subs	r4, r4, r5
 80075a4:	10a4      	asrs	r4, r4, #2
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	00b3      	lsls	r3, r6, #2
 80075ae:	58eb      	ldr	r3, [r5, r3]
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	00b3      	lsls	r3, r6, #2
 80075b8:	58eb      	ldr	r3, [r5, r3]
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	080082f8 	.word	0x080082f8
 80075c4:	080082f8 	.word	0x080082f8
 80075c8:	080082f8 	.word	0x080082f8
 80075cc:	080082fc 	.word	0x080082fc

080075d0 <memset>:
 80075d0:	0003      	movs	r3, r0
 80075d2:	1882      	adds	r2, r0, r2
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d100      	bne.n	80075da <memset+0xa>
 80075d8:	4770      	bx	lr
 80075da:	7019      	strb	r1, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	e7f9      	b.n	80075d4 <memset+0x4>

080075e0 <siprintf>:
 80075e0:	b40e      	push	{r1, r2, r3}
 80075e2:	b500      	push	{lr}
 80075e4:	490b      	ldr	r1, [pc, #44]	; (8007614 <siprintf+0x34>)
 80075e6:	b09c      	sub	sp, #112	; 0x70
 80075e8:	ab1d      	add	r3, sp, #116	; 0x74
 80075ea:	9002      	str	r0, [sp, #8]
 80075ec:	9006      	str	r0, [sp, #24]
 80075ee:	9107      	str	r1, [sp, #28]
 80075f0:	9104      	str	r1, [sp, #16]
 80075f2:	4809      	ldr	r0, [pc, #36]	; (8007618 <siprintf+0x38>)
 80075f4:	4909      	ldr	r1, [pc, #36]	; (800761c <siprintf+0x3c>)
 80075f6:	cb04      	ldmia	r3!, {r2}
 80075f8:	9105      	str	r1, [sp, #20]
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	a902      	add	r1, sp, #8
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f000 f90a 	bl	8007818 <_svfiprintf_r>
 8007604:	2300      	movs	r3, #0
 8007606:	9a02      	ldr	r2, [sp, #8]
 8007608:	7013      	strb	r3, [r2, #0]
 800760a:	b01c      	add	sp, #112	; 0x70
 800760c:	bc08      	pop	{r3}
 800760e:	b003      	add	sp, #12
 8007610:	4718      	bx	r3
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	7fffffff 	.word	0x7fffffff
 8007618:	20000024 	.word	0x20000024
 800761c:	ffff0208 	.word	0xffff0208

08007620 <_strtol_l.constprop.0>:
 8007620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007622:	b087      	sub	sp, #28
 8007624:	001e      	movs	r6, r3
 8007626:	9005      	str	r0, [sp, #20]
 8007628:	9101      	str	r1, [sp, #4]
 800762a:	9202      	str	r2, [sp, #8]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d045      	beq.n	80076bc <_strtol_l.constprop.0+0x9c>
 8007630:	000b      	movs	r3, r1
 8007632:	2e24      	cmp	r6, #36	; 0x24
 8007634:	d842      	bhi.n	80076bc <_strtol_l.constprop.0+0x9c>
 8007636:	4a3f      	ldr	r2, [pc, #252]	; (8007734 <_strtol_l.constprop.0+0x114>)
 8007638:	2108      	movs	r1, #8
 800763a:	4694      	mov	ip, r2
 800763c:	001a      	movs	r2, r3
 800763e:	4660      	mov	r0, ip
 8007640:	7814      	ldrb	r4, [r2, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	5d00      	ldrb	r0, [r0, r4]
 8007646:	001d      	movs	r5, r3
 8007648:	0007      	movs	r7, r0
 800764a:	400f      	ands	r7, r1
 800764c:	4208      	tst	r0, r1
 800764e:	d1f5      	bne.n	800763c <_strtol_l.constprop.0+0x1c>
 8007650:	2c2d      	cmp	r4, #45	; 0x2d
 8007652:	d13a      	bne.n	80076ca <_strtol_l.constprop.0+0xaa>
 8007654:	2701      	movs	r7, #1
 8007656:	781c      	ldrb	r4, [r3, #0]
 8007658:	1c95      	adds	r5, r2, #2
 800765a:	2e00      	cmp	r6, #0
 800765c:	d065      	beq.n	800772a <_strtol_l.constprop.0+0x10a>
 800765e:	2e10      	cmp	r6, #16
 8007660:	d109      	bne.n	8007676 <_strtol_l.constprop.0+0x56>
 8007662:	2c30      	cmp	r4, #48	; 0x30
 8007664:	d107      	bne.n	8007676 <_strtol_l.constprop.0+0x56>
 8007666:	2220      	movs	r2, #32
 8007668:	782b      	ldrb	r3, [r5, #0]
 800766a:	4393      	bics	r3, r2
 800766c:	2b58      	cmp	r3, #88	; 0x58
 800766e:	d157      	bne.n	8007720 <_strtol_l.constprop.0+0x100>
 8007670:	2610      	movs	r6, #16
 8007672:	786c      	ldrb	r4, [r5, #1]
 8007674:	3502      	adds	r5, #2
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <_strtol_l.constprop.0+0x118>)
 8007678:	0031      	movs	r1, r6
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	0018      	movs	r0, r3
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	f7f8 fdd0 	bl	8000224 <__aeabi_uidivmod>
 8007684:	2300      	movs	r3, #0
 8007686:	2201      	movs	r2, #1
 8007688:	4684      	mov	ip, r0
 800768a:	0018      	movs	r0, r3
 800768c:	9104      	str	r1, [sp, #16]
 800768e:	4252      	negs	r2, r2
 8007690:	0021      	movs	r1, r4
 8007692:	3930      	subs	r1, #48	; 0x30
 8007694:	2909      	cmp	r1, #9
 8007696:	d81d      	bhi.n	80076d4 <_strtol_l.constprop.0+0xb4>
 8007698:	000c      	movs	r4, r1
 800769a:	42a6      	cmp	r6, r4
 800769c:	dd28      	ble.n	80076f0 <_strtol_l.constprop.0+0xd0>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	db24      	blt.n	80076ec <_strtol_l.constprop.0+0xcc>
 80076a2:	0013      	movs	r3, r2
 80076a4:	4584      	cmp	ip, r0
 80076a6:	d306      	bcc.n	80076b6 <_strtol_l.constprop.0+0x96>
 80076a8:	d102      	bne.n	80076b0 <_strtol_l.constprop.0+0x90>
 80076aa:	9904      	ldr	r1, [sp, #16]
 80076ac:	42a1      	cmp	r1, r4
 80076ae:	db02      	blt.n	80076b6 <_strtol_l.constprop.0+0x96>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4370      	muls	r0, r6
 80076b4:	1820      	adds	r0, r4, r0
 80076b6:	782c      	ldrb	r4, [r5, #0]
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7e9      	b.n	8007690 <_strtol_l.constprop.0+0x70>
 80076bc:	f7ff ff5e 	bl	800757c <__errno>
 80076c0:	2316      	movs	r3, #22
 80076c2:	6003      	str	r3, [r0, #0]
 80076c4:	2000      	movs	r0, #0
 80076c6:	b007      	add	sp, #28
 80076c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ca:	2c2b      	cmp	r4, #43	; 0x2b
 80076cc:	d1c5      	bne.n	800765a <_strtol_l.constprop.0+0x3a>
 80076ce:	781c      	ldrb	r4, [r3, #0]
 80076d0:	1c95      	adds	r5, r2, #2
 80076d2:	e7c2      	b.n	800765a <_strtol_l.constprop.0+0x3a>
 80076d4:	0021      	movs	r1, r4
 80076d6:	3941      	subs	r1, #65	; 0x41
 80076d8:	2919      	cmp	r1, #25
 80076da:	d801      	bhi.n	80076e0 <_strtol_l.constprop.0+0xc0>
 80076dc:	3c37      	subs	r4, #55	; 0x37
 80076de:	e7dc      	b.n	800769a <_strtol_l.constprop.0+0x7a>
 80076e0:	0021      	movs	r1, r4
 80076e2:	3961      	subs	r1, #97	; 0x61
 80076e4:	2919      	cmp	r1, #25
 80076e6:	d803      	bhi.n	80076f0 <_strtol_l.constprop.0+0xd0>
 80076e8:	3c57      	subs	r4, #87	; 0x57
 80076ea:	e7d6      	b.n	800769a <_strtol_l.constprop.0+0x7a>
 80076ec:	0013      	movs	r3, r2
 80076ee:	e7e2      	b.n	80076b6 <_strtol_l.constprop.0+0x96>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da09      	bge.n	8007708 <_strtol_l.constprop.0+0xe8>
 80076f4:	2322      	movs	r3, #34	; 0x22
 80076f6:	9a05      	ldr	r2, [sp, #20]
 80076f8:	9803      	ldr	r0, [sp, #12]
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0e1      	beq.n	80076c6 <_strtol_l.constprop.0+0xa6>
 8007702:	1e6b      	subs	r3, r5, #1
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	e007      	b.n	8007718 <_strtol_l.constprop.0+0xf8>
 8007708:	2f00      	cmp	r7, #0
 800770a:	d000      	beq.n	800770e <_strtol_l.constprop.0+0xee>
 800770c:	4240      	negs	r0, r0
 800770e:	9a02      	ldr	r2, [sp, #8]
 8007710:	2a00      	cmp	r2, #0
 8007712:	d0d8      	beq.n	80076c6 <_strtol_l.constprop.0+0xa6>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f4      	bne.n	8007702 <_strtol_l.constprop.0+0xe2>
 8007718:	9b02      	ldr	r3, [sp, #8]
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e7d2      	b.n	80076c6 <_strtol_l.constprop.0+0xa6>
 8007720:	2430      	movs	r4, #48	; 0x30
 8007722:	2e00      	cmp	r6, #0
 8007724:	d1a7      	bne.n	8007676 <_strtol_l.constprop.0+0x56>
 8007726:	3608      	adds	r6, #8
 8007728:	e7a5      	b.n	8007676 <_strtol_l.constprop.0+0x56>
 800772a:	2c30      	cmp	r4, #48	; 0x30
 800772c:	d09b      	beq.n	8007666 <_strtol_l.constprop.0+0x46>
 800772e:	260a      	movs	r6, #10
 8007730:	e7a1      	b.n	8007676 <_strtol_l.constprop.0+0x56>
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	080081bd 	.word	0x080081bd
 8007738:	7fffffff 	.word	0x7fffffff

0800773c <strtol>:
 800773c:	b510      	push	{r4, lr}
 800773e:	0013      	movs	r3, r2
 8007740:	000a      	movs	r2, r1
 8007742:	0001      	movs	r1, r0
 8007744:	4802      	ldr	r0, [pc, #8]	; (8007750 <strtol+0x14>)
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	f7ff ff6a 	bl	8007620 <_strtol_l.constprop.0>
 800774c:	bd10      	pop	{r4, pc}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	20000024 	.word	0x20000024

08007754 <__ssputs_r>:
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	688e      	ldr	r6, [r1, #8]
 8007758:	b085      	sub	sp, #20
 800775a:	0007      	movs	r7, r0
 800775c:	000c      	movs	r4, r1
 800775e:	9203      	str	r2, [sp, #12]
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	429e      	cmp	r6, r3
 8007764:	d83c      	bhi.n	80077e0 <__ssputs_r+0x8c>
 8007766:	2390      	movs	r3, #144	; 0x90
 8007768:	898a      	ldrh	r2, [r1, #12]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	421a      	tst	r2, r3
 800776e:	d034      	beq.n	80077da <__ssputs_r+0x86>
 8007770:	6909      	ldr	r1, [r1, #16]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	6960      	ldr	r0, [r4, #20]
 8007776:	1a5b      	subs	r3, r3, r1
 8007778:	9302      	str	r3, [sp, #8]
 800777a:	2303      	movs	r3, #3
 800777c:	4343      	muls	r3, r0
 800777e:	0fdd      	lsrs	r5, r3, #31
 8007780:	18ed      	adds	r5, r5, r3
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	9802      	ldr	r0, [sp, #8]
 8007786:	3301      	adds	r3, #1
 8007788:	181b      	adds	r3, r3, r0
 800778a:	106d      	asrs	r5, r5, #1
 800778c:	42ab      	cmp	r3, r5
 800778e:	d900      	bls.n	8007792 <__ssputs_r+0x3e>
 8007790:	001d      	movs	r5, r3
 8007792:	0553      	lsls	r3, r2, #21
 8007794:	d532      	bpl.n	80077fc <__ssputs_r+0xa8>
 8007796:	0029      	movs	r1, r5
 8007798:	0038      	movs	r0, r7
 800779a:	f000 fb53 	bl	8007e44 <_malloc_r>
 800779e:	1e06      	subs	r6, r0, #0
 80077a0:	d109      	bne.n	80077b6 <__ssputs_r+0x62>
 80077a2:	230c      	movs	r3, #12
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	2340      	movs	r3, #64	; 0x40
 80077a8:	2001      	movs	r0, #1
 80077aa:	89a2      	ldrh	r2, [r4, #12]
 80077ac:	4240      	negs	r0, r0
 80077ae:	4313      	orrs	r3, r2
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	b005      	add	sp, #20
 80077b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b6:	9a02      	ldr	r2, [sp, #8]
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	f000 faba 	bl	8007d32 <memcpy>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	4a14      	ldr	r2, [pc, #80]	; (8007814 <__ssputs_r+0xc0>)
 80077c2:	401a      	ands	r2, r3
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	4313      	orrs	r3, r2
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	9b02      	ldr	r3, [sp, #8]
 80077cc:	6126      	str	r6, [r4, #16]
 80077ce:	18f6      	adds	r6, r6, r3
 80077d0:	6026      	str	r6, [r4, #0]
 80077d2:	6165      	str	r5, [r4, #20]
 80077d4:	9e01      	ldr	r6, [sp, #4]
 80077d6:	1aed      	subs	r5, r5, r3
 80077d8:	60a5      	str	r5, [r4, #8]
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	429e      	cmp	r6, r3
 80077de:	d900      	bls.n	80077e2 <__ssputs_r+0x8e>
 80077e0:	9e01      	ldr	r6, [sp, #4]
 80077e2:	0032      	movs	r2, r6
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	6820      	ldr	r0, [r4, #0]
 80077e8:	f000 faac 	bl	8007d44 <memmove>
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	2000      	movs	r0, #0
 80077f0:	1b9b      	subs	r3, r3, r6
 80077f2:	60a3      	str	r3, [r4, #8]
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	199e      	adds	r6, r3, r6
 80077f8:	6026      	str	r6, [r4, #0]
 80077fa:	e7da      	b.n	80077b2 <__ssputs_r+0x5e>
 80077fc:	002a      	movs	r2, r5
 80077fe:	0038      	movs	r0, r7
 8007800:	f000 fb96 	bl	8007f30 <_realloc_r>
 8007804:	1e06      	subs	r6, r0, #0
 8007806:	d1e0      	bne.n	80077ca <__ssputs_r+0x76>
 8007808:	0038      	movs	r0, r7
 800780a:	6921      	ldr	r1, [r4, #16]
 800780c:	f000 faae 	bl	8007d6c <_free_r>
 8007810:	e7c7      	b.n	80077a2 <__ssputs_r+0x4e>
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	fffffb7f 	.word	0xfffffb7f

08007818 <_svfiprintf_r>:
 8007818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800781a:	b0a1      	sub	sp, #132	; 0x84
 800781c:	9003      	str	r0, [sp, #12]
 800781e:	001d      	movs	r5, r3
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	000f      	movs	r7, r1
 8007824:	0016      	movs	r6, r2
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	d511      	bpl.n	800784e <_svfiprintf_r+0x36>
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10e      	bne.n	800784e <_svfiprintf_r+0x36>
 8007830:	2140      	movs	r1, #64	; 0x40
 8007832:	f000 fb07 	bl	8007e44 <_malloc_r>
 8007836:	6038      	str	r0, [r7, #0]
 8007838:	6138      	str	r0, [r7, #16]
 800783a:	2800      	cmp	r0, #0
 800783c:	d105      	bne.n	800784a <_svfiprintf_r+0x32>
 800783e:	230c      	movs	r3, #12
 8007840:	9a03      	ldr	r2, [sp, #12]
 8007842:	3801      	subs	r0, #1
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	b021      	add	sp, #132	; 0x84
 8007848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	2300      	movs	r3, #0
 8007850:	ac08      	add	r4, sp, #32
 8007852:	6163      	str	r3, [r4, #20]
 8007854:	3320      	adds	r3, #32
 8007856:	7663      	strb	r3, [r4, #25]
 8007858:	3310      	adds	r3, #16
 800785a:	76a3      	strb	r3, [r4, #26]
 800785c:	9507      	str	r5, [sp, #28]
 800785e:	0035      	movs	r5, r6
 8007860:	782b      	ldrb	r3, [r5, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <_svfiprintf_r+0x52>
 8007866:	2b25      	cmp	r3, #37	; 0x25
 8007868:	d147      	bne.n	80078fa <_svfiprintf_r+0xe2>
 800786a:	1bab      	subs	r3, r5, r6
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	42b5      	cmp	r5, r6
 8007870:	d00c      	beq.n	800788c <_svfiprintf_r+0x74>
 8007872:	0032      	movs	r2, r6
 8007874:	0039      	movs	r1, r7
 8007876:	9803      	ldr	r0, [sp, #12]
 8007878:	f7ff ff6c 	bl	8007754 <__ssputs_r>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d100      	bne.n	8007882 <_svfiprintf_r+0x6a>
 8007880:	e0ae      	b.n	80079e0 <_svfiprintf_r+0x1c8>
 8007882:	6962      	ldr	r2, [r4, #20]
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	4694      	mov	ip, r2
 8007888:	4463      	add	r3, ip
 800788a:	6163      	str	r3, [r4, #20]
 800788c:	782b      	ldrb	r3, [r5, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d100      	bne.n	8007894 <_svfiprintf_r+0x7c>
 8007892:	e0a5      	b.n	80079e0 <_svfiprintf_r+0x1c8>
 8007894:	2201      	movs	r2, #1
 8007896:	2300      	movs	r3, #0
 8007898:	4252      	negs	r2, r2
 800789a:	6062      	str	r2, [r4, #4]
 800789c:	a904      	add	r1, sp, #16
 800789e:	3254      	adds	r2, #84	; 0x54
 80078a0:	1852      	adds	r2, r2, r1
 80078a2:	1c6e      	adds	r6, r5, #1
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	60e3      	str	r3, [r4, #12]
 80078a8:	60a3      	str	r3, [r4, #8]
 80078aa:	7013      	strb	r3, [r2, #0]
 80078ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80078ae:	2205      	movs	r2, #5
 80078b0:	7831      	ldrb	r1, [r6, #0]
 80078b2:	4854      	ldr	r0, [pc, #336]	; (8007a04 <_svfiprintf_r+0x1ec>)
 80078b4:	f000 fa32 	bl	8007d1c <memchr>
 80078b8:	1c75      	adds	r5, r6, #1
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d11f      	bne.n	80078fe <_svfiprintf_r+0xe6>
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	06d3      	lsls	r3, r2, #27
 80078c2:	d504      	bpl.n	80078ce <_svfiprintf_r+0xb6>
 80078c4:	2353      	movs	r3, #83	; 0x53
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	185b      	adds	r3, r3, r1
 80078ca:	2120      	movs	r1, #32
 80078cc:	7019      	strb	r1, [r3, #0]
 80078ce:	0713      	lsls	r3, r2, #28
 80078d0:	d504      	bpl.n	80078dc <_svfiprintf_r+0xc4>
 80078d2:	2353      	movs	r3, #83	; 0x53
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	185b      	adds	r3, r3, r1
 80078d8:	212b      	movs	r1, #43	; 0x2b
 80078da:	7019      	strb	r1, [r3, #0]
 80078dc:	7833      	ldrb	r3, [r6, #0]
 80078de:	2b2a      	cmp	r3, #42	; 0x2a
 80078e0:	d016      	beq.n	8007910 <_svfiprintf_r+0xf8>
 80078e2:	0035      	movs	r5, r6
 80078e4:	2100      	movs	r1, #0
 80078e6:	200a      	movs	r0, #10
 80078e8:	68e3      	ldr	r3, [r4, #12]
 80078ea:	782a      	ldrb	r2, [r5, #0]
 80078ec:	1c6e      	adds	r6, r5, #1
 80078ee:	3a30      	subs	r2, #48	; 0x30
 80078f0:	2a09      	cmp	r2, #9
 80078f2:	d94e      	bls.n	8007992 <_svfiprintf_r+0x17a>
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d111      	bne.n	800791c <_svfiprintf_r+0x104>
 80078f8:	e017      	b.n	800792a <_svfiprintf_r+0x112>
 80078fa:	3501      	adds	r5, #1
 80078fc:	e7b0      	b.n	8007860 <_svfiprintf_r+0x48>
 80078fe:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <_svfiprintf_r+0x1ec>)
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1ac0      	subs	r0, r0, r3
 8007904:	2301      	movs	r3, #1
 8007906:	4083      	lsls	r3, r0
 8007908:	4313      	orrs	r3, r2
 800790a:	002e      	movs	r6, r5
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	e7ce      	b.n	80078ae <_svfiprintf_r+0x96>
 8007910:	9b07      	ldr	r3, [sp, #28]
 8007912:	1d19      	adds	r1, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9107      	str	r1, [sp, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	db01      	blt.n	8007920 <_svfiprintf_r+0x108>
 800791c:	930b      	str	r3, [sp, #44]	; 0x2c
 800791e:	e004      	b.n	800792a <_svfiprintf_r+0x112>
 8007920:	425b      	negs	r3, r3
 8007922:	60e3      	str	r3, [r4, #12]
 8007924:	2302      	movs	r3, #2
 8007926:	4313      	orrs	r3, r2
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	782b      	ldrb	r3, [r5, #0]
 800792c:	2b2e      	cmp	r3, #46	; 0x2e
 800792e:	d10a      	bne.n	8007946 <_svfiprintf_r+0x12e>
 8007930:	786b      	ldrb	r3, [r5, #1]
 8007932:	2b2a      	cmp	r3, #42	; 0x2a
 8007934:	d135      	bne.n	80079a2 <_svfiprintf_r+0x18a>
 8007936:	9b07      	ldr	r3, [sp, #28]
 8007938:	3502      	adds	r5, #2
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	9207      	str	r2, [sp, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db2b      	blt.n	800799c <_svfiprintf_r+0x184>
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	4e30      	ldr	r6, [pc, #192]	; (8007a08 <_svfiprintf_r+0x1f0>)
 8007948:	2203      	movs	r2, #3
 800794a:	0030      	movs	r0, r6
 800794c:	7829      	ldrb	r1, [r5, #0]
 800794e:	f000 f9e5 	bl	8007d1c <memchr>
 8007952:	2800      	cmp	r0, #0
 8007954:	d006      	beq.n	8007964 <_svfiprintf_r+0x14c>
 8007956:	2340      	movs	r3, #64	; 0x40
 8007958:	1b80      	subs	r0, r0, r6
 800795a:	4083      	lsls	r3, r0
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	3501      	adds	r5, #1
 8007960:	4313      	orrs	r3, r2
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	7829      	ldrb	r1, [r5, #0]
 8007966:	2206      	movs	r2, #6
 8007968:	4828      	ldr	r0, [pc, #160]	; (8007a0c <_svfiprintf_r+0x1f4>)
 800796a:	1c6e      	adds	r6, r5, #1
 800796c:	7621      	strb	r1, [r4, #24]
 800796e:	f000 f9d5 	bl	8007d1c <memchr>
 8007972:	2800      	cmp	r0, #0
 8007974:	d03c      	beq.n	80079f0 <_svfiprintf_r+0x1d8>
 8007976:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <_svfiprintf_r+0x1f8>)
 8007978:	2b00      	cmp	r3, #0
 800797a:	d125      	bne.n	80079c8 <_svfiprintf_r+0x1b0>
 800797c:	2207      	movs	r2, #7
 800797e:	9b07      	ldr	r3, [sp, #28]
 8007980:	3307      	adds	r3, #7
 8007982:	4393      	bics	r3, r2
 8007984:	3308      	adds	r3, #8
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	6963      	ldr	r3, [r4, #20]
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	189b      	adds	r3, r3, r2
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	e765      	b.n	800785e <_svfiprintf_r+0x46>
 8007992:	4343      	muls	r3, r0
 8007994:	0035      	movs	r5, r6
 8007996:	2101      	movs	r1, #1
 8007998:	189b      	adds	r3, r3, r2
 800799a:	e7a6      	b.n	80078ea <_svfiprintf_r+0xd2>
 800799c:	2301      	movs	r3, #1
 800799e:	425b      	negs	r3, r3
 80079a0:	e7d0      	b.n	8007944 <_svfiprintf_r+0x12c>
 80079a2:	2300      	movs	r3, #0
 80079a4:	200a      	movs	r0, #10
 80079a6:	001a      	movs	r2, r3
 80079a8:	3501      	adds	r5, #1
 80079aa:	6063      	str	r3, [r4, #4]
 80079ac:	7829      	ldrb	r1, [r5, #0]
 80079ae:	1c6e      	adds	r6, r5, #1
 80079b0:	3930      	subs	r1, #48	; 0x30
 80079b2:	2909      	cmp	r1, #9
 80079b4:	d903      	bls.n	80079be <_svfiprintf_r+0x1a6>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0c5      	beq.n	8007946 <_svfiprintf_r+0x12e>
 80079ba:	9209      	str	r2, [sp, #36]	; 0x24
 80079bc:	e7c3      	b.n	8007946 <_svfiprintf_r+0x12e>
 80079be:	4342      	muls	r2, r0
 80079c0:	0035      	movs	r5, r6
 80079c2:	2301      	movs	r3, #1
 80079c4:	1852      	adds	r2, r2, r1
 80079c6:	e7f1      	b.n	80079ac <_svfiprintf_r+0x194>
 80079c8:	ab07      	add	r3, sp, #28
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	003a      	movs	r2, r7
 80079ce:	0021      	movs	r1, r4
 80079d0:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <_svfiprintf_r+0x1fc>)
 80079d2:	9803      	ldr	r0, [sp, #12]
 80079d4:	e000      	b.n	80079d8 <_svfiprintf_r+0x1c0>
 80079d6:	bf00      	nop
 80079d8:	9004      	str	r0, [sp, #16]
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	3301      	adds	r3, #1
 80079de:	d1d3      	bne.n	8007988 <_svfiprintf_r+0x170>
 80079e0:	89bb      	ldrh	r3, [r7, #12]
 80079e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80079e4:	065b      	lsls	r3, r3, #25
 80079e6:	d400      	bmi.n	80079ea <_svfiprintf_r+0x1d2>
 80079e8:	e72d      	b.n	8007846 <_svfiprintf_r+0x2e>
 80079ea:	2001      	movs	r0, #1
 80079ec:	4240      	negs	r0, r0
 80079ee:	e72a      	b.n	8007846 <_svfiprintf_r+0x2e>
 80079f0:	ab07      	add	r3, sp, #28
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	003a      	movs	r2, r7
 80079f6:	0021      	movs	r1, r4
 80079f8:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <_svfiprintf_r+0x1fc>)
 80079fa:	9803      	ldr	r0, [sp, #12]
 80079fc:	f000 f87c 	bl	8007af8 <_printf_i>
 8007a00:	e7ea      	b.n	80079d8 <_svfiprintf_r+0x1c0>
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	080082bd 	.word	0x080082bd
 8007a08:	080082c3 	.word	0x080082c3
 8007a0c:	080082c7 	.word	0x080082c7
 8007a10:	00000000 	.word	0x00000000
 8007a14:	08007755 	.word	0x08007755

08007a18 <_printf_common>:
 8007a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a1a:	0015      	movs	r5, r2
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	688a      	ldr	r2, [r1, #8]
 8007a20:	690b      	ldr	r3, [r1, #16]
 8007a22:	000c      	movs	r4, r1
 8007a24:	9000      	str	r0, [sp, #0]
 8007a26:	4293      	cmp	r3, r2
 8007a28:	da00      	bge.n	8007a2c <_printf_common+0x14>
 8007a2a:	0013      	movs	r3, r2
 8007a2c:	0022      	movs	r2, r4
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	3243      	adds	r2, #67	; 0x43
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	d001      	beq.n	8007a3c <_printf_common+0x24>
 8007a38:	3301      	adds	r3, #1
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	069b      	lsls	r3, r3, #26
 8007a40:	d502      	bpl.n	8007a48 <_printf_common+0x30>
 8007a42:	682b      	ldr	r3, [r5, #0]
 8007a44:	3302      	adds	r3, #2
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	2306      	movs	r3, #6
 8007a4c:	0017      	movs	r7, r2
 8007a4e:	401f      	ands	r7, r3
 8007a50:	421a      	tst	r2, r3
 8007a52:	d027      	beq.n	8007aa4 <_printf_common+0x8c>
 8007a54:	0023      	movs	r3, r4
 8007a56:	3343      	adds	r3, #67	; 0x43
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	1e5a      	subs	r2, r3, #1
 8007a5c:	4193      	sbcs	r3, r2
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	0692      	lsls	r2, r2, #26
 8007a62:	d430      	bmi.n	8007ac6 <_printf_common+0xae>
 8007a64:	0022      	movs	r2, r4
 8007a66:	9901      	ldr	r1, [sp, #4]
 8007a68:	9800      	ldr	r0, [sp, #0]
 8007a6a:	9e08      	ldr	r6, [sp, #32]
 8007a6c:	3243      	adds	r2, #67	; 0x43
 8007a6e:	47b0      	blx	r6
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d025      	beq.n	8007ac0 <_printf_common+0xa8>
 8007a74:	2306      	movs	r3, #6
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	682a      	ldr	r2, [r5, #0]
 8007a7a:	68e1      	ldr	r1, [r4, #12]
 8007a7c:	2500      	movs	r5, #0
 8007a7e:	4003      	ands	r3, r0
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d103      	bne.n	8007a8c <_printf_common+0x74>
 8007a84:	1a8d      	subs	r5, r1, r2
 8007a86:	43eb      	mvns	r3, r5
 8007a88:	17db      	asrs	r3, r3, #31
 8007a8a:	401d      	ands	r5, r3
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	6922      	ldr	r2, [r4, #16]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	dd01      	ble.n	8007a98 <_printf_common+0x80>
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	18ed      	adds	r5, r5, r3
 8007a98:	2700      	movs	r7, #0
 8007a9a:	42bd      	cmp	r5, r7
 8007a9c:	d120      	bne.n	8007ae0 <_printf_common+0xc8>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e010      	b.n	8007ac4 <_printf_common+0xac>
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	68e3      	ldr	r3, [r4, #12]
 8007aa6:	682a      	ldr	r2, [r5, #0]
 8007aa8:	1a9b      	subs	r3, r3, r2
 8007aaa:	42bb      	cmp	r3, r7
 8007aac:	ddd2      	ble.n	8007a54 <_printf_common+0x3c>
 8007aae:	0022      	movs	r2, r4
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9901      	ldr	r1, [sp, #4]
 8007ab4:	9800      	ldr	r0, [sp, #0]
 8007ab6:	9e08      	ldr	r6, [sp, #32]
 8007ab8:	3219      	adds	r2, #25
 8007aba:	47b0      	blx	r6
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d1f0      	bne.n	8007aa2 <_printf_common+0x8a>
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	4240      	negs	r0, r0
 8007ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ac6:	2030      	movs	r0, #48	; 0x30
 8007ac8:	18e1      	adds	r1, r4, r3
 8007aca:	3143      	adds	r1, #67	; 0x43
 8007acc:	7008      	strb	r0, [r1, #0]
 8007ace:	0021      	movs	r1, r4
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	3145      	adds	r1, #69	; 0x45
 8007ad4:	7809      	ldrb	r1, [r1, #0]
 8007ad6:	18a2      	adds	r2, r4, r2
 8007ad8:	3243      	adds	r2, #67	; 0x43
 8007ada:	3302      	adds	r3, #2
 8007adc:	7011      	strb	r1, [r2, #0]
 8007ade:	e7c1      	b.n	8007a64 <_printf_common+0x4c>
 8007ae0:	0022      	movs	r2, r4
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	9901      	ldr	r1, [sp, #4]
 8007ae6:	9800      	ldr	r0, [sp, #0]
 8007ae8:	9e08      	ldr	r6, [sp, #32]
 8007aea:	321a      	adds	r2, #26
 8007aec:	47b0      	blx	r6
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d0e6      	beq.n	8007ac0 <_printf_common+0xa8>
 8007af2:	3701      	adds	r7, #1
 8007af4:	e7d1      	b.n	8007a9a <_printf_common+0x82>
	...

08007af8 <_printf_i>:
 8007af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007afa:	b08b      	sub	sp, #44	; 0x2c
 8007afc:	9206      	str	r2, [sp, #24]
 8007afe:	000a      	movs	r2, r1
 8007b00:	3243      	adds	r2, #67	; 0x43
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	9005      	str	r0, [sp, #20]
 8007b06:	9204      	str	r2, [sp, #16]
 8007b08:	7e0a      	ldrb	r2, [r1, #24]
 8007b0a:	000c      	movs	r4, r1
 8007b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b0e:	2a78      	cmp	r2, #120	; 0x78
 8007b10:	d807      	bhi.n	8007b22 <_printf_i+0x2a>
 8007b12:	2a62      	cmp	r2, #98	; 0x62
 8007b14:	d809      	bhi.n	8007b2a <_printf_i+0x32>
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d100      	bne.n	8007b1c <_printf_i+0x24>
 8007b1a:	e0c1      	b.n	8007ca0 <_printf_i+0x1a8>
 8007b1c:	2a58      	cmp	r2, #88	; 0x58
 8007b1e:	d100      	bne.n	8007b22 <_printf_i+0x2a>
 8007b20:	e08c      	b.n	8007c3c <_printf_i+0x144>
 8007b22:	0026      	movs	r6, r4
 8007b24:	3642      	adds	r6, #66	; 0x42
 8007b26:	7032      	strb	r2, [r6, #0]
 8007b28:	e022      	b.n	8007b70 <_printf_i+0x78>
 8007b2a:	0010      	movs	r0, r2
 8007b2c:	3863      	subs	r0, #99	; 0x63
 8007b2e:	2815      	cmp	r0, #21
 8007b30:	d8f7      	bhi.n	8007b22 <_printf_i+0x2a>
 8007b32:	f7f8 fae7 	bl	8000104 <__gnu_thumb1_case_shi>
 8007b36:	0016      	.short	0x0016
 8007b38:	fff6001f 	.word	0xfff6001f
 8007b3c:	fff6fff6 	.word	0xfff6fff6
 8007b40:	001ffff6 	.word	0x001ffff6
 8007b44:	fff6fff6 	.word	0xfff6fff6
 8007b48:	fff6fff6 	.word	0xfff6fff6
 8007b4c:	003600a8 	.word	0x003600a8
 8007b50:	fff6009a 	.word	0xfff6009a
 8007b54:	00b9fff6 	.word	0x00b9fff6
 8007b58:	0036fff6 	.word	0x0036fff6
 8007b5c:	fff6fff6 	.word	0xfff6fff6
 8007b60:	009e      	.short	0x009e
 8007b62:	0026      	movs	r6, r4
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	3642      	adds	r6, #66	; 0x42
 8007b68:	1d11      	adds	r1, r2, #4
 8007b6a:	6019      	str	r1, [r3, #0]
 8007b6c:	6813      	ldr	r3, [r2, #0]
 8007b6e:	7033      	strb	r3, [r6, #0]
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0a7      	b.n	8007cc4 <_printf_i+0x1cc>
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	6819      	ldr	r1, [r3, #0]
 8007b78:	1d0a      	adds	r2, r1, #4
 8007b7a:	0605      	lsls	r5, r0, #24
 8007b7c:	d50b      	bpl.n	8007b96 <_printf_i+0x9e>
 8007b7e:	680d      	ldr	r5, [r1, #0]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	da03      	bge.n	8007b8e <_printf_i+0x96>
 8007b86:	232d      	movs	r3, #45	; 0x2d
 8007b88:	9a04      	ldr	r2, [sp, #16]
 8007b8a:	426d      	negs	r5, r5
 8007b8c:	7013      	strb	r3, [r2, #0]
 8007b8e:	4b61      	ldr	r3, [pc, #388]	; (8007d14 <_printf_i+0x21c>)
 8007b90:	270a      	movs	r7, #10
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	e01b      	b.n	8007bce <_printf_i+0xd6>
 8007b96:	680d      	ldr	r5, [r1, #0]
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	0641      	lsls	r1, r0, #25
 8007b9c:	d5f1      	bpl.n	8007b82 <_printf_i+0x8a>
 8007b9e:	b22d      	sxth	r5, r5
 8007ba0:	e7ef      	b.n	8007b82 <_printf_i+0x8a>
 8007ba2:	680d      	ldr	r5, [r1, #0]
 8007ba4:	6819      	ldr	r1, [r3, #0]
 8007ba6:	1d08      	adds	r0, r1, #4
 8007ba8:	6018      	str	r0, [r3, #0]
 8007baa:	062e      	lsls	r6, r5, #24
 8007bac:	d501      	bpl.n	8007bb2 <_printf_i+0xba>
 8007bae:	680d      	ldr	r5, [r1, #0]
 8007bb0:	e003      	b.n	8007bba <_printf_i+0xc2>
 8007bb2:	066d      	lsls	r5, r5, #25
 8007bb4:	d5fb      	bpl.n	8007bae <_printf_i+0xb6>
 8007bb6:	680d      	ldr	r5, [r1, #0]
 8007bb8:	b2ad      	uxth	r5, r5
 8007bba:	4b56      	ldr	r3, [pc, #344]	; (8007d14 <_printf_i+0x21c>)
 8007bbc:	2708      	movs	r7, #8
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	2a6f      	cmp	r2, #111	; 0x6f
 8007bc2:	d000      	beq.n	8007bc6 <_printf_i+0xce>
 8007bc4:	3702      	adds	r7, #2
 8007bc6:	0023      	movs	r3, r4
 8007bc8:	2200      	movs	r2, #0
 8007bca:	3343      	adds	r3, #67	; 0x43
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	6863      	ldr	r3, [r4, #4]
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db03      	blt.n	8007bde <_printf_i+0xe6>
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	6821      	ldr	r1, [r4, #0]
 8007bda:	4391      	bics	r1, r2
 8007bdc:	6021      	str	r1, [r4, #0]
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	d102      	bne.n	8007be8 <_printf_i+0xf0>
 8007be2:	9e04      	ldr	r6, [sp, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <_printf_i+0x10a>
 8007be8:	9e04      	ldr	r6, [sp, #16]
 8007bea:	0028      	movs	r0, r5
 8007bec:	0039      	movs	r1, r7
 8007bee:	f7f8 fb19 	bl	8000224 <__aeabi_uidivmod>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	3e01      	subs	r6, #1
 8007bf6:	5c5b      	ldrb	r3, [r3, r1]
 8007bf8:	7033      	strb	r3, [r6, #0]
 8007bfa:	002b      	movs	r3, r5
 8007bfc:	0005      	movs	r5, r0
 8007bfe:	429f      	cmp	r7, r3
 8007c00:	d9f3      	bls.n	8007bea <_printf_i+0xf2>
 8007c02:	2f08      	cmp	r7, #8
 8007c04:	d109      	bne.n	8007c1a <_printf_i+0x122>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	07db      	lsls	r3, r3, #31
 8007c0a:	d506      	bpl.n	8007c1a <_printf_i+0x122>
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	6922      	ldr	r2, [r4, #16]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	dc02      	bgt.n	8007c1a <_printf_i+0x122>
 8007c14:	2330      	movs	r3, #48	; 0x30
 8007c16:	3e01      	subs	r6, #1
 8007c18:	7033      	strb	r3, [r6, #0]
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	6123      	str	r3, [r4, #16]
 8007c20:	9b07      	ldr	r3, [sp, #28]
 8007c22:	0021      	movs	r1, r4
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	9805      	ldr	r0, [sp, #20]
 8007c28:	9b06      	ldr	r3, [sp, #24]
 8007c2a:	aa09      	add	r2, sp, #36	; 0x24
 8007c2c:	f7ff fef4 	bl	8007a18 <_printf_common>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d14c      	bne.n	8007cce <_printf_i+0x1d6>
 8007c34:	2001      	movs	r0, #1
 8007c36:	4240      	negs	r0, r0
 8007c38:	b00b      	add	sp, #44	; 0x2c
 8007c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3c:	3145      	adds	r1, #69	; 0x45
 8007c3e:	700a      	strb	r2, [r1, #0]
 8007c40:	4a34      	ldr	r2, [pc, #208]	; (8007d14 <_printf_i+0x21c>)
 8007c42:	9203      	str	r2, [sp, #12]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	6821      	ldr	r1, [r4, #0]
 8007c48:	ca20      	ldmia	r2!, {r5}
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	0608      	lsls	r0, r1, #24
 8007c4e:	d516      	bpl.n	8007c7e <_printf_i+0x186>
 8007c50:	07cb      	lsls	r3, r1, #31
 8007c52:	d502      	bpl.n	8007c5a <_printf_i+0x162>
 8007c54:	2320      	movs	r3, #32
 8007c56:	4319      	orrs	r1, r3
 8007c58:	6021      	str	r1, [r4, #0]
 8007c5a:	2710      	movs	r7, #16
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	d1b2      	bne.n	8007bc6 <_printf_i+0xce>
 8007c60:	2320      	movs	r3, #32
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	439a      	bics	r2, r3
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	e7ad      	b.n	8007bc6 <_printf_i+0xce>
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	6809      	ldr	r1, [r1, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	0022      	movs	r2, r4
 8007c74:	2178      	movs	r1, #120	; 0x78
 8007c76:	3245      	adds	r2, #69	; 0x45
 8007c78:	7011      	strb	r1, [r2, #0]
 8007c7a:	4a27      	ldr	r2, [pc, #156]	; (8007d18 <_printf_i+0x220>)
 8007c7c:	e7e1      	b.n	8007c42 <_printf_i+0x14a>
 8007c7e:	0648      	lsls	r0, r1, #25
 8007c80:	d5e6      	bpl.n	8007c50 <_printf_i+0x158>
 8007c82:	b2ad      	uxth	r5, r5
 8007c84:	e7e4      	b.n	8007c50 <_printf_i+0x158>
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	680d      	ldr	r5, [r1, #0]
 8007c8a:	1d10      	adds	r0, r2, #4
 8007c8c:	6949      	ldr	r1, [r1, #20]
 8007c8e:	6018      	str	r0, [r3, #0]
 8007c90:	6813      	ldr	r3, [r2, #0]
 8007c92:	062e      	lsls	r6, r5, #24
 8007c94:	d501      	bpl.n	8007c9a <_printf_i+0x1a2>
 8007c96:	6019      	str	r1, [r3, #0]
 8007c98:	e002      	b.n	8007ca0 <_printf_i+0x1a8>
 8007c9a:	066d      	lsls	r5, r5, #25
 8007c9c:	d5fb      	bpl.n	8007c96 <_printf_i+0x19e>
 8007c9e:	8019      	strh	r1, [r3, #0]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9e04      	ldr	r6, [sp, #16]
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	e7bb      	b.n	8007c20 <_printf_i+0x128>
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	1d11      	adds	r1, r2, #4
 8007cac:	6019      	str	r1, [r3, #0]
 8007cae:	6816      	ldr	r6, [r2, #0]
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	0030      	movs	r0, r6
 8007cb4:	6862      	ldr	r2, [r4, #4]
 8007cb6:	f000 f831 	bl	8007d1c <memchr>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d001      	beq.n	8007cc2 <_printf_i+0x1ca>
 8007cbe:	1b80      	subs	r0, r0, r6
 8007cc0:	6060      	str	r0, [r4, #4]
 8007cc2:	6863      	ldr	r3, [r4, #4]
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	e7a8      	b.n	8007c20 <_printf_i+0x128>
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	0032      	movs	r2, r6
 8007cd2:	9906      	ldr	r1, [sp, #24]
 8007cd4:	9805      	ldr	r0, [sp, #20]
 8007cd6:	9d07      	ldr	r5, [sp, #28]
 8007cd8:	47a8      	blx	r5
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d0aa      	beq.n	8007c34 <_printf_i+0x13c>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	079b      	lsls	r3, r3, #30
 8007ce2:	d415      	bmi.n	8007d10 <_printf_i+0x218>
 8007ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce6:	68e0      	ldr	r0, [r4, #12]
 8007ce8:	4298      	cmp	r0, r3
 8007cea:	daa5      	bge.n	8007c38 <_printf_i+0x140>
 8007cec:	0018      	movs	r0, r3
 8007cee:	e7a3      	b.n	8007c38 <_printf_i+0x140>
 8007cf0:	0022      	movs	r2, r4
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	9906      	ldr	r1, [sp, #24]
 8007cf6:	9805      	ldr	r0, [sp, #20]
 8007cf8:	9e07      	ldr	r6, [sp, #28]
 8007cfa:	3219      	adds	r2, #25
 8007cfc:	47b0      	blx	r6
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d098      	beq.n	8007c34 <_printf_i+0x13c>
 8007d02:	3501      	adds	r5, #1
 8007d04:	68e3      	ldr	r3, [r4, #12]
 8007d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	42ab      	cmp	r3, r5
 8007d0c:	dcf0      	bgt.n	8007cf0 <_printf_i+0x1f8>
 8007d0e:	e7e9      	b.n	8007ce4 <_printf_i+0x1ec>
 8007d10:	2500      	movs	r5, #0
 8007d12:	e7f7      	b.n	8007d04 <_printf_i+0x20c>
 8007d14:	080082ce 	.word	0x080082ce
 8007d18:	080082df 	.word	0x080082df

08007d1c <memchr>:
 8007d1c:	b2c9      	uxtb	r1, r1
 8007d1e:	1882      	adds	r2, r0, r2
 8007d20:	4290      	cmp	r0, r2
 8007d22:	d101      	bne.n	8007d28 <memchr+0xc>
 8007d24:	2000      	movs	r0, #0
 8007d26:	4770      	bx	lr
 8007d28:	7803      	ldrb	r3, [r0, #0]
 8007d2a:	428b      	cmp	r3, r1
 8007d2c:	d0fb      	beq.n	8007d26 <memchr+0xa>
 8007d2e:	3001      	adds	r0, #1
 8007d30:	e7f6      	b.n	8007d20 <memchr+0x4>

08007d32 <memcpy>:
 8007d32:	2300      	movs	r3, #0
 8007d34:	b510      	push	{r4, lr}
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xa>
 8007d3a:	bd10      	pop	{r4, pc}
 8007d3c:	5ccc      	ldrb	r4, [r1, r3]
 8007d3e:	54c4      	strb	r4, [r0, r3]
 8007d40:	3301      	adds	r3, #1
 8007d42:	e7f8      	b.n	8007d36 <memcpy+0x4>

08007d44 <memmove>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4288      	cmp	r0, r1
 8007d48:	d902      	bls.n	8007d50 <memmove+0xc>
 8007d4a:	188b      	adds	r3, r1, r2
 8007d4c:	4298      	cmp	r0, r3
 8007d4e:	d303      	bcc.n	8007d58 <memmove+0x14>
 8007d50:	2300      	movs	r3, #0
 8007d52:	e007      	b.n	8007d64 <memmove+0x20>
 8007d54:	5c8b      	ldrb	r3, [r1, r2]
 8007d56:	5483      	strb	r3, [r0, r2]
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	d2fb      	bcs.n	8007d54 <memmove+0x10>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	5ccc      	ldrb	r4, [r1, r3]
 8007d60:	54c4      	strb	r4, [r0, r3]
 8007d62:	3301      	adds	r3, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1fa      	bne.n	8007d5e <memmove+0x1a>
 8007d68:	e7f8      	b.n	8007d5c <memmove+0x18>
	...

08007d6c <_free_r>:
 8007d6c:	b570      	push	{r4, r5, r6, lr}
 8007d6e:	0005      	movs	r5, r0
 8007d70:	2900      	cmp	r1, #0
 8007d72:	d010      	beq.n	8007d96 <_free_r+0x2a>
 8007d74:	1f0c      	subs	r4, r1, #4
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da00      	bge.n	8007d7e <_free_r+0x12>
 8007d7c:	18e4      	adds	r4, r4, r3
 8007d7e:	0028      	movs	r0, r5
 8007d80:	f000 f918 	bl	8007fb4 <__malloc_lock>
 8007d84:	4a1d      	ldr	r2, [pc, #116]	; (8007dfc <_free_r+0x90>)
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d105      	bne.n	8007d98 <_free_r+0x2c>
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	6014      	str	r4, [r2, #0]
 8007d90:	0028      	movs	r0, r5
 8007d92:	f000 f917 	bl	8007fc4 <__malloc_unlock>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d908      	bls.n	8007dae <_free_r+0x42>
 8007d9c:	6821      	ldr	r1, [r4, #0]
 8007d9e:	1860      	adds	r0, r4, r1
 8007da0:	4283      	cmp	r3, r0
 8007da2:	d1f3      	bne.n	8007d8c <_free_r+0x20>
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	1841      	adds	r1, r0, r1
 8007daa:	6021      	str	r1, [r4, #0]
 8007dac:	e7ee      	b.n	8007d8c <_free_r+0x20>
 8007dae:	001a      	movs	r2, r3
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <_free_r+0x4e>
 8007db6:	42a3      	cmp	r3, r4
 8007db8:	d9f9      	bls.n	8007dae <_free_r+0x42>
 8007dba:	6811      	ldr	r1, [r2, #0]
 8007dbc:	1850      	adds	r0, r2, r1
 8007dbe:	42a0      	cmp	r0, r4
 8007dc0:	d10b      	bne.n	8007dda <_free_r+0x6e>
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	1809      	adds	r1, r1, r0
 8007dc6:	1850      	adds	r0, r2, r1
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	4283      	cmp	r3, r0
 8007dcc:	d1e0      	bne.n	8007d90 <_free_r+0x24>
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	1841      	adds	r1, r0, r1
 8007dd4:	6011      	str	r1, [r2, #0]
 8007dd6:	6053      	str	r3, [r2, #4]
 8007dd8:	e7da      	b.n	8007d90 <_free_r+0x24>
 8007dda:	42a0      	cmp	r0, r4
 8007ddc:	d902      	bls.n	8007de4 <_free_r+0x78>
 8007dde:	230c      	movs	r3, #12
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	e7d5      	b.n	8007d90 <_free_r+0x24>
 8007de4:	6821      	ldr	r1, [r4, #0]
 8007de6:	1860      	adds	r0, r4, r1
 8007de8:	4283      	cmp	r3, r0
 8007dea:	d103      	bne.n	8007df4 <_free_r+0x88>
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	1841      	adds	r1, r0, r1
 8007df2:	6021      	str	r1, [r4, #0]
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6054      	str	r4, [r2, #4]
 8007df8:	e7ca      	b.n	8007d90 <_free_r+0x24>
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	200002d0 	.word	0x200002d0

08007e00 <sbrk_aligned>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4e0f      	ldr	r6, [pc, #60]	; (8007e40 <sbrk_aligned+0x40>)
 8007e04:	000d      	movs	r5, r1
 8007e06:	6831      	ldr	r1, [r6, #0]
 8007e08:	0004      	movs	r4, r0
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d102      	bne.n	8007e14 <sbrk_aligned+0x14>
 8007e0e:	f000 f8bf 	bl	8007f90 <_sbrk_r>
 8007e12:	6030      	str	r0, [r6, #0]
 8007e14:	0029      	movs	r1, r5
 8007e16:	0020      	movs	r0, r4
 8007e18:	f000 f8ba 	bl	8007f90 <_sbrk_r>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d00a      	beq.n	8007e36 <sbrk_aligned+0x36>
 8007e20:	2303      	movs	r3, #3
 8007e22:	1cc5      	adds	r5, r0, #3
 8007e24:	439d      	bics	r5, r3
 8007e26:	42a8      	cmp	r0, r5
 8007e28:	d007      	beq.n	8007e3a <sbrk_aligned+0x3a>
 8007e2a:	1a29      	subs	r1, r5, r0
 8007e2c:	0020      	movs	r0, r4
 8007e2e:	f000 f8af 	bl	8007f90 <_sbrk_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d101      	bne.n	8007e3a <sbrk_aligned+0x3a>
 8007e36:	2501      	movs	r5, #1
 8007e38:	426d      	negs	r5, r5
 8007e3a:	0028      	movs	r0, r5
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	200002d4 	.word	0x200002d4

08007e44 <_malloc_r>:
 8007e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e46:	2203      	movs	r2, #3
 8007e48:	1ccb      	adds	r3, r1, #3
 8007e4a:	4393      	bics	r3, r2
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	0006      	movs	r6, r0
 8007e50:	001f      	movs	r7, r3
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d232      	bcs.n	8007ebc <_malloc_r+0x78>
 8007e56:	270c      	movs	r7, #12
 8007e58:	42b9      	cmp	r1, r7
 8007e5a:	d831      	bhi.n	8007ec0 <_malloc_r+0x7c>
 8007e5c:	0030      	movs	r0, r6
 8007e5e:	f000 f8a9 	bl	8007fb4 <__malloc_lock>
 8007e62:	4d32      	ldr	r5, [pc, #200]	; (8007f2c <_malloc_r+0xe8>)
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	001c      	movs	r4, r3
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	d12e      	bne.n	8007eca <_malloc_r+0x86>
 8007e6c:	0039      	movs	r1, r7
 8007e6e:	0030      	movs	r0, r6
 8007e70:	f7ff ffc6 	bl	8007e00 <sbrk_aligned>
 8007e74:	0004      	movs	r4, r0
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d11e      	bne.n	8007eb8 <_malloc_r+0x74>
 8007e7a:	682c      	ldr	r4, [r5, #0]
 8007e7c:	0025      	movs	r5, r4
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	d14a      	bne.n	8007f18 <_malloc_r+0xd4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	0029      	movs	r1, r5
 8007e86:	18e3      	adds	r3, r4, r3
 8007e88:	0030      	movs	r0, r6
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f000 f880 	bl	8007f90 <_sbrk_r>
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	4283      	cmp	r3, r0
 8007e94:	d143      	bne.n	8007f1e <_malloc_r+0xda>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	3703      	adds	r7, #3
 8007e9a:	1aff      	subs	r7, r7, r3
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	439f      	bics	r7, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	2f0c      	cmp	r7, #12
 8007ea4:	d200      	bcs.n	8007ea8 <_malloc_r+0x64>
 8007ea6:	270c      	movs	r7, #12
 8007ea8:	0039      	movs	r1, r7
 8007eaa:	0030      	movs	r0, r6
 8007eac:	f7ff ffa8 	bl	8007e00 <sbrk_aligned>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d034      	beq.n	8007f1e <_malloc_r+0xda>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	19df      	adds	r7, r3, r7
 8007eb8:	6027      	str	r7, [r4, #0]
 8007eba:	e013      	b.n	8007ee4 <_malloc_r+0xa0>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dacb      	bge.n	8007e58 <_malloc_r+0x14>
 8007ec0:	230c      	movs	r3, #12
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	0028      	movs	r0, r5
 8007ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	1bd1      	subs	r1, r2, r7
 8007ece:	d420      	bmi.n	8007f12 <_malloc_r+0xce>
 8007ed0:	290b      	cmp	r1, #11
 8007ed2:	d917      	bls.n	8007f04 <_malloc_r+0xc0>
 8007ed4:	19e2      	adds	r2, r4, r7
 8007ed6:	6027      	str	r7, [r4, #0]
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d111      	bne.n	8007f00 <_malloc_r+0xbc>
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	6053      	str	r3, [r2, #4]
 8007ee4:	0030      	movs	r0, r6
 8007ee6:	0025      	movs	r5, r4
 8007ee8:	f000 f86c 	bl	8007fc4 <__malloc_unlock>
 8007eec:	2207      	movs	r2, #7
 8007eee:	350b      	adds	r5, #11
 8007ef0:	1d23      	adds	r3, r4, #4
 8007ef2:	4395      	bics	r5, r2
 8007ef4:	1aea      	subs	r2, r5, r3
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	d0e5      	beq.n	8007ec6 <_malloc_r+0x82>
 8007efa:	1b5b      	subs	r3, r3, r5
 8007efc:	50a3      	str	r3, [r4, r2]
 8007efe:	e7e2      	b.n	8007ec6 <_malloc_r+0x82>
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	e7ec      	b.n	8007ede <_malloc_r+0x9a>
 8007f04:	6862      	ldr	r2, [r4, #4]
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	d101      	bne.n	8007f0e <_malloc_r+0xca>
 8007f0a:	602a      	str	r2, [r5, #0]
 8007f0c:	e7ea      	b.n	8007ee4 <_malloc_r+0xa0>
 8007f0e:	605a      	str	r2, [r3, #4]
 8007f10:	e7e8      	b.n	8007ee4 <_malloc_r+0xa0>
 8007f12:	0023      	movs	r3, r4
 8007f14:	6864      	ldr	r4, [r4, #4]
 8007f16:	e7a7      	b.n	8007e68 <_malloc_r+0x24>
 8007f18:	002c      	movs	r4, r5
 8007f1a:	686d      	ldr	r5, [r5, #4]
 8007f1c:	e7af      	b.n	8007e7e <_malloc_r+0x3a>
 8007f1e:	230c      	movs	r3, #12
 8007f20:	0030      	movs	r0, r6
 8007f22:	6033      	str	r3, [r6, #0]
 8007f24:	f000 f84e 	bl	8007fc4 <__malloc_unlock>
 8007f28:	e7cd      	b.n	8007ec6 <_malloc_r+0x82>
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	200002d0 	.word	0x200002d0

08007f30 <_realloc_r>:
 8007f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f32:	0007      	movs	r7, r0
 8007f34:	000e      	movs	r6, r1
 8007f36:	0014      	movs	r4, r2
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d105      	bne.n	8007f48 <_realloc_r+0x18>
 8007f3c:	0011      	movs	r1, r2
 8007f3e:	f7ff ff81 	bl	8007e44 <_malloc_r>
 8007f42:	0005      	movs	r5, r0
 8007f44:	0028      	movs	r0, r5
 8007f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d103      	bne.n	8007f54 <_realloc_r+0x24>
 8007f4c:	f7ff ff0e 	bl	8007d6c <_free_r>
 8007f50:	0025      	movs	r5, r4
 8007f52:	e7f7      	b.n	8007f44 <_realloc_r+0x14>
 8007f54:	f000 f83e 	bl	8007fd4 <_malloc_usable_size_r>
 8007f58:	9001      	str	r0, [sp, #4]
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	d803      	bhi.n	8007f66 <_realloc_r+0x36>
 8007f5e:	0035      	movs	r5, r6
 8007f60:	0843      	lsrs	r3, r0, #1
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	d3ee      	bcc.n	8007f44 <_realloc_r+0x14>
 8007f66:	0021      	movs	r1, r4
 8007f68:	0038      	movs	r0, r7
 8007f6a:	f7ff ff6b 	bl	8007e44 <_malloc_r>
 8007f6e:	1e05      	subs	r5, r0, #0
 8007f70:	d0e8      	beq.n	8007f44 <_realloc_r+0x14>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	0022      	movs	r2, r4
 8007f76:	429c      	cmp	r4, r3
 8007f78:	d900      	bls.n	8007f7c <_realloc_r+0x4c>
 8007f7a:	001a      	movs	r2, r3
 8007f7c:	0031      	movs	r1, r6
 8007f7e:	0028      	movs	r0, r5
 8007f80:	f7ff fed7 	bl	8007d32 <memcpy>
 8007f84:	0031      	movs	r1, r6
 8007f86:	0038      	movs	r0, r7
 8007f88:	f7ff fef0 	bl	8007d6c <_free_r>
 8007f8c:	e7da      	b.n	8007f44 <_realloc_r+0x14>
	...

08007f90 <_sbrk_r>:
 8007f90:	2300      	movs	r3, #0
 8007f92:	b570      	push	{r4, r5, r6, lr}
 8007f94:	4d06      	ldr	r5, [pc, #24]	; (8007fb0 <_sbrk_r+0x20>)
 8007f96:	0004      	movs	r4, r0
 8007f98:	0008      	movs	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7ff fa82 	bl	80074a4 <_sbrk>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d103      	bne.n	8007fac <_sbrk_r+0x1c>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d000      	beq.n	8007fac <_sbrk_r+0x1c>
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	200002d8 	.word	0x200002d8

08007fb4 <__malloc_lock>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	4802      	ldr	r0, [pc, #8]	; (8007fc0 <__malloc_lock+0xc>)
 8007fb8:	f000 f814 	bl	8007fe4 <__retarget_lock_acquire_recursive>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	200002dc 	.word	0x200002dc

08007fc4 <__malloc_unlock>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4802      	ldr	r0, [pc, #8]	; (8007fd0 <__malloc_unlock+0xc>)
 8007fc8:	f000 f80d 	bl	8007fe6 <__retarget_lock_release_recursive>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	200002dc 	.word	0x200002dc

08007fd4 <_malloc_usable_size_r>:
 8007fd4:	1f0b      	subs	r3, r1, #4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	1f18      	subs	r0, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	da01      	bge.n	8007fe2 <_malloc_usable_size_r+0xe>
 8007fde:	580b      	ldr	r3, [r1, r0]
 8007fe0:	18c0      	adds	r0, r0, r3
 8007fe2:	4770      	bx	lr

08007fe4 <__retarget_lock_acquire_recursive>:
 8007fe4:	4770      	bx	lr

08007fe6 <__retarget_lock_release_recursive>:
 8007fe6:	4770      	bx	lr

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
