
STM32-SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d6c  08007d6c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d74  08007d74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000078  08007df4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08007df4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001415a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002817  00000000  00000000  000341fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00036a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00037b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018457  00000000  00000000  00038b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c0c  00000000  00000000  00050fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d68d  00000000  00000000  00064be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  001022c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007ae4 	.word	0x08007ae4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08007ae4 	.word	0x08007ae4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0008      	movs	r0, r1
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 fb41 	bl	80008c0 <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 facd 	bl	80007e8 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb33 	bl	80008c0 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb29 	bl	80008c0 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fad9 	bl	8000834 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 facf 	bl	8000834 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_uldivmod>:
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d111      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d10f      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_uldivmod+0xe>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uldivmod+0x16>
 80002b4:	2100      	movs	r1, #0
 80002b6:	43c9      	mvns	r1, r1
 80002b8:	0008      	movs	r0, r1
 80002ba:	b407      	push	{r0, r1, r2}
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__aeabi_uldivmod+0x24>)
 80002be:	a102      	add	r1, pc, #8	; (adr r1, 80002c8 <__aeabi_uldivmod+0x24>)
 80002c0:	1840      	adds	r0, r0, r1
 80002c2:	9002      	str	r0, [sp, #8]
 80002c4:	bd03      	pop	{r0, r1, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	ffffff65 	.word	0xffffff65
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f81e 	bl	8000314 <__udivmoddi4>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_f2uiz>:
 80002e4:	219e      	movs	r1, #158	; 0x9e
 80002e6:	b510      	push	{r4, lr}
 80002e8:	05c9      	lsls	r1, r1, #23
 80002ea:	1c04      	adds	r4, r0, #0
 80002ec:	f7ff ffd0 	bl	8000290 <__aeabi_fcmpge>
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d103      	bne.n	80002fc <__aeabi_f2uiz+0x18>
 80002f4:	1c20      	adds	r0, r4, #0
 80002f6:	f000 fdfb 	bl	8000ef0 <__aeabi_f2iz>
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	219e      	movs	r1, #158	; 0x9e
 80002fe:	1c20      	adds	r0, r4, #0
 8000300:	05c9      	lsls	r1, r1, #23
 8000302:	f000 fc47 	bl	8000b94 <__aeabi_fsub>
 8000306:	f000 fdf3 	bl	8000ef0 <__aeabi_f2iz>
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	061b      	lsls	r3, r3, #24
 800030e:	469c      	mov	ip, r3
 8000310:	4460      	add	r0, ip
 8000312:	e7f2      	b.n	80002fa <__aeabi_f2uiz+0x16>

08000314 <__udivmoddi4>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	4657      	mov	r7, sl
 8000318:	464e      	mov	r6, r9
 800031a:	4645      	mov	r5, r8
 800031c:	46de      	mov	lr, fp
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	0004      	movs	r4, r0
 8000322:	000d      	movs	r5, r1
 8000324:	4692      	mov	sl, r2
 8000326:	4699      	mov	r9, r3
 8000328:	b083      	sub	sp, #12
 800032a:	428b      	cmp	r3, r1
 800032c:	d830      	bhi.n	8000390 <__udivmoddi4+0x7c>
 800032e:	d02d      	beq.n	800038c <__udivmoddi4+0x78>
 8000330:	4649      	mov	r1, r9
 8000332:	4650      	mov	r0, sl
 8000334:	f000 fe68 	bl	8001008 <__clzdi2>
 8000338:	0029      	movs	r1, r5
 800033a:	0006      	movs	r6, r0
 800033c:	0020      	movs	r0, r4
 800033e:	f000 fe63 	bl	8001008 <__clzdi2>
 8000342:	1a33      	subs	r3, r6, r0
 8000344:	4698      	mov	r8, r3
 8000346:	3b20      	subs	r3, #32
 8000348:	469b      	mov	fp, r3
 800034a:	d433      	bmi.n	80003b4 <__udivmoddi4+0xa0>
 800034c:	465a      	mov	r2, fp
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	4642      	mov	r2, r8
 8000354:	001f      	movs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	001e      	movs	r6, r3
 800035c:	42af      	cmp	r7, r5
 800035e:	d83a      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 8000360:	42af      	cmp	r7, r5
 8000362:	d100      	bne.n	8000366 <__udivmoddi4+0x52>
 8000364:	e078      	b.n	8000458 <__udivmoddi4+0x144>
 8000366:	465b      	mov	r3, fp
 8000368:	1ba4      	subs	r4, r4, r6
 800036a:	41bd      	sbcs	r5, r7
 800036c:	2b00      	cmp	r3, #0
 800036e:	da00      	bge.n	8000372 <__udivmoddi4+0x5e>
 8000370:	e075      	b.n	800045e <__udivmoddi4+0x14a>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	465a      	mov	r2, fp
 800037e:	4093      	lsls	r3, r2
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	4642      	mov	r2, r8
 8000386:	4093      	lsls	r3, r2
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	e028      	b.n	80003de <__udivmoddi4+0xca>
 800038c:	4282      	cmp	r2, r0
 800038e:	d9cf      	bls.n	8000330 <__udivmoddi4+0x1c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <__udivmoddi4+0x8e>
 800039e:	601c      	str	r4, [r3, #0]
 80003a0:	605d      	str	r5, [r3, #4]
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	b003      	add	sp, #12
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	46bb      	mov	fp, r7
 80003ac:	46b2      	mov	sl, r6
 80003ae:	46a9      	mov	r9, r5
 80003b0:	46a0      	mov	r8, r4
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b4:	4642      	mov	r2, r8
 80003b6:	2320      	movs	r3, #32
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	4652      	mov	r2, sl
 80003bc:	40da      	lsrs	r2, r3
 80003be:	4641      	mov	r1, r8
 80003c0:	0013      	movs	r3, r2
 80003c2:	464a      	mov	r2, r9
 80003c4:	408a      	lsls	r2, r1
 80003c6:	0017      	movs	r7, r2
 80003c8:	4642      	mov	r2, r8
 80003ca:	431f      	orrs	r7, r3
 80003cc:	4653      	mov	r3, sl
 80003ce:	4093      	lsls	r3, r2
 80003d0:	001e      	movs	r6, r3
 80003d2:	42af      	cmp	r7, r5
 80003d4:	d9c4      	bls.n	8000360 <__udivmoddi4+0x4c>
 80003d6:	2200      	movs	r2, #0
 80003d8:	2300      	movs	r3, #0
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	4643      	mov	r3, r8
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0d9      	beq.n	8000398 <__udivmoddi4+0x84>
 80003e4:	07fb      	lsls	r3, r7, #31
 80003e6:	0872      	lsrs	r2, r6, #1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	4646      	mov	r6, r8
 80003ec:	087b      	lsrs	r3, r7, #1
 80003ee:	e00e      	b.n	800040e <__udivmoddi4+0xfa>
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d101      	bne.n	80003f8 <__udivmoddi4+0xe4>
 80003f4:	42a2      	cmp	r2, r4
 80003f6:	d80c      	bhi.n	8000412 <__udivmoddi4+0xfe>
 80003f8:	1aa4      	subs	r4, r4, r2
 80003fa:	419d      	sbcs	r5, r3
 80003fc:	2001      	movs	r0, #1
 80003fe:	1924      	adds	r4, r4, r4
 8000400:	416d      	adcs	r5, r5
 8000402:	2100      	movs	r1, #0
 8000404:	3e01      	subs	r6, #1
 8000406:	1824      	adds	r4, r4, r0
 8000408:	414d      	adcs	r5, r1
 800040a:	2e00      	cmp	r6, #0
 800040c:	d006      	beq.n	800041c <__udivmoddi4+0x108>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d9ee      	bls.n	80003f0 <__udivmoddi4+0xdc>
 8000412:	3e01      	subs	r6, #1
 8000414:	1924      	adds	r4, r4, r4
 8000416:	416d      	adcs	r5, r5
 8000418:	2e00      	cmp	r6, #0
 800041a:	d1f8      	bne.n	800040e <__udivmoddi4+0xfa>
 800041c:	9800      	ldr	r0, [sp, #0]
 800041e:	9901      	ldr	r1, [sp, #4]
 8000420:	465b      	mov	r3, fp
 8000422:	1900      	adds	r0, r0, r4
 8000424:	4169      	adcs	r1, r5
 8000426:	2b00      	cmp	r3, #0
 8000428:	db24      	blt.n	8000474 <__udivmoddi4+0x160>
 800042a:	002b      	movs	r3, r5
 800042c:	465a      	mov	r2, fp
 800042e:	4644      	mov	r4, r8
 8000430:	40d3      	lsrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	db2a      	blt.n	8000496 <__udivmoddi4+0x182>
 8000440:	0026      	movs	r6, r4
 8000442:	409e      	lsls	r6, r3
 8000444:	0033      	movs	r3, r6
 8000446:	0026      	movs	r6, r4
 8000448:	4647      	mov	r7, r8
 800044a:	40be      	lsls	r6, r7
 800044c:	0032      	movs	r2, r6
 800044e:	1a80      	subs	r0, r0, r2
 8000450:	4199      	sbcs	r1, r3
 8000452:	9000      	str	r0, [sp, #0]
 8000454:	9101      	str	r1, [sp, #4]
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x84>
 8000458:	42a3      	cmp	r3, r4
 800045a:	d8bc      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 800045c:	e783      	b.n	8000366 <__udivmoddi4+0x52>
 800045e:	4642      	mov	r2, r8
 8000460:	2320      	movs	r3, #32
 8000462:	2100      	movs	r1, #0
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	9100      	str	r1, [sp, #0]
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	40da      	lsrs	r2, r3
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	e786      	b.n	8000382 <__udivmoddi4+0x6e>
 8000474:	4642      	mov	r2, r8
 8000476:	2320      	movs	r3, #32
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	4646      	mov	r6, r8
 800047e:	409a      	lsls	r2, r3
 8000480:	0023      	movs	r3, r4
 8000482:	40f3      	lsrs	r3, r6
 8000484:	4644      	mov	r4, r8
 8000486:	4313      	orrs	r3, r2
 8000488:	002a      	movs	r2, r5
 800048a:	40e2      	lsrs	r2, r4
 800048c:	001c      	movs	r4, r3
 800048e:	465b      	mov	r3, fp
 8000490:	0015      	movs	r5, r2
 8000492:	2b00      	cmp	r3, #0
 8000494:	dad4      	bge.n	8000440 <__udivmoddi4+0x12c>
 8000496:	4642      	mov	r2, r8
 8000498:	002f      	movs	r7, r5
 800049a:	2320      	movs	r3, #32
 800049c:	0026      	movs	r6, r4
 800049e:	4097      	lsls	r7, r2
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	40de      	lsrs	r6, r3
 80004a4:	003b      	movs	r3, r7
 80004a6:	4333      	orrs	r3, r6
 80004a8:	e7cd      	b.n	8000446 <__udivmoddi4+0x132>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_fadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46c6      	mov	lr, r8
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	024e      	lsls	r6, r1, #9
 80004b6:	0045      	lsls	r5, r0, #1
 80004b8:	004f      	lsls	r7, r1, #1
 80004ba:	00da      	lsls	r2, r3, #3
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	469c      	mov	ip, r3
 80004c0:	0a70      	lsrs	r0, r6, #9
 80004c2:	4690      	mov	r8, r2
 80004c4:	b500      	push	{lr}
 80004c6:	0e2d      	lsrs	r5, r5, #24
 80004c8:	0e3f      	lsrs	r7, r7, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09b6      	lsrs	r6, r6, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d04b      	beq.n	800056a <__aeabi_fadd+0xbe>
 80004d2:	1bea      	subs	r2, r5, r7
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	dd36      	ble.n	8000546 <__aeabi_fadd+0x9a>
 80004d8:	2f00      	cmp	r7, #0
 80004da:	d061      	beq.n	80005a0 <__aeabi_fadd+0xf4>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x36>
 80004e0:	e0ad      	b.n	800063e <__aeabi_fadd+0x192>
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	04db      	lsls	r3, r3, #19
 80004e6:	431e      	orrs	r6, r3
 80004e8:	2a1b      	cmp	r2, #27
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0x42>
 80004ec:	e0d3      	b.n	8000696 <__aeabi_fadd+0x1ea>
 80004ee:	2001      	movs	r0, #1
 80004f0:	4643      	mov	r3, r8
 80004f2:	1a18      	subs	r0, r3, r0
 80004f4:	0143      	lsls	r3, r0, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x4e>
 80004f8:	e08c      	b.n	8000614 <__aeabi_fadd+0x168>
 80004fa:	0180      	lsls	r0, r0, #6
 80004fc:	0987      	lsrs	r7, r0, #6
 80004fe:	0038      	movs	r0, r7
 8000500:	f000 fd64 	bl	8000fcc <__clzsi2>
 8000504:	3805      	subs	r0, #5
 8000506:	4087      	lsls	r7, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x62>
 800050c:	e0b6      	b.n	800067c <__aeabi_fadd+0x1d0>
 800050e:	1a2d      	subs	r5, r5, r0
 8000510:	48b3      	ldr	r0, [pc, #716]	; (80007e0 <__aeabi_fadd+0x334>)
 8000512:	4038      	ands	r0, r7
 8000514:	0743      	lsls	r3, r0, #29
 8000516:	d004      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000518:	230f      	movs	r3, #15
 800051a:	4003      	ands	r3, r0
 800051c:	2b04      	cmp	r3, #4
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000520:	3004      	adds	r0, #4
 8000522:	0143      	lsls	r3, r0, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x7c>
 8000526:	e078      	b.n	800061a <__aeabi_fadd+0x16e>
 8000528:	1c6a      	adds	r2, r5, #1
 800052a:	2dfe      	cmp	r5, #254	; 0xfe
 800052c:	d065      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800052e:	0180      	lsls	r0, r0, #6
 8000530:	0a43      	lsrs	r3, r0, #9
 8000532:	469c      	mov	ip, r3
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	4663      	mov	r3, ip
 8000538:	05d0      	lsls	r0, r2, #23
 800053a:	4318      	orrs	r0, r3
 800053c:	07e4      	lsls	r4, r4, #31
 800053e:	4320      	orrs	r0, r4
 8000540:	bc80      	pop	{r7}
 8000542:	46b8      	mov	r8, r7
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	2a00      	cmp	r2, #0
 8000548:	d035      	beq.n	80005b6 <__aeabi_fadd+0x10a>
 800054a:	1b7a      	subs	r2, r7, r5
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_fadd+0xa6>
 8000550:	e0af      	b.n	80006b2 <__aeabi_fadd+0x206>
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xae>
 8000558:	e0a7      	b.n	80006aa <__aeabi_fadd+0x1fe>
 800055a:	1e53      	subs	r3, r2, #1
 800055c:	2a01      	cmp	r2, #1
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0xb6>
 8000560:	e12f      	b.n	80007c2 <__aeabi_fadd+0x316>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d069      	beq.n	800063a <__aeabi_fadd+0x18e>
 8000566:	001a      	movs	r2, r3
 8000568:	e0aa      	b.n	80006c0 <__aeabi_fadd+0x214>
 800056a:	1be9      	subs	r1, r5, r7
 800056c:	2900      	cmp	r1, #0
 800056e:	dd70      	ble.n	8000652 <__aeabi_fadd+0x1a6>
 8000570:	2f00      	cmp	r7, #0
 8000572:	d037      	beq.n	80005e4 <__aeabi_fadd+0x138>
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d062      	beq.n	800063e <__aeabi_fadd+0x192>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	291b      	cmp	r1, #27
 8000580:	dc00      	bgt.n	8000584 <__aeabi_fadd+0xd8>
 8000582:	e0b0      	b.n	80006e6 <__aeabi_fadd+0x23a>
 8000584:	2001      	movs	r0, #1
 8000586:	4440      	add	r0, r8
 8000588:	0143      	lsls	r3, r0, #5
 800058a:	d543      	bpl.n	8000614 <__aeabi_fadd+0x168>
 800058c:	3501      	adds	r5, #1
 800058e:	2dff      	cmp	r5, #255	; 0xff
 8000590:	d033      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000592:	2301      	movs	r3, #1
 8000594:	4a93      	ldr	r2, [pc, #588]	; (80007e4 <__aeabi_fadd+0x338>)
 8000596:	4003      	ands	r3, r0
 8000598:	0840      	lsrs	r0, r0, #1
 800059a:	4010      	ands	r0, r2
 800059c:	4318      	orrs	r0, r3
 800059e:	e7b9      	b.n	8000514 <__aeabi_fadd+0x68>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xfa>
 80005a4:	e083      	b.n	80006ae <__aeabi_fadd+0x202>
 80005a6:	1e51      	subs	r1, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x102>
 80005ac:	e0d8      	b.n	8000760 <__aeabi_fadd+0x2b4>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d045      	beq.n	800063e <__aeabi_fadd+0x192>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e798      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005b6:	27fe      	movs	r7, #254	; 0xfe
 80005b8:	1c6a      	adds	r2, r5, #1
 80005ba:	4217      	tst	r7, r2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x114>
 80005be:	e086      	b.n	80006ce <__aeabi_fadd+0x222>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x11a>
 80005c4:	e0b7      	b.n	8000736 <__aeabi_fadd+0x28a>
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x122>
 80005cc:	e0f3      	b.n	80007b6 <__aeabi_fadd+0x30a>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d0b0      	beq.n	8000536 <__aeabi_fadd+0x8a>
 80005d4:	1b98      	subs	r0, r3, r6
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x130>
 80005da:	e0fa      	b.n	80007d2 <__aeabi_fadd+0x326>
 80005dc:	4643      	mov	r3, r8
 80005de:	000c      	movs	r4, r1
 80005e0:	1af0      	subs	r0, r6, r3
 80005e2:	e797      	b.n	8000514 <__aeabi_fadd+0x68>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x13e>
 80005e8:	e0c8      	b.n	800077c <__aeabi_fadd+0x2d0>
 80005ea:	1e4a      	subs	r2, r1, #1
 80005ec:	2901      	cmp	r1, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x146>
 80005f0:	e0ae      	b.n	8000750 <__aeabi_fadd+0x2a4>
 80005f2:	29ff      	cmp	r1, #255	; 0xff
 80005f4:	d023      	beq.n	800063e <__aeabi_fadd+0x192>
 80005f6:	0011      	movs	r1, r2
 80005f8:	e7c1      	b.n	800057e <__aeabi_fadd+0xd2>
 80005fa:	2300      	movs	r3, #0
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	469c      	mov	ip, r3
 8000600:	e799      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4211      	tst	r1, r2
 8000608:	d077      	beq.n	80006fa <__aeabi_fadd+0x24e>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d0f5      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800060e:	0015      	movs	r5, r2
 8000610:	4446      	add	r6, r8
 8000612:	0870      	lsrs	r0, r6, #1
 8000614:	0743      	lsls	r3, r0, #29
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0x16e>
 8000618:	e77e      	b.n	8000518 <__aeabi_fadd+0x6c>
 800061a:	08c3      	lsrs	r3, r0, #3
 800061c:	2dff      	cmp	r5, #255	; 0xff
 800061e:	d00e      	beq.n	800063e <__aeabi_fadd+0x192>
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	0a5b      	lsrs	r3, r3, #9
 8000624:	469c      	mov	ip, r3
 8000626:	b2ea      	uxtb	r2, r5
 8000628:	e785      	b.n	8000536 <__aeabi_fadd+0x8a>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d007      	beq.n	800063e <__aeabi_fadd+0x192>
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	03d2      	lsls	r2, r2, #15
 8000632:	4213      	tst	r3, r2
 8000634:	d003      	beq.n	800063e <__aeabi_fadd+0x192>
 8000636:	4210      	tst	r0, r2
 8000638:	d101      	bne.n	800063e <__aeabi_fadd+0x192>
 800063a:	000c      	movs	r4, r1
 800063c:	0003      	movs	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0db      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4318      	orrs	r0, r3
 8000648:	0240      	lsls	r0, r0, #9
 800064a:	0a43      	lsrs	r3, r0, #9
 800064c:	469c      	mov	ip, r3
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	e771      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000652:	2900      	cmp	r1, #0
 8000654:	d0d5      	beq.n	8000602 <__aeabi_fadd+0x156>
 8000656:	1b7a      	subs	r2, r7, r5
 8000658:	2d00      	cmp	r5, #0
 800065a:	d160      	bne.n	800071e <__aeabi_fadd+0x272>
 800065c:	4643      	mov	r3, r8
 800065e:	2b00      	cmp	r3, #0
 8000660:	d024      	beq.n	80006ac <__aeabi_fadd+0x200>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d073      	beq.n	8000750 <__aeabi_fadd+0x2a4>
 8000668:	2aff      	cmp	r2, #255	; 0xff
 800066a:	d0e7      	beq.n	800063c <__aeabi_fadd+0x190>
 800066c:	001a      	movs	r2, r3
 800066e:	2a1b      	cmp	r2, #27
 8000670:	dc00      	bgt.n	8000674 <__aeabi_fadd+0x1c8>
 8000672:	e085      	b.n	8000780 <__aeabi_fadd+0x2d4>
 8000674:	2001      	movs	r0, #1
 8000676:	003d      	movs	r5, r7
 8000678:	1980      	adds	r0, r0, r6
 800067a:	e785      	b.n	8000588 <__aeabi_fadd+0xdc>
 800067c:	2320      	movs	r3, #32
 800067e:	003a      	movs	r2, r7
 8000680:	1b45      	subs	r5, r0, r5
 8000682:	0038      	movs	r0, r7
 8000684:	3501      	adds	r5, #1
 8000686:	40ea      	lsrs	r2, r5
 8000688:	1b5d      	subs	r5, r3, r5
 800068a:	40a8      	lsls	r0, r5
 800068c:	1e43      	subs	r3, r0, #1
 800068e:	4198      	sbcs	r0, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4310      	orrs	r0, r2
 8000694:	e73e      	b.n	8000514 <__aeabi_fadd+0x68>
 8000696:	2320      	movs	r3, #32
 8000698:	0030      	movs	r0, r6
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	0031      	movs	r1, r6
 800069e:	4098      	lsls	r0, r3
 80006a0:	40d1      	lsrs	r1, r2
 80006a2:	1e43      	subs	r3, r0, #1
 80006a4:	4198      	sbcs	r0, r3
 80006a6:	4308      	orrs	r0, r1
 80006a8:	e722      	b.n	80004f0 <__aeabi_fadd+0x44>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	0015      	movs	r5, r2
 80006b0:	e7b4      	b.n	800061c <__aeabi_fadd+0x170>
 80006b2:	2fff      	cmp	r7, #255	; 0xff
 80006b4:	d0c1      	beq.n	800063a <__aeabi_fadd+0x18e>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	4640      	mov	r0, r8
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	4318      	orrs	r0, r3
 80006be:	4680      	mov	r8, r0
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd51      	ble.n	8000768 <__aeabi_fadd+0x2bc>
 80006c4:	2001      	movs	r0, #1
 80006c6:	000c      	movs	r4, r1
 80006c8:	003d      	movs	r5, r7
 80006ca:	1a30      	subs	r0, r6, r0
 80006cc:	e712      	b.n	80004f4 <__aeabi_fadd+0x48>
 80006ce:	4643      	mov	r3, r8
 80006d0:	1b9f      	subs	r7, r3, r6
 80006d2:	017b      	lsls	r3, r7, #5
 80006d4:	d42b      	bmi.n	800072e <__aeabi_fadd+0x282>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x230>
 80006da:	e710      	b.n	80004fe <__aeabi_fadd+0x52>
 80006dc:	2300      	movs	r3, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	469c      	mov	ip, r3
 80006e4:	e727      	b.n	8000536 <__aeabi_fadd+0x8a>
 80006e6:	2320      	movs	r3, #32
 80006e8:	0032      	movs	r2, r6
 80006ea:	0030      	movs	r0, r6
 80006ec:	40ca      	lsrs	r2, r1
 80006ee:	1a59      	subs	r1, r3, r1
 80006f0:	4088      	lsls	r0, r1
 80006f2:	1e43      	subs	r3, r0, #1
 80006f4:	4198      	sbcs	r0, r3
 80006f6:	4310      	orrs	r0, r2
 80006f8:	e745      	b.n	8000586 <__aeabi_fadd+0xda>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d14a      	bne.n	8000794 <__aeabi_fadd+0x2e8>
 80006fe:	4643      	mov	r3, r8
 8000700:	2b00      	cmp	r3, #0
 8000702:	d063      	beq.n	80007cc <__aeabi_fadd+0x320>
 8000704:	2200      	movs	r2, #0
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x260>
 800070a:	e714      	b.n	8000536 <__aeabi_fadd+0x8a>
 800070c:	0030      	movs	r0, r6
 800070e:	4440      	add	r0, r8
 8000710:	0143      	lsls	r3, r0, #5
 8000712:	d400      	bmi.n	8000716 <__aeabi_fadd+0x26a>
 8000714:	e77e      	b.n	8000614 <__aeabi_fadd+0x168>
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <__aeabi_fadd+0x334>)
 8000718:	3501      	adds	r5, #1
 800071a:	4018      	ands	r0, r3
 800071c:	e77a      	b.n	8000614 <__aeabi_fadd+0x168>
 800071e:	2fff      	cmp	r7, #255	; 0xff
 8000720:	d08c      	beq.n	800063c <__aeabi_fadd+0x190>
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	4641      	mov	r1, r8
 8000726:	04db      	lsls	r3, r3, #19
 8000728:	4319      	orrs	r1, r3
 800072a:	4688      	mov	r8, r1
 800072c:	e79f      	b.n	800066e <__aeabi_fadd+0x1c2>
 800072e:	4643      	mov	r3, r8
 8000730:	000c      	movs	r4, r1
 8000732:	1af7      	subs	r7, r6, r3
 8000734:	e6e3      	b.n	80004fe <__aeabi_fadd+0x52>
 8000736:	4642      	mov	r2, r8
 8000738:	2a00      	cmp	r2, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fadd+0x292>
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x17e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x298>
 8000742:	e77a      	b.n	800063a <__aeabi_fadd+0x18e>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	2400      	movs	r4, #0
 800074a:	469c      	mov	ip, r3
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	e6f2      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000750:	0030      	movs	r0, r6
 8000752:	4440      	add	r0, r8
 8000754:	2501      	movs	r5, #1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b0>
 800075a:	e75b      	b.n	8000614 <__aeabi_fadd+0x168>
 800075c:	2502      	movs	r5, #2
 800075e:	e718      	b.n	8000592 <__aeabi_fadd+0xe6>
 8000760:	4643      	mov	r3, r8
 8000762:	2501      	movs	r5, #1
 8000764:	1b98      	subs	r0, r3, r6
 8000766:	e6c5      	b.n	80004f4 <__aeabi_fadd+0x48>
 8000768:	2320      	movs	r3, #32
 800076a:	4644      	mov	r4, r8
 800076c:	4640      	mov	r0, r8
 800076e:	40d4      	lsrs	r4, r2
 8000770:	1a9a      	subs	r2, r3, r2
 8000772:	4090      	lsls	r0, r2
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	4320      	orrs	r0, r4
 800077a:	e7a4      	b.n	80006c6 <__aeabi_fadd+0x21a>
 800077c:	000d      	movs	r5, r1
 800077e:	e74d      	b.n	800061c <__aeabi_fadd+0x170>
 8000780:	2320      	movs	r3, #32
 8000782:	4641      	mov	r1, r8
 8000784:	4640      	mov	r0, r8
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1a9a      	subs	r2, r3, r2
 800078a:	4090      	lsls	r0, r2
 800078c:	1e43      	subs	r3, r0, #1
 800078e:	4198      	sbcs	r0, r3
 8000790:	4308      	orrs	r0, r1
 8000792:	e770      	b.n	8000676 <__aeabi_fadd+0x1ca>
 8000794:	4642      	mov	r2, r8
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x2f0>
 800079a:	e74f      	b.n	800063c <__aeabi_fadd+0x190>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2f6>
 80007a0:	e74d      	b.n	800063e <__aeabi_fadd+0x192>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4213      	tst	r3, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x300>
 80007aa:	e748      	b.n	800063e <__aeabi_fadd+0x192>
 80007ac:	4210      	tst	r0, r2
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x306>
 80007b0:	e745      	b.n	800063e <__aeabi_fadd+0x192>
 80007b2:	0003      	movs	r3, r0
 80007b4:	e743      	b.n	800063e <__aeabi_fadd+0x192>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d090      	beq.n	80006dc <__aeabi_fadd+0x230>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4684      	mov	ip, r0
 80007be:	2200      	movs	r2, #0
 80007c0:	e6b9      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007c2:	4643      	mov	r3, r8
 80007c4:	000c      	movs	r4, r1
 80007c6:	1af0      	subs	r0, r6, r3
 80007c8:	3501      	adds	r5, #1
 80007ca:	e693      	b.n	80004f4 <__aeabi_fadd+0x48>
 80007cc:	4684      	mov	ip, r0
 80007ce:	2200      	movs	r2, #0
 80007d0:	e6b1      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x32c>
 80007d6:	e71d      	b.n	8000614 <__aeabi_fadd+0x168>
 80007d8:	2300      	movs	r3, #0
 80007da:	2400      	movs	r4, #0
 80007dc:	469c      	mov	ip, r3
 80007de:	e6aa      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007e0:	fbffffff 	.word	0xfbffffff
 80007e4:	7dffffff 	.word	0x7dffffff

080007e8 <__eqsf2>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0042      	lsls	r2, r0, #1
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	024e      	lsls	r6, r1, #9
 80007f0:	004c      	lsls	r4, r1, #1
 80007f2:	0fc3      	lsrs	r3, r0, #31
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	2001      	movs	r0, #1
 80007f8:	0e12      	lsrs	r2, r2, #24
 80007fa:	0a76      	lsrs	r6, r6, #9
 80007fc:	0e24      	lsrs	r4, r4, #24
 80007fe:	0fc9      	lsrs	r1, r1, #31
 8000800:	2aff      	cmp	r2, #255	; 0xff
 8000802:	d006      	beq.n	8000812 <__eqsf2+0x2a>
 8000804:	2cff      	cmp	r4, #255	; 0xff
 8000806:	d003      	beq.n	8000810 <__eqsf2+0x28>
 8000808:	42a2      	cmp	r2, r4
 800080a:	d101      	bne.n	8000810 <__eqsf2+0x28>
 800080c:	42b5      	cmp	r5, r6
 800080e:	d006      	beq.n	800081e <__eqsf2+0x36>
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2d00      	cmp	r5, #0
 8000814:	d1fc      	bne.n	8000810 <__eqsf2+0x28>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d1fa      	bne.n	8000810 <__eqsf2+0x28>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d1f8      	bne.n	8000810 <__eqsf2+0x28>
 800081e:	428b      	cmp	r3, r1
 8000820:	d006      	beq.n	8000830 <__eqsf2+0x48>
 8000822:	2001      	movs	r0, #1
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1f3      	bne.n	8000810 <__eqsf2+0x28>
 8000828:	0028      	movs	r0, r5
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4198      	sbcs	r0, r3
 800082e:	e7ef      	b.n	8000810 <__eqsf2+0x28>
 8000830:	2000      	movs	r0, #0
 8000832:	e7ed      	b.n	8000810 <__eqsf2+0x28>

08000834 <__gesf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	024e      	lsls	r6, r1, #9
 800083c:	004c      	lsls	r4, r1, #1
 800083e:	0fc3      	lsrs	r3, r0, #31
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e12      	lsrs	r2, r2, #24
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc8      	lsrs	r0, r1, #31
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d01b      	beq.n	8000886 <__gesf2+0x52>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d00e      	beq.n	8000870 <__gesf2+0x3c>
 8000852:	2a00      	cmp	r2, #0
 8000854:	d11b      	bne.n	800088e <__gesf2+0x5a>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d101      	bne.n	800085e <__gesf2+0x2a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d01c      	beq.n	8000898 <__gesf2+0x64>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d00c      	beq.n	800087c <__gesf2+0x48>
 8000862:	4283      	cmp	r3, r0
 8000864:	d01c      	beq.n	80008a0 <__gesf2+0x6c>
 8000866:	2102      	movs	r1, #2
 8000868:	1e58      	subs	r0, r3, #1
 800086a:	4008      	ands	r0, r1
 800086c:	3801      	subs	r0, #1
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2e00      	cmp	r6, #0
 8000872:	d122      	bne.n	80008ba <__gesf2+0x86>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d1f4      	bne.n	8000862 <__gesf2+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d1f2      	bne.n	8000862 <__gesf2+0x2e>
 800087c:	2800      	cmp	r0, #0
 800087e:	d1f6      	bne.n	800086e <__gesf2+0x3a>
 8000880:	2001      	movs	r0, #1
 8000882:	4240      	negs	r0, r0
 8000884:	e7f3      	b.n	800086e <__gesf2+0x3a>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d117      	bne.n	80008ba <__gesf2+0x86>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d0f0      	beq.n	8000870 <__gesf2+0x3c>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d1e7      	bne.n	8000862 <__gesf2+0x2e>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d1e5      	bne.n	8000862 <__gesf2+0x2e>
 8000896:	e7e6      	b.n	8000866 <__gesf2+0x32>
 8000898:	2000      	movs	r0, #0
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e7      	beq.n	800086e <__gesf2+0x3a>
 800089e:	e7e2      	b.n	8000866 <__gesf2+0x32>
 80008a0:	42a2      	cmp	r2, r4
 80008a2:	dc05      	bgt.n	80008b0 <__gesf2+0x7c>
 80008a4:	dbea      	blt.n	800087c <__gesf2+0x48>
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	d802      	bhi.n	80008b0 <__gesf2+0x7c>
 80008aa:	d3e7      	bcc.n	800087c <__gesf2+0x48>
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7de      	b.n	800086e <__gesf2+0x3a>
 80008b0:	4243      	negs	r3, r0
 80008b2:	4158      	adcs	r0, r3
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	3801      	subs	r0, #1
 80008b8:	e7d9      	b.n	800086e <__gesf2+0x3a>
 80008ba:	2002      	movs	r0, #2
 80008bc:	4240      	negs	r0, r0
 80008be:	e7d6      	b.n	800086e <__gesf2+0x3a>

080008c0 <__lesf2>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	0042      	lsls	r2, r0, #1
 80008c4:	0245      	lsls	r5, r0, #9
 80008c6:	024e      	lsls	r6, r1, #9
 80008c8:	004c      	lsls	r4, r1, #1
 80008ca:	0fc3      	lsrs	r3, r0, #31
 80008cc:	0a6d      	lsrs	r5, r5, #9
 80008ce:	0e12      	lsrs	r2, r2, #24
 80008d0:	0a76      	lsrs	r6, r6, #9
 80008d2:	0e24      	lsrs	r4, r4, #24
 80008d4:	0fc8      	lsrs	r0, r1, #31
 80008d6:	2aff      	cmp	r2, #255	; 0xff
 80008d8:	d00b      	beq.n	80008f2 <__lesf2+0x32>
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d00d      	beq.n	80008fa <__lesf2+0x3a>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d11f      	bne.n	8000922 <__lesf2+0x62>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d116      	bne.n	8000914 <__lesf2+0x54>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d114      	bne.n	8000914 <__lesf2+0x54>
 80008ea:	2000      	movs	r0, #0
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d010      	beq.n	8000912 <__lesf2+0x52>
 80008f0:	e009      	b.n	8000906 <__lesf2+0x46>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d10c      	bne.n	8000910 <__lesf2+0x50>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d113      	bne.n	8000922 <__lesf2+0x62>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d108      	bne.n	8000910 <__lesf2+0x50>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d008      	beq.n	8000914 <__lesf2+0x54>
 8000902:	4283      	cmp	r3, r0
 8000904:	d012      	beq.n	800092c <__lesf2+0x6c>
 8000906:	2102      	movs	r1, #2
 8000908:	1e58      	subs	r0, r3, #1
 800090a:	4008      	ands	r0, r1
 800090c:	3801      	subs	r0, #1
 800090e:	e000      	b.n	8000912 <__lesf2+0x52>
 8000910:	2002      	movs	r0, #2
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	2d00      	cmp	r5, #0
 8000916:	d1f4      	bne.n	8000902 <__lesf2+0x42>
 8000918:	2800      	cmp	r0, #0
 800091a:	d1fa      	bne.n	8000912 <__lesf2+0x52>
 800091c:	2001      	movs	r0, #1
 800091e:	4240      	negs	r0, r0
 8000920:	e7f7      	b.n	8000912 <__lesf2+0x52>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d1ed      	bne.n	8000902 <__lesf2+0x42>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d1eb      	bne.n	8000902 <__lesf2+0x42>
 800092a:	e7ec      	b.n	8000906 <__lesf2+0x46>
 800092c:	42a2      	cmp	r2, r4
 800092e:	dc05      	bgt.n	800093c <__lesf2+0x7c>
 8000930:	dbf2      	blt.n	8000918 <__lesf2+0x58>
 8000932:	42b5      	cmp	r5, r6
 8000934:	d802      	bhi.n	800093c <__lesf2+0x7c>
 8000936:	d3ef      	bcc.n	8000918 <__lesf2+0x58>
 8000938:	2000      	movs	r0, #0
 800093a:	e7ea      	b.n	8000912 <__lesf2+0x52>
 800093c:	4243      	negs	r3, r0
 800093e:	4158      	adcs	r0, r3
 8000940:	0040      	lsls	r0, r0, #1
 8000942:	3801      	subs	r0, #1
 8000944:	e7e5      	b.n	8000912 <__lesf2+0x52>
 8000946:	46c0      	nop			; (mov r8, r8)

08000948 <__aeabi_fmul>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	0244      	lsls	r4, r0, #9
 8000952:	0045      	lsls	r5, r0, #1
 8000954:	b5c0      	push	{r6, r7, lr}
 8000956:	0a64      	lsrs	r4, r4, #9
 8000958:	1c0f      	adds	r7, r1, #0
 800095a:	0e2d      	lsrs	r5, r5, #24
 800095c:	0fc6      	lsrs	r6, r0, #31
 800095e:	2d00      	cmp	r5, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fmul+0x1c>
 8000962:	e08d      	b.n	8000a80 <__aeabi_fmul+0x138>
 8000964:	2dff      	cmp	r5, #255	; 0xff
 8000966:	d100      	bne.n	800096a <__aeabi_fmul+0x22>
 8000968:	e092      	b.n	8000a90 <__aeabi_fmul+0x148>
 800096a:	2300      	movs	r3, #0
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	00e4      	lsls	r4, r4, #3
 8000974:	04c0      	lsls	r0, r0, #19
 8000976:	4304      	orrs	r4, r0
 8000978:	3d7f      	subs	r5, #127	; 0x7f
 800097a:	0278      	lsls	r0, r7, #9
 800097c:	0a43      	lsrs	r3, r0, #9
 800097e:	4698      	mov	r8, r3
 8000980:	007b      	lsls	r3, r7, #1
 8000982:	0e1b      	lsrs	r3, r3, #24
 8000984:	0fff      	lsrs	r7, r7, #31
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fmul+0x44>
 800098a:	e070      	b.n	8000a6e <__aeabi_fmul+0x126>
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d100      	bne.n	8000992 <__aeabi_fmul+0x4a>
 8000990:	e086      	b.n	8000aa0 <__aeabi_fmul+0x158>
 8000992:	4642      	mov	r2, r8
 8000994:	00d0      	lsls	r0, r2, #3
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	3b7f      	subs	r3, #127	; 0x7f
 800099a:	18ed      	adds	r5, r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	04d2      	lsls	r2, r2, #19
 80009a0:	4302      	orrs	r2, r0
 80009a2:	4690      	mov	r8, r2
 80009a4:	469c      	mov	ip, r3
 80009a6:	0031      	movs	r1, r6
 80009a8:	464b      	mov	r3, r9
 80009aa:	4079      	eors	r1, r7
 80009ac:	1c68      	adds	r0, r5, #1
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d81c      	bhi.n	80009ec <__aeabi_fmul+0xa4>
 80009b2:	4a76      	ldr	r2, [pc, #472]	; (8000b8c <__aeabi_fmul+0x244>)
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	58d3      	ldr	r3, [r2, r3]
 80009b8:	469f      	mov	pc, r3
 80009ba:	0039      	movs	r1, r7
 80009bc:	4644      	mov	r4, r8
 80009be:	46e2      	mov	sl, ip
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d00f      	beq.n	80009e6 <__aeabi_fmul+0x9e>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x84>
 80009ca:	e0d7      	b.n	8000b7c <__aeabi_fmul+0x234>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d137      	bne.n	8000a40 <__aeabi_fmul+0xf8>
 80009d0:	2000      	movs	r0, #0
 80009d2:	2400      	movs	r4, #0
 80009d4:	05c0      	lsls	r0, r0, #23
 80009d6:	4320      	orrs	r0, r4
 80009d8:	07c9      	lsls	r1, r1, #31
 80009da:	4308      	orrs	r0, r1
 80009dc:	bce0      	pop	{r5, r6, r7}
 80009de:	46ba      	mov	sl, r7
 80009e0:	46b1      	mov	r9, r6
 80009e2:	46a8      	mov	r8, r5
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2400      	movs	r4, #0
 80009ea:	e7f3      	b.n	80009d4 <__aeabi_fmul+0x8c>
 80009ec:	0c26      	lsrs	r6, r4, #16
 80009ee:	0424      	lsls	r4, r4, #16
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	4644      	mov	r4, r8
 80009f4:	0424      	lsls	r4, r4, #16
 80009f6:	0c24      	lsrs	r4, r4, #16
 80009f8:	4643      	mov	r3, r8
 80009fa:	0027      	movs	r7, r4
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	4357      	muls	r7, r2
 8000a00:	4374      	muls	r4, r6
 8000a02:	435a      	muls	r2, r3
 8000a04:	435e      	muls	r6, r3
 8000a06:	1912      	adds	r2, r2, r4
 8000a08:	0c3b      	lsrs	r3, r7, #16
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d903      	bls.n	8000a18 <__aeabi_fmul+0xd0>
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	4694      	mov	ip, r2
 8000a16:	4466      	add	r6, ip
 8000a18:	043f      	lsls	r7, r7, #16
 8000a1a:	041a      	lsls	r2, r3, #16
 8000a1c:	0c3f      	lsrs	r7, r7, #16
 8000a1e:	19d2      	adds	r2, r2, r7
 8000a20:	0194      	lsls	r4, r2, #6
 8000a22:	1e67      	subs	r7, r4, #1
 8000a24:	41bc      	sbcs	r4, r7
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	0e92      	lsrs	r2, r2, #26
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	019b      	lsls	r3, r3, #6
 8000a30:	431c      	orrs	r4, r3
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fmul+0xf0>
 8000a36:	e09b      	b.n	8000b70 <__aeabi_fmul+0x228>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	0862      	lsrs	r2, r4, #1
 8000a3c:	401c      	ands	r4, r3
 8000a3e:	4314      	orrs	r4, r2
 8000a40:	0002      	movs	r2, r0
 8000a42:	327f      	adds	r2, #127	; 0x7f
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	dd64      	ble.n	8000b12 <__aeabi_fmul+0x1ca>
 8000a48:	0763      	lsls	r3, r4, #29
 8000a4a:	d004      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a54:	3404      	adds	r4, #4
 8000a56:	0123      	lsls	r3, r4, #4
 8000a58:	d503      	bpl.n	8000a62 <__aeabi_fmul+0x11a>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <__aeabi_fmul+0x248>)
 8000a5e:	3280      	adds	r2, #128	; 0x80
 8000a60:	401c      	ands	r4, r3
 8000a62:	2afe      	cmp	r2, #254	; 0xfe
 8000a64:	dcbf      	bgt.n	80009e6 <__aeabi_fmul+0x9e>
 8000a66:	01a4      	lsls	r4, r4, #6
 8000a68:	0a64      	lsrs	r4, r4, #9
 8000a6a:	b2d0      	uxtb	r0, r2
 8000a6c:	e7b2      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000a6e:	4643      	mov	r3, r8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d13d      	bne.n	8000af0 <__aeabi_fmul+0x1a8>
 8000a74:	464a      	mov	r2, r9
 8000a76:	3301      	adds	r3, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	e792      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d129      	bne.n	8000ad8 <__aeabi_fmul+0x190>
 8000a84:	2304      	movs	r3, #4
 8000a86:	4699      	mov	r9, r3
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	e774      	b.n	800097a <__aeabi_fmul+0x32>
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d11b      	bne.n	8000acc <__aeabi_fmul+0x184>
 8000a94:	2308      	movs	r3, #8
 8000a96:	4699      	mov	r9, r3
 8000a98:	3b06      	subs	r3, #6
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	e76c      	b.n	800097a <__aeabi_fmul+0x32>
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	35ff      	adds	r5, #255	; 0xff
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10b      	bne.n	8000ac0 <__aeabi_fmul+0x178>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4691      	mov	r9, r2
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e778      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	0031      	movs	r1, r6
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d000      	beq.n	8000abe <__aeabi_fmul+0x176>
 8000abc:	e783      	b.n	80009c6 <__aeabi_fmul+0x7e>
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x9e>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	464a      	mov	r2, r9
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	469c      	mov	ip, r3
 8000aca:	e76c      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000acc:	230c      	movs	r3, #12
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b09      	subs	r3, #9
 8000ad2:	25ff      	movs	r5, #255	; 0xff
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e750      	b.n	800097a <__aeabi_fmul+0x32>
 8000ad8:	0020      	movs	r0, r4
 8000ada:	f000 fa77 	bl	8000fcc <__clzsi2>
 8000ade:	2576      	movs	r5, #118	; 0x76
 8000ae0:	1f43      	subs	r3, r0, #5
 8000ae2:	409c      	lsls	r4, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	426d      	negs	r5, r5
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	1a2d      	subs	r5, r5, r0
 8000aee:	e744      	b.n	800097a <__aeabi_fmul+0x32>
 8000af0:	4640      	mov	r0, r8
 8000af2:	f000 fa6b 	bl	8000fcc <__clzsi2>
 8000af6:	4642      	mov	r2, r8
 8000af8:	1f43      	subs	r3, r0, #5
 8000afa:	409a      	lsls	r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	4690      	mov	r8, r2
 8000b02:	469c      	mov	ip, r3
 8000b04:	3d76      	subs	r5, #118	; 0x76
 8000b06:	e74e      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000b08:	2480      	movs	r4, #128	; 0x80
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	03e4      	lsls	r4, r4, #15
 8000b10:	e760      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b12:	2301      	movs	r3, #1
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	2b1b      	cmp	r3, #27
 8000b18:	dd00      	ble.n	8000b1c <__aeabi_fmul+0x1d4>
 8000b1a:	e759      	b.n	80009d0 <__aeabi_fmul+0x88>
 8000b1c:	0022      	movs	r2, r4
 8000b1e:	309e      	adds	r0, #158	; 0x9e
 8000b20:	40da      	lsrs	r2, r3
 8000b22:	4084      	lsls	r4, r0
 8000b24:	0013      	movs	r3, r2
 8000b26:	1e62      	subs	r2, r4, #1
 8000b28:	4194      	sbcs	r4, r2
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	0763      	lsls	r3, r4, #29
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b38:	3404      	adds	r4, #4
 8000b3a:	0163      	lsls	r3, r4, #5
 8000b3c:	d51a      	bpl.n	8000b74 <__aeabi_fmul+0x22c>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	2400      	movs	r4, #0
 8000b42:	e747      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	03c0      	lsls	r0, r0, #15
 8000b48:	4204      	tst	r4, r0
 8000b4a:	d009      	beq.n	8000b60 <__aeabi_fmul+0x218>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	4203      	tst	r3, r0
 8000b50:	d106      	bne.n	8000b60 <__aeabi_fmul+0x218>
 8000b52:	4644      	mov	r4, r8
 8000b54:	4304      	orrs	r4, r0
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	0039      	movs	r1, r7
 8000b5a:	20ff      	movs	r0, #255	; 0xff
 8000b5c:	0a64      	lsrs	r4, r4, #9
 8000b5e:	e739      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	03c0      	lsls	r0, r0, #15
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0264      	lsls	r4, r4, #9
 8000b68:	0031      	movs	r1, r6
 8000b6a:	20ff      	movs	r0, #255	; 0xff
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	e731      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b70:	0028      	movs	r0, r5
 8000b72:	e765      	b.n	8000a40 <__aeabi_fmul+0xf8>
 8000b74:	01a4      	lsls	r4, r4, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	e72b      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b7c:	2080      	movs	r0, #128	; 0x80
 8000b7e:	03c0      	lsls	r0, r0, #15
 8000b80:	4304      	orrs	r4, r0
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	e724      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	08007b2c 	.word	0x08007b2c
 8000b90:	f7ffffff 	.word	0xf7ffffff

08000b94 <__aeabi_fsub>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	46ce      	mov	lr, r9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	0243      	lsls	r3, r0, #9
 8000b9c:	0a5b      	lsrs	r3, r3, #9
 8000b9e:	024e      	lsls	r6, r1, #9
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	0a72      	lsrs	r2, r6, #9
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	0045      	lsls	r5, r0, #1
 8000baa:	004a      	lsls	r2, r1, #1
 8000bac:	b580      	push	{r7, lr}
 8000bae:	0e2d      	lsrs	r5, r5, #24
 8000bb0:	001f      	movs	r7, r3
 8000bb2:	0fc4      	lsrs	r4, r0, #31
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0fc9      	lsrs	r1, r1, #31
 8000bb8:	09b6      	lsrs	r6, r6, #6
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d05b      	beq.n	8000c76 <__aeabi_fsub+0xe2>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4041      	eors	r1, r0
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	d039      	beq.n	8000c3a <__aeabi_fsub+0xa6>
 8000bc6:	1aa8      	subs	r0, r5, r2
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	dd5a      	ble.n	8000c82 <__aeabi_fsub+0xee>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d06a      	beq.n	8000ca6 <__aeabi_fsub+0x112>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x42>
 8000bd4:	e0d9      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	04d2      	lsls	r2, r2, #19
 8000bda:	4316      	orrs	r6, r2
 8000bdc:	281b      	cmp	r0, #27
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fsub+0x4e>
 8000be0:	e0e9      	b.n	8000db6 <__aeabi_fsub+0x222>
 8000be2:	2001      	movs	r0, #1
 8000be4:	4663      	mov	r3, ip
 8000be6:	1a18      	subs	r0, r3, r0
 8000be8:	0143      	lsls	r3, r0, #5
 8000bea:	d400      	bmi.n	8000bee <__aeabi_fsub+0x5a>
 8000bec:	e0b4      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000bee:	0180      	lsls	r0, r0, #6
 8000bf0:	0987      	lsrs	r7, r0, #6
 8000bf2:	0038      	movs	r0, r7
 8000bf4:	f000 f9ea 	bl	8000fcc <__clzsi2>
 8000bf8:	3805      	subs	r0, #5
 8000bfa:	4087      	lsls	r7, r0
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_fsub+0x6e>
 8000c00:	e0cc      	b.n	8000d9c <__aeabi_fsub+0x208>
 8000c02:	1a2d      	subs	r5, r5, r0
 8000c04:	48b5      	ldr	r0, [pc, #724]	; (8000edc <__aeabi_fsub+0x348>)
 8000c06:	4038      	ands	r0, r7
 8000c08:	0743      	lsls	r3, r0, #29
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	4003      	ands	r3, r0
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d000      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c14:	3004      	adds	r0, #4
 8000c16:	0143      	lsls	r3, r0, #5
 8000c18:	d400      	bmi.n	8000c1c <__aeabi_fsub+0x88>
 8000c1a:	e0a0      	b.n	8000d5e <__aeabi_fsub+0x1ca>
 8000c1c:	1c6a      	adds	r2, r5, #1
 8000c1e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x90>
 8000c22:	e08d      	b.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c24:	0180      	lsls	r0, r0, #6
 8000c26:	0a47      	lsrs	r7, r0, #9
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	05d0      	lsls	r0, r2, #23
 8000c2c:	4338      	orrs	r0, r7
 8000c2e:	07e4      	lsls	r4, r4, #31
 8000c30:	4320      	orrs	r0, r4
 8000c32:	bcc0      	pop	{r6, r7}
 8000c34:	46b9      	mov	r9, r7
 8000c36:	46b0      	mov	r8, r6
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3a:	1aa8      	subs	r0, r5, r2
 8000c3c:	4680      	mov	r8, r0
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	dd45      	ble.n	8000cce <__aeabi_fsub+0x13a>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d070      	beq.n	8000d28 <__aeabi_fsub+0x194>
 8000c46:	2dff      	cmp	r5, #255	; 0xff
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0xb8>
 8000c4a:	e09e      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	04db      	lsls	r3, r3, #19
 8000c50:	431e      	orrs	r6, r3
 8000c52:	4643      	mov	r3, r8
 8000c54:	2b1b      	cmp	r3, #27
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0xc6>
 8000c58:	e0d2      	b.n	8000e00 <__aeabi_fsub+0x26c>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4460      	add	r0, ip
 8000c5e:	0143      	lsls	r3, r0, #5
 8000c60:	d57a      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000c62:	3501      	adds	r5, #1
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d06b      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <__aeabi_fsub+0x34c>)
 8000c6c:	4003      	ands	r3, r0
 8000c6e:	0840      	lsrs	r0, r0, #1
 8000c70:	4010      	ands	r0, r2
 8000c72:	4318      	orrs	r0, r3
 8000c74:	e7c8      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d020      	beq.n	8000cbc <__aeabi_fsub+0x128>
 8000c7a:	428c      	cmp	r4, r1
 8000c7c:	d023      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000c7e:	0028      	movs	r0, r5
 8000c80:	38ff      	subs	r0, #255	; 0xff
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d039      	beq.n	8000cfa <__aeabi_fsub+0x166>
 8000c86:	1b57      	subs	r7, r2, r5
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xfa>
 8000c8c:	e09d      	b.n	8000dca <__aeabi_fsub+0x236>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x102>
 8000c94:	e0db      	b.n	8000e4e <__aeabi_fsub+0x2ba>
 8000c96:	1e7b      	subs	r3, r7, #1
 8000c98:	2f01      	cmp	r7, #1
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x10a>
 8000c9c:	e10d      	b.n	8000eba <__aeabi_fsub+0x326>
 8000c9e:	2fff      	cmp	r7, #255	; 0xff
 8000ca0:	d071      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	e098      	b.n	8000dd8 <__aeabi_fsub+0x244>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x118>
 8000caa:	e0a7      	b.n	8000dfc <__aeabi_fsub+0x268>
 8000cac:	1e42      	subs	r2, r0, #1
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x120>
 8000cb2:	e0e6      	b.n	8000e82 <__aeabi_fsub+0x2ee>
 8000cb4:	28ff      	cmp	r0, #255	; 0xff
 8000cb6:	d068      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000cb8:	0010      	movs	r0, r2
 8000cba:	e78f      	b.n	8000bdc <__aeabi_fsub+0x48>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4041      	eors	r1, r0
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000cc4:	e77f      	b.n	8000bc6 <__aeabi_fsub+0x32>
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	4240      	negs	r0, r0
 8000cca:	4680      	mov	r8, r0
 8000ccc:	44a8      	add	r8, r5
 8000cce:	4640      	mov	r0, r8
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d038      	beq.n	8000d46 <__aeabi_fsub+0x1b2>
 8000cd4:	1b51      	subs	r1, r2, r5
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x148>
 8000cda:	e0ae      	b.n	8000e3a <__aeabi_fsub+0x2a6>
 8000cdc:	2aff      	cmp	r2, #255	; 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x14e>
 8000ce0:	e0df      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	4318      	orrs	r0, r3
 8000cea:	4684      	mov	ip, r0
 8000cec:	291b      	cmp	r1, #27
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0x15e>
 8000cf0:	e0d9      	b.n	8000ea6 <__aeabi_fsub+0x312>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	0015      	movs	r5, r2
 8000cf6:	1980      	adds	r0, r0, r6
 8000cf8:	e7b1      	b.n	8000c5e <__aeabi_fsub+0xca>
 8000cfa:	20fe      	movs	r0, #254	; 0xfe
 8000cfc:	1c6a      	adds	r2, r5, #1
 8000cfe:	4210      	tst	r0, r2
 8000d00:	d171      	bne.n	8000de6 <__aeabi_fsub+0x252>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x174>
 8000d06:	e0a6      	b.n	8000e56 <__aeabi_fsub+0x2c2>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x17c>
 8000d0e:	e0d9      	b.n	8000ec4 <__aeabi_fsub+0x330>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x184>
 8000d16:	e788      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d18:	1b98      	subs	r0, r3, r6
 8000d1a:	0143      	lsls	r3, r0, #5
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_fsub+0x18c>
 8000d1e:	e0e1      	b.n	8000ee4 <__aeabi_fsub+0x350>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1af0      	subs	r0, r6, r3
 8000d26:	e76f      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x19a>
 8000d2c:	e0b7      	b.n	8000e9e <__aeabi_fsub+0x30a>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x1a4>
 8000d36:	e09c      	b.n	8000e72 <__aeabi_fsub+0x2de>
 8000d38:	28ff      	cmp	r0, #255	; 0xff
 8000d3a:	d026      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d3c:	4690      	mov	r8, r2
 8000d3e:	e788      	b.n	8000c52 <__aeabi_fsub+0xbe>
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	2700      	movs	r7, #0
 8000d44:	e771      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d46:	20fe      	movs	r0, #254	; 0xfe
 8000d48:	1c6a      	adds	r2, r5, #1
 8000d4a:	4210      	tst	r0, r2
 8000d4c:	d064      	beq.n	8000e18 <__aeabi_fsub+0x284>
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d0f6      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d52:	0015      	movs	r5, r2
 8000d54:	4466      	add	r6, ip
 8000d56:	0870      	lsrs	r0, r6, #1
 8000d58:	0743      	lsls	r3, r0, #29
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x1ca>
 8000d5c:	e756      	b.n	8000c0c <__aeabi_fsub+0x78>
 8000d5e:	08c3      	lsrs	r3, r0, #3
 8000d60:	2dff      	cmp	r5, #255	; 0xff
 8000d62:	d012      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	0a5f      	lsrs	r7, r3, #9
 8000d68:	b2ea      	uxtb	r2, r5
 8000d6a:	e75e      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000d72:	e096      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d008      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d80:	4648      	mov	r0, r9
 8000d82:	4210      	tst	r0, r2
 8000d84:	d101      	bne.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d86:	000c      	movs	r4, r1
 8000d88:	464b      	mov	r3, r9
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0d8      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d8e:	2780      	movs	r7, #128	; 0x80
 8000d90:	03ff      	lsls	r7, r7, #15
 8000d92:	431f      	orrs	r7, r3
 8000d94:	027f      	lsls	r7, r7, #9
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	0a7f      	lsrs	r7, r7, #9
 8000d9a:	e746      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	003a      	movs	r2, r7
 8000da0:	1b45      	subs	r5, r0, r5
 8000da2:	0038      	movs	r0, r7
 8000da4:	3501      	adds	r5, #1
 8000da6:	40ea      	lsrs	r2, r5
 8000da8:	1b5d      	subs	r5, r3, r5
 8000daa:	40a8      	lsls	r0, r5
 8000dac:	1e43      	subs	r3, r0, #1
 8000dae:	4198      	sbcs	r0, r3
 8000db0:	2500      	movs	r5, #0
 8000db2:	4310      	orrs	r0, r2
 8000db4:	e728      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000db6:	2320      	movs	r3, #32
 8000db8:	1a1b      	subs	r3, r3, r0
 8000dba:	0032      	movs	r2, r6
 8000dbc:	409e      	lsls	r6, r3
 8000dbe:	40c2      	lsrs	r2, r0
 8000dc0:	0030      	movs	r0, r6
 8000dc2:	1e43      	subs	r3, r0, #1
 8000dc4:	4198      	sbcs	r0, r3
 8000dc6:	4310      	orrs	r0, r2
 8000dc8:	e70c      	b.n	8000be4 <__aeabi_fsub+0x50>
 8000dca:	2aff      	cmp	r2, #255	; 0xff
 8000dcc:	d0db      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	4318      	orrs	r0, r3
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	2f1b      	cmp	r7, #27
 8000dda:	dd56      	ble.n	8000e8a <__aeabi_fsub+0x2f6>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	000c      	movs	r4, r1
 8000de0:	0015      	movs	r5, r2
 8000de2:	1a30      	subs	r0, r6, r0
 8000de4:	e700      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000de6:	4663      	mov	r3, ip
 8000de8:	1b9f      	subs	r7, r3, r6
 8000dea:	017b      	lsls	r3, r7, #5
 8000dec:	d43d      	bmi.n	8000e6a <__aeabi_fsub+0x2d6>
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000df2:	e6fe      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000df4:	2400      	movs	r4, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e716      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	e7af      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e00:	0032      	movs	r2, r6
 8000e02:	4643      	mov	r3, r8
 8000e04:	4641      	mov	r1, r8
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	2320      	movs	r3, #32
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	409e      	lsls	r6, r3
 8000e0e:	0030      	movs	r0, r6
 8000e10:	1e43      	subs	r3, r0, #1
 8000e12:	4198      	sbcs	r0, r3
 8000e14:	4310      	orrs	r0, r2
 8000e16:	e721      	b.n	8000c5c <__aeabi_fsub+0xc8>
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1a7      	bne.n	8000d6c <__aeabi_fsub+0x1d8>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d059      	beq.n	8000ed6 <__aeabi_fsub+0x342>
 8000e22:	2200      	movs	r2, #0
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x296>
 8000e28:	e6ff      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	4460      	add	r0, ip
 8000e2e:	0143      	lsls	r3, r0, #5
 8000e30:	d592      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <__aeabi_fsub+0x348>)
 8000e34:	3501      	adds	r5, #1
 8000e36:	4018      	ands	r0, r3
 8000e38:	e78e      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d047      	beq.n	8000ed0 <__aeabi_fsub+0x33c>
 8000e40:	1e4b      	subs	r3, r1, #1
 8000e42:	2901      	cmp	r1, #1
 8000e44:	d015      	beq.n	8000e72 <__aeabi_fsub+0x2de>
 8000e46:	29ff      	cmp	r1, #255	; 0xff
 8000e48:	d02b      	beq.n	8000ea2 <__aeabi_fsub+0x30e>
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	e74e      	b.n	8000cec <__aeabi_fsub+0x158>
 8000e4e:	000c      	movs	r4, r1
 8000e50:	464b      	mov	r3, r9
 8000e52:	003d      	movs	r5, r7
 8000e54:	e784      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e56:	4662      	mov	r2, ip
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d18b      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d192      	bne.n	8000d86 <__aeabi_fsub+0x1f2>
 8000e60:	2780      	movs	r7, #128	; 0x80
 8000e62:	2400      	movs	r4, #0
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	03ff      	lsls	r7, r7, #15
 8000e68:	e6df      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	1af7      	subs	r7, r6, r3
 8000e70:	e6bf      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000e72:	0030      	movs	r0, r6
 8000e74:	4460      	add	r0, ip
 8000e76:	2501      	movs	r5, #1
 8000e78:	0143      	lsls	r3, r0, #5
 8000e7a:	d400      	bmi.n	8000e7e <__aeabi_fsub+0x2ea>
 8000e7c:	e76c      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e7e:	2502      	movs	r5, #2
 8000e80:	e6f2      	b.n	8000c68 <__aeabi_fsub+0xd4>
 8000e82:	4663      	mov	r3, ip
 8000e84:	2501      	movs	r5, #1
 8000e86:	1b98      	subs	r0, r3, r6
 8000e88:	e6ae      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	4660      	mov	r0, ip
 8000e90:	40fc      	lsrs	r4, r7
 8000e92:	1bdf      	subs	r7, r3, r7
 8000e94:	40b8      	lsls	r0, r7
 8000e96:	1e43      	subs	r3, r0, #1
 8000e98:	4198      	sbcs	r0, r3
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	e79f      	b.n	8000dde <__aeabi_fsub+0x24a>
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	e75e      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	e771      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	4665      	mov	r5, ip
 8000eaa:	4660      	mov	r0, ip
 8000eac:	40cd      	lsrs	r5, r1
 8000eae:	1a59      	subs	r1, r3, r1
 8000eb0:	4088      	lsls	r0, r1
 8000eb2:	1e43      	subs	r3, r0, #1
 8000eb4:	4198      	sbcs	r0, r3
 8000eb6:	4328      	orrs	r0, r5
 8000eb8:	e71c      	b.n	8000cf4 <__aeabi_fsub+0x160>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	2501      	movs	r5, #1
 8000ec0:	1af0      	subs	r0, r6, r3
 8000ec2:	e691      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000ec4:	2e00      	cmp	r6, #0
 8000ec6:	d095      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000ec8:	000c      	movs	r4, r1
 8000eca:	464f      	mov	r7, r9
 8000ecc:	2200      	movs	r2, #0
 8000ece:	e6ac      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	000d      	movs	r5, r1
 8000ed4:	e744      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ed6:	464f      	mov	r7, r9
 8000ed8:	2200      	movs	r2, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000edc:	fbffffff 	.word	0xfbffffff
 8000ee0:	7dffffff 	.word	0x7dffffff
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x356>
 8000ee8:	e736      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000eea:	2400      	movs	r4, #0
 8000eec:	2700      	movs	r7, #0
 8000eee:	e69c      	b.n	8000c2a <__aeabi_fsub+0x96>

08000ef0 <__aeabi_f2iz>:
 8000ef0:	0241      	lsls	r1, r0, #9
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0fc3      	lsrs	r3, r0, #31
 8000ef6:	0a49      	lsrs	r1, r1, #9
 8000ef8:	2000      	movs	r0, #0
 8000efa:	0e12      	lsrs	r2, r2, #24
 8000efc:	2a7e      	cmp	r2, #126	; 0x7e
 8000efe:	dd03      	ble.n	8000f08 <__aeabi_f2iz+0x18>
 8000f00:	2a9d      	cmp	r2, #157	; 0x9d
 8000f02:	dd02      	ble.n	8000f0a <__aeabi_f2iz+0x1a>
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <__aeabi_f2iz+0x3c>)
 8000f06:	1898      	adds	r0, r3, r2
 8000f08:	4770      	bx	lr
 8000f0a:	2080      	movs	r0, #128	; 0x80
 8000f0c:	0400      	lsls	r0, r0, #16
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	2a95      	cmp	r2, #149	; 0x95
 8000f12:	dc07      	bgt.n	8000f24 <__aeabi_f2iz+0x34>
 8000f14:	2096      	movs	r0, #150	; 0x96
 8000f16:	1a82      	subs	r2, r0, r2
 8000f18:	40d1      	lsrs	r1, r2
 8000f1a:	4248      	negs	r0, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f3      	bne.n	8000f08 <__aeabi_f2iz+0x18>
 8000f20:	0008      	movs	r0, r1
 8000f22:	e7f1      	b.n	8000f08 <__aeabi_f2iz+0x18>
 8000f24:	3a96      	subs	r2, #150	; 0x96
 8000f26:	4091      	lsls	r1, r2
 8000f28:	e7f7      	b.n	8000f1a <__aeabi_f2iz+0x2a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	7fffffff 	.word	0x7fffffff

08000f30 <__aeabi_i2f>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d013      	beq.n	8000f5e <__aeabi_i2f+0x2e>
 8000f36:	17c3      	asrs	r3, r0, #31
 8000f38:	18c6      	adds	r6, r0, r3
 8000f3a:	405e      	eors	r6, r3
 8000f3c:	0fc4      	lsrs	r4, r0, #31
 8000f3e:	0030      	movs	r0, r6
 8000f40:	f000 f844 	bl	8000fcc <__clzsi2>
 8000f44:	239e      	movs	r3, #158	; 0x9e
 8000f46:	0005      	movs	r5, r0
 8000f48:	1a1b      	subs	r3, r3, r0
 8000f4a:	2b96      	cmp	r3, #150	; 0x96
 8000f4c:	dc0f      	bgt.n	8000f6e <__aeabi_i2f+0x3e>
 8000f4e:	2808      	cmp	r0, #8
 8000f50:	dd01      	ble.n	8000f56 <__aeabi_i2f+0x26>
 8000f52:	3d08      	subs	r5, #8
 8000f54:	40ae      	lsls	r6, r5
 8000f56:	0276      	lsls	r6, r6, #9
 8000f58:	0a76      	lsrs	r6, r6, #9
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	e002      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000f5e:	2400      	movs	r4, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	05c0      	lsls	r0, r0, #23
 8000f66:	4330      	orrs	r0, r6
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4320      	orrs	r0, r4
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6e:	2b99      	cmp	r3, #153	; 0x99
 8000f70:	dd0c      	ble.n	8000f8c <__aeabi_i2f+0x5c>
 8000f72:	2205      	movs	r2, #5
 8000f74:	0031      	movs	r1, r6
 8000f76:	1a12      	subs	r2, r2, r0
 8000f78:	40d1      	lsrs	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	0001      	movs	r1, r0
 8000f7e:	0030      	movs	r0, r6
 8000f80:	311b      	adds	r1, #27
 8000f82:	4088      	lsls	r0, r1
 8000f84:	1e41      	subs	r1, r0, #1
 8000f86:	4188      	sbcs	r0, r1
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2d05      	cmp	r5, #5
 8000f8e:	dc12      	bgt.n	8000fb6 <__aeabi_i2f+0x86>
 8000f90:	0031      	movs	r1, r6
 8000f92:	4f0d      	ldr	r7, [pc, #52]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000f94:	4039      	ands	r1, r7
 8000f96:	0772      	lsls	r2, r6, #29
 8000f98:	d009      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	4030      	ands	r0, r6
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d005      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fa2:	3104      	adds	r1, #4
 8000fa4:	014a      	lsls	r2, r1, #5
 8000fa6:	d502      	bpl.n	8000fae <__aeabi_i2f+0x7e>
 8000fa8:	239f      	movs	r3, #159	; 0x9f
 8000faa:	4039      	ands	r1, r7
 8000fac:	1b5b      	subs	r3, r3, r5
 8000fae:	0189      	lsls	r1, r1, #6
 8000fb0:	0a4e      	lsrs	r6, r1, #9
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	e7d6      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000fb6:	1f6a      	subs	r2, r5, #5
 8000fb8:	4096      	lsls	r6, r2
 8000fba:	0031      	movs	r1, r6
 8000fbc:	4f02      	ldr	r7, [pc, #8]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000fbe:	4039      	ands	r1, r7
 8000fc0:	0772      	lsls	r2, r6, #29
 8000fc2:	d0f4      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fc4:	e7e9      	b.n	8000f9a <__aeabi_i2f+0x6a>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	fbffffff 	.word	0xfbffffff

08000fcc <__clzsi2>:
 8000fcc:	211c      	movs	r1, #28
 8000fce:	2301      	movs	r3, #1
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d301      	bcc.n	8000fda <__clzsi2+0xe>
 8000fd6:	0c00      	lsrs	r0, r0, #16
 8000fd8:	3910      	subs	r1, #16
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	d301      	bcc.n	8000fe4 <__clzsi2+0x18>
 8000fe0:	0a00      	lsrs	r0, r0, #8
 8000fe2:	3908      	subs	r1, #8
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d301      	bcc.n	8000fee <__clzsi2+0x22>
 8000fea:	0900      	lsrs	r0, r0, #4
 8000fec:	3904      	subs	r1, #4
 8000fee:	a202      	add	r2, pc, #8	; (adr r2, 8000ff8 <__clzsi2+0x2c>)
 8000ff0:	5c10      	ldrb	r0, [r2, r0]
 8000ff2:	1840      	adds	r0, r0, r1
 8000ff4:	4770      	bx	lr
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	02020304 	.word	0x02020304
 8000ffc:	01010101 	.word	0x01010101
	...

08001008 <__clzdi2>:
 8001008:	b510      	push	{r4, lr}
 800100a:	2900      	cmp	r1, #0
 800100c:	d103      	bne.n	8001016 <__clzdi2+0xe>
 800100e:	f7ff ffdd 	bl	8000fcc <__clzsi2>
 8001012:	3020      	adds	r0, #32
 8001014:	e002      	b.n	800101c <__clzdi2+0x14>
 8001016:	0008      	movs	r0, r1
 8001018:	f7ff ffd8 	bl	8000fcc <__clzsi2>
 800101c:	bd10      	pop	{r4, pc}
 800101e:	46c0      	nop			; (mov r8, r8)

08001020 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x3c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Init+0x3c>)
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	0049      	lsls	r1, r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f810 	bl	8001060 <HAL_InitTick>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d003      	beq.n	800104c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e001      	b.n	8001050 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f005 fe40 	bl	8006cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40022000 	.word	0x40022000

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_InitTick+0x88>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02b      	beq.n	80010d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_InitTick+0x8c>)
 800107a:	681c      	ldr	r4, [r3, #0]
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_InitTick+0x88>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	0019      	movs	r1, r3
 8001082:	23fa      	movs	r3, #250	; 0xfa
 8001084:	0098      	lsls	r0, r3, #2
 8001086:	f7ff f847 	bl	8000118 <__udivsi3>
 800108a:	0003      	movs	r3, r0
 800108c:	0019      	movs	r1, r3
 800108e:	0020      	movs	r0, r4
 8001090:	f7ff f842 	bl	8000118 <__udivsi3>
 8001094:	0003      	movs	r3, r0
 8001096:	0018      	movs	r0, r3
 8001098:	f001 fa03 	bl	80024a2 <HAL_SYSTICK_Config>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d112      	bne.n	80010c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d80a      	bhi.n	80010bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	2301      	movs	r3, #1
 80010aa:	425b      	negs	r3, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 f9d2 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_InitTick+0x90>)
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e00d      	b.n	80010d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e008      	b.n	80010d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e003      	b.n	80010d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	781b      	ldrb	r3, [r3, #0]
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b005      	add	sp, #20
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000000 	.word	0x20000000

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x1c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	001a      	movs	r2, r3
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	18d2      	adds	r2, r2, r3
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_IncTick+0x20>)
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000004 	.word	0x20000004
 8001114:	20000094 	.word	0x20000094

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <HAL_GetTick+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000094 	.word	0x20000094

0800112c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800113c:	401a      	ands	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	fe3fffff 	.word	0xfe3fffff

08001154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	23e0      	movs	r3, #224	; 0xe0
 8001162:	045b      	lsls	r3, r3, #17
 8001164:	4013      	ands	r3, r2
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}

0800116e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	2104      	movs	r1, #4
 8001182:	400a      	ands	r2, r1
 8001184:	2107      	movs	r1, #7
 8001186:	4091      	lsls	r1, r2
 8001188:	000a      	movs	r2, r1
 800118a:	43d2      	mvns	r2, r2
 800118c:	401a      	ands	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2104      	movs	r1, #4
 8001192:	400b      	ands	r3, r1
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4099      	lsls	r1, r3
 8001198:	000b      	movs	r3, r1
 800119a:	431a      	orrs	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b004      	add	sp, #16
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	2104      	movs	r1, #4
 80011ba:	400a      	ands	r2, r1
 80011bc:	2107      	movs	r1, #7
 80011be:	4091      	lsls	r1, r2
 80011c0:	000a      	movs	r2, r1
 80011c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2104      	movs	r1, #4
 80011c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011ca:	40da      	lsrs	r2, r3
 80011cc:	0013      	movs	r3, r2
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4013      	ands	r3, r2
 80011e8:	d101      	bne.n	80011ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	211f      	movs	r1, #31
 800120c:	400a      	ands	r2, r1
 800120e:	210f      	movs	r1, #15
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	43d2      	mvns	r2, r2
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0e9b      	lsrs	r3, r3, #26
 800121c:	210f      	movs	r1, #15
 800121e:	4019      	ands	r1, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	201f      	movs	r0, #31
 8001224:	4003      	ands	r3, r0
 8001226:	4099      	lsls	r1, r3
 8001228:	000b      	movs	r3, r1
 800122a:	431a      	orrs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b004      	add	sp, #16
 8001236:	bd80      	pop	{r7, pc}

08001238 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	035b      	lsls	r3, r3, #13
 800124a:	0b5b      	lsrs	r3, r3, #13
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}

0800125a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	0352      	lsls	r2, r2, #13
 800126c:	0b52      	lsrs	r2, r2, #13
 800126e:	43d2      	mvns	r2, r2
 8001270:	401a      	ands	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	400b      	ands	r3, r1
 80012b8:	4904      	ldr	r1, [pc, #16]	; (80012cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	07ffff00 	.word	0x07ffff00

080012d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80012de:	4013      	ands	r3, r2
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0552      	lsls	r2, r2, #21
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	6fffffe8 	.word	0x6fffffe8

080012f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	055b      	lsls	r3, r3, #21
 8001308:	401a      	ands	r2, r3
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	429a      	cmp	r2, r3
 8001310:	d101      	bne.n	8001316 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001316:	2300      	movs	r3, #0
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <LL_ADC_Enable+0x20>)
 800132e:	4013      	ands	r3, r2
 8001330:	2201      	movs	r2, #1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	7fffffe8 	.word	0x7fffffe8

08001344 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LL_ADC_Disable+0x20>)
 8001352:	4013      	ands	r3, r2
 8001354:	2202      	movs	r2, #2
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	7fffffe8 	.word	0x7fffffe8

08001368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <LL_ADC_IsEnabled+0x18>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <LL_ADC_IsEnabled+0x1a>
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}

0800138a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d101      	bne.n	80013a2 <LL_ADC_IsDisableOngoing+0x18>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_ADC_IsDisableOngoing+0x1a>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <LL_ADC_REG_StartConversion+0x20>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2204      	movs	r2, #4
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	7fffffe8 	.word	0x7fffffe8

080013d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2204      	movs	r2, #4
 80013de:	4013      	ands	r3, r2
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d101      	bne.n	80013e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fc:	231f      	movs	r3, #31
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e17f      	b.n	800171a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0018      	movs	r0, r3
 8001426:	f005 fc77 	bl	8006d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2254      	movs	r2, #84	; 0x54
 8001434:	2100      	movs	r1, #0
 8001436:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ff5b 	bl	80012f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d115      	bne.n	8001472 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff40 	bl	80012d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001450:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <HAL_ADC_Init+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	49b4      	ldr	r1, [pc, #720]	; (8001728 <HAL_ADC_Init+0x334>)
 8001456:	0018      	movs	r0, r3
 8001458:	f7fe fe5e 	bl	8000118 <__udivsi3>
 800145c:	0003      	movs	r3, r0
 800145e:	3301      	adds	r3, #1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001464:	e002      	b.n	800146c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff ff3e 	bl	80012f8 <LL_ADC_IsInternalRegulatorEnabled>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d10f      	bne.n	80014a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	2210      	movs	r2, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2201      	movs	r2, #1
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001498:	231f      	movs	r3, #31
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff93 	bl	80013d0 <LL_ADC_REG_IsConversionOngoing>
 80014aa:	0003      	movs	r3, r0
 80014ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	2210      	movs	r2, #16
 80014b4:	4013      	ands	r3, r2
 80014b6:	d000      	beq.n	80014ba <HAL_ADC_Init+0xc6>
 80014b8:	e122      	b.n	8001700 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d000      	beq.n	80014c2 <HAL_ADC_Init+0xce>
 80014c0:	e11e      	b.n	8001700 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a99      	ldr	r2, [pc, #612]	; (800172c <HAL_ADC_Init+0x338>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	2202      	movs	r2, #2
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff ff46 	bl	8001368 <LL_ADC_IsEnabled>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d000      	beq.n	80014e2 <HAL_ADC_Init+0xee>
 80014e0:	e0ad      	b.n	800163e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7e1b      	ldrb	r3, [r3, #24]
 80014ea:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e5b      	ldrb	r3, [r3, #25]
 80014f2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7e9b      	ldrb	r3, [r3, #26]
 80014fa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <HAL_ADC_Init+0x118>
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	e000      	b.n	800150e <HAL_ADC_Init+0x11a>
 800150c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800150e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001514:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da04      	bge.n	8001528 <HAL_ADC_Init+0x134>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	e001      	b.n	800152c <HAL_ADC_Init+0x138>
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800152c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	212c      	movs	r1, #44	; 0x2c
 8001532:	5c5b      	ldrb	r3, [r3, r1]
 8001534:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001536:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d115      	bne.n	8001574 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e9b      	ldrb	r3, [r3, #26]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d105      	bne.n	800155c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0252      	lsls	r2, r2, #9
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	e00b      	b.n	8001574 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	2220      	movs	r2, #32
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	2201      	movs	r2, #1
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00a      	beq.n	8001592 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	23e0      	movs	r3, #224	; 0xe0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800158a:	4313      	orrs	r3, r2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4a65      	ldr	r2, [pc, #404]	; (8001730 <HAL_ADC_Init+0x33c>)
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	0f9b      	lsrs	r3, r3, #30
 80015ae:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015b4:	4313      	orrs	r3, r2
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	223c      	movs	r2, #60	; 0x3c
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	0f9b      	lsrs	r3, r3, #30
 80015cc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	2201      	movs	r2, #1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_ADC_Init+0x340>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	23c0      	movs	r3, #192	; 0xc0
 8001606:	061b      	lsls	r3, r3, #24
 8001608:	429a      	cmp	r2, r3
 800160a:	d018      	beq.n	800163e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	429a      	cmp	r2, r3
 8001616:	d012      	beq.n	800163e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	061b      	lsls	r3, r3, #24
 8001620:	429a      	cmp	r2, r3
 8001622:	d00c      	beq.n	800163e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001624:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_ADC_Init+0x344>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a44      	ldr	r2, [pc, #272]	; (800173c <HAL_ADC_Init+0x348>)
 800162a:	4013      	ands	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	23f0      	movs	r3, #240	; 0xf0
 8001634:	039b      	lsls	r3, r3, #14
 8001636:	401a      	ands	r2, r3
 8001638:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <HAL_ADC_Init+0x344>)
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	001a      	movs	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	f7ff fd90 	bl	800116e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	493a      	ldr	r1, [pc, #232]	; (8001740 <HAL_ADC_Init+0x34c>)
 8001658:	001a      	movs	r2, r3
 800165a:	f7ff fd88 	bl	800116e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2110      	movs	r1, #16
 8001672:	4249      	negs	r1, r1
 8001674:	430a      	orrs	r2, r1
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
 8001678:	e018      	b.n	80016ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	039b      	lsls	r3, r3, #14
 8001682:	429a      	cmp	r2, r3
 8001684:	d112      	bne.n	80016ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	3b01      	subs	r3, #1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	221c      	movs	r2, #28
 8001696:	4013      	ands	r3, r2
 8001698:	2210      	movs	r2, #16
 800169a:	4252      	negs	r2, r2
 800169c:	409a      	lsls	r2, r3
 800169e:	0011      	movs	r1, r2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2100      	movs	r1, #0
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff fd78 	bl	80011a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80016b8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	2203      	movs	r2, #3
 80016ce:	4393      	bics	r3, r2
 80016d0:	2201      	movs	r2, #1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016d8:	e01c      	b.n	8001714 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	2212      	movs	r2, #18
 80016e0:	4393      	bics	r3, r2
 80016e2:	2210      	movs	r2, #16
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2201      	movs	r2, #1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80016f6:	231f      	movs	r3, #31
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016fe:	e009      	b.n	8001714 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	2210      	movs	r2, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800170c:	231f      	movs	r3, #31
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001714:	231f      	movs	r3, #31
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b008      	add	sp, #32
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	20000010 	.word	0x20000010
 8001728:	00030d40 	.word	0x00030d40
 800172c:	fffffefd 	.word	0xfffffefd
 8001730:	fffe0201 	.word	0xfffe0201
 8001734:	1ffffc02 	.word	0x1ffffc02
 8001738:	40012708 	.word	0x40012708
 800173c:	ffc3ffff 	.word	0xffc3ffff
 8001740:	07ffff04 	.word	0x07ffff04

08001744 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff fe3d 	bl	80013d0 <LL_ADC_REG_IsConversionOngoing>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d15f      	bne.n	800181a <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2254      	movs	r2, #84	; 0x54
 800175e:	5c9b      	ldrb	r3, [r3, r2]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_ADC_Start_IT+0x24>
 8001764:	2302      	movs	r3, #2
 8001766:	e05f      	b.n	8001828 <HAL_ADC_Start_IT+0xe4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2254      	movs	r2, #84	; 0x54
 800176c:	2101      	movs	r1, #1
 800176e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001770:	250f      	movs	r5, #15
 8001772:	197c      	adds	r4, r7, r5
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	0018      	movs	r0, r3
 8001778:	f000 fb68 	bl	8001e4c <ADC_Enable>
 800177c:	0003      	movs	r3, r0
 800177e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001780:	197b      	adds	r3, r7, r5
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d143      	bne.n	8001810 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_ADC_Start_IT+0xec>)
 800178e:	4013      	ands	r3, r2
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	221c      	movs	r2, #28
 80017a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2254      	movs	r2, #84	; 0x54
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	211c      	movs	r1, #28
 80017bc:	438a      	bics	r2, r1
 80017be:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d108      	bne.n	80017da <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2108      	movs	r1, #8
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
          break;
 80017d8:	e008      	b.n	80017ec <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2104      	movs	r1, #4
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
          break;
 80017ea:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2110      	movs	r1, #16
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff fdcf 	bl	80013ac <LL_ADC_REG_StartConversion>
 800180e:	e008      	b.n	8001822 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2254      	movs	r2, #84	; 0x54
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
 8001818:	e003      	b.n	8001822 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2202      	movs	r2, #2
 8001820:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	fffff0fe 	.word	0xfffff0fe

08001834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d017      	beq.n	80018a0 <HAL_ADC_IRQHandler+0x54>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d013      	beq.n	80018a0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	2210      	movs	r2, #16
 800187e:	4013      	ands	r3, r2
 8001880:	d106      	bne.n	8001890 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0018      	movs	r0, r3
 8001894:	f000 fd24 	bl	80022e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2202      	movs	r2, #2
 800189e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x64>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2204      	movs	r2, #4
 80018ac:	4013      	ands	r3, r2
 80018ae:	d107      	bne.n	80018c0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2208      	movs	r2, #8
 80018b4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018b6:	d04d      	beq.n	8001954 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2208      	movs	r2, #8
 80018bc:	4013      	ands	r3, r2
 80018be:	d049      	beq.n	8001954 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	2210      	movs	r2, #16
 80018c6:	4013      	ands	r3, r2
 80018c8:	d106      	bne.n	80018d8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff fc7a 	bl	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d02e      	beq.n	8001944 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e9b      	ldrb	r3, [r3, #26]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d12a      	bne.n	8001944 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2208      	movs	r2, #8
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d123      	bne.n	8001944 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff fd65 	bl	80013d0 <LL_ADC_REG_IsConversionOngoing>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d110      	bne.n	800192c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	210c      	movs	r1, #12
 8001916:	438a      	bics	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <HAL_ADC_IRQHandler+0x22c>)
 8001920:	4013      	ands	r3, r2
 8001922:	2201      	movs	r2, #1
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	659a      	str	r2, [r3, #88]	; 0x58
 800192a:	e00b      	b.n	8001944 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	2220      	movs	r2, #32
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2201      	movs	r2, #1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f005 f8e8 	bl	8006b1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	220c      	movs	r2, #12
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4013      	ands	r3, r2
 800195a:	d012      	beq.n	8001982 <HAL_ADC_IRQHandler+0x136>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	4013      	ands	r3, r2
 8001962:	d00e      	beq.n	8001982 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f881 	bl	8001a7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d014      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x16a>
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d00f      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	0292      	lsls	r2, r2, #10
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fc8a 	bl	80022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	0052      	lsls	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d014      	beq.n	80019ea <HAL_ADC_IRQHandler+0x19e>
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d00f      	beq.n	80019ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	02d2      	lsls	r2, r2, #11
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 fc78 	bl	80022d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2210      	movs	r2, #16
 80019ee:	4013      	ands	r3, r2
 80019f0:	d02b      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x1fe>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4013      	ands	r3, r2
 80019f8:	d027      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff fc36 	bl	800127e <LL_ADC_REG_GetDMATransfer>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d110      	bne.n	8001a42 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2202      	movs	r2, #2
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f825 	bl	8001a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	019b      	lsls	r3, r3, #6
 8001a50:	4013      	ands	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x224>
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	019b      	lsls	r3, r3, #6
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d008      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 fc45 	bl	80022f0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	0192      	lsls	r2, r2, #6
 8001a6e:	601a      	str	r2, [r3, #0]
  }
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b006      	add	sp, #24
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	fffffefe 	.word	0xfffffefe

08001a7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2254      	movs	r2, #84	; 0x54
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x24>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e1c0      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x3a6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2254      	movs	r2, #84	; 0x54
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff fc7f 	bl	80013d0 <LL_ADC_REG_IsConversionOngoing>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d000      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x3c>
 8001ad6:	e1a3      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d100      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x46>
 8001ae0:	e143      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001af2:	4ac1      	ldr	r2, [pc, #772]	; (8001df8 <HAL_ADC_ConfigChannel+0x35c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0019      	movs	r1, r3
 8001b02:	0010      	movs	r0, r2
 8001b04:	f7ff fb98 	bl	8001238 <LL_ADC_REG_SetSequencerChAdd>
 8001b08:	e0c9      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	211f      	movs	r1, #31
 8001b14:	400b      	ands	r3, r1
 8001b16:	210f      	movs	r1, #15
 8001b18:	4099      	lsls	r1, r3
 8001b1a:	000b      	movs	r3, r1
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	035b      	lsls	r3, r3, #13
 8001b28:	0b5b      	lsrs	r3, r3, #13
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x9c>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	221f      	movs	r2, #31
 8001b34:	4013      	ands	r3, r2
 8001b36:	e098      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d000      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0xa8>
 8001b42:	e091      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x1cc>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d000      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0xb4>
 8001b4e:	e089      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1c8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d000      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0xc0>
 8001b5a:	e081      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1c4>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	4013      	ands	r3, r2
 8001b64:	d000      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0xcc>
 8001b66:	e079      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x1c0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d000      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0xd8>
 8001b72:	e071      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1bc>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d000      	beq.n	8001b80 <HAL_ADC_ConfigChannel+0xe4>
 8001b7e:	e069      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1b8>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	4013      	ands	r3, r2
 8001b88:	d000      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0xf0>
 8001b8a:	e061      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1b4>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	4013      	ands	r3, r2
 8001b94:	d000      	beq.n	8001b98 <HAL_ADC_ConfigChannel+0xfc>
 8001b96:	e059      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1b0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d151      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1ac>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d149      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1a8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d141      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1a4>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d139      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1a0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	015b      	lsls	r3, r3, #5
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d131      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x19c>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	019b      	lsls	r3, r3, #6
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d129      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x198>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	d121      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x194>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d119      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x190>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	4013      	ands	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x18c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x188>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d001      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x184>
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	e024      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e022      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2311      	movs	r3, #17
 8001c26:	e020      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	2310      	movs	r3, #16
 8001c2a:	e01e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	e01c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	230e      	movs	r3, #14
 8001c32:	e01a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	230d      	movs	r3, #13
 8001c36:	e018      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	e016      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c3c:	230b      	movs	r3, #11
 8001c3e:	e014      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c40:	230a      	movs	r3, #10
 8001c42:	e012      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c44:	2309      	movs	r3, #9
 8001c46:	e010      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c48:	2308      	movs	r3, #8
 8001c4a:	e00e      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e00c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c50:	2306      	movs	r3, #6
 8001c52:	e00a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c54:	2305      	movs	r3, #5
 8001c56:	e008      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e006      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e004      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1ce>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6852      	ldr	r2, [r2, #4]
 8001c6e:	201f      	movs	r0, #31
 8001c70:	4002      	ands	r2, r0
 8001c72:	4093      	lsls	r3, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d808      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	f7ff faad 	bl	80011f8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	001a      	movs	r2, r3
 8001cac:	f7ff faf4 	bl	8001298 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db00      	blt.n	8001cba <HAL_ADC_ConfigChannel+0x21e>
 8001cb8:	e0bc      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cba:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fa49 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_ADC_ConfigChannel+0x364>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d122      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd8:	d11d      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	0010      	movs	r0, r2
 8001ce8:	f7ff fa20 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cec:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <HAL_ADC_ConfigChannel+0x368>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4945      	ldr	r1, [pc, #276]	; (8001e08 <HAL_ADC_ConfigChannel+0x36c>)
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7fe fa10 	bl	8000118 <__udivsi3>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	0013      	movs	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d14:	e08e      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <HAL_ADC_ConfigChannel+0x370>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10e      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	045b      	lsls	r3, r3, #17
 8001d26:	4013      	ands	r3, r2
 8001d28:	d109      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	0452      	lsls	r2, r2, #17
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4a32      	ldr	r2, [pc, #200]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d34:	0019      	movs	r1, r3
 8001d36:	0010      	movs	r0, r2
 8001d38:	f7ff f9f8 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
 8001d3c:	e07a      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <HAL_ADC_ConfigChannel+0x374>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d000      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x2ae>
 8001d48:	e074      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	03db      	lsls	r3, r3, #15
 8001d50:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d52:	d000      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x2ba>
 8001d54:	e06e      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	03d2      	lsls	r2, r2, #15
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d60:	0019      	movs	r1, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	f7ff f9e2 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
 8001d68:	e064      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d004      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_ADC_ConfigChannel+0x35c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d107      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0019      	movs	r1, r3
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	f7ff fa65 	bl	800125a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da4d      	bge.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff f9da 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_ADC_ConfigChannel+0x364>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d108      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_ADC_ConfigChannel+0x378>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f7ff f9b7 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
 8001dbe:	e039      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_ADC_ConfigChannel+0x370>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d108      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_ADC_ConfigChannel+0x37c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	f7ff f9a9 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
 8001dda:	e02b      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_ADC_ConfigChannel+0x374>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d126      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <HAL_ADC_ConfigChannel+0x380>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_ADC_ConfigChannel+0x360>)
 8001dee:	0019      	movs	r1, r3
 8001df0:	0010      	movs	r0, r2
 8001df2:	f7ff f99b 	bl	800112c <LL_ADC_SetCommonPathInternalCh>
 8001df6:	e01d      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
 8001df8:	80000004 	.word	0x80000004
 8001dfc:	40012708 	.word	0x40012708
 8001e00:	b0001000 	.word	0xb0001000
 8001e04:	20000010 	.word	0x20000010
 8001e08:	00030d40 	.word	0x00030d40
 8001e0c:	b8004000 	.word	0xb8004000
 8001e10:	b4002000 	.word	0xb4002000
 8001e14:	ff7fffff 	.word	0xff7fffff
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	2220      	movs	r2, #32
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e2c:	2317      	movs	r3, #23
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2254      	movs	r2, #84	; 0x54
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b006      	add	sp, #24
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)

08001e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fa83 	bl	8001368 <LL_ADC_IsEnabled>
 8001e62:	1e03      	subs	r3, r0, #0
 8001e64:	d000      	beq.n	8001e68 <ADC_Enable+0x1c>
 8001e66:	e069      	b.n	8001f3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <ADC_Enable+0xfc>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	2210      	movs	r2, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2201      	movs	r2, #1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e056      	b.n	8001f3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fa43 	bl	8001320 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <ADC_Enable+0x100>)
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff f959 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d00f      	beq.n	8001ecc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <ADC_Enable+0x104>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4928      	ldr	r1, [pc, #160]	; (8001f54 <ADC_Enable+0x108>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe f930 	bl	8000118 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ebe:	e002      	b.n	8001ec6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f9      	bne.n	8001ec0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e5b      	ldrb	r3, [r3, #25]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d033      	beq.n	8001f3c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff f920 	bl	8001118 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001edc:	e027      	b.n	8001f2e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff fa40 	bl	8001368 <LL_ADC_IsEnabled>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d104      	bne.n	8001ef6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fa15 	bl	8001320 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ef6:	f7ff f90f 	bl	8001118 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d914      	bls.n	8001f2e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d00d      	beq.n	8001f2e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	2210      	movs	r2, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2201      	movs	r2, #1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d1d0      	bne.n	8001ede <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b004      	add	sp, #16
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	80000017 	.word	0x80000017
 8001f4c:	40012708 	.word	0x40012708
 8001f50:	20000010 	.word	0x20000010
 8001f54:	00030d40 	.word	0x00030d40

08001f58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fa10 	bl	800138a <LL_ADC_IsDisableOngoing>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7ff f9f8 	bl	8001368 <LL_ADC_IsEnabled>
 8001f78:	1e03      	subs	r3, r0, #0
 8001f7a:	d046      	beq.n	800200a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d143      	bne.n	800200a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10d      	bne.n	8001fac <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff f9d5 	bl	8001344 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fa2:	f7ff f8b9 	bl	8001118 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001faa:	e028      	b.n	8001ffe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e021      	b.n	800200c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fc8:	f7ff f8a6 	bl	8001118 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d913      	bls.n	8001ffe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e006      	b.n	800200c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d1de      	bne.n	8001fc8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}

08002014 <LL_ADC_SetCalibrationFactor>:
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	22b4      	movs	r2, #180	; 0xb4
 8002022:	589b      	ldr	r3, [r3, r2]
 8002024:	227f      	movs	r2, #127	; 0x7f
 8002026:	4393      	bics	r3, r2
 8002028:	001a      	movs	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	21b4      	movs	r1, #180	; 0xb4
 8002032:	505a      	str	r2, [r3, r1]
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_ADC_GetCalibrationFactor>:
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	22b4      	movs	r2, #180	; 0xb4
 8002048:	589b      	ldr	r3, [r3, r2]
 800204a:	227f      	movs	r2, #127	; 0x7f
 800204c:	4013      	ands	r3, r2
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <LL_ADC_Enable>:
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <LL_ADC_Enable+0x20>)
 8002066:	4013      	ands	r3, r2
 8002068:	2201      	movs	r2, #1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}
 8002078:	7fffffe8 	.word	0x7fffffe8

0800207c <LL_ADC_Disable>:
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <LL_ADC_Disable+0x20>)
 800208a:	4013      	ands	r3, r2
 800208c:	2202      	movs	r2, #2
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}
 800209c:	7fffffe8 	.word	0x7fffffe8

080020a0 <LL_ADC_IsEnabled>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_IsEnabled+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_IsEnabled+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <LL_ADC_StartCalibration>:
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <LL_ADC_StartCalibration+0x24>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0612      	lsls	r2, r2, #24
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	7fffffe8 	.word	0x7fffffe8

080020ec <LL_ADC_IsCalibrationOnGoing>:
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	0fdb      	lsrs	r3, r3, #31
 80020fa:	07da      	lsls	r2, r3, #31
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	429a      	cmp	r2, r3
 8002102:	d101      	bne.n	8002108 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002108:	2300      	movs	r3, #0
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2254      	movs	r2, #84	; 0x54
 8002128:	5c9b      	ldrb	r3, [r3, r2]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADCEx_Calibration_Start+0x1e>
 800212e:	2302      	movs	r3, #2
 8002130:	e0ba      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0x194>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2254      	movs	r2, #84	; 0x54
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800213a:	2317      	movs	r3, #23
 800213c:	18fc      	adds	r4, r7, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff09 	bl	8001f58 <ADC_Disable>
 8002146:	0003      	movs	r3, r0
 8002148:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff ffa6 	bl	80020a0 <LL_ADC_IsEnabled>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d000      	beq.n	800215a <HAL_ADCEx_Calibration_Start+0x46>
 8002158:	e099      	b.n	800228e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002160:	4013      	ands	r3, r2
 8002162:	2202      	movs	r2, #2
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	494d      	ldr	r1, [pc, #308]	; (80022b8 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002182:	400a      	ands	r2, r1
 8002184:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e02d      	b.n	80021e8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ff97 	bl	80020c4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002196:	e014      	b.n	80021c2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_ADCEx_Calibration_Start+0x1a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d90d      	bls.n	80021c2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	2212      	movs	r2, #18
 80021ac:	4393      	bics	r3, r2
 80021ae:	2210      	movs	r2, #16
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2254      	movs	r2, #84	; 0x54
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e072      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff90 	bl	80020ec <LL_ADC_IsCalibrationOnGoing>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d1e3      	bne.n	8002198 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ff31 	bl	800203c <LL_ADC_GetCalibrationFactor>
 80021da:	0002      	movs	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d9ce      	bls.n	800218c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	69b8      	ldr	r0, [r7, #24]
 80021f2:	f7fd ff91 	bl	8000118 <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff ff2a 	bl	8002058 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ff01 	bl	8002014 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ff30 	bl	800207c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800221c:	f7fe ff7c 	bl	8001118 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002224:	e01b      	b.n	800225e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002226:	f7fe ff77 	bl	8001118 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d914      	bls.n	800225e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <LL_ADC_IsEnabled>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d00d      	beq.n	800225e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	2210      	movs	r2, #16
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2201      	movs	r2, #1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e024      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff ff1c 	bl	80020a0 <LL_ADC_IsEnabled>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d1dc      	bne.n	8002226 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	2203      	movs	r2, #3
 8002282:	4393      	bics	r3, r2
 8002284:	2201      	movs	r2, #1
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	659a      	str	r2, [r3, #88]	; 0x58
 800228c:	e005      	b.n	800229a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	2210      	movs	r2, #16
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2254      	movs	r2, #84	; 0x54
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b009      	add	sp, #36	; 0x24
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	fffffefd 	.word	0xfffffefd
 80022b4:	00008003 	.word	0x00008003
 80022b8:	ffff7ffc 	.word	0xffff7ffc
 80022bc:	0002f1ff 	.word	0x0002f1ff

080022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b7f      	cmp	r3, #127	; 0x7f
 8002312:	d809      	bhi.n	8002328 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	001a      	movs	r2, r3
 800231a:	231f      	movs	r3, #31
 800231c:	401a      	ands	r2, r3
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_EnableIRQ+0x30>)
 8002320:	2101      	movs	r1, #1
 8002322:	4091      	lsls	r1, r2
 8002324:	000a      	movs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b7f      	cmp	r3, #127	; 0x7f
 8002348:	d828      	bhi.n	800239c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	33c0      	adds	r3, #192	; 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	589b      	ldr	r3, [r3, r2]
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	2203      	movs	r2, #3
 8002362:	400a      	ands	r2, r1
 8002364:	00d2      	lsls	r2, r2, #3
 8002366:	21ff      	movs	r1, #255	; 0xff
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	401a      	ands	r2, r3
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	2303      	movs	r3, #3
 8002382:	4003      	ands	r3, r0
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002388:	481f      	ldr	r0, [pc, #124]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b25b      	sxtb	r3, r3
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	33c0      	adds	r3, #192	; 0xc0
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800239a:	e031      	b.n	8002400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0019      	movs	r1, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	400b      	ands	r3, r1
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3306      	adds	r3, #6
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1dfa      	adds	r2, r7, #7
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	0011      	movs	r1, r2
 80023bc:	2203      	movs	r2, #3
 80023be:	400a      	ands	r2, r1
 80023c0:	00d2      	lsls	r2, r2, #3
 80023c2:	21ff      	movs	r1, #255	; 0xff
 80023c4:	4091      	lsls	r1, r2
 80023c6:	000a      	movs	r2, r1
 80023c8:	43d2      	mvns	r2, r2
 80023ca:	401a      	ands	r2, r3
 80023cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	401a      	ands	r2, r3
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	2303      	movs	r3, #3
 80023de:	4003      	ands	r3, r0
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e4:	4809      	ldr	r0, [pc, #36]	; (800240c <__NVIC_SetPriority+0xd8>)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	001c      	movs	r4, r3
 80023ec:	230f      	movs	r3, #15
 80023ee:	4023      	ands	r3, r4
 80023f0:	3b08      	subs	r3, #8
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	3306      	adds	r3, #6
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	18c3      	adds	r3, r0, r3
 80023fc:	3304      	adds	r3, #4
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b003      	add	sp, #12
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	045b      	lsls	r3, r3, #17
 8002420:	429a      	cmp	r2, r3
 8002422:	d301      	bcc.n	8002428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002424:	2301      	movs	r3, #1
 8002426:	e010      	b.n	800244a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <SysTick_Config+0x44>)
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	3a01      	subs	r2, #1
 800242e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002430:	2301      	movs	r3, #1
 8002432:	425b      	negs	r3, r3
 8002434:	2103      	movs	r1, #3
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff7c 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x44>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x44>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	210f      	movs	r1, #15
 8002464:	187b      	adds	r3, r7, r1
 8002466:	1c02      	adds	r2, r0, #0
 8002468:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	187b      	adds	r3, r7, r1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	0002      	movs	r2, r0
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff ff33 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ffaf 	bl	8002410 <SysTick_Config>
 80024b2:	0003      	movs	r3, r0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e050      	b.n	8002570 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2225      	movs	r2, #37	; 0x25
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d008      	beq.n	80024ec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	2100      	movs	r1, #0
 80024e6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e041      	b.n	8002570 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	210e      	movs	r1, #14
 80024f8:	438a      	bics	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	491c      	ldr	r1, [pc, #112]	; (8002578 <HAL_DMA_Abort+0xbc>)
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_DMA_Abort+0xc0>)
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	221c      	movs	r2, #28
 8002526:	4013      	ands	r3, r2
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_DMA_Abort+0xc0>)
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800253a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	490a      	ldr	r1, [pc, #40]	; (8002578 <HAL_DMA_Abort+0xbc>)
 8002550:	400a      	ands	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800255c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2225      	movs	r2, #37	; 0x25
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2224      	movs	r2, #36	; 0x24
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	fffffeff 	.word	0xfffffeff
 800257c:	40020000 	.word	0x40020000

08002580 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	210f      	movs	r1, #15
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2225      	movs	r2, #37	; 0x25
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d006      	beq.n	80025aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e049      	b.n	800263e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	210e      	movs	r1, #14
 80025b6:	438a      	bics	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	438a      	bics	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	491d      	ldr	r1, [pc, #116]	; (800264c <HAL_DMA_Abort_IT+0xcc>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_DMA_Abort_IT+0xd0>)
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	221c      	movs	r2, #28
 80025e4:	4013      	ands	r3, r2
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_DMA_Abort_IT+0xd0>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260c:	490f      	ldr	r1, [pc, #60]	; (800264c <HAL_DMA_Abort_IT+0xcc>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800261a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2225      	movs	r2, #37	; 0x25
 8002620:	2101      	movs	r1, #1
 8002622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	0010      	movs	r0, r2
 800263c:	4798      	blx	r3
    }
  }
  return status;
 800263e:	230f      	movs	r3, #15
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	781b      	ldrb	r3, [r3, #0]
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fffffeff 	.word	0xfffffeff
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002662:	e147      	b.n	80028f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4091      	lsls	r1, r2
 800266e:	000a      	movs	r2, r1
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d100      	bne.n	800267c <HAL_GPIO_Init+0x28>
 800267a:	e138      	b.n	80028ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	2b01      	cmp	r3, #1
 8002686:	d005      	beq.n	8002694 <HAL_GPIO_Init+0x40>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2203      	movs	r2, #3
 800268e:	4013      	ands	r3, r2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d130      	bne.n	80026f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	409a      	lsls	r2, r3
 80026a2:	0013      	movs	r3, r2
 80026a4:	43da      	mvns	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	0013      	movs	r3, r2
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ca:	2201      	movs	r2, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	2201      	movs	r2, #1
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2203      	movs	r2, #3
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d017      	beq.n	8002732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2203      	movs	r2, #3
 8002738:	4013      	ands	r3, r2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d123      	bne.n	8002786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	58d3      	ldr	r3, [r2, r3]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2207      	movs	r2, #7
 8002750:	4013      	ands	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2107      	movs	r1, #7
 800276a:	400b      	ands	r3, r1
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	6939      	ldr	r1, [r7, #16]
 8002784:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	43da      	mvns	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	401a      	ands	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	409a      	lsls	r2, r3
 80027ac:	0013      	movs	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	4013      	ands	r3, r2
 80027c4:	d100      	bne.n	80027c8 <HAL_GPIO_Init+0x174>
 80027c6:	e092      	b.n	80028ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027c8:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3318      	adds	r3, #24
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	589b      	ldr	r3, [r3, r2]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2203      	movs	r2, #3
 80027da:	4013      	ands	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	220f      	movs	r2, #15
 80027e0:	409a      	lsls	r2, r3
 80027e2:	0013      	movs	r3, r2
 80027e4:	43da      	mvns	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	23a0      	movs	r3, #160	; 0xa0
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x1ca>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_GPIO_Init+0x2bc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x1c6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a44      	ldr	r2, [pc, #272]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x1c2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a43      	ldr	r2, [pc, #268]	; (8002918 <HAL_GPIO_Init+0x2c4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x1be>
 800280e:	2303      	movs	r3, #3
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x1cc>
 8002812:	2305      	movs	r3, #5
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x1cc>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x1cc>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x1cc>
 800281e:	2300      	movs	r3, #0
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	2103      	movs	r1, #3
 8002824:	400a      	ands	r2, r1
 8002826:	00d2      	lsls	r2, r2, #3
 8002828:	4093      	lsls	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002830:	4936      	ldr	r1, [pc, #216]	; (800290c <HAL_GPIO_Init+0x2b8>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3318      	adds	r3, #24
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_GPIO_Init+0x2b8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	035b      	lsls	r3, r3, #13
 8002856:	4013      	ands	r3, r2
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_GPIO_Init+0x2b8>)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_GPIO_Init+0x2b8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43da      	mvns	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	039b      	lsls	r3, r3, #14
 8002880:	4013      	ands	r3, r2
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <HAL_GPIO_Init+0x2b8>)
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_GPIO_Init+0x2b8>)
 8002894:	2384      	movs	r3, #132	; 0x84
 8002896:	58d3      	ldr	r3, [r2, r3]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43da      	mvns	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	029b      	lsls	r3, r3, #10
 80028ac:	4013      	ands	r3, r2
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b8:	4914      	ldr	r1, [pc, #80]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80028ba:	2284      	movs	r2, #132	; 0x84
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	58d3      	ldr	r3, [r2, r3]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	4013      	ands	r3, r2
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028e6:	4909      	ldr	r1, [pc, #36]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	40da      	lsrs	r2, r3
 80028fc:	1e13      	subs	r3, r2, #0
 80028fe:	d000      	beq.n	8002902 <HAL_GPIO_Init+0x2ae>
 8002900:	e6b0      	b.n	8002664 <HAL_GPIO_Init+0x10>
  }
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021800 	.word	0x40021800
 8002910:	50000400 	.word	0x50000400
 8002914:	50000800 	.word	0x50000800
 8002918:	50000c00 	.word	0x50000c00

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	0008      	movs	r0, r1
 8002926:	0011      	movs	r1, r2
 8002928:	1cbb      	adds	r3, r7, #2
 800292a:	1c02      	adds	r2, r0, #0
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	1c7b      	adds	r3, r7, #1
 8002930:	1c0a      	adds	r2, r1, #0
 8002932:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002934:	1c7b      	adds	r3, r7, #1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293c:	1cbb      	adds	r3, r7, #2
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002946:	1cbb      	adds	r3, r7, #2
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d11f      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	0013      	movs	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	189b      	adds	r3, r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4912      	ldr	r1, [pc, #72]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fbc4 	bl	8000118 <__udivsi3>
 8002990:	0003      	movs	r3, r0
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002996:	e008      	b.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e001      	b.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e009      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	401a      	ands	r2, r3
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0ed      	beq.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40007000 	.word	0x40007000
 80029cc:	fffff9ff 	.word	0xfffff9ff
 80029d0:	20000010 	.word	0x20000010
 80029d4:	000f4240 	.word	0x000f4240

080029d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	23e0      	movs	r3, #224	; 0xe0
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	4013      	ands	r3, r2
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e2fe      	b.n	8003000 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <HAL_RCC_OscConfig+0x1e>
 8002a0c:	e07c      	b.n	8002b08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4bc3      	ldr	r3, [pc, #780]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2238      	movs	r2, #56	; 0x38
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	4bc0      	ldr	r3, [pc, #768]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3e>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4bb9      	ldr	r3, [pc, #740]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d062      	beq.n	8002b06 <HAL_RCC_OscConfig+0x116>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d15e      	bne.n	8002b06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e2d9      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x78>
 8002a58:	4bb0      	ldr	r3, [pc, #704]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4baf      	ldr	r3, [pc, #700]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0249      	lsls	r1, r1, #9
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e020      	b.n	8002aaa <HAL_RCC_OscConfig+0xba>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	23a0      	movs	r3, #160	; 0xa0
 8002a6e:	02db      	lsls	r3, r3, #11
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d10e      	bne.n	8002a92 <HAL_RCC_OscConfig+0xa2>
 8002a74:	4ba9      	ldr	r3, [pc, #676]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4ba8      	ldr	r3, [pc, #672]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	02c9      	lsls	r1, r1, #11
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4ba6      	ldr	r3, [pc, #664]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4ba5      	ldr	r3, [pc, #660]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0249      	lsls	r1, r1, #9
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0xba>
 8002a92:	4ba2      	ldr	r3, [pc, #648]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4ba1      	ldr	r3, [pc, #644]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002a98:	49a1      	ldr	r1, [pc, #644]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4b9f      	ldr	r3, [pc, #636]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b9e      	ldr	r3, [pc, #632]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	499f      	ldr	r1, [pc, #636]	; (8002d24 <HAL_RCC_OscConfig+0x334>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d014      	beq.n	8002adc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fb31 	bl	8001118 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fb2c 	bl	8001118 <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e298      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	4b93      	ldr	r3, [pc, #588]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xcc>
 8002ada:	e015      	b.n	8002b08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fb1c 	bl	8001118 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fb17 	bl	8001118 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e283      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d100      	bne.n	8002b14 <HAL_RCC_OscConfig+0x124>
 8002b12:	e099      	b.n	8002c48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b14:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2238      	movs	r2, #56	; 0x38
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2203      	movs	r2, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x144>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d002      	beq.n	8002b3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d135      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3a:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4013      	ands	r3, r2
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x162>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e256      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a74      	ldr	r2, [pc, #464]	; (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0adb      	lsrs	r3, r3, #11
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	4a68      	ldr	r2, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x340>)
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002b92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x348>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fe fa61 	bl	8001060 <HAL_InitTick>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d051      	beq.n	8002c46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e22c      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d030      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0049      	lsls	r1, r1, #1
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe faa2 	bl	8001118 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fa9d 	bl	8001118 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e209      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	021a      	lsls	r2, r3, #8
 8002c08:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e01b      	b.n	8002c48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c10:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c16:	4949      	ldr	r1, [pc, #292]	; (8002d3c <HAL_RCC_OscConfig+0x34c>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa7c 	bl	8001118 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fa77 	bl	8001118 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1e3      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c38:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x236>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d047      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2238      	movs	r2, #56	; 0x38
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d10a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d03c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d138      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e1c5      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	430a      	orrs	r2, r1
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa46 	bl	8001118 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fe fa41 	bl	8001118 <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e1ad      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d0f1      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2a2>
 8002cae:	e018      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa2c 	bl	8001118 <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fa27 	bl	8001118 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e193      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d1f1      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d100      	bne.n	8002cee <HAL_RCC_OscConfig+0x2fe>
 8002cec:	e0c6      	b.n	8002e7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	231f      	movs	r3, #31
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2238      	movs	r2, #56	; 0x38
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d11e      	bne.n	8002d40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x32c>)
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <HAL_RCC_OscConfig+0x31e>
 8002d0c:	e0b6      	b.n	8002e7c <HAL_RCC_OscConfig+0x48c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d000      	beq.n	8002d18 <HAL_RCC_OscConfig+0x328>
 8002d16:	e0b1      	b.n	8002e7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e171      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	fffeffff 	.word	0xfffeffff
 8002d24:	fffbffff 	.word	0xfffbffff
 8002d28:	ffff80ff 	.word	0xffff80ff
 8002d2c:	ffffc7ff 	.word	0xffffc7ff
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	20000010 	.word	0x20000010
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d40:	4bb1      	ldr	r3, [pc, #708]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x360>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x362>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d011      	beq.n	8002d7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4bac      	ldr	r3, [pc, #688]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5a:	4bab      	ldr	r3, [pc, #684]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0549      	lsls	r1, r1, #21
 8002d60:	430a      	orrs	r2, r1
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d64:	4ba8      	ldr	r3, [pc, #672]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	055b      	lsls	r3, r3, #21
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d72:	231f      	movs	r3, #31
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	4ba4      	ldr	r3, [pc, #656]	; (800300c <HAL_RCC_OscConfig+0x61c>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	d11a      	bne.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d86:	4ba1      	ldr	r3, [pc, #644]	; (800300c <HAL_RCC_OscConfig+0x61c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4ba0      	ldr	r3, [pc, #640]	; (800300c <HAL_RCC_OscConfig+0x61c>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0049      	lsls	r1, r1, #1
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d94:	f7fe f9c0 	bl	8001118 <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fe f9bb 	bl	8001118 <HAL_GetTick>
 8002da2:	0002      	movs	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e127      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db0:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_RCC_OscConfig+0x61c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3e2>
 8002dc4:	4b90      	ldr	r3, [pc, #576]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc8:	4b8f      	ldr	r3, [pc, #572]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x41c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x404>
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dde:	4b8a      	ldr	r3, [pc, #552]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002de0:	2104      	movs	r1, #4
 8002de2:	430a      	orrs	r2, r1
 8002de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dea:	4b87      	ldr	r3, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x41c>
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df8:	4b83      	ldr	r3, [pc, #524]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e04:	4b80      	ldr	r3, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e06:	2104      	movs	r1, #4
 8002e08:	438a      	bics	r2, r1
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f980 	bl	8001118 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f97b 	bl	8001118 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	4a79      	ldr	r2, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x620>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0e6      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e32:	4b75      	ldr	r3, [pc, #468]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x42e>
 8002e3c:	e013      	b.n	8002e66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f96b 	bl	8001118 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fe f966 	bl	8001118 <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	4a6f      	ldr	r2, [pc, #444]	; (8003010 <HAL_RCC_OscConfig+0x620>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0d1      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e66:	231f      	movs	r3, #31
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e76:	4967      	ldr	r1, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x624>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d100      	bne.n	8002e86 <HAL_RCC_OscConfig+0x496>
 8002e84:	e0bb      	b.n	8002ffe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e86:	4b60      	ldr	r3, [pc, #384]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2238      	movs	r2, #56	; 0x38
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4a4>
 8002e92:	e07b      	b.n	8002f8c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d156      	bne.n	8002f4a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002ea2:	495d      	ldr	r1, [pc, #372]	; (8003018 <HAL_RCC_OscConfig+0x628>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f936 	bl	8001118 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe f931 	bl	8001118 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e09d      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	049b      	lsls	r3, r3, #18
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_RCC_OscConfig+0x62c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	431a      	orrs	r2, r3
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	4b40      	ldr	r3, [pc, #256]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	0449      	lsls	r1, r1, #17
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	0549      	lsls	r1, r1, #21
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f8fa 	bl	8001118 <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe f8f5 	bl	8001118 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e061      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3c:	4b32      	ldr	r3, [pc, #200]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	049b      	lsls	r3, r3, #18
 8002f44:	4013      	ands	r3, r2
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x53a>
 8002f48:	e059      	b.n	8002ffe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f50:	4931      	ldr	r1, [pc, #196]	; (8003018 <HAL_RCC_OscConfig+0x628>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe f8df 	bl	8001118 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe f8da 	bl	8001118 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e046      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f72:	4b25      	ldr	r3, [pc, #148]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	049b      	lsls	r3, r3, #18
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f84:	4926      	ldr	r1, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x630>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e038      	b.n	8002ffe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e033      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x618>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d126      	bne.n	8002ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2270      	movs	r2, #112	; 0x70
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d11f      	bne.n	8002ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	23fe      	movs	r3, #254	; 0xfe
 8002fbe:	01db      	lsls	r3, r3, #7
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	23f8      	movs	r3, #248	; 0xf8
 8002fd0:	039b      	lsls	r3, r3, #14
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d10e      	bne.n	8002ffa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	23e0      	movs	r3, #224	; 0xe0
 8002fe0:	051b      	lsls	r3, r3, #20
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	0f5b      	lsrs	r3, r3, #29
 8002ff0:	075a      	lsls	r2, r3, #29
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b008      	add	sp, #32
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
 8003010:	00001388 	.word	0x00001388
 8003014:	efffffff 	.word	0xefffffff
 8003018:	feffffff 	.word	0xfeffffff
 800301c:	11c1808c 	.word	0x11c1808c
 8003020:	eefefffc 	.word	0xeefefffc

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0e9      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2207      	movs	r2, #7
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d91e      	bls.n	8003084 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b73      	ldr	r3, [pc, #460]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2207      	movs	r2, #7
 800304c:	4393      	bics	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	4b70      	ldr	r3, [pc, #448]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003058:	f7fe f85e 	bl	8001118 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003060:	e009      	b.n	8003076 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe f859 	bl	8001118 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <HAL_RCC_ClockConfig+0x1f4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0ca      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2207      	movs	r2, #7
 800307c:	4013      	ands	r3, r2
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d1ee      	bne.n	8003062 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d015      	beq.n	80030ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2204      	movs	r2, #4
 8003094:	4013      	ands	r3, r2
 8003096:	d006      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003098:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b5f      	ldr	r3, [pc, #380]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 800309e:	21e0      	movs	r1, #224	; 0xe0
 80030a0:	01c9      	lsls	r1, r1, #7
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a5d      	ldr	r2, [pc, #372]	; (8003220 <HAL_RCC_ClockConfig+0x1fc>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	d057      	beq.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	029b      	lsls	r3, r3, #10
 80030d4:	4013      	ands	r3, r2
 80030d6:	d12b      	bne.n	8003130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e097      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e4:	4b4d      	ldr	r3, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	049b      	lsls	r3, r3, #18
 80030ec:	4013      	ands	r3, r2
 80030ee:	d11f      	bne.n	8003130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e08b      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4013      	ands	r3, r2
 8003106:	d113      	bne.n	8003130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e07f      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d106      	bne.n	8003122 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	2202      	movs	r2, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d108      	bne.n	8003130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e074      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e06d      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003130:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2207      	movs	r2, #7
 8003136:	4393      	bics	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fd ffe8 	bl	8001118 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314c:	e009      	b.n	8003162 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314e:	f7fd ffe3 	bl	8001118 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <HAL_RCC_ClockConfig+0x1f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e054      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2238      	movs	r2, #56	; 0x38
 8003168:	401a      	ands	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	429a      	cmp	r2, r3
 8003172:	d1ec      	bne.n	800314e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2207      	movs	r2, #7
 800317a:	4013      	ands	r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d21e      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2207      	movs	r2, #7
 8003188:	4393      	bics	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003194:	f7fd ffc0 	bl	8001118 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800319c:	e009      	b.n	80031b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319e:	f7fd ffbb 	bl	8001118 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_RCC_ClockConfig+0x1f4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e02c      	b.n	800320c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	4013      	ands	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <HAL_RCC_ClockConfig+0x200>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031de:	f000 f829 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031e2:	0001      	movs	r1, r0
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	220f      	movs	r2, #15
 80031ec:	401a      	ands	r2, r3
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x204>)
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	58d3      	ldr	r3, [r2, r3]
 80031f4:	221f      	movs	r2, #31
 80031f6:	4013      	ands	r3, r2
 80031f8:	000a      	movs	r2, r1
 80031fa:	40da      	lsrs	r2, r3
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x208>)
 80031fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x20c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0018      	movs	r0, r3
 8003206:	f7fd ff2b 	bl	8001060 <HAL_InitTick>
 800320a:	0003      	movs	r3, r0
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b004      	add	sp, #16
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40022000 	.word	0x40022000
 8003218:	00001388 	.word	0x00001388
 800321c:	40021000 	.word	0x40021000
 8003220:	fffff0ff 	.word	0xfffff0ff
 8003224:	ffff8fff 	.word	0xffff8fff
 8003228:	08007bd8 	.word	0x08007bd8
 800322c:	20000010 	.word	0x20000010
 8003230:	20000000 	.word	0x20000000

08003234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323a:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2238      	movs	r2, #56	; 0x38
 8003240:	4013      	ands	r3, r2
 8003242:	d10f      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003244:	4b39      	ldr	r3, [pc, #228]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0adb      	lsrs	r3, r3, #11
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	2201      	movs	r2, #1
 8003250:	409a      	lsls	r2, r3
 8003252:	0013      	movs	r3, r2
 8003254:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	4835      	ldr	r0, [pc, #212]	; (8003330 <HAL_RCC_GetSysClockFreq+0xfc>)
 800325a:	f7fc ff5d 	bl	8000118 <__udivsi3>
 800325e:	0003      	movs	r3, r0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	e05d      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2238      	movs	r2, #56	; 0x38
 800326a:	4013      	ands	r3, r2
 800326c:	2b08      	cmp	r3, #8
 800326e:	d102      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCC_GetSysClockFreq+0x100>)
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e054      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2238      	movs	r2, #56	; 0x38
 800327c:	4013      	ands	r3, r2
 800327e:	2b10      	cmp	r3, #16
 8003280:	d138      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2203      	movs	r2, #3
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	2207      	movs	r2, #7
 8003294:	4013      	ands	r3, r2
 8003296:	3301      	adds	r3, #1
 8003298:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d10d      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4824      	ldr	r0, [pc, #144]	; (8003334 <HAL_RCC_GetSysClockFreq+0x100>)
 80032a4:	f7fc ff38 	bl	8000118 <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	0019      	movs	r1, r3
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	227f      	movs	r2, #127	; 0x7f
 80032b4:	4013      	ands	r3, r2
 80032b6:	434b      	muls	r3, r1
 80032b8:	617b      	str	r3, [r7, #20]
        break;
 80032ba:	e00d      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	481c      	ldr	r0, [pc, #112]	; (8003330 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032c0:	f7fc ff2a 	bl	8000118 <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	0019      	movs	r1, r3
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	227f      	movs	r2, #127	; 0x7f
 80032d0:	4013      	ands	r3, r2
 80032d2:	434b      	muls	r3, r1
 80032d4:	617b      	str	r3, [r7, #20]
        break;
 80032d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0f5b      	lsrs	r3, r3, #29
 80032de:	2207      	movs	r2, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	3301      	adds	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	6978      	ldr	r0, [r7, #20]
 80032ea:	f7fc ff15 	bl	8000118 <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e015      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2238      	movs	r2, #56	; 0x38
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d103      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_RCC_GetSysClockFreq+0xf8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2238      	movs	r2, #56	; 0x38
 800330e:	4013      	ands	r3, r2
 8003310:	2b18      	cmp	r3, #24
 8003312:	d103      	bne.n	800331c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003314:	23fa      	movs	r3, #250	; 0xfa
 8003316:	01db      	lsls	r3, r3, #7
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e001      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003320:	693b      	ldr	r3, [r7, #16]
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b006      	add	sp, #24
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	40021000 	.word	0x40021000
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200

08003338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_RCC_GetHCLKFreq+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000010 	.word	0x20000010

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003350:	f7ff fff2 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003354:	0004      	movs	r4, r0
 8003356:	f7ff fb3f 	bl	80029d8 <LL_RCC_GetAPB1Prescaler>
 800335a:	0003      	movs	r3, r0
 800335c:	0b1a      	lsrs	r2, r3, #12
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	58d3      	ldr	r3, [r2, r3]
 8003364:	221f      	movs	r2, #31
 8003366:	4013      	ands	r3, r2
 8003368:	40dc      	lsrs	r4, r3
 800336a:	0023      	movs	r3, r4
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bdb0      	pop	{r4, r5, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	08007c18 	.word	0x08007c18

08003378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003380:	2313      	movs	r3, #19
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003388:	2312      	movs	r3, #18
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	4013      	ands	r3, r2
 800339a:	d100      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800339c:	e0a3      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2011      	movs	r0, #17
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4ba5      	ldr	r3, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	055b      	lsls	r3, r3, #21
 80033ae:	4013      	ands	r3, r2
 80033b0:	d110      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4ba2      	ldr	r3, [pc, #648]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b6:	4ba1      	ldr	r3, [pc, #644]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0549      	lsls	r1, r1, #21
 80033bc:	430a      	orrs	r2, r1
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
 80033c0:	4b9e      	ldr	r3, [pc, #632]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	055b      	lsls	r3, r3, #21
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	183b      	adds	r3, r7, r0
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d4:	4b9a      	ldr	r3, [pc, #616]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	0049      	lsls	r1, r1, #1
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e2:	f7fd fe99 	bl	8001118 <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e00b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd fe94 	bl	8001118 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d904      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033fa:	2313      	movs	r3, #19
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2203      	movs	r2, #3
 8003400:	701a      	strb	r2, [r3, #0]
        break;
 8003402:	e005      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003404:	4b8e      	ldr	r3, [pc, #568]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4013      	ands	r3, r2
 800340e:	d0ed      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003410:	2313      	movs	r3, #19
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d154      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800341a:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800341c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800341e:	23c0      	movs	r3, #192	; 0xc0
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4013      	ands	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	429a      	cmp	r2, r3
 8003434:	d014      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	4a82      	ldr	r2, [pc, #520]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003440:	4b7e      	ldr	r3, [pc, #504]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003444:	4b7d      	ldr	r3, [pc, #500]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	0249      	lsls	r1, r1, #9
 800344a:	430a      	orrs	r2, r1
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344e:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003454:	497c      	ldr	r1, [pc, #496]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003456:	400a      	ands	r2, r1
 8003458:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800345a:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2201      	movs	r2, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d016      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd fe56 	bl	8001118 <HAL_GetTick>
 800346c:	0003      	movs	r3, r0
 800346e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	e00c      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd fe51 	bl	8001118 <HAL_GetTick>
 8003476:	0002      	movs	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	4a73      	ldr	r2, [pc, #460]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d904      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003482:	2313      	movs	r3, #19
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2203      	movs	r2, #3
 8003488:	701a      	strb	r2, [r3, #0]
            break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348c:	4b6b      	ldr	r3, [pc, #428]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d0ed      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003496:	2313      	movs	r3, #19
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	4a67      	ldr	r2, [pc, #412]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034b4:	e00c      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034b6:	2312      	movs	r3, #18
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	2213      	movs	r2, #19
 80034bc:	18ba      	adds	r2, r7, r2
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	2312      	movs	r3, #18
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2213      	movs	r2, #19
 80034ca:	18ba      	adds	r2, r7, r2
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d0:	2311      	movs	r3, #17
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e0:	495b      	ldr	r1, [pc, #364]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f0:	4b52      	ldr	r3, [pc, #328]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	2203      	movs	r2, #3
 80034f6:	4393      	bics	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003500:	430a      	orrs	r2, r1
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2210      	movs	r2, #16
 800350a:	4013      	ands	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003514:	4013      	ands	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800351e:	430a      	orrs	r2, r1
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4013      	ands	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	4a49      	ldr	r2, [pc, #292]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800353e:	430a      	orrs	r2, r1
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4013      	ands	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800355e:	430a      	orrs	r2, r1
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	4013      	ands	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356c:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	4a3b      	ldr	r2, [pc, #236]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800357c:	430a      	orrs	r2, r1
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	01db      	lsls	r3, r3, #7
 8003588:	4013      	ands	r3, r2
 800358a:	d015      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	0899      	lsrs	r1, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800359a:	430a      	orrs	r2, r1
 800359c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	05db      	lsls	r3, r3, #23
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d106      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035aa:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	0249      	lsls	r1, r1, #9
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	039b      	lsls	r3, r3, #14
 80035c0:	4013      	ands	r3, r2
 80035c2:	d016      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	03db      	lsls	r3, r3, #15
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0449      	lsls	r1, r1, #17
 80035ee:	430a      	orrs	r2, r1
 80035f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	4013      	ands	r3, r2
 80035fc:	d016      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	01db      	lsls	r3, r3, #7
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0249      	lsls	r1, r1, #9
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800362c:	2312      	movs	r3, #18
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40021000 	.word	0x40021000
 8003640:	40007000 	.word	0x40007000
 8003644:	fffffcff 	.word	0xfffffcff
 8003648:	fffeffff 	.word	0xfffeffff
 800364c:	00001388 	.word	0x00001388
 8003650:	efffffff 	.word	0xefffffff
 8003654:	fffff3ff 	.word	0xfffff3ff
 8003658:	fff3ffff 	.word	0xfff3ffff
 800365c:	ffcfffff 	.word	0xffcfffff
 8003660:	ffffcfff 	.word	0xffffcfff
 8003664:	ffbfffff 	.word	0xffbfffff
 8003668:	ffff3fff 	.word	0xffff3fff

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e04a      	b.n	8003714 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223d      	movs	r2, #61	; 0x3d
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f003 fb8b 	bl	8006db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223d      	movs	r2, #61	; 0x3d
 800369e:	2102      	movs	r1, #2
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f000 fb49 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2248      	movs	r2, #72	; 0x48
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	223e      	movs	r2, #62	; 0x3e
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2241      	movs	r2, #65	; 0x41
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2242      	movs	r2, #66	; 0x42
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2243      	movs	r2, #67	; 0x43
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2244      	movs	r2, #68	; 0x44
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2245      	movs	r2, #69	; 0x45
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2246      	movs	r2, #70	; 0x46
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2247      	movs	r2, #71	; 0x47
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223d      	movs	r2, #61	; 0x3d
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e04a      	b.n	80037c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	223d      	movs	r2, #61	; 0x3d
 8003732:	5c9b      	ldrb	r3, [r3, r2]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	223c      	movs	r2, #60	; 0x3c
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f841 	bl	80037cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223d      	movs	r2, #61	; 0x3d
 800374e:	2102      	movs	r1, #2
 8003750:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	0019      	movs	r1, r3
 800375c:	0010      	movs	r0, r2
 800375e:	f000 faf1 	bl	8003d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2248      	movs	r2, #72	; 0x48
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	223e      	movs	r2, #62	; 0x3e
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223f      	movs	r2, #63	; 0x3f
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	2101      	movs	r1, #1
 8003780:	5499      	strb	r1, [r3, r2]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2241      	movs	r2, #65	; 0x41
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2242      	movs	r2, #66	; 0x42
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2243      	movs	r2, #67	; 0x43
 8003796:	2101      	movs	r1, #1
 8003798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2244      	movs	r2, #68	; 0x44
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2245      	movs	r2, #69	; 0x45
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2246      	movs	r2, #70	; 0x46
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2247      	movs	r2, #71	; 0x47
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	223d      	movs	r2, #61	; 0x3d
 80037be:	2101      	movs	r1, #1
 80037c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <HAL_TIM_PWM_Start+0x22>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	223e      	movs	r2, #62	; 0x3e
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	1e5a      	subs	r2, r3, #1
 80037f8:	4193      	sbcs	r3, r2
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e037      	b.n	800386e <HAL_TIM_PWM_Start+0x92>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d108      	bne.n	8003816 <HAL_TIM_PWM_Start+0x3a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	5c9b      	ldrb	r3, [r3, r2]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	4193      	sbcs	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e02b      	b.n	800386e <HAL_TIM_PWM_Start+0x92>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d108      	bne.n	800382e <HAL_TIM_PWM_Start+0x52>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	5c9b      	ldrb	r3, [r3, r2]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	4193      	sbcs	r3, r2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e01f      	b.n	800386e <HAL_TIM_PWM_Start+0x92>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d108      	bne.n	8003846 <HAL_TIM_PWM_Start+0x6a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2241      	movs	r2, #65	; 0x41
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	4193      	sbcs	r3, r2
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e013      	b.n	800386e <HAL_TIM_PWM_Start+0x92>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d108      	bne.n	800385e <HAL_TIM_PWM_Start+0x82>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2242      	movs	r2, #66	; 0x42
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	4193      	sbcs	r3, r2
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e007      	b.n	800386e <HAL_TIM_PWM_Start+0x92>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2243      	movs	r2, #67	; 0x43
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	4193      	sbcs	r3, r2
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e081      	b.n	800397a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xaa>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223e      	movs	r2, #62	; 0x3e
 8003880:	2102      	movs	r1, #2
 8003882:	5499      	strb	r1, [r3, r2]
 8003884:	e023      	b.n	80038ce <HAL_TIM_PWM_Start+0xf2>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xba>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	223f      	movs	r2, #63	; 0x3f
 8003890:	2102      	movs	r1, #2
 8003892:	5499      	strb	r1, [r3, r2]
 8003894:	e01b      	b.n	80038ce <HAL_TIM_PWM_Start+0xf2>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0xca>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]
 80038a4:	e013      	b.n	80038ce <HAL_TIM_PWM_Start+0xf2>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0xda>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2241      	movs	r2, #65	; 0x41
 80038b0:	2102      	movs	r1, #2
 80038b2:	5499      	strb	r1, [r3, r2]
 80038b4:	e00b      	b.n	80038ce <HAL_TIM_PWM_Start+0xf2>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xea>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2242      	movs	r2, #66	; 0x42
 80038c0:	2102      	movs	r1, #2
 80038c2:	5499      	strb	r1, [r3, r2]
 80038c4:	e003      	b.n	80038ce <HAL_TIM_PWM_Start+0xf2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2243      	movs	r2, #67	; 0x43
 80038ca:	2102      	movs	r1, #2
 80038cc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 fde2 	bl	80044a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_TIM_PWM_Start+0x1a8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_PWM_Start+0x11e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a27      	ldr	r2, [pc, #156]	; (8003988 <HAL_TIM_PWM_Start+0x1ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_PWM_Start+0x11e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <HAL_TIM_PWM_Start+0x1b0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_Start+0x122>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_TIM_PWM_Start+0x124>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	0209      	lsls	r1, r1, #8
 8003912:	430a      	orrs	r2, r1
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_TIM_PWM_Start+0x1a8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00a      	beq.n	8003936 <HAL_TIM_PWM_Start+0x15a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	429a      	cmp	r2, r3
 800392a:	d004      	beq.n	8003936 <HAL_TIM_PWM_Start+0x15a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_TIM_PWM_Start+0x1b4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d116      	bne.n	8003964 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <HAL_TIM_PWM_Start+0x1b8>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d016      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19a>
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	025b      	lsls	r3, r3, #9
 800394e:	429a      	cmp	r2, r3
 8003950:	d011      	beq.n	8003976 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003962:	e008      	b.n	8003976 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e000      	b.n	8003978 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	40000400 	.word	0x40000400
 8003994:	00010007 	.word	0x00010007

08003998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2317      	movs	r3, #23
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	223c      	movs	r2, #60	; 0x3c
 80039b0:	5c9b      	ldrb	r3, [r3, r2]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0e5      	b.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	223c      	movs	r2, #60	; 0x3c
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b14      	cmp	r3, #20
 80039c6:	d900      	bls.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80039c8:	e0d1      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	4b70      	ldr	r3, [pc, #448]	; (8003b90 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	0011      	movs	r1, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 fa26 	bl	8003e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2108      	movs	r1, #8
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2104      	movs	r1, #4
 8003a00:	438a      	bics	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6999      	ldr	r1, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	619a      	str	r2, [r3, #24]
      break;
 8003a16:	e0af      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fa85 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	0109      	lsls	r1, r1, #4
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4954      	ldr	r1, [pc, #336]	; (8003b94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]
      break;
 8003a5c:	e08c      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fae0 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2108      	movs	r1, #8
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2104      	movs	r1, #4
 8003a88:	438a      	bics	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69d9      	ldr	r1, [r3, #28]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
      break;
 8003a9e:	e06b      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 fb41 	bl	8004130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	0109      	lsls	r1, r1, #4
 8003abc:	430a      	orrs	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4932      	ldr	r1, [pc, #200]	; (8003b94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003acc:	400a      	ands	r2, r1
 8003ace:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69d9      	ldr	r1, [r3, #28]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]
      break;
 8003ae4:	e048      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fb82 	bl	80041f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2108      	movs	r1, #8
 8003b00:	430a      	orrs	r2, r1
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2104      	movs	r1, #4
 8003b10:	438a      	bics	r2, r1
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b26:	e027      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 fbbb 	bl	80042ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0109      	lsls	r1, r1, #4
 8003b44:	430a      	orrs	r2, r1
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4910      	ldr	r1, [pc, #64]	; (8003b94 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b6c:	e004      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b6e:	2317      	movs	r3, #23
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
      break;
 8003b76:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	223c      	movs	r2, #60	; 0x3c
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b80:	2317      	movs	r3, #23
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	781b      	ldrb	r3, [r3, #0]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	08007b6c 	.word	0x08007b6c
 8003b94:	fffffbff 	.word	0xfffffbff

08003b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	230f      	movs	r3, #15
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223c      	movs	r2, #60	; 0x3c
 8003bae:	5c9b      	ldrb	r3, [r3, r2]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_ConfigClockSource+0x20>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0bc      	b.n	8003d32 <HAL_TIM_ConfigClockSource+0x19a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223c      	movs	r2, #60	; 0x3c
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	223d      	movs	r2, #61	; 0x3d
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	; (8003d3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a59      	ldr	r2, [pc, #356]	; (8003d40 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	0192      	lsls	r2, r2, #6
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0xde>
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	0192      	lsls	r2, r2, #6
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d900      	bls.n	8003bfe <HAL_TIM_ConfigClockSource+0x66>
 8003bfc:	e088      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	0152      	lsls	r2, r2, #5
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d100      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x70>
 8003c06:	e088      	b.n	8003d1a <HAL_TIM_ConfigClockSource+0x182>
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	0152      	lsls	r2, r2, #5
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d900      	bls.n	8003c12 <HAL_TIM_ConfigClockSource+0x7a>
 8003c10:	e07e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c12:	2b70      	cmp	r3, #112	; 0x70
 8003c14:	d018      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0xb0>
 8003c16:	d900      	bls.n	8003c1a <HAL_TIM_ConfigClockSource+0x82>
 8003c18:	e07a      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c1a:	2b60      	cmp	r3, #96	; 0x60
 8003c1c:	d04f      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x126>
 8003c1e:	d900      	bls.n	8003c22 <HAL_TIM_ConfigClockSource+0x8a>
 8003c20:	e076      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c22:	2b50      	cmp	r3, #80	; 0x50
 8003c24:	d03b      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x106>
 8003c26:	d900      	bls.n	8003c2a <HAL_TIM_ConfigClockSource+0x92>
 8003c28:	e072      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d057      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x146>
 8003c2e:	d900      	bls.n	8003c32 <HAL_TIM_ConfigClockSource+0x9a>
 8003c30:	e06e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c32:	2b30      	cmp	r3, #48	; 0x30
 8003c34:	d063      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x166>
 8003c36:	d86b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d060      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x166>
 8003c3c:	d868      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d05d      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x166>
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d05b      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x166>
 8003c46:	e063      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f000 fc02 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2277      	movs	r2, #119	; 0x77
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]
      break;
 8003c74:	e052      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f000 fbeb 	bl	8004460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	01c9      	lsls	r1, r1, #7
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e03e      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	001a      	movs	r2, r3
 8003cac:	f000 fb5c 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2150      	movs	r1, #80	; 0x50
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 fbb6 	bl	8004428 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e02e      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	001a      	movs	r2, r3
 8003ccc:	f000 fb7a 	bl	80043c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2160      	movs	r1, #96	; 0x60
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 fba6 	bl	8004428 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e01e      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	001a      	movs	r2, r3
 8003cec:	f000 fb3c 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fb96 	bl	8004428 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e00e      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0019      	movs	r1, r3
 8003d08:	0010      	movs	r0, r2
 8003d0a:	f000 fb8d 	bl	8004428 <TIM_ITRx_SetConfig>
      break;
 8003d0e:	e005      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d10:	230f      	movs	r3, #15
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
      break;
 8003d18:	e000      	b.n	8003d1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223d      	movs	r2, #61	; 0x3d
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	223c      	movs	r2, #60	; 0x3c
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

  return status;
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	781b      	ldrb	r3, [r3, #0]
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	ffceff88 	.word	0xffceff88
 8003d40:	ffff00ff 	.word	0xffff00ff

08003d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <TIM_Base_SetConfig+0xd4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d008      	beq.n	8003d6e <TIM_Base_SetConfig+0x2a>
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	05db      	lsls	r3, r3, #23
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x2a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <TIM_Base_SetConfig+0xd8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2270      	movs	r2, #112	; 0x70
 8003d72:	4393      	bics	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d014      	beq.n	8003db2 <TIM_Base_SetConfig+0x6e>
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	05db      	lsls	r3, r3, #23
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d00f      	beq.n	8003db2 <TIM_Base_SetConfig+0x6e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <TIM_Base_SetConfig+0xd8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_Base_SetConfig+0x6e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <TIM_Base_SetConfig+0xdc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0x6e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <TIM_Base_SetConfig+0xe0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0x6e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <TIM_Base_SetConfig+0xe4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d108      	bne.n	8003dc4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_Base_SetConfig+0xe8>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	4393      	bics	r3, r2
 8003dca:	001a      	movs	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <TIM_Base_SetConfig+0xd4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0xbe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <TIM_Base_SetConfig+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0xbe>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <TIM_Base_SetConfig+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d103      	bne.n	8003e0a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	615a      	str	r2, [r3, #20]
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40002000 	.word	0x40002000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800
 8003e2c:	fffffcff 	.word	0xfffffcff

08003e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4393      	bics	r3, r2
 8003e42:	001a      	movs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <TIM_OC1_SetConfig+0xe8>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2203      	movs	r2, #3
 8003e66:	4393      	bics	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2202      	movs	r2, #2
 8003e78:	4393      	bics	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <TIM_OC1_SetConfig+0xec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_OC1_SetConfig+0x6e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <TIM_OC1_SetConfig+0xf0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC1_SetConfig+0x6e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <TIM_OC1_SetConfig+0xf4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10c      	bne.n	8003eb8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <TIM_OC1_SetConfig+0xec>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_OC1_SetConfig+0xa0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <TIM_OC1_SetConfig+0xf0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC1_SetConfig+0xa0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <TIM_OC1_SetConfig+0xf4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d111      	bne.n	8003ef4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <TIM_OC1_SetConfig+0xf8>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <TIM_OC1_SetConfig+0xfc>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	fffeff8f 	.word	0xfffeff8f
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	fffffeff 	.word	0xfffffeff
 8003f2c:	fffffdff 	.word	0xfffffdff

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	2210      	movs	r2, #16
 8003f40:	4393      	bics	r3, r2
 8003f42:	001a      	movs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <TIM_OC2_SetConfig+0xe0>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <TIM_OC2_SetConfig+0xe4>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a22      	ldr	r2, [pc, #136]	; (8004018 <TIM_OC2_SetConfig+0xe8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10d      	bne.n	8003fae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2280      	movs	r2, #128	; 0x80
 8003f96:	4393      	bics	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2240      	movs	r2, #64	; 0x40
 8003faa:	4393      	bics	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <TIM_OC2_SetConfig+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x96>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <TIM_OC2_SetConfig+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x96>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a17      	ldr	r2, [pc, #92]	; (8004020 <TIM_OC2_SetConfig+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d113      	bne.n	8003fee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4a16      	ldr	r2, [pc, #88]	; (8004024 <TIM_OC2_SetConfig+0xf4>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <TIM_OC2_SetConfig+0xf8>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b006      	add	sp, #24
 800400e:	bd80      	pop	{r7, pc}
 8004010:	feff8fff 	.word	0xfeff8fff
 8004014:	fffffcff 	.word	0xfffffcff
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	fffffbff 	.word	0xfffffbff
 8004028:	fffff7ff 	.word	0xfffff7ff

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a33      	ldr	r2, [pc, #204]	; (8004108 <TIM_OC3_SetConfig+0xdc>)
 800403c:	401a      	ands	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a2d      	ldr	r2, [pc, #180]	; (800410c <TIM_OC3_SetConfig+0xe0>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2203      	movs	r2, #3
 8004060:	4393      	bics	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <TIM_OC3_SetConfig+0xe4>)
 8004072:	4013      	ands	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <TIM_OC3_SetConfig+0xe8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10d      	bne.n	80040a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <TIM_OC3_SetConfig+0xec>)
 800408e:	4013      	ands	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <TIM_OC3_SetConfig+0xf0>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <TIM_OC3_SetConfig+0xe8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_OC3_SetConfig+0x92>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <TIM_OC3_SetConfig+0xf4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x92>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <TIM_OC3_SetConfig+0xf8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d113      	bne.n	80040e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <TIM_OC3_SetConfig+0xfc>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <TIM_OC3_SetConfig+0x100>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b006      	add	sp, #24
 8004106:	bd80      	pop	{r7, pc}
 8004108:	fffffeff 	.word	0xfffffeff
 800410c:	fffeff8f 	.word	0xfffeff8f
 8004110:	fffffdff 	.word	0xfffffdff
 8004114:	40012c00 	.word	0x40012c00
 8004118:	fffff7ff 	.word	0xfffff7ff
 800411c:	fffffbff 	.word	0xfffffbff
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	ffffefff 	.word	0xffffefff
 800412c:	ffffdfff 	.word	0xffffdfff

08004130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <TIM_OC4_SetConfig+0xa8>)
 8004140:	401a      	ands	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <TIM_OC4_SetConfig+0xac>)
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <TIM_OC4_SetConfig+0xb0>)
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <TIM_OC4_SetConfig+0xb4>)
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <TIM_OC4_SetConfig+0xb8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <TIM_OC4_SetConfig+0x70>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <TIM_OC4_SetConfig+0xbc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC4_SetConfig+0x70>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <TIM_OC4_SetConfig+0xc0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d109      	bne.n	80041b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <TIM_OC4_SetConfig+0xc4>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b006      	add	sp, #24
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	ffffefff 	.word	0xffffefff
 80041dc:	feff8fff 	.word	0xfeff8fff
 80041e0:	fffffcff 	.word	0xfffffcff
 80041e4:	ffffdfff 	.word	0xffffdfff
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	ffffbfff 	.word	0xffffbfff

080041f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <TIM_OC5_SetConfig+0x9c>)
 8004208:	401a      	ands	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <TIM_OC5_SetConfig+0xa0>)
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4a19      	ldr	r2, [pc, #100]	; (800429c <TIM_OC5_SetConfig+0xa4>)
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <TIM_OC5_SetConfig+0xa8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_OC5_SetConfig+0x66>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <TIM_OC5_SetConfig+0xac>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC5_SetConfig+0x66>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <TIM_OC5_SetConfig+0xb0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d109      	bne.n	8004272 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <TIM_OC5_SetConfig+0x9c>)
 8004262:	4013      	ands	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b006      	add	sp, #24
 8004292:	bd80      	pop	{r7, pc}
 8004294:	fffeffff 	.word	0xfffeffff
 8004298:	fffeff8f 	.word	0xfffeff8f
 800429c:	fffdffff 	.word	0xfffdffff
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800

080042ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a24      	ldr	r2, [pc, #144]	; (800434c <TIM_OC6_SetConfig+0xa0>)
 80042bc:	401a      	ands	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_OC6_SetConfig+0xa4>)
 80042d8:	4013      	ands	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <TIM_OC6_SetConfig+0xa8>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	051b      	lsls	r3, r3, #20
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <TIM_OC6_SetConfig+0xac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_OC6_SetConfig+0x68>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <TIM_OC6_SetConfig+0xb0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC6_SetConfig+0x68>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC6_SetConfig+0xb4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d109      	bne.n	8004328 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <TIM_OC6_SetConfig+0xb8>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b006      	add	sp, #24
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	ffefffff 	.word	0xffefffff
 8004350:	feff8fff 	.word	0xfeff8fff
 8004354:	ffdfffff 	.word	0xffdfffff
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800
 8004364:	fffbffff 	.word	0xfffbffff

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	2201      	movs	r2, #1
 8004380:	4393      	bics	r3, r2
 8004382:	001a      	movs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	22f0      	movs	r2, #240	; 0xf0
 8004392:	4393      	bics	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	220a      	movs	r2, #10
 80043a4:	4393      	bics	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	b006      	add	sp, #24
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	2210      	movs	r2, #16
 80043d6:	4393      	bics	r3, r2
 80043d8:	001a      	movs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <TIM_TI2_ConfigInputStage+0x60>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	22a0      	movs	r2, #160	; 0xa0
 8004400:	4393      	bics	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b006      	add	sp, #24
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	ffff0fff 	.word	0xffff0fff

08004428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <TIM_ITRx_SetConfig+0x34>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	2207      	movs	r2, #7
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	609a      	str	r2, [r3, #8]
}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	ffcfff8f 	.word	0xffcfff8f

08004460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <TIM_ETR_SetConfig+0x3c>)
 8004478:	4013      	ands	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4313      	orrs	r3, r2
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b006      	add	sp, #24
 800449a:	bd80      	pop	{r7, pc}
 800449c:	ffff00ff 	.word	0xffff00ff

080044a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	221f      	movs	r2, #31
 80044b0:	4013      	ands	r3, r2
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	0013      	movs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	43d2      	mvns	r2, r2
 80044c2:	401a      	ands	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	211f      	movs	r1, #31
 80044d0:	400b      	ands	r3, r1
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4099      	lsls	r1, r3
 80044d6:	000b      	movs	r3, r1
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b006      	add	sp, #24
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223c      	movs	r2, #60	; 0x3c
 80044f6:	5c9b      	ldrb	r3, [r3, r2]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e050      	b.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	223d      	movs	r2, #61	; 0x3d
 800450c:	2102      	movs	r1, #2
 800450e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2270      	movs	r2, #112	; 0x70
 8004540:	4393      	bics	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a14      	ldr	r2, [pc, #80]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00a      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	429a      	cmp	r2, r3
 800456a:	d004      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a10      	ldr	r2, [pc, #64]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10c      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2280      	movs	r2, #128	; 0x80
 800457a:	4393      	bics	r3, r2
 800457c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	223d      	movs	r2, #61	; 0x3d
 8004594:	2101      	movs	r1, #1
 8004596:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	223c      	movs	r2, #60	; 0x3c
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b004      	add	sp, #16
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	ff0fffff 	.word	0xff0fffff
 80045b4:	40000400 	.word	0x40000400

080045b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	223c      	movs	r2, #60	; 0x3c
 80045ca:	5c9b      	ldrb	r3, [r3, r2]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e079      	b.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	223c      	movs	r2, #60	; 0x3c
 80045d8:	2101      	movs	r1, #1
 80045da:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	4393      	bics	r3, r2
 80045e2:	001a      	movs	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80045f0:	401a      	ands	r2, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80045fe:	401a      	ands	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a33      	ldr	r2, [pc, #204]	; (80046d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800460c:	401a      	ands	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4a30      	ldr	r2, [pc, #192]	; (80046dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800461a:	401a      	ands	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a2e      	ldr	r2, [pc, #184]	; (80046e0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004628:	401a      	ands	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a2b      	ldr	r2, [pc, #172]	; (80046e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004636:	401a      	ands	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004644:	401a      	ands	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d106      	bne.n	8004668 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800465e:	401a      	ands	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1f      	ldr	r2, [pc, #124]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d121      	bne.n	80046b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004676:	401a      	ands	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	051b      	lsls	r3, r3, #20
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004686:	401a      	ands	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004694:	401a      	ands	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d106      	bne.n	80046b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80046ac:	401a      	ands	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	223c      	movs	r2, #60	; 0x3c
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b004      	add	sp, #16
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	fffffcff 	.word	0xfffffcff
 80046d4:	fffffbff 	.word	0xfffffbff
 80046d8:	fffff7ff 	.word	0xfffff7ff
 80046dc:	ffffefff 	.word	0xffffefff
 80046e0:	ffffdfff 	.word	0xffffdfff
 80046e4:	ffffbfff 	.word	0xffffbfff
 80046e8:	fff0ffff 	.word	0xfff0ffff
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	efffffff 	.word	0xefffffff
 80046f4:	ff0fffff 	.word	0xff0fffff
 80046f8:	feffffff 	.word	0xfeffffff
 80046fc:	fdffffff 	.word	0xfdffffff
 8004700:	dfffffff 	.word	0xdfffffff

08004704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e046      	b.n	80047a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2288      	movs	r2, #136	; 0x88
 800471a:	589b      	ldr	r3, [r3, r2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2284      	movs	r2, #132	; 0x84
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f002 fbb6 	bl	8006e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2288      	movs	r2, #136	; 0x88
 8004734:	2124      	movs	r1, #36	; 0x24
 8004736:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fc6c 	bl	8005028 <UART_SetConfig>
 8004750:	0003      	movs	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e024      	b.n	80047a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 fed7 	bl	8005518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	490d      	ldr	r1, [pc, #52]	; (80047ac <HAL_UART_Init+0xa8>)
 8004776:	400a      	ands	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	212a      	movs	r1, #42	; 0x2a
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 ff6f 	bl	8005680 <UART_CheckIdleState>
 80047a2:	0003      	movs	r3, r0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	ffffb7ff 	.word	0xffffb7ff

080047b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	1dbb      	adds	r3, r7, #6
 80047be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2288      	movs	r2, #136	; 0x88
 80047c4:	589b      	ldr	r3, [r3, r2]
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d000      	beq.n	80047cc <HAL_UART_Transmit+0x1c>
 80047ca:	e088      	b.n	80048de <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_Transmit+0x2a>
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e080      	b.n	80048e0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	015b      	lsls	r3, r3, #5
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d109      	bne.n	80047fe <HAL_UART_Transmit+0x4e>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e070      	b.n	80048e0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2290      	movs	r2, #144	; 0x90
 8004802:	2100      	movs	r1, #0
 8004804:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2288      	movs	r2, #136	; 0x88
 800480a:	2121      	movs	r1, #33	; 0x21
 800480c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480e:	f7fc fc83 	bl	8001118 <HAL_GetTick>
 8004812:	0003      	movs	r3, r0
 8004814:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1dba      	adds	r2, r7, #6
 800481a:	2154      	movs	r1, #84	; 0x54
 800481c:	8812      	ldrh	r2, [r2, #0]
 800481e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1dba      	adds	r2, r7, #6
 8004824:	2156      	movs	r1, #86	; 0x56
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	015b      	lsls	r3, r3, #5
 8004832:	429a      	cmp	r2, r3
 8004834:	d108      	bne.n	8004848 <HAL_UART_Transmit+0x98>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e003      	b.n	8004850 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004850:	e02c      	b.n	80048ac <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	0013      	movs	r3, r2
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	f000 ff5c 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d001      	beq.n	800486c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e039      	b.n	80048e0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	001a      	movs	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	05d2      	lsls	r2, r2, #23
 800487e:	0dd2      	lsrs	r2, r2, #23
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2256      	movs	r2, #86	; 0x56
 800489e:	5a9b      	ldrh	r3, [r3, r2]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b299      	uxth	r1, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2256      	movs	r2, #86	; 0x56
 80048aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2256      	movs	r2, #86	; 0x56
 80048b0:	5a9b      	ldrh	r3, [r3, r2]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1cc      	bne.n	8004852 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	0013      	movs	r3, r2
 80048c2:	2200      	movs	r2, #0
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	f000 ff29 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2288      	movs	r2, #136	; 0x88
 80048d6:	2120      	movs	r1, #32
 80048d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b008      	add	sp, #32
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	1dbb      	adds	r3, r7, #6
 80048f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	228c      	movs	r2, #140	; 0x8c
 80048fa:	589b      	ldr	r3, [r3, r2]
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d14a      	bne.n	8004996 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_UART_Receive_IT+0x26>
 8004906:	1dbb      	adds	r3, r7, #6
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e042      	b.n	8004998 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	015b      	lsls	r3, r3, #5
 800491a:	429a      	cmp	r2, r3
 800491c:	d109      	bne.n	8004932 <HAL_UART_Receive_IT+0x4a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2201      	movs	r2, #1
 800492a:	4013      	ands	r3, r2
 800492c:	d001      	beq.n	8004932 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e032      	b.n	8004998 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_UART_Receive_IT+0xb8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d020      	beq.n	8004984 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4013      	ands	r3, r2
 800494e:	d019      	beq.n	8004984 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	613b      	str	r3, [r7, #16]
  return(result);
 8004956:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	04c9      	lsls	r1, r1, #19
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	0018      	movs	r0, r3
 800498e:	f000 ff8d 	bl	80058ac <UART_Start_Receive_IT>
 8004992:	0003      	movs	r3, r0
 8004994:	e000      	b.n	8004998 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b008      	add	sp, #32
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40008000 	.word	0x40008000

080049a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	b0aa      	sub	sp, #168	; 0xa8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	22a4      	movs	r2, #164	; 0xa4
 80049b4:	18b9      	adds	r1, r7, r2
 80049b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	20a0      	movs	r0, #160	; 0xa0
 80049c0:	1839      	adds	r1, r7, r0
 80049c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	249c      	movs	r4, #156	; 0x9c
 80049cc:	1939      	adds	r1, r7, r4
 80049ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049d0:	0011      	movs	r1, r2
 80049d2:	18bb      	adds	r3, r7, r2
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4aa2      	ldr	r2, [pc, #648]	; (8004c60 <HAL_UART_IRQHandler+0x2bc>)
 80049d8:	4013      	ands	r3, r2
 80049da:	2298      	movs	r2, #152	; 0x98
 80049dc:	18bd      	adds	r5, r7, r2
 80049de:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80049e0:	18bb      	adds	r3, r7, r2
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d11a      	bne.n	8004a1e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2220      	movs	r2, #32
 80049ee:	4013      	ands	r3, r2
 80049f0:	d015      	beq.n	8004a1e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049f2:	183b      	adds	r3, r7, r0
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2220      	movs	r2, #32
 80049f8:	4013      	ands	r3, r2
 80049fa:	d105      	bne.n	8004a08 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049fc:	193b      	adds	r3, r7, r4
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	055b      	lsls	r3, r3, #21
 8004a04:	4013      	ands	r3, r2
 8004a06:	d00a      	beq.n	8004a1e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d100      	bne.n	8004a12 <HAL_UART_IRQHandler+0x6e>
 8004a10:	e2dc      	b.n	8004fcc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	0010      	movs	r0, r2
 8004a1a:	4798      	blx	r3
      }
      return;
 8004a1c:	e2d6      	b.n	8004fcc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a1e:	2398      	movs	r3, #152	; 0x98
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d100      	bne.n	8004a2a <HAL_UART_IRQHandler+0x86>
 8004a28:	e122      	b.n	8004c70 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a2a:	239c      	movs	r3, #156	; 0x9c
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a8c      	ldr	r2, [pc, #560]	; (8004c64 <HAL_UART_IRQHandler+0x2c0>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a36:	23a0      	movs	r3, #160	; 0xa0
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a8a      	ldr	r2, [pc, #552]	; (8004c68 <HAL_UART_IRQHandler+0x2c4>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d100      	bne.n	8004a44 <HAL_UART_IRQHandler+0xa0>
 8004a42:	e115      	b.n	8004c70 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a44:	23a4      	movs	r3, #164	; 0xa4
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d012      	beq.n	8004a76 <HAL_UART_IRQHandler+0xd2>
 8004a50:	23a0      	movs	r3, #160	; 0xa0
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2201      	movs	r2, #1
 8004a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2290      	movs	r2, #144	; 0x90
 8004a6a:	589b      	ldr	r3, [r3, r2]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2190      	movs	r1, #144	; 0x90
 8004a74:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a76:	23a4      	movs	r3, #164	; 0xa4
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d011      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x102>
 8004a82:	239c      	movs	r3, #156	; 0x9c
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2202      	movs	r2, #2
 8004a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2290      	movs	r2, #144	; 0x90
 8004a9a:	589b      	ldr	r3, [r3, r2]
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2190      	movs	r1, #144	; 0x90
 8004aa4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa6:	23a4      	movs	r3, #164	; 0xa4
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d011      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x132>
 8004ab2:	239c      	movs	r3, #156	; 0x9c
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	4013      	ands	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2290      	movs	r2, #144	; 0x90
 8004aca:	589b      	ldr	r3, [r3, r2]
 8004acc:	2202      	movs	r2, #2
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2190      	movs	r1, #144	; 0x90
 8004ad4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad6:	23a4      	movs	r3, #164	; 0xa4
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ae2:	23a0      	movs	r3, #160	; 0xa0
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	4013      	ands	r3, r2
 8004aec:	d105      	bne.n	8004afa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004aee:	239c      	movs	r3, #156	; 0x9c
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a5b      	ldr	r2, [pc, #364]	; (8004c64 <HAL_UART_IRQHandler+0x2c0>)
 8004af6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2208      	movs	r2, #8
 8004b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2290      	movs	r2, #144	; 0x90
 8004b06:	589b      	ldr	r3, [r3, r2]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2190      	movs	r1, #144	; 0x90
 8004b10:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b12:	23a4      	movs	r3, #164	; 0xa4
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_UART_IRQHandler+0x1a4>
 8004b20:	23a0      	movs	r3, #160	; 0xa0
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	04db      	lsls	r3, r3, #19
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00c      	beq.n	8004b48 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2290      	movs	r2, #144	; 0x90
 8004b3c:	589b      	ldr	r3, [r3, r2]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2190      	movs	r1, #144	; 0x90
 8004b46:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2290      	movs	r2, #144	; 0x90
 8004b4c:	589b      	ldr	r3, [r3, r2]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <HAL_UART_IRQHandler+0x1b0>
 8004b52:	e23d      	b.n	8004fd0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b54:	23a4      	movs	r3, #164	; 0xa4
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d015      	beq.n	8004b8c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b60:	23a0      	movs	r3, #160	; 0xa0
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2220      	movs	r2, #32
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b6c:	239c      	movs	r3, #156	; 0x9c
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	055b      	lsls	r3, r3, #21
 8004b76:	4013      	ands	r3, r2
 8004b78:	d008      	beq.n	8004b8c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	0010      	movs	r0, r2
 8004b8a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2290      	movs	r2, #144	; 0x90
 8004b90:	589b      	ldr	r3, [r3, r2]
 8004b92:	2194      	movs	r1, #148	; 0x94
 8004b94:	187a      	adds	r2, r7, r1
 8004b96:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d004      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2228      	movs	r2, #40	; 0x28
 8004bac:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bae:	d04c      	beq.n	8004c4a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 ff9e 	bl	8005af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d13c      	bne.n	8004c40 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bce:	2090      	movs	r0, #144	; 0x90
 8004bd0:	183a      	adds	r2, r7, r0
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	438a      	bics	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	183b      	adds	r3, r7, r0
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2280      	movs	r2, #128	; 0x80
 8004c02:	589b      	ldr	r3, [r3, r2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d016      	beq.n	8004c36 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	589b      	ldr	r3, [r3, r2]
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_UART_IRQHandler+0x2c8>)
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	589b      	ldr	r3, [r3, r2]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7fd fcb1 	bl	8002580 <HAL_DMA_Abort_IT>
 8004c1e:	1e03      	subs	r3, r0, #0
 8004c20:	d01c      	beq.n	8004c5c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	589b      	ldr	r3, [r3, r2]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	5852      	ldr	r2, [r2, r1]
 8004c30:	0010      	movs	r0, r2
 8004c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e012      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 f9e1 	bl	8005000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3e:	e00d      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f9dc 	bl	8005000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e008      	b.n	8004c5c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 f9d7 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2290      	movs	r2, #144	; 0x90
 8004c56:	2100      	movs	r1, #0
 8004c58:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c5a:	e1b9      	b.n	8004fd0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	46c0      	nop			; (mov r8, r8)
    return;
 8004c5e:	e1b7      	b.n	8004fd0 <HAL_UART_IRQHandler+0x62c>
 8004c60:	0000080f 	.word	0x0000080f
 8004c64:	10000001 	.word	0x10000001
 8004c68:	04000120 	.word	0x04000120
 8004c6c:	08005bc1 	.word	0x08005bc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d000      	beq.n	8004c7a <HAL_UART_IRQHandler+0x2d6>
 8004c78:	e13e      	b.n	8004ef8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c7a:	23a4      	movs	r3, #164	; 0xa4
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2210      	movs	r2, #16
 8004c82:	4013      	ands	r3, r2
 8004c84:	d100      	bne.n	8004c88 <HAL_UART_IRQHandler+0x2e4>
 8004c86:	e137      	b.n	8004ef8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c88:	23a0      	movs	r3, #160	; 0xa0
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	4013      	ands	r3, r2
 8004c92:	d100      	bne.n	8004c96 <HAL_UART_IRQHandler+0x2f2>
 8004c94:	e130      	b.n	8004ef8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2240      	movs	r2, #64	; 0x40
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d000      	beq.n	8004cae <HAL_UART_IRQHandler+0x30a>
 8004cac:	e0a4      	b.n	8004df8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2280      	movs	r2, #128	; 0x80
 8004cb2:	589b      	ldr	r3, [r3, r2]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	217e      	movs	r1, #126	; 0x7e
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d100      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x324>
 8004cc6:	e185      	b.n	8004fd4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	225c      	movs	r2, #92	; 0x5c
 8004ccc:	5a9b      	ldrh	r3, [r3, r2]
 8004cce:	187a      	adds	r2, r7, r1
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d300      	bcc.n	8004cd8 <HAL_UART_IRQHandler+0x334>
 8004cd6:	e17d      	b.n	8004fd4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	187a      	adds	r2, r7, r1
 8004cdc:	215e      	movs	r1, #94	; 0x5e
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	589b      	ldr	r3, [r3, r2]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2220      	movs	r2, #32
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d170      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	49b4      	ldr	r1, [pc, #720]	; (8004fe4 <HAL_UART_IRQHandler+0x640>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d2e:	2301      	movs	r3, #1
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	438a      	bics	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
 8004d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d4c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	f383 8810 	msr	PRIMASK, r3
}
 8004d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d56:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d60:	2301      	movs	r3, #1
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d66:	f383 8810 	msr	PRIMASK, r3
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2140      	movs	r1, #64	; 0x40
 8004d78:	438a      	bics	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	f383 8810 	msr	PRIMASK, r3
}
 8004d86:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	228c      	movs	r2, #140	; 0x8c
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d96:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004da0:	2301      	movs	r3, #1
 8004da2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2110      	movs	r1, #16
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2280      	movs	r2, #128	; 0x80
 8004dcc:	589b      	ldr	r3, [r3, r2]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7fd fb74 	bl	80024bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	225c      	movs	r2, #92	; 0x5c
 8004dde:	5a9a      	ldrh	r2, [r3, r2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	215e      	movs	r1, #94	; 0x5e
 8004de4:	5a5b      	ldrh	r3, [r3, r1]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f90d 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df6:	e0ed      	b.n	8004fd4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	225c      	movs	r2, #92	; 0x5c
 8004dfc:	5a99      	ldrh	r1, [r3, r2]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	225e      	movs	r2, #94	; 0x5e
 8004e02:	5a9b      	ldrh	r3, [r3, r2]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	208e      	movs	r0, #142	; 0x8e
 8004e08:	183b      	adds	r3, r7, r0
 8004e0a:	1a8a      	subs	r2, r1, r2
 8004e0c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	225e      	movs	r2, #94	; 0x5e
 8004e12:	5a9b      	ldrh	r3, [r3, r2]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d100      	bne.n	8004e1c <HAL_UART_IRQHandler+0x478>
 8004e1a:	e0dd      	b.n	8004fd8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004e1c:	183b      	adds	r3, r7, r0
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d100      	bne.n	8004e26 <HAL_UART_IRQHandler+0x482>
 8004e24:	e0d8      	b.n	8004fd8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e26:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e2e:	2488      	movs	r4, #136	; 0x88
 8004e30:	193a      	adds	r2, r7, r4
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	2301      	movs	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4967      	ldr	r1, [pc, #412]	; (8004fe8 <HAL_UART_IRQHandler+0x644>)
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	193b      	adds	r3, r7, r4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e62:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e64:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e66:	2484      	movs	r4, #132	; 0x84
 8004e68:	193a      	adds	r2, r7, r4
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f383 8810 	msr	PRIMASK, r3
}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	495a      	ldr	r1, [pc, #360]	; (8004fec <HAL_UART_IRQHandler+0x648>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	193b      	adds	r3, r7, r4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f383 8810 	msr	PRIMASK, r3
}
 8004e94:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	228c      	movs	r2, #140	; 0x8c
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb2:	2480      	movs	r4, #128	; 0x80
 8004eb4:	193a      	adds	r2, r7, r4
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2110      	movs	r1, #16
 8004ed0:	438a      	bics	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee8:	183b      	adds	r3, r7, r0
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	0011      	movs	r1, r2
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 f88d 	bl	8005010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef6:	e06f      	b.n	8004fd8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ef8:	23a4      	movs	r3, #164	; 0xa4
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	035b      	lsls	r3, r3, #13
 8004f02:	4013      	ands	r3, r2
 8004f04:	d010      	beq.n	8004f28 <HAL_UART_IRQHandler+0x584>
 8004f06:	239c      	movs	r3, #156	; 0x9c
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	03db      	lsls	r3, r3, #15
 8004f10:	4013      	ands	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	0352      	lsls	r2, r2, #13
 8004f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f001 faf1 	bl	8006508 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f26:	e05a      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f28:	23a4      	movs	r3, #164	; 0xa4
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	4013      	ands	r3, r2
 8004f32:	d016      	beq.n	8004f62 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f34:	23a0      	movs	r3, #160	; 0xa0
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d106      	bne.n	8004f4e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f40:	239c      	movs	r3, #156	; 0x9c
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d042      	beq.n	8004fdc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	0010      	movs	r0, r2
 8004f5e:	4798      	blx	r3
    }
    return;
 8004f60:	e03c      	b.n	8004fdc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f62:	23a4      	movs	r3, #164	; 0xa4
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d00a      	beq.n	8004f84 <HAL_UART_IRQHandler+0x5e0>
 8004f6e:	23a0      	movs	r3, #160	; 0xa0
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2240      	movs	r2, #64	; 0x40
 8004f76:	4013      	ands	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 fe36 	bl	8005bee <UART_EndTransmit_IT>
    return;
 8004f82:	e02c      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f84:	23a4      	movs	r3, #164	; 0xa4
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	041b      	lsls	r3, r3, #16
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d00b      	beq.n	8004faa <HAL_UART_IRQHandler+0x606>
 8004f92:	23a0      	movs	r3, #160	; 0xa0
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f001 fac0 	bl	8006528 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fa8:	e019      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004faa:	23a4      	movs	r3, #164	; 0xa4
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	045b      	lsls	r3, r3, #17
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d012      	beq.n	8004fde <HAL_UART_IRQHandler+0x63a>
 8004fb8:	23a0      	movs	r3, #160	; 0xa0
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da0d      	bge.n	8004fde <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f001 faa7 	bl	8006518 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fca:	e008      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
      return;
 8004fcc:	46c0      	nop			; (mov r8, r8)
 8004fce:	e006      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
    return;
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	e004      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
      return;
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	e002      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
      return;
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	e000      	b.n	8004fde <HAL_UART_IRQHandler+0x63a>
    return;
 8004fdc:	46c0      	nop			; (mov r8, r8)
  }
}
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b02a      	add	sp, #168	; 0xa8
 8004fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe4:	fffffeff 	.word	0xfffffeff
 8004fe8:	fffffedf 	.word	0xfffffedf
 8004fec:	effffffe 	.word	0xeffffffe

08004ff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	000a      	movs	r2, r1
 800501a:	1cbb      	adds	r3, r7, #2
 800501c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	46bd      	mov	sp, r7
 8005022:	b002      	add	sp, #8
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	b5b0      	push	{r4, r5, r7, lr}
 800502a:	b090      	sub	sp, #64	; 0x40
 800502c:	af00      	add	r7, sp, #0
 800502e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005030:	231a      	movs	r3, #26
 8005032:	2220      	movs	r2, #32
 8005034:	189b      	adds	r3, r3, r2
 8005036:	19db      	adds	r3, r3, r7
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4ac4      	ldr	r2, [pc, #784]	; (800536c <UART_SetConfig+0x344>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	430b      	orrs	r3, r1
 8005068:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4abf      	ldr	r2, [pc, #764]	; (8005370 <UART_SetConfig+0x348>)
 8005072:	4013      	ands	r3, r2
 8005074:	0018      	movs	r0, r3
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	0003      	movs	r3, r0
 8005080:	430b      	orrs	r3, r1
 8005082:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4ab9      	ldr	r2, [pc, #740]	; (8005374 <UART_SetConfig+0x34c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800509a:	4313      	orrs	r3, r2
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4ab4      	ldr	r2, [pc, #720]	; (8005378 <UART_SetConfig+0x350>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	220f      	movs	r2, #15
 80050bc:	4393      	bics	r3, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	0003      	movs	r3, r0
 80050ca:	430b      	orrs	r3, r1
 80050cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4aaa      	ldr	r2, [pc, #680]	; (800537c <UART_SetConfig+0x354>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d131      	bne.n	800513c <UART_SetConfig+0x114>
 80050d8:	4ba9      	ldr	r3, [pc, #676]	; (8005380 <UART_SetConfig+0x358>)
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	2203      	movs	r2, #3
 80050de:	4013      	ands	r3, r2
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d01d      	beq.n	8005120 <UART_SetConfig+0xf8>
 80050e4:	d823      	bhi.n	800512e <UART_SetConfig+0x106>
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d00c      	beq.n	8005104 <UART_SetConfig+0xdc>
 80050ea:	d820      	bhi.n	800512e <UART_SetConfig+0x106>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <UART_SetConfig+0xce>
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00e      	beq.n	8005112 <UART_SetConfig+0xea>
 80050f4:	e01b      	b.n	800512e <UART_SetConfig+0x106>
 80050f6:	231b      	movs	r3, #27
 80050f8:	2220      	movs	r2, #32
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	19db      	adds	r3, r3, r7
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e071      	b.n	80051e8 <UART_SetConfig+0x1c0>
 8005104:	231b      	movs	r3, #27
 8005106:	2220      	movs	r2, #32
 8005108:	189b      	adds	r3, r3, r2
 800510a:	19db      	adds	r3, r3, r7
 800510c:	2202      	movs	r2, #2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e06a      	b.n	80051e8 <UART_SetConfig+0x1c0>
 8005112:	231b      	movs	r3, #27
 8005114:	2220      	movs	r2, #32
 8005116:	189b      	adds	r3, r3, r2
 8005118:	19db      	adds	r3, r3, r7
 800511a:	2204      	movs	r2, #4
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e063      	b.n	80051e8 <UART_SetConfig+0x1c0>
 8005120:	231b      	movs	r3, #27
 8005122:	2220      	movs	r2, #32
 8005124:	189b      	adds	r3, r3, r2
 8005126:	19db      	adds	r3, r3, r7
 8005128:	2208      	movs	r2, #8
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e05c      	b.n	80051e8 <UART_SetConfig+0x1c0>
 800512e:	231b      	movs	r3, #27
 8005130:	2220      	movs	r2, #32
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	2210      	movs	r2, #16
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e055      	b.n	80051e8 <UART_SetConfig+0x1c0>
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a90      	ldr	r2, [pc, #576]	; (8005384 <UART_SetConfig+0x35c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d106      	bne.n	8005154 <UART_SetConfig+0x12c>
 8005146:	231b      	movs	r3, #27
 8005148:	2220      	movs	r2, #32
 800514a:	189b      	adds	r3, r3, r2
 800514c:	19db      	adds	r3, r3, r7
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e049      	b.n	80051e8 <UART_SetConfig+0x1c0>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a86      	ldr	r2, [pc, #536]	; (8005374 <UART_SetConfig+0x34c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d13e      	bne.n	80051dc <UART_SetConfig+0x1b4>
 800515e:	4b88      	ldr	r3, [pc, #544]	; (8005380 <UART_SetConfig+0x358>)
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	23c0      	movs	r3, #192	; 0xc0
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4013      	ands	r3, r2
 8005168:	22c0      	movs	r2, #192	; 0xc0
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <UART_SetConfig+0x198>
 8005170:	22c0      	movs	r2, #192	; 0xc0
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	4293      	cmp	r3, r2
 8005176:	d82a      	bhi.n	80051ce <UART_SetConfig+0x1a6>
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	4293      	cmp	r3, r2
 800517e:	d011      	beq.n	80051a4 <UART_SetConfig+0x17c>
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	4293      	cmp	r3, r2
 8005186:	d822      	bhi.n	80051ce <UART_SetConfig+0x1a6>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <UART_SetConfig+0x16e>
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	00d2      	lsls	r2, r2, #3
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <UART_SetConfig+0x18a>
 8005194:	e01b      	b.n	80051ce <UART_SetConfig+0x1a6>
 8005196:	231b      	movs	r3, #27
 8005198:	2220      	movs	r2, #32
 800519a:	189b      	adds	r3, r3, r2
 800519c:	19db      	adds	r3, r3, r7
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e021      	b.n	80051e8 <UART_SetConfig+0x1c0>
 80051a4:	231b      	movs	r3, #27
 80051a6:	2220      	movs	r2, #32
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	2202      	movs	r2, #2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e01a      	b.n	80051e8 <UART_SetConfig+0x1c0>
 80051b2:	231b      	movs	r3, #27
 80051b4:	2220      	movs	r2, #32
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	19db      	adds	r3, r3, r7
 80051ba:	2204      	movs	r2, #4
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e013      	b.n	80051e8 <UART_SetConfig+0x1c0>
 80051c0:	231b      	movs	r3, #27
 80051c2:	2220      	movs	r2, #32
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	19db      	adds	r3, r3, r7
 80051c8:	2208      	movs	r2, #8
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e00c      	b.n	80051e8 <UART_SetConfig+0x1c0>
 80051ce:	231b      	movs	r3, #27
 80051d0:	2220      	movs	r2, #32
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	19db      	adds	r3, r3, r7
 80051d6:	2210      	movs	r2, #16
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e005      	b.n	80051e8 <UART_SetConfig+0x1c0>
 80051dc:	231b      	movs	r3, #27
 80051de:	2220      	movs	r2, #32
 80051e0:	189b      	adds	r3, r3, r2
 80051e2:	19db      	adds	r3, r3, r7
 80051e4:	2210      	movs	r2, #16
 80051e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a61      	ldr	r2, [pc, #388]	; (8005374 <UART_SetConfig+0x34c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d000      	beq.n	80051f4 <UART_SetConfig+0x1cc>
 80051f2:	e092      	b.n	800531a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051f4:	231b      	movs	r3, #27
 80051f6:	2220      	movs	r2, #32
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	19db      	adds	r3, r3, r7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d015      	beq.n	800522e <UART_SetConfig+0x206>
 8005202:	dc18      	bgt.n	8005236 <UART_SetConfig+0x20e>
 8005204:	2b04      	cmp	r3, #4
 8005206:	d00d      	beq.n	8005224 <UART_SetConfig+0x1fc>
 8005208:	dc15      	bgt.n	8005236 <UART_SetConfig+0x20e>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x1ec>
 800520e:	2b02      	cmp	r3, #2
 8005210:	d005      	beq.n	800521e <UART_SetConfig+0x1f6>
 8005212:	e010      	b.n	8005236 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe f89a 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005218:	0003      	movs	r3, r0
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800521c:	e014      	b.n	8005248 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521e:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <UART_SetConfig+0x360>)
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005222:	e011      	b.n	8005248 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005224:	f7fe f806 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 8005228:	0003      	movs	r3, r0
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800522c:	e00c      	b.n	8005248 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005234:	e008      	b.n	8005248 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800523a:	231a      	movs	r3, #26
 800523c:	2220      	movs	r2, #32
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
        break;
 8005246:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	2b00      	cmp	r3, #0
 800524c:	d100      	bne.n	8005250 <UART_SetConfig+0x228>
 800524e:	e147      	b.n	80054e0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005254:	4b4d      	ldr	r3, [pc, #308]	; (800538c <UART_SetConfig+0x364>)
 8005256:	0052      	lsls	r2, r2, #1
 8005258:	5ad3      	ldrh	r3, [r2, r3]
 800525a:	0019      	movs	r1, r3
 800525c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800525e:	f7fa ff5b 	bl	8000118 <__udivsi3>
 8005262:	0003      	movs	r3, r0
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	0013      	movs	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	189b      	adds	r3, r3, r2
 8005270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005272:	429a      	cmp	r2, r3
 8005274:	d305      	bcc.n	8005282 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800527c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527e:	429a      	cmp	r2, r3
 8005280:	d906      	bls.n	8005290 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005282:	231a      	movs	r3, #26
 8005284:	2220      	movs	r2, #32
 8005286:	189b      	adds	r3, r3, r2
 8005288:	19db      	adds	r3, r3, r7
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e127      	b.n	80054e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529c:	4b3b      	ldr	r3, [pc, #236]	; (800538c <UART_SetConfig+0x364>)
 800529e:	0052      	lsls	r2, r2, #1
 80052a0:	5ad3      	ldrh	r3, [r2, r3]
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	69b8      	ldr	r0, [r7, #24]
 80052ae:	69f9      	ldr	r1, [r7, #28]
 80052b0:	f7fa fff8 	bl	80002a4 <__aeabi_uldivmod>
 80052b4:	0002      	movs	r2, r0
 80052b6:	000b      	movs	r3, r1
 80052b8:	0e11      	lsrs	r1, r2, #24
 80052ba:	021d      	lsls	r5, r3, #8
 80052bc:	430d      	orrs	r5, r1
 80052be:	0214      	lsls	r4, r2, #8
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68b8      	ldr	r0, [r7, #8]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	1900      	adds	r0, r0, r4
 80052d2:	4169      	adcs	r1, r5
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f7fa ffdf 	bl	80002a4 <__aeabi_uldivmod>
 80052e6:	0002      	movs	r2, r0
 80052e8:	000b      	movs	r3, r1
 80052ea:	0013      	movs	r3, r2
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	23c0      	movs	r3, #192	; 0xc0
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d309      	bcc.n	800530c <UART_SetConfig+0x2e4>
 80052f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	035b      	lsls	r3, r3, #13
 80052fe:	429a      	cmp	r2, r3
 8005300:	d204      	bcs.n	800530c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e0e9      	b.n	80054e0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800530c:	231a      	movs	r3, #26
 800530e:	2220      	movs	r2, #32
 8005310:	189b      	adds	r3, r3, r2
 8005312:	19db      	adds	r3, r3, r7
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e0e2      	b.n	80054e0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	429a      	cmp	r2, r3
 8005324:	d000      	beq.n	8005328 <UART_SetConfig+0x300>
 8005326:	e083      	b.n	8005430 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005328:	231b      	movs	r3, #27
 800532a:	2220      	movs	r2, #32
 800532c:	189b      	adds	r3, r3, r2
 800532e:	19db      	adds	r3, r3, r7
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d015      	beq.n	8005362 <UART_SetConfig+0x33a>
 8005336:	dc2b      	bgt.n	8005390 <UART_SetConfig+0x368>
 8005338:	2b04      	cmp	r3, #4
 800533a:	d00d      	beq.n	8005358 <UART_SetConfig+0x330>
 800533c:	dc28      	bgt.n	8005390 <UART_SetConfig+0x368>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <UART_SetConfig+0x320>
 8005342:	2b02      	cmp	r3, #2
 8005344:	d005      	beq.n	8005352 <UART_SetConfig+0x32a>
 8005346:	e023      	b.n	8005390 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fe f800 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 800534c:	0003      	movs	r3, r0
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005350:	e027      	b.n	80053a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <UART_SetConfig+0x360>)
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005356:	e024      	b.n	80053a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005358:	f7fd ff6c 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 800535c:	0003      	movs	r3, r0
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005360:	e01f      	b.n	80053a2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005368:	e01b      	b.n	80053a2 <UART_SetConfig+0x37a>
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	cfff69f3 	.word	0xcfff69f3
 8005370:	ffffcfff 	.word	0xffffcfff
 8005374:	40008000 	.word	0x40008000
 8005378:	11fff4ff 	.word	0x11fff4ff
 800537c:	40013800 	.word	0x40013800
 8005380:	40021000 	.word	0x40021000
 8005384:	40004400 	.word	0x40004400
 8005388:	00f42400 	.word	0x00f42400
 800538c:	08007bc0 	.word	0x08007bc0
      default:
        pclk = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005394:	231a      	movs	r3, #26
 8005396:	2220      	movs	r2, #32
 8005398:	189b      	adds	r3, r3, r2
 800539a:	19db      	adds	r3, r3, r7
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
        break;
 80053a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d100      	bne.n	80053aa <UART_SetConfig+0x382>
 80053a8:	e09a      	b.n	80054e0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ae:	4b58      	ldr	r3, [pc, #352]	; (8005510 <UART_SetConfig+0x4e8>)
 80053b0:	0052      	lsls	r2, r2, #1
 80053b2:	5ad3      	ldrh	r3, [r2, r3]
 80053b4:	0019      	movs	r1, r3
 80053b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053b8:	f7fa feae 	bl	8000118 <__udivsi3>
 80053bc:	0003      	movs	r3, r0
 80053be:	005a      	lsls	r2, r3, #1
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	18d2      	adds	r2, r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0019      	movs	r1, r3
 80053ce:	0010      	movs	r0, r2
 80053d0:	f7fa fea2 	bl	8000118 <__udivsi3>
 80053d4:	0003      	movs	r3, r0
 80053d6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d921      	bls.n	8005422 <UART_SetConfig+0x3fa>
 80053de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	025b      	lsls	r3, r3, #9
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d21c      	bcs.n	8005422 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	200e      	movs	r0, #14
 80053ee:	2420      	movs	r4, #32
 80053f0:	1903      	adds	r3, r0, r4
 80053f2:	19db      	adds	r3, r3, r7
 80053f4:	210f      	movs	r1, #15
 80053f6:	438a      	bics	r2, r1
 80053f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2207      	movs	r2, #7
 8005402:	4013      	ands	r3, r2
 8005404:	b299      	uxth	r1, r3
 8005406:	1903      	adds	r3, r0, r4
 8005408:	19db      	adds	r3, r3, r7
 800540a:	1902      	adds	r2, r0, r4
 800540c:	19d2      	adds	r2, r2, r7
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1902      	adds	r2, r0, r4
 800541a:	19d2      	adds	r2, r2, r7
 800541c:	8812      	ldrh	r2, [r2, #0]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e05e      	b.n	80054e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005422:	231a      	movs	r3, #26
 8005424:	2220      	movs	r2, #32
 8005426:	189b      	adds	r3, r3, r2
 8005428:	19db      	adds	r3, r3, r7
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e057      	b.n	80054e0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005430:	231b      	movs	r3, #27
 8005432:	2220      	movs	r2, #32
 8005434:	189b      	adds	r3, r3, r2
 8005436:	19db      	adds	r3, r3, r7
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b08      	cmp	r3, #8
 800543c:	d015      	beq.n	800546a <UART_SetConfig+0x442>
 800543e:	dc18      	bgt.n	8005472 <UART_SetConfig+0x44a>
 8005440:	2b04      	cmp	r3, #4
 8005442:	d00d      	beq.n	8005460 <UART_SetConfig+0x438>
 8005444:	dc15      	bgt.n	8005472 <UART_SetConfig+0x44a>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <UART_SetConfig+0x428>
 800544a:	2b02      	cmp	r3, #2
 800544c:	d005      	beq.n	800545a <UART_SetConfig+0x432>
 800544e:	e010      	b.n	8005472 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005450:	f7fd ff7c 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005454:	0003      	movs	r3, r0
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005458:	e014      	b.n	8005484 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <UART_SetConfig+0x4ec>)
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545e:	e011      	b.n	8005484 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005460:	f7fd fee8 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 8005464:	0003      	movs	r3, r0
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005468:	e00c      	b.n	8005484 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005470:	e008      	b.n	8005484 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005476:	231a      	movs	r3, #26
 8005478:	2220      	movs	r2, #32
 800547a:	189b      	adds	r3, r3, r2
 800547c:	19db      	adds	r3, r3, r7
 800547e:	2201      	movs	r2, #1
 8005480:	701a      	strb	r2, [r3, #0]
        break;
 8005482:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02a      	beq.n	80054e0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <UART_SetConfig+0x4e8>)
 8005490:	0052      	lsls	r2, r2, #1
 8005492:	5ad3      	ldrh	r3, [r2, r3]
 8005494:	0019      	movs	r1, r3
 8005496:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005498:	f7fa fe3e 	bl	8000118 <__udivsi3>
 800549c:	0003      	movs	r3, r0
 800549e:	001a      	movs	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	18d2      	adds	r2, r2, r3
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0019      	movs	r1, r3
 80054ae:	0010      	movs	r0, r2
 80054b0:	f7fa fe32 	bl	8000118 <__udivsi3>
 80054b4:	0003      	movs	r3, r0
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d90a      	bls.n	80054d4 <UART_SetConfig+0x4ac>
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	025b      	lsls	r3, r3, #9
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d205      	bcs.n	80054d4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	e005      	b.n	80054e0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80054d4:	231a      	movs	r3, #26
 80054d6:	2220      	movs	r2, #32
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	19db      	adds	r3, r3, r7
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	226a      	movs	r2, #106	; 0x6a
 80054e4:	2101      	movs	r1, #1
 80054e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	2268      	movs	r2, #104	; 0x68
 80054ec:	2101      	movs	r1, #1
 80054ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2200      	movs	r2, #0
 80054f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2200      	movs	r2, #0
 80054fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054fc:	231a      	movs	r3, #26
 80054fe:	2220      	movs	r2, #32
 8005500:	189b      	adds	r3, r3, r2
 8005502:	19db      	adds	r3, r3, r7
 8005504:	781b      	ldrb	r3, [r3, #0]
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b010      	add	sp, #64	; 0x40
 800550c:	bdb0      	pop	{r4, r5, r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	08007bc0 	.word	0x08007bc0
 8005514:	00f42400 	.word	0x00f42400

08005518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d00b      	beq.n	8005542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a4a      	ldr	r2, [pc, #296]	; (800565c <UART_AdvFeatureConfig+0x144>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	2202      	movs	r2, #2
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a43      	ldr	r2, [pc, #268]	; (8005660 <UART_AdvFeatureConfig+0x148>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	2204      	movs	r2, #4
 800556a:	4013      	ands	r3, r2
 800556c:	d00b      	beq.n	8005586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a3b      	ldr	r2, [pc, #236]	; (8005664 <UART_AdvFeatureConfig+0x14c>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2208      	movs	r2, #8
 800558c:	4013      	ands	r3, r2
 800558e:	d00b      	beq.n	80055a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a34      	ldr	r2, [pc, #208]	; (8005668 <UART_AdvFeatureConfig+0x150>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	2210      	movs	r2, #16
 80055ae:	4013      	ands	r3, r2
 80055b0:	d00b      	beq.n	80055ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <UART_AdvFeatureConfig+0x154>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	2220      	movs	r2, #32
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a25      	ldr	r2, [pc, #148]	; (8005670 <UART_AdvFeatureConfig+0x158>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	4013      	ands	r3, r2
 80055f4:	d01d      	beq.n	8005632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <UART_AdvFeatureConfig+0x15c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	035b      	lsls	r3, r3, #13
 8005616:	429a      	cmp	r2, r3
 8005618:	d10b      	bne.n	8005632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <UART_AdvFeatureConfig+0x160>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	4013      	ands	r3, r2
 800563a:	d00b      	beq.n	8005654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a0e      	ldr	r2, [pc, #56]	; (800567c <UART_AdvFeatureConfig+0x164>)
 8005644:	4013      	ands	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
  }
}
 8005654:	46c0      	nop			; (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}
 800565c:	fffdffff 	.word	0xfffdffff
 8005660:	fffeffff 	.word	0xfffeffff
 8005664:	fffbffff 	.word	0xfffbffff
 8005668:	ffff7fff 	.word	0xffff7fff
 800566c:	ffffefff 	.word	0xffffefff
 8005670:	ffffdfff 	.word	0xffffdfff
 8005674:	ffefffff 	.word	0xffefffff
 8005678:	ff9fffff 	.word	0xff9fffff
 800567c:	fff7ffff 	.word	0xfff7ffff

08005680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2290      	movs	r2, #144	; 0x90
 800568c:	2100      	movs	r1, #0
 800568e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005690:	f7fb fd42 	bl	8001118 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2208      	movs	r2, #8
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d10c      	bne.n	80056c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	0391      	lsls	r1, r2, #14
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4a1a      	ldr	r2, [pc, #104]	; (8005718 <UART_CheckIdleState+0x98>)
 80056b0:	9200      	str	r2, [sp, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f000 f832 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d001      	beq.n	80056c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e026      	b.n	800570e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2204      	movs	r2, #4
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d10c      	bne.n	80056e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	03d1      	lsls	r1, r2, #15
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <UART_CheckIdleState+0x98>)
 80056d8:	9200      	str	r2, [sp, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	f000 f81e 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 80056e0:	1e03      	subs	r3, r0, #0
 80056e2:	d001      	beq.n	80056e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e012      	b.n	800570e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2288      	movs	r2, #136	; 0x88
 80056ec:	2120      	movs	r1, #32
 80056ee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	228c      	movs	r2, #140	; 0x8c
 80056f4:	2120      	movs	r1, #32
 80056f6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2284      	movs	r2, #132	; 0x84
 8005708:	2100      	movs	r1, #0
 800570a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	0018      	movs	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	b004      	add	sp, #16
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	01ffffff 	.word	0x01ffffff

0800571c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b094      	sub	sp, #80	; 0x50
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	1dfb      	adds	r3, r7, #7
 800572a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572c:	e0a7      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005730:	3301      	adds	r3, #1
 8005732:	d100      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005734:	e0a3      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fb fcef 	bl	8001118 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <UART_WaitOnFlagUntilTimeout+0x30>
 8005746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005748:	2b00      	cmp	r3, #0
 800574a:	d13f      	bne.n	80057cc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8310 	mrs	r3, PRIMASK
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
 8005756:	2301      	movs	r3, #1
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	494e      	ldr	r1, [pc, #312]	; (80058a8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800576e:	400a      	ands	r2, r1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005774:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	643b      	str	r3, [r7, #64]	; 0x40
 8005788:	2301      	movs	r3, #1
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	438a      	bics	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057aa:	f383 8810 	msr	PRIMASK, r3
}
 80057ae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2288      	movs	r2, #136	; 0x88
 80057b4:	2120      	movs	r1, #32
 80057b6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	228c      	movs	r2, #140	; 0x8c
 80057bc:	2120      	movs	r1, #32
 80057be:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2284      	movs	r2, #132	; 0x84
 80057c4:	2100      	movs	r1, #0
 80057c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e069      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2204      	movs	r2, #4
 80057d4:	4013      	ands	r3, r2
 80057d6:	d052      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	401a      	ands	r2, r3
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d148      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f6:	f3ef 8310 	mrs	r3, PRIMASK
 80057fa:	613b      	str	r3, [r7, #16]
  return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	2301      	movs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4924      	ldr	r1, [pc, #144]	; (80058a8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005818:	400a      	ands	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005828:	f3ef 8310 	mrs	r3, PRIMASK
 800582c:	61fb      	str	r3, [r7, #28]
  return(result);
 800582e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005830:	64bb      	str	r3, [r7, #72]	; 0x48
 8005832:	2301      	movs	r3, #1
 8005834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2101      	movs	r1, #1
 800584a:	438a      	bics	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	f383 8810 	msr	PRIMASK, r3
}
 8005858:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2288      	movs	r2, #136	; 0x88
 800585e:	2120      	movs	r1, #32
 8005860:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	228c      	movs	r2, #140	; 0x8c
 8005866:	2120      	movs	r1, #32
 8005868:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2290      	movs	r2, #144	; 0x90
 800586e:	2120      	movs	r1, #32
 8005870:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2284      	movs	r2, #132	; 0x84
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e010      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	425a      	negs	r2, r3
 800588e:	4153      	adcs	r3, r2
 8005890:	b2db      	uxtb	r3, r3
 8005892:	001a      	movs	r2, r3
 8005894:	1dfb      	adds	r3, r7, #7
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d100      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x182>
 800589c:	e747      	b.n	800572e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	0018      	movs	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b014      	add	sp, #80	; 0x50
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	fffffe5f 	.word	0xfffffe5f

080058ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b098      	sub	sp, #96	; 0x60
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	1dbb      	adds	r3, r7, #6
 80058b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1dba      	adds	r2, r7, #6
 80058c4:	215c      	movs	r1, #92	; 0x5c
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1dba      	adds	r2, r7, #6
 80058ce:	215e      	movs	r1, #94	; 0x5e
 80058d0:	8812      	ldrh	r2, [r2, #0]
 80058d2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	015b      	lsls	r3, r3, #5
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d10d      	bne.n	8005902 <UART_Start_Receive_IT+0x56>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <UART_Start_Receive_IT+0x4c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2260      	movs	r2, #96	; 0x60
 80058f2:	497b      	ldr	r1, [pc, #492]	; (8005ae0 <UART_Start_Receive_IT+0x234>)
 80058f4:	5299      	strh	r1, [r3, r2]
 80058f6:	e02e      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2260      	movs	r2, #96	; 0x60
 80058fc:	21ff      	movs	r1, #255	; 0xff
 80058fe:	5299      	strh	r1, [r3, r2]
 8005900:	e029      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <UART_Start_Receive_IT+0x7a>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <UART_Start_Receive_IT+0x70>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2260      	movs	r2, #96	; 0x60
 8005916:	21ff      	movs	r1, #255	; 0xff
 8005918:	5299      	strh	r1, [r3, r2]
 800591a:	e01c      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2260      	movs	r2, #96	; 0x60
 8005920:	217f      	movs	r1, #127	; 0x7f
 8005922:	5299      	strh	r1, [r3, r2]
 8005924:	e017      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	055b      	lsls	r3, r3, #21
 800592e:	429a      	cmp	r2, r3
 8005930:	d10d      	bne.n	800594e <UART_Start_Receive_IT+0xa2>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <UART_Start_Receive_IT+0x98>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2260      	movs	r2, #96	; 0x60
 800593e:	217f      	movs	r1, #127	; 0x7f
 8005940:	5299      	strh	r1, [r3, r2]
 8005942:	e008      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2260      	movs	r2, #96	; 0x60
 8005948:	213f      	movs	r1, #63	; 0x3f
 800594a:	5299      	strh	r1, [r3, r2]
 800594c:	e003      	b.n	8005956 <UART_Start_Receive_IT+0xaa>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2260      	movs	r2, #96	; 0x60
 8005952:	2100      	movs	r1, #0
 8005954:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2290      	movs	r2, #144	; 0x90
 800595a:	2100      	movs	r1, #0
 800595c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	228c      	movs	r2, #140	; 0x8c
 8005962:	2122      	movs	r1, #34	; 0x22
 8005964:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005966:	f3ef 8310 	mrs	r3, PRIMASK
 800596a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800596c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005970:	2301      	movs	r3, #1
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2101      	movs	r1, #1
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f383 8810 	msr	PRIMASK, r3
}
 8005996:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	059b      	lsls	r3, r3, #22
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d150      	bne.n	8005a46 <UART_Start_Receive_IT+0x19a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2268      	movs	r2, #104	; 0x68
 80059a8:	5a9b      	ldrh	r3, [r3, r2]
 80059aa:	1dba      	adds	r2, r7, #6
 80059ac:	8812      	ldrh	r2, [r2, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d349      	bcc.n	8005a46 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	015b      	lsls	r3, r3, #5
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d107      	bne.n	80059ce <UART_Start_Receive_IT+0x122>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a46      	ldr	r2, [pc, #280]	; (8005ae4 <UART_Start_Receive_IT+0x238>)
 80059ca:	675a      	str	r2, [r3, #116]	; 0x74
 80059cc:	e002      	b.n	80059d4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a45      	ldr	r2, [pc, #276]	; (8005ae8 <UART_Start_Receive_IT+0x23c>)
 80059d2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d019      	beq.n	8005a10 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059dc:	f3ef 8310 	mrs	r3, PRIMASK
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e6:	2301      	movs	r3, #1
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	0049      	lsls	r1, r1, #1
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	f383 8810 	msr	PRIMASK, r3
}
 8005a0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a10:	f3ef 8310 	mrs	r3, PRIMASK
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a18:	657b      	str	r3, [r7, #84]	; 0x54
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	f383 8810 	msr	PRIMASK, r3
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	0549      	lsls	r1, r1, #21
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	e047      	b.n	8005ad6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	015b      	lsls	r3, r3, #5
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d107      	bne.n	8005a62 <UART_Start_Receive_IT+0x1b6>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <UART_Start_Receive_IT+0x240>)
 8005a5e:	675a      	str	r2, [r3, #116]	; 0x74
 8005a60:	e002      	b.n	8005a68 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <UART_Start_Receive_IT+0x244>)
 8005a66:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a70:	f3ef 8310 	mrs	r3, PRIMASK
 8005a74:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a76:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2190      	movs	r1, #144	; 0x90
 8005a92:	0049      	lsls	r1, r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	e018      	b.n	8005ad6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	613b      	str	r3, [r7, #16]
  return(result);
 8005aaa:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aac:	653b      	str	r3, [r7, #80]	; 0x50
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f383 8810 	msr	PRIMASK, r3
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f383 8810 	msr	PRIMASK, r3
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b018      	add	sp, #96	; 0x60
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	000001ff 	.word	0x000001ff
 8005ae4:	0800621d 	.word	0x0800621d
 8005ae8:	08005f31 	.word	0x08005f31
 8005aec:	08005dbd 	.word	0x08005dbd
 8005af0:	08005c49 	.word	0x08005c49

08005af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afc:	f3ef 8310 	mrs	r3, PRIMASK
 8005b00:	617b      	str	r3, [r7, #20]
  return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	2301      	movs	r3, #1
 8005b08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f383 8810 	msr	PRIMASK, r3
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4926      	ldr	r1, [pc, #152]	; (8005bb8 <UART_EndRxTransfer+0xc4>)
 8005b1e:	400a      	ands	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b32:	623b      	str	r3, [r7, #32]
  return(result);
 8005b34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
 8005b38:	2301      	movs	r3, #1
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f383 8810 	msr	PRIMASK, r3
}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	491b      	ldr	r1, [pc, #108]	; (8005bbc <UART_EndRxTransfer+0xc8>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d118      	bne.n	8005b9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b68:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b72:	2301      	movs	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f383 8810 	msr	PRIMASK, r3
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2110      	movs	r1, #16
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	228c      	movs	r2, #140	; 0x8c
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b00e      	add	sp, #56	; 0x38
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	fffffedf 	.word	0xfffffedf
 8005bbc:	effffffe 	.word	0xeffffffe

08005bc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	225e      	movs	r2, #94	; 0x5e
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2256      	movs	r2, #86	; 0x56
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7ff fa0d 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b004      	add	sp, #16
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2140      	movs	r1, #64	; 0x40
 8005c18:	438a      	bics	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f383 8810 	msr	PRIMASK, r3
}
 8005c26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2288      	movs	r2, #136	; 0x88
 8005c2c:	2120      	movs	r1, #32
 8005c2e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7ff f9d9 	bl	8004ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b006      	add	sp, #24
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b090      	sub	sp, #64	; 0x40
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c50:	203e      	movs	r0, #62	; 0x3e
 8005c52:	183b      	adds	r3, r7, r0
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	2160      	movs	r1, #96	; 0x60
 8005c58:	5a52      	ldrh	r2, [r2, r1]
 8005c5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	228c      	movs	r2, #140	; 0x8c
 8005c60:	589b      	ldr	r3, [r3, r2]
 8005c62:	2b22      	cmp	r3, #34	; 0x22
 8005c64:	d000      	beq.n	8005c68 <UART_RxISR_8BIT+0x20>
 8005c66:	e09a      	b.n	8005d9e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c6e:	213c      	movs	r1, #60	; 0x3c
 8005c70:	187b      	adds	r3, r7, r1
 8005c72:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c74:	187b      	adds	r3, r7, r1
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b2d9      	uxtb	r1, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	400a      	ands	r2, r1
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	225e      	movs	r2, #94	; 0x5e
 8005c98:	5a9b      	ldrh	r3, [r3, r2]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	225e      	movs	r2, #94	; 0x5e
 8005ca4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	225e      	movs	r2, #94	; 0x5e
 8005caa:	5a9b      	ldrh	r3, [r3, r2]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d000      	beq.n	8005cb4 <UART_RxISR_8BIT+0x6c>
 8005cb2:	e07c      	b.n	8005dae <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cba:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4938      	ldr	r1, [pc, #224]	; (8005db8 <UART_RxISR_8BIT+0x170>)
 8005cd6:	400a      	ands	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2101      	movs	r1, #1
 8005d08:	438a      	bics	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	228c      	movs	r2, #140	; 0x8c
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d12f      	bne.n	8005d94 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d40:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
 8005d44:	2301      	movs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2110      	movs	r1, #16
 8005d5c:	438a      	bics	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f383 8810 	msr	PRIMASK, r3
}
 8005d6a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2210      	movs	r2, #16
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d103      	bne.n	8005d82 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2210      	movs	r2, #16
 8005d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	225c      	movs	r2, #92	; 0x5c
 8005d86:	5a9a      	ldrh	r2, [r3, r2]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff f93f 	bl	8005010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d92:	e00c      	b.n	8005dae <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f000 fe68 	bl	8006a6c <HAL_UART_RxCpltCallback>
}
 8005d9c:	e007      	b.n	8005dae <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2108      	movs	r1, #8
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b010      	add	sp, #64	; 0x40
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	fffffedf 	.word	0xfffffedf

08005dbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b090      	sub	sp, #64	; 0x40
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dc4:	203e      	movs	r0, #62	; 0x3e
 8005dc6:	183b      	adds	r3, r7, r0
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	2160      	movs	r1, #96	; 0x60
 8005dcc:	5a52      	ldrh	r2, [r2, r1]
 8005dce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	228c      	movs	r2, #140	; 0x8c
 8005dd4:	589b      	ldr	r3, [r3, r2]
 8005dd6:	2b22      	cmp	r3, #34	; 0x22
 8005dd8:	d000      	beq.n	8005ddc <UART_RxISR_16BIT+0x20>
 8005dda:	e09a      	b.n	8005f12 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de2:	213c      	movs	r1, #60	; 0x3c
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	183a      	adds	r2, r7, r0
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	4013      	ands	r3, r2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	225e      	movs	r2, #94	; 0x5e
 8005e0c:	5a9b      	ldrh	r3, [r3, r2]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b299      	uxth	r1, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	225e      	movs	r2, #94	; 0x5e
 8005e18:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	225e      	movs	r2, #94	; 0x5e
 8005e1e:	5a9b      	ldrh	r3, [r3, r2]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d000      	beq.n	8005e28 <UART_RxISR_16BIT+0x6c>
 8005e26:	e07c      	b.n	8005f22 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e28:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e2e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
 8005e32:	2301      	movs	r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f383 8810 	msr	PRIMASK, r3
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4938      	ldr	r1, [pc, #224]	; (8005f2c <UART_RxISR_16BIT+0x170>)
 8005e4a:	400a      	ands	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e5e:	623b      	str	r3, [r7, #32]
  return(result);
 8005e60:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
 8005e64:	2301      	movs	r3, #1
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	f383 8810 	msr	PRIMASK, r3
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	f383 8810 	msr	PRIMASK, r3
}
 8005e8a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	228c      	movs	r2, #140	; 0x8c
 8005e90:	2120      	movs	r1, #32
 8005e92:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d12f      	bne.n	8005f08 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eae:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eb4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb8:	2301      	movs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2110      	movs	r1, #16
 8005ed0:	438a      	bics	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f383 8810 	msr	PRIMASK, r3
}
 8005ede:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d103      	bne.n	8005ef6 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	225c      	movs	r2, #92	; 0x5c
 8005efa:	5a9a      	ldrh	r2, [r3, r2]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0011      	movs	r1, r2
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7ff f885 	bl	8005010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f06:	e00c      	b.n	8005f22 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fdae 	bl	8006a6c <HAL_UART_RxCpltCallback>
}
 8005f10:	e007      	b.n	8005f22 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699a      	ldr	r2, [r3, #24]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	619a      	str	r2, [r3, #24]
}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b010      	add	sp, #64	; 0x40
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	fffffedf 	.word	0xfffffedf

08005f30 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b09c      	sub	sp, #112	; 0x70
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005f38:	236a      	movs	r3, #106	; 0x6a
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	2160      	movs	r1, #96	; 0x60
 8005f40:	5a52      	ldrh	r2, [r2, r1]
 8005f42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	228c      	movs	r2, #140	; 0x8c
 8005f60:	589b      	ldr	r3, [r3, r2]
 8005f62:	2b22      	cmp	r3, #34	; 0x22
 8005f64:	d000      	beq.n	8005f68 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005f66:	e144      	b.n	80061f2 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f68:	235e      	movs	r3, #94	; 0x5e
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	2168      	movs	r1, #104	; 0x68
 8005f70:	5a52      	ldrh	r2, [r2, r1]
 8005f72:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f74:	e0eb      	b.n	800614e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7c:	215c      	movs	r1, #92	; 0x5c
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	236a      	movs	r3, #106	; 0x6a
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b2d9      	uxtb	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	400a      	ands	r2, r1
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	225e      	movs	r2, #94	; 0x5e
 8005fa8:	5a9b      	ldrh	r3, [r3, r2]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b299      	uxth	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	225e      	movs	r2, #94	; 0x5e
 8005fb4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d049      	beq.n	800605a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d010      	beq.n	8005ff0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005fce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2290      	movs	r2, #144	; 0x90
 8005fe4:	589b      	ldr	r3, [r3, r2]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2190      	movs	r1, #144	; 0x90
 8005fee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d00f      	beq.n	8006018 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2202      	movs	r2, #2
 8006006:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2290      	movs	r2, #144	; 0x90
 800600c:	589b      	ldr	r3, [r3, r2]
 800600e:	2204      	movs	r2, #4
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2190      	movs	r1, #144	; 0x90
 8006016:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	d00f      	beq.n	8006040 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006022:	2201      	movs	r2, #1
 8006024:	4013      	ands	r3, r2
 8006026:	d00b      	beq.n	8006040 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2204      	movs	r2, #4
 800602e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2290      	movs	r2, #144	; 0x90
 8006034:	589b      	ldr	r3, [r3, r2]
 8006036:	2202      	movs	r2, #2
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2190      	movs	r1, #144	; 0x90
 800603e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2290      	movs	r2, #144	; 0x90
 8006044:	589b      	ldr	r3, [r3, r2]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f7fe ffd7 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2290      	movs	r2, #144	; 0x90
 8006056:	2100      	movs	r1, #0
 8006058:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	225e      	movs	r2, #94	; 0x5e
 800605e:	5a9b      	ldrh	r3, [r3, r2]
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d173      	bne.n	800614e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006066:	f3ef 8310 	mrs	r3, PRIMASK
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800606e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006070:	2301      	movs	r3, #1
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	f383 8810 	msr	PRIMASK, r3
}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4961      	ldr	r1, [pc, #388]	; (800620c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006088:	400a      	ands	r2, r1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	f383 8810 	msr	PRIMASK, r3
}
 8006096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006098:	f3ef 8310 	mrs	r3, PRIMASK
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060a0:	657b      	str	r3, [r7, #84]	; 0x54
 80060a2:	2301      	movs	r3, #1
 80060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a8:	f383 8810 	msr	PRIMASK, r3
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4955      	ldr	r1, [pc, #340]	; (8006210 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80060ba:	400a      	ands	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
 80060be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c4:	f383 8810 	msr	PRIMASK, r3
}
 80060c8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	228c      	movs	r2, #140	; 0x8c
 80060ce:	2120      	movs	r1, #32
 80060d0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d12f      	bne.n	8006146 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ec:	f3ef 8310 	mrs	r3, PRIMASK
 80060f0:	623b      	str	r3, [r7, #32]
  return(result);
 80060f2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
 80060f6:	2301      	movs	r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	46c0      	nop			; (mov r8, r8)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2110      	movs	r1, #16
 800610e:	438a      	bics	r2, r1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	2210      	movs	r2, #16
 8006126:	4013      	ands	r3, r2
 8006128:	2b10      	cmp	r3, #16
 800612a:	d103      	bne.n	8006134 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2210      	movs	r2, #16
 8006132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	225c      	movs	r2, #92	; 0x5c
 8006138:	5a9a      	ldrh	r2, [r3, r2]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0011      	movs	r1, r2
 800613e:	0018      	movs	r0, r3
 8006140:	f7fe ff66 	bl	8005010 <HAL_UARTEx_RxEventCallback>
 8006144:	e003      	b.n	800614e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 fc8f 	bl	8006a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800614e:	235e      	movs	r3, #94	; 0x5e
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615a:	2220      	movs	r2, #32
 800615c:	4013      	ands	r3, r2
 800615e:	d000      	beq.n	8006162 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006160:	e709      	b.n	8005f76 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006162:	204e      	movs	r0, #78	; 0x4e
 8006164:	183b      	adds	r3, r7, r0
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	215e      	movs	r1, #94	; 0x5e
 800616a:	5a52      	ldrh	r2, [r2, r1]
 800616c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800616e:	0001      	movs	r1, r0
 8006170:	187b      	adds	r3, r7, r1
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d044      	beq.n	8006202 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2268      	movs	r2, #104	; 0x68
 800617c:	5a9b      	ldrh	r3, [r3, r2]
 800617e:	187a      	adds	r2, r7, r1
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d23d      	bcs.n	8006202 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006186:	f3ef 8310 	mrs	r3, PRIMASK
 800618a:	60bb      	str	r3, [r7, #8]
  return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f383 8810 	msr	PRIMASK, r3
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	491b      	ldr	r1, [pc, #108]	; (8006214 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80061a8:	400a      	ands	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f383 8810 	msr	PRIMASK, r3
}
 80061b6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80061bc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061be:	f3ef 8310 	mrs	r3, PRIMASK
 80061c2:	617b      	str	r3, [r7, #20]
  return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44
 80061c8:	2301      	movs	r3, #1
 80061ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f383 8810 	msr	PRIMASK, r3
}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2120      	movs	r1, #32
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f383 8810 	msr	PRIMASK, r3
}
 80061ee:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061f0:	e007      	b.n	8006202 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2108      	movs	r1, #8
 80061fe:	430a      	orrs	r2, r1
 8006200:	619a      	str	r2, [r3, #24]
}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	b01c      	add	sp, #112	; 0x70
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	fffffeff 	.word	0xfffffeff
 8006210:	effffffe 	.word	0xeffffffe
 8006214:	efffffff 	.word	0xefffffff
 8006218:	08005c49 	.word	0x08005c49

0800621c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b09e      	sub	sp, #120	; 0x78
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006224:	2372      	movs	r3, #114	; 0x72
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	2160      	movs	r1, #96	; 0x60
 800622c:	5a52      	ldrh	r2, [r2, r1]
 800622e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	228c      	movs	r2, #140	; 0x8c
 800624c:	589b      	ldr	r3, [r3, r2]
 800624e:	2b22      	cmp	r3, #34	; 0x22
 8006250:	d000      	beq.n	8006254 <UART_RxISR_16BIT_FIFOEN+0x38>
 8006252:	e144      	b.n	80064de <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006254:	2366      	movs	r3, #102	; 0x66
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	2168      	movs	r1, #104	; 0x68
 800625c:	5a52      	ldrh	r2, [r2, r1]
 800625e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006260:	e0eb      	b.n	800643a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006268:	2164      	movs	r1, #100	; 0x64
 800626a:	187b      	adds	r3, r7, r1
 800626c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8006274:	187b      	adds	r3, r7, r1
 8006276:	2272      	movs	r2, #114	; 0x72
 8006278:	18ba      	adds	r2, r7, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	8812      	ldrh	r2, [r2, #0]
 800627e:	4013      	ands	r3, r2
 8006280:	b29a      	uxth	r2, r3
 8006282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006284:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	1c9a      	adds	r2, r3, #2
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	225e      	movs	r2, #94	; 0x5e
 8006294:	5a9b      	ldrh	r3, [r3, r2]
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b299      	uxth	r1, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	225e      	movs	r2, #94	; 0x5e
 80062a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ac:	2207      	movs	r2, #7
 80062ae:	4013      	ands	r3, r2
 80062b0:	d049      	beq.n	8006346 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b4:	2201      	movs	r2, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	d010      	beq.n	80062dc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80062ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d00b      	beq.n	80062dc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2290      	movs	r2, #144	; 0x90
 80062d0:	589b      	ldr	r3, [r3, r2]
 80062d2:	2201      	movs	r2, #1
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2190      	movs	r1, #144	; 0x90
 80062da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062de:	2202      	movs	r2, #2
 80062e0:	4013      	ands	r3, r2
 80062e2:	d00f      	beq.n	8006304 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80062e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062e6:	2201      	movs	r2, #1
 80062e8:	4013      	ands	r3, r2
 80062ea:	d00b      	beq.n	8006304 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2202      	movs	r2, #2
 80062f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2290      	movs	r2, #144	; 0x90
 80062f8:	589b      	ldr	r3, [r3, r2]
 80062fa:	2204      	movs	r2, #4
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2190      	movs	r1, #144	; 0x90
 8006302:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006306:	2204      	movs	r2, #4
 8006308:	4013      	ands	r3, r2
 800630a:	d00f      	beq.n	800632c <UART_RxISR_16BIT_FIFOEN+0x110>
 800630c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630e:	2201      	movs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	d00b      	beq.n	800632c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2204      	movs	r2, #4
 800631a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2290      	movs	r2, #144	; 0x90
 8006320:	589b      	ldr	r3, [r3, r2]
 8006322:	2202      	movs	r2, #2
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2190      	movs	r1, #144	; 0x90
 800632a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2290      	movs	r2, #144	; 0x90
 8006330:	589b      	ldr	r3, [r3, r2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f7fe fe61 	bl	8005000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2290      	movs	r2, #144	; 0x90
 8006342:	2100      	movs	r1, #0
 8006344:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	225e      	movs	r2, #94	; 0x5e
 800634a:	5a9b      	ldrh	r3, [r3, r2]
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d173      	bne.n	800643a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006352:	f3ef 8310 	mrs	r3, PRIMASK
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800635a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635c:	2301      	movs	r3, #1
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4961      	ldr	r1, [pc, #388]	; (80064f8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006374:	400a      	ands	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	f383 8810 	msr	PRIMASK, r3
}
 8006382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006384:	f3ef 8310 	mrs	r3, PRIMASK
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800638c:	65bb      	str	r3, [r7, #88]	; 0x58
 800638e:	2301      	movs	r3, #1
 8006390:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006394:	f383 8810 	msr	PRIMASK, r3
}
 8006398:	46c0      	nop			; (mov r8, r8)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4955      	ldr	r1, [pc, #340]	; (80064fc <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80063a6:	400a      	ands	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b0:	f383 8810 	msr	PRIMASK, r3
}
 80063b4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	228c      	movs	r2, #140	; 0x8c
 80063ba:	2120      	movs	r1, #32
 80063bc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d12f      	bne.n	8006432 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d8:	f3ef 8310 	mrs	r3, PRIMASK
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	657b      	str	r3, [r7, #84]	; 0x54
 80063e2:	2301      	movs	r3, #1
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	f383 8810 	msr	PRIMASK, r3
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2110      	movs	r1, #16
 80063fa:	438a      	bics	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	f383 8810 	msr	PRIMASK, r3
}
 8006408:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	2210      	movs	r2, #16
 8006412:	4013      	ands	r3, r2
 8006414:	2b10      	cmp	r3, #16
 8006416:	d103      	bne.n	8006420 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2210      	movs	r2, #16
 800641e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	225c      	movs	r2, #92	; 0x5c
 8006424:	5a9a      	ldrh	r2, [r3, r2]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	0011      	movs	r1, r2
 800642a:	0018      	movs	r0, r3
 800642c:	f7fe fdf0 	bl	8005010 <HAL_UARTEx_RxEventCallback>
 8006430:	e003      	b.n	800643a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0018      	movs	r0, r3
 8006436:	f000 fb19 	bl	8006a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800643a:	2366      	movs	r3, #102	; 0x66
 800643c:	18fb      	adds	r3, r7, r3
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <UART_RxISR_16BIT_FIFOEN+0x232>
 8006444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006446:	2220      	movs	r2, #32
 8006448:	4013      	ands	r3, r2
 800644a:	d000      	beq.n	800644e <UART_RxISR_16BIT_FIFOEN+0x232>
 800644c:	e709      	b.n	8006262 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800644e:	2052      	movs	r0, #82	; 0x52
 8006450:	183b      	adds	r3, r7, r0
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	215e      	movs	r1, #94	; 0x5e
 8006456:	5a52      	ldrh	r2, [r2, r1]
 8006458:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800645a:	0001      	movs	r1, r0
 800645c:	187b      	adds	r3, r7, r1
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d044      	beq.n	80064ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2268      	movs	r2, #104	; 0x68
 8006468:	5a9b      	ldrh	r3, [r3, r2]
 800646a:	187a      	adds	r2, r7, r1
 800646c:	8812      	ldrh	r2, [r2, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d23d      	bcs.n	80064ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	60fb      	str	r3, [r7, #12]
  return(result);
 8006478:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647c:	2301      	movs	r3, #1
 800647e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f383 8810 	msr	PRIMASK, r3
}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	491b      	ldr	r1, [pc, #108]	; (8006500 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006494:	400a      	ands	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80064a8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064aa:	f3ef 8310 	mrs	r3, PRIMASK
 80064ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80064b0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b4:	2301      	movs	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2120      	movs	r1, #32
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064dc:	e007      	b.n	80064ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2108      	movs	r1, #8
 80064ea:	430a      	orrs	r2, r1
 80064ec:	619a      	str	r2, [r3, #24]
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b01e      	add	sp, #120	; 0x78
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	fffffeff 	.word	0xfffffeff
 80064fc:	effffffe 	.word	0xeffffffe
 8006500:	efffffff 	.word	0xefffffff
 8006504:	08005dbd 	.word	0x08005dbd

08006508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b002      	add	sp, #8
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	46bd      	mov	sp, r7
 8006524:	b002      	add	sp, #8
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b002      	add	sp, #8
 8006536:	bd80      	pop	{r7, pc}

08006538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800653c:	f7fa fd70 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006540:	f000 f846 	bl	80065d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006544:	f000 fa30 	bl	80069a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006548:	f000 f9fa 	bl	8006940 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800654c:	f000 f89e 	bl	800668c <MX_ADC1_Init>
  MX_TIM1_Init();
 8006550:	f000 f908 	bl	8006764 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Initialize PWM Channel 1
 8006554:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <main+0x7c>)
 8006556:	2100      	movs	r1, #0
 8006558:	0018      	movs	r0, r3
 800655a:	f7fd f93f 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Initialize PWM Channel 2
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <main+0x7c>)
 8006560:	2104      	movs	r1, #4
 8006562:	0018      	movs	r0, r3
 8006564:	f7fd f93a 	bl	80037dc <HAL_TIM_PWM_Start>


  UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "STM32-SMPS Initialized!\r\n");	 // Transmit UART Startup message
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <main+0x80>)
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <main+0x84>)
 800656c:	0011      	movs	r1, r2
 800656e:	0018      	movs	r0, r3
 8006570:	f000 fdb4 	bl	80070dc <siprintf>
 8006574:	0003      	movs	r3, r0
 8006576:	b29a      	uxth	r2, r3
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <main+0x88>)
 800657a:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <main+0x88>)
 800657e:	881a      	ldrh	r2, [r3, #0]
 8006580:	490e      	ldr	r1, [pc, #56]	; (80065bc <main+0x84>)
 8006582:	4810      	ldr	r0, [pc, #64]	; (80065c4 <main+0x8c>)
 8006584:	2364      	movs	r3, #100	; 0x64
 8006586:	f7fe f913 	bl	80047b0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4);		// Initialize UART Interrupt transmission
 800658a:	490f      	ldr	r1, [pc, #60]	; (80065c8 <main+0x90>)
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <main+0x8c>)
 800658e:	2204      	movs	r2, #4
 8006590:	0018      	movs	r0, r3
 8006592:	f7fe f9a9 	bl	80048e8 <HAL_UART_Receive_IT>
  	  // Set to receive 4 bytes (123\n)
  	  // Consider replacing with DMA based receive?

  HAL_ADCEx_Calibration_Start(&hadc1);
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <main+0x94>)
 8006598:	0018      	movs	r0, r3
 800659a:	f7fb fdbb 	bl	8002114 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <main+0x94>)
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7fb f8cf 	bl	8001744 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80065a6:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <main+0x7c>)
 80065a8:	2108      	movs	r1, #8
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7fd f916 	bl	80037dc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80065b0:	e7fe      	b.n	80065b0 <main+0x78>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	200000fc 	.word	0x200000fc
 80065b8:	08007afc 	.word	0x08007afc
 80065bc:	200001dc 	.word	0x200001dc
 80065c0:	20000240 	.word	0x20000240
 80065c4:	20000148 	.word	0x20000148
 80065c8:	20000244 	.word	0x20000244
 80065cc:	20000098 	.word	0x20000098

080065d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b093      	sub	sp, #76	; 0x4c
 80065d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065d6:	2410      	movs	r4, #16
 80065d8:	193b      	adds	r3, r7, r4
 80065da:	0018      	movs	r0, r3
 80065dc:	2338      	movs	r3, #56	; 0x38
 80065de:	001a      	movs	r2, r3
 80065e0:	2100      	movs	r1, #0
 80065e2:	f000 fd73 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065e6:	003b      	movs	r3, r7
 80065e8:	0018      	movs	r0, r3
 80065ea:	2310      	movs	r3, #16
 80065ec:	001a      	movs	r2, r3
 80065ee:	2100      	movs	r1, #0
 80065f0:	f000 fd6c 	bl	80070cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7fc f9ad 	bl	8002958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80065fe:	193b      	adds	r3, r7, r4
 8006600:	2202      	movs	r2, #2
 8006602:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006604:	193b      	adds	r3, r7, r4
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	0052      	lsls	r2, r2, #1
 800660a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800660c:	0021      	movs	r1, r4
 800660e:	187b      	adds	r3, r7, r1
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006614:	187b      	adds	r3, r7, r1
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800661a:	187b      	adds	r3, r7, r1
 800661c:	2202      	movs	r2, #2
 800661e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006620:	187b      	adds	r3, r7, r1
 8006622:	2202      	movs	r2, #2
 8006624:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006626:	187b      	adds	r3, r7, r1
 8006628:	2200      	movs	r2, #0
 800662a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800662c:	187b      	adds	r3, r7, r1
 800662e:	2210      	movs	r2, #16
 8006630:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006632:	187b      	adds	r3, r7, r1
 8006634:	2280      	movs	r2, #128	; 0x80
 8006636:	0292      	lsls	r2, r2, #10
 8006638:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800663a:	187b      	adds	r3, r7, r1
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	0492      	lsls	r2, r2, #18
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8006642:	187b      	adds	r3, r7, r1
 8006644:	22c0      	movs	r2, #192	; 0xc0
 8006646:	05d2      	lsls	r2, r2, #23
 8006648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800664a:	187b      	adds	r3, r7, r1
 800664c:	0018      	movs	r0, r3
 800664e:	f7fc f9cf 	bl	80029f0 <HAL_RCC_OscConfig>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d001      	beq.n	800665a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006656:	f000 fb35 	bl	8006cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800665a:	003b      	movs	r3, r7
 800665c:	2207      	movs	r2, #7
 800665e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006660:	003b      	movs	r3, r7
 8006662:	2202      	movs	r2, #2
 8006664:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006666:	003b      	movs	r3, r7
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800666c:	003b      	movs	r3, r7
 800666e:	2200      	movs	r2, #0
 8006670:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006672:	003b      	movs	r3, r7
 8006674:	2102      	movs	r1, #2
 8006676:	0018      	movs	r0, r3
 8006678:	f7fc fcd4 	bl	8003024 <HAL_RCC_ClockConfig>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	d001      	beq.n	8006684 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8006680:	f000 fb20 	bl	8006cc4 <Error_Handler>
  }
}
 8006684:	46c0      	nop			; (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	b013      	add	sp, #76	; 0x4c
 800668a:	bd90      	pop	{r4, r7, pc}

0800668c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	0018      	movs	r0, r3
 8006696:	230c      	movs	r3, #12
 8006698:	001a      	movs	r2, r3
 800669a:	2100      	movs	r1, #0
 800669c:	f000 fd16 	bl	80070cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80066a0:	4b2e      	ldr	r3, [pc, #184]	; (800675c <MX_ADC1_Init+0xd0>)
 80066a2:	4a2f      	ldr	r2, [pc, #188]	; (8006760 <MX_ADC1_Init+0xd4>)
 80066a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80066a6:	4b2d      	ldr	r3, [pc, #180]	; (800675c <MX_ADC1_Init+0xd0>)
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	05d2      	lsls	r2, r2, #23
 80066ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <MX_ADC1_Init+0xd0>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <MX_ADC1_Init+0xd0>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80066ba:	4b28      	ldr	r3, [pc, #160]	; (800675c <MX_ADC1_Init+0xd0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066c0:	4b26      	ldr	r3, [pc, #152]	; (800675c <MX_ADC1_Init+0xd0>)
 80066c2:	2204      	movs	r2, #4
 80066c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80066c6:	4b25      	ldr	r3, [pc, #148]	; (800675c <MX_ADC1_Init+0xd0>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80066cc:	4b23      	ldr	r3, [pc, #140]	; (800675c <MX_ADC1_Init+0xd0>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <MX_ADC1_Init+0xd0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80066d8:	4b20      	ldr	r3, [pc, #128]	; (800675c <MX_ADC1_Init+0xd0>)
 80066da:	2201      	movs	r2, #1
 80066dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <MX_ADC1_Init+0xd0>)
 80066e0:	2220      	movs	r2, #32
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <MX_ADC1_Init+0xd0>)
 80066e8:	2298      	movs	r2, #152	; 0x98
 80066ea:	00d2      	lsls	r2, r2, #3
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80066ee:	4b1b      	ldr	r3, [pc, #108]	; (800675c <MX_ADC1_Init+0xd0>)
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80066f6:	4b19      	ldr	r3, [pc, #100]	; (800675c <MX_ADC1_Init+0xd0>)
 80066f8:	222c      	movs	r2, #44	; 0x2c
 80066fa:	2100      	movs	r1, #0
 80066fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <MX_ADC1_Init+0xd0>)
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006704:	4b15      	ldr	r3, [pc, #84]	; (800675c <MX_ADC1_Init+0xd0>)
 8006706:	2200      	movs	r2, #0
 8006708:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <MX_ADC1_Init+0xd0>)
 800670c:	2200      	movs	r2, #0
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <MX_ADC1_Init+0xd0>)
 8006712:	223c      	movs	r2, #60	; 0x3c
 8006714:	2100      	movs	r1, #0
 8006716:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <MX_ADC1_Init+0xd0>)
 800671a:	2200      	movs	r2, #0
 800671c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <MX_ADC1_Init+0xd0>)
 8006720:	0018      	movs	r0, r3
 8006722:	f7fa fe67 	bl	80013f4 <HAL_ADC_Init>
 8006726:	1e03      	subs	r3, r0, #0
 8006728:	d001      	beq.n	800672e <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800672a:	f000 facb 	bl	8006cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006734:	1d3b      	adds	r3, r7, #4
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006740:	1d3a      	adds	r2, r7, #4
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <MX_ADC1_Init+0xd0>)
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f7fb f9a8 	bl	8001a9c <HAL_ADC_ConfigChannel>
 800674c:	1e03      	subs	r3, r0, #0
 800674e:	d001      	beq.n	8006754 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006750:	f000 fab8 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b004      	add	sp, #16
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000098 	.word	0x20000098
 8006760:	40012400 	.word	0x40012400

08006764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b09c      	sub	sp, #112	; 0x70
 8006768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800676a:	2360      	movs	r3, #96	; 0x60
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	0018      	movs	r0, r3
 8006770:	2310      	movs	r3, #16
 8006772:	001a      	movs	r2, r3
 8006774:	2100      	movs	r1, #0
 8006776:	f000 fca9 	bl	80070cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800677a:	2354      	movs	r3, #84	; 0x54
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	0018      	movs	r0, r3
 8006780:	230c      	movs	r3, #12
 8006782:	001a      	movs	r2, r3
 8006784:	2100      	movs	r1, #0
 8006786:	f000 fca1 	bl	80070cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800678a:	2338      	movs	r3, #56	; 0x38
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	0018      	movs	r0, r3
 8006790:	231c      	movs	r3, #28
 8006792:	001a      	movs	r2, r3
 8006794:	2100      	movs	r1, #0
 8006796:	f000 fc99 	bl	80070cc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	0018      	movs	r0, r3
 800679e:	2334      	movs	r3, #52	; 0x34
 80067a0:	001a      	movs	r2, r3
 80067a2:	2100      	movs	r1, #0
 80067a4:	f000 fc92 	bl	80070cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80067a8:	4b63      	ldr	r3, [pc, #396]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067aa:	4a64      	ldr	r2, [pc, #400]	; (800693c <MX_TIM1_Init+0x1d8>)
 80067ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80067ae:	4b62      	ldr	r3, [pc, #392]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80067b4:	4b60      	ldr	r3, [pc, #384]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067b6:	2220      	movs	r2, #32
 80067b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 80067ba:	4b5f      	ldr	r3, [pc, #380]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067bc:	22a0      	movs	r2, #160	; 0xa0
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067c2:	4b5d      	ldr	r3, [pc, #372]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067ce:	4b5a      	ldr	r3, [pc, #360]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80067d4:	4b58      	ldr	r3, [pc, #352]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7fc ff48 	bl	800366c <HAL_TIM_Base_Init>
 80067dc:	1e03      	subs	r3, r0, #0
 80067de:	d001      	beq.n	80067e4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80067e0:	f000 fa70 	bl	8006cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067e4:	2160      	movs	r1, #96	; 0x60
 80067e6:	187b      	adds	r3, r7, r1
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	0152      	lsls	r2, r2, #5
 80067ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80067ee:	187a      	adds	r2, r7, r1
 80067f0:	4b51      	ldr	r3, [pc, #324]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80067f2:	0011      	movs	r1, r2
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7fd f9cf 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d001      	beq.n	8006802 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80067fe:	f000 fa61 	bl	8006cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006802:	4b4d      	ldr	r3, [pc, #308]	; (8006938 <MX_TIM1_Init+0x1d4>)
 8006804:	0018      	movs	r0, r3
 8006806:	f7fc ff89 	bl	800371c <HAL_TIM_PWM_Init>
 800680a:	1e03      	subs	r3, r0, #0
 800680c:	d001      	beq.n	8006812 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800680e:	f000 fa59 	bl	8006cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006812:	2154      	movs	r1, #84	; 0x54
 8006814:	187b      	adds	r3, r7, r1
 8006816:	2220      	movs	r2, #32
 8006818:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800681a:	187b      	adds	r3, r7, r1
 800681c:	2200      	movs	r2, #0
 800681e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006820:	187b      	adds	r3, r7, r1
 8006822:	2200      	movs	r2, #0
 8006824:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006826:	187a      	adds	r2, r7, r1
 8006828:	4b43      	ldr	r3, [pc, #268]	; (8006938 <MX_TIM1_Init+0x1d4>)
 800682a:	0011      	movs	r1, r2
 800682c:	0018      	movs	r0, r3
 800682e:	f7fd fe5b 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006832:	1e03      	subs	r3, r0, #0
 8006834:	d001      	beq.n	800683a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8006836:	f000 fa45 	bl	8006cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800683a:	2138      	movs	r1, #56	; 0x38
 800683c:	187b      	adds	r3, r7, r1
 800683e:	2260      	movs	r2, #96	; 0x60
 8006840:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 160;
 8006842:	187b      	adds	r3, r7, r1
 8006844:	22a0      	movs	r2, #160	; 0xa0
 8006846:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006848:	187b      	adds	r3, r7, r1
 800684a:	2200      	movs	r2, #0
 800684c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800684e:	187b      	adds	r3, r7, r1
 8006850:	2200      	movs	r2, #0
 8006852:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006854:	187b      	adds	r3, r7, r1
 8006856:	2204      	movs	r2, #4
 8006858:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800685a:	187b      	adds	r3, r7, r1
 800685c:	2200      	movs	r2, #0
 800685e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006860:	187b      	adds	r3, r7, r1
 8006862:	2200      	movs	r2, #0
 8006864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006866:	1879      	adds	r1, r7, r1
 8006868:	4b33      	ldr	r3, [pc, #204]	; (8006938 <MX_TIM1_Init+0x1d4>)
 800686a:	2200      	movs	r2, #0
 800686c:	0018      	movs	r0, r3
 800686e:	f7fd f893 	bl	8003998 <HAL_TIM_PWM_ConfigChannel>
 8006872:	1e03      	subs	r3, r0, #0
 8006874:	d001      	beq.n	800687a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8006876:	f000 fa25 	bl	8006cc4 <Error_Handler>
  }
  sConfigOC.Pulse = 480;
 800687a:	2138      	movs	r1, #56	; 0x38
 800687c:	187b      	adds	r3, r7, r1
 800687e:	22f0      	movs	r2, #240	; 0xf0
 8006880:	0052      	lsls	r2, r2, #1
 8006882:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006884:	187b      	adds	r3, r7, r1
 8006886:	2202      	movs	r2, #2
 8006888:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800688a:	1879      	adds	r1, r7, r1
 800688c:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <MX_TIM1_Init+0x1d4>)
 800688e:	2204      	movs	r2, #4
 8006890:	0018      	movs	r0, r3
 8006892:	f7fd f881 	bl	8003998 <HAL_TIM_PWM_ConfigChannel>
 8006896:	1e03      	subs	r3, r0, #0
 8006898:	d001      	beq.n	800689e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800689a:	f000 fa13 	bl	8006cc4 <Error_Handler>
  }
  sConfigOC.Pulse = 320;
 800689e:	2138      	movs	r1, #56	; 0x38
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	22a0      	movs	r2, #160	; 0xa0
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80068ae:	1879      	adds	r1, r7, r1
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <MX_TIM1_Init+0x1d4>)
 80068b2:	2208      	movs	r2, #8
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7fd f86f 	bl	8003998 <HAL_TIM_PWM_ConfigChannel>
 80068ba:	1e03      	subs	r3, r0, #0
 80068bc:	d001      	beq.n	80068c2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80068be:	f000 fa01 	bl	8006cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	2200      	movs	r2, #0
 80068d2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80068d4:	1d3b      	adds	r3, r7, #4
 80068d6:	2200      	movs	r2, #0
 80068d8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	2200      	movs	r2, #0
 80068de:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	0192      	lsls	r2, r2, #6
 80068e6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80068e8:	1d3b      	adds	r3, r7, #4
 80068ea:	2200      	movs	r2, #0
 80068ec:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	2200      	movs	r2, #0
 80068f2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	2200      	movs	r2, #0
 80068f8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	2280      	movs	r2, #128	; 0x80
 80068fe:	0492      	lsls	r2, r2, #18
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	2200      	movs	r2, #0
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006908:	1d3b      	adds	r3, r7, #4
 800690a:	2200      	movs	r2, #0
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006914:	1d3a      	adds	r2, r7, #4
 8006916:	4b08      	ldr	r3, [pc, #32]	; (8006938 <MX_TIM1_Init+0x1d4>)
 8006918:	0011      	movs	r1, r2
 800691a:	0018      	movs	r0, r3
 800691c:	f7fd fe4c 	bl	80045b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d001      	beq.n	8006928 <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8006924:	f000 f9ce 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <MX_TIM1_Init+0x1d4>)
 800692a:	0018      	movs	r0, r3
 800692c:	f000 fa78 	bl	8006e20 <HAL_TIM_MspPostInit>

}
 8006930:	46c0      	nop			; (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b01c      	add	sp, #112	; 0x70
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200000fc 	.word	0x200000fc
 800693c:	40012c00 	.word	0x40012c00

08006940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006946:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <MX_USART2_UART_Init+0x64>)
 8006948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 800694c:	22e1      	movs	r2, #225	; 0xe1
 800694e:	0252      	lsls	r2, r2, #9
 8006950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006954:	2200      	movs	r2, #0
 8006956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 800695a:	2200      	movs	r2, #0
 800695c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006960:	2200      	movs	r2, #0
 8006962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006966:	220c      	movs	r2, #12
 8006968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 800696c:	2200      	movs	r2, #0
 800696e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006978:	2200      	movs	r2, #0
 800697a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 800697e:	2200      	movs	r2, #0
 8006980:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 8006984:	2200      	movs	r2, #0
 8006986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <MX_USART2_UART_Init+0x60>)
 800698a:	0018      	movs	r0, r3
 800698c:	f7fd feba 	bl	8004704 <HAL_UART_Init>
 8006990:	1e03      	subs	r3, r0, #0
 8006992:	d001      	beq.n	8006998 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006994:	f000 f996 	bl	8006cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	20000148 	.word	0x20000148
 80069a4:	40004400 	.word	0x40004400

080069a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ae:	240c      	movs	r4, #12
 80069b0:	193b      	adds	r3, r7, r4
 80069b2:	0018      	movs	r0, r3
 80069b4:	2314      	movs	r3, #20
 80069b6:	001a      	movs	r2, r3
 80069b8:	2100      	movs	r1, #0
 80069ba:	f000 fb87 	bl	80070cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069be:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c2:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069c4:	2104      	movs	r1, #4
 80069c6:	430a      	orrs	r2, r1
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34
 80069ca:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	2204      	movs	r2, #4
 80069d0:	4013      	ands	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80069d6:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069da:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069dc:	2120      	movs	r1, #32
 80069de:	430a      	orrs	r2, r1
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34
 80069e2:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e6:	2220      	movs	r2, #32
 80069e8:	4013      	ands	r3, r2
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ee:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069f4:	2101      	movs	r1, #1
 80069f6:	430a      	orrs	r2, r1
 80069f8:	635a      	str	r2, [r3, #52]	; 0x34
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <MX_GPIO_Init+0xb8>)
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	2201      	movs	r2, #1
 8006a00:	4013      	ands	r3, r2
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006a06:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <MX_GPIO_Init+0xbc>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	; 0x40
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f7fb ff85 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8006a12:	193b      	adds	r3, r7, r4
 8006a14:	2204      	movs	r2, #4
 8006a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a18:	193b      	adds	r3, r7, r4
 8006a1a:	2288      	movs	r2, #136	; 0x88
 8006a1c:	0352      	lsls	r2, r2, #13
 8006a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	2200      	movs	r2, #0
 8006a24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <MX_GPIO_Init+0xc0>)
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	f7fb fe11 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006a32:	0021      	movs	r1, r4
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	2200      	movs	r2, #0
 8006a4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006a4c:	187b      	adds	r3, r7, r1
 8006a4e:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <MX_GPIO_Init+0xbc>)
 8006a50:	0019      	movs	r1, r3
 8006a52:	0010      	movs	r0, r2
 8006a54:	f7fb fdfe 	bl	8002654 <HAL_GPIO_Init>

}
 8006a58:	46c0      	nop			; (mov r8, r8)
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b009      	add	sp, #36	; 0x24
 8006a5e:	bd90      	pop	{r4, r7, pc}
 8006a60:	40021000 	.word	0x40021000
 8006a64:	50000800 	.word	0x50000800
 8006a68:	50001400 	.word	0x50001400

08006a6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	// Interrupt when buffer is full ("213\n"
    ADCFlag = 0;	// Disable ADC control
 8006a74:	4b21      	ldr	r3, [pc, #132]	; (8006afc <HAL_UART_RxCpltCallback+0x90>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
	pulsewidth= atoi(UART_RX_BUFF); // Convert buffer to received value
 8006a7a:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_UART_RxCpltCallback+0x94>)
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 faf4 	bl	800706a <atoi>
 8006a82:	0003      	movs	r3, r0
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006a88:	801a      	strh	r2, [r3, #0]
    if(pulsewidth > PULSE_MAX)	//
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	001a      	movs	r2, r3
 8006a90:	233c      	movs	r3, #60	; 0x3c
 8006a92:	33ff      	adds	r3, #255	; 0xff
 8006a94:	429a      	cmp	r2, r3
 8006a96:	dd07      	ble.n	8006aa8 <HAL_UART_RxCpltCallback+0x3c>
    {
    	pulsewidth = PULSE_MAX;	// If pulsewidth is given as larger than max, set to max
 8006a98:	233c      	movs	r3, #60	; 0x3c
 8006a9a:	33ff      	adds	r3, #255	; 0xff
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006aa0:	801a      	strh	r2, [r3, #0]
    	ADCFlag=1;	// And enable ADC Control
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <HAL_UART_RxCpltCallback+0x90>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	701a      	strb	r2, [r3, #0]
    }
    UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "Pulse width: %d\r\n", pulsewidth);
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	001a      	movs	r2, r3
 8006aae:	4916      	ldr	r1, [pc, #88]	; (8006b08 <HAL_UART_RxCpltCallback+0x9c>)
 8006ab0:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <HAL_UART_RxCpltCallback+0xa0>)
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 fb12 	bl	80070dc <siprintf>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <HAL_UART_RxCpltCallback+0xa4>)
 8006abe:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100); // Echo pulse width
 8006ac0:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <HAL_UART_RxCpltCallback+0xa4>)
 8006ac2:	881a      	ldrh	r2, [r3, #0]
 8006ac4:	4911      	ldr	r1, [pc, #68]	; (8006b0c <HAL_UART_RxCpltCallback+0xa0>)
 8006ac6:	4813      	ldr	r0, [pc, #76]	; (8006b14 <HAL_UART_RxCpltCallback+0xa8>)
 8006ac8:	2364      	movs	r3, #100	; 0x64
 8006aca:	f7fd fe71 	bl	80047b0 <HAL_UART_Transmit>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth); // Update PWM CH 1
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006ad0:	881a      	ldrh	r2, [r3, #0]
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_UART_RxCpltCallback+0xac>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth); // Update PWM CH 2
 8006ad8:	23a0      	movs	r3, #160	; 0xa0
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <HAL_UART_RxCpltCallback+0x98>)
 8006ade:	8812      	ldrh	r2, [r2, #0]
 8006ae0:	1a9a      	subs	r2, r3, r2
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <HAL_UART_RxCpltCallback+0xac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4); // Enable next UART Receive interrupt
 8006ae8:	4905      	ldr	r1, [pc, #20]	; (8006b00 <HAL_UART_RxCpltCallback+0x94>)
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_UART_RxCpltCallback+0xa8>)
 8006aec:	2204      	movs	r2, #4
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fd fefa 	bl	80048e8 <HAL_UART_Receive_IT>
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000008 	.word	0x20000008
 8006b00:	20000244 	.word	0x20000244
 8006b04:	20000006 	.word	0x20000006
 8006b08:	08007b18 	.word	0x08007b18
 8006b0c:	200001dc 	.word	0x200001dc
 8006b10:	20000240 	.word	0x20000240
 8006b14:	20000148 	.word	0x20000148
 8006b18:	200000fc 	.word	0x200000fc

08006b1c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b1c:	b5b0      	push	{r4, r5, r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	if(ADCFlag)
 8006b24:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_ADC_ConvCpltCallback+0x178>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d100      	bne.n	8006b2e <HAL_ADC_ConvCpltCallback+0x12>
 8006b2c:	e09c      	b.n	8006c68 <HAL_ADC_ConvCpltCallback+0x14c>
	{
		AD_RES = HAL_ADC_GetValue(&hadc1);
 8006b2e:	4b5a      	ldr	r3, [pc, #360]	; (8006c98 <HAL_ADC_ConvCpltCallback+0x17c>)
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fa fe7f 	bl	8001834 <HAL_ADC_GetValue>
 8006b36:	0003      	movs	r3, r0
 8006b38:	b21a      	sxth	r2, r3
 8006b3a:	4b58      	ldr	r3, [pc, #352]	; (8006c9c <HAL_ADC_ConvCpltCallback+0x180>)
 8006b3c:	801a      	strh	r2, [r3, #0]

	error = (int16_t)AD_RES - ADC_REFERENCE;
 8006b3e:	4b57      	ldr	r3, [pc, #348]	; (8006c9c <HAL_ADC_ConvCpltCallback+0x180>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	5e9b      	ldrsh	r3, [r3, r2]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4a56      	ldr	r2, [pc, #344]	; (8006ca0 <HAL_ADC_ConvCpltCallback+0x184>)
 8006b48:	4694      	mov	ip, r2
 8006b4a:	4463      	add	r3, ip
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b21a      	sxth	r2, r3
 8006b50:	4b54      	ldr	r3, [pc, #336]	; (8006ca4 <HAL_ADC_ConvCpltCallback+0x188>)
 8006b52:	801a      	strh	r2, [r3, #0]

	//pulsewidth = PULSE_STEP *  (Kp * AD_RES ) + PULSE_HALF;
	// We use a constant sampling rate, as such we do not need time.
	// The ki and kd are now dependent on the sampling rate (and must be scaled accordingly).

	ITerm += ki * error;	// Calculate Integral term
 8006b54:	4b53      	ldr	r3, [pc, #332]	; (8006ca4 <HAL_ADC_ConvCpltCallback+0x188>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	5e9b      	ldrsh	r3, [r3, r2]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7fa f9e8 	bl	8000f30 <__aeabi_i2f>
 8006b60:	1c02      	adds	r2, r0, #0
 8006b62:	4b51      	ldr	r3, [pc, #324]	; (8006ca8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	1c19      	adds	r1, r3, #0
 8006b68:	1c10      	adds	r0, r2, #0
 8006b6a:	f7f9 feed 	bl	8000948 <__aeabi_fmul>
 8006b6e:	1c03      	adds	r3, r0, #0
 8006b70:	1c1a      	adds	r2, r3, #0
 8006b72:	4b4e      	ldr	r3, [pc, #312]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	1c19      	adds	r1, r3, #0
 8006b78:	1c10      	adds	r0, r2, #0
 8006b7a:	f7f9 fc97 	bl	80004ac <__aeabi_fadd>
 8006b7e:	1c03      	adds	r3, r0, #0
 8006b80:	1c1a      	adds	r2, r3, #0
 8006b82:	4b4a      	ldr	r3, [pc, #296]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006b84:	601a      	str	r2, [r3, #0]

	if(ITerm > PULSE_MAX) // Prevent integral windup / integral lag
 8006b86:	233c      	movs	r3, #60	; 0x3c
 8006b88:	33ff      	adds	r3, #255	; 0xff
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7fa f9d0 	bl	8000f30 <__aeabi_i2f>
 8006b90:	1c02      	adds	r2, r0, #0
 8006b92:	4b46      	ldr	r3, [pc, #280]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1c19      	adds	r1, r3, #0
 8006b98:	1c10      	adds	r0, r2, #0
 8006b9a:	f7f9 fb5b 	bl	8000254 <__aeabi_fcmplt>
 8006b9e:	1e03      	subs	r3, r0, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_ADC_ConvCpltCallback+0x98>
	{
		ITerm = PULSE_MAX;
 8006ba2:	233c      	movs	r3, #60	; 0x3c
 8006ba4:	33ff      	adds	r3, #255	; 0xff
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7fa f9c2 	bl	8000f30 <__aeabi_i2f>
 8006bac:	1c02      	adds	r2, r0, #0
 8006bae:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e00a      	b.n	8006bca <HAL_ADC_ConvCpltCallback+0xae>
	}
	else if(ITerm < 0)
 8006bb4:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	1c18      	adds	r0, r3, #0
 8006bbc:	f7f9 fb4a 	bl	8000254 <__aeabi_fcmplt>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_ADC_ConvCpltCallback+0xae>
	{
		ITerm = 0;
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
	}

	int16_t d_error = error - last_error; // Calculate derivative term
 8006bca:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <HAL_ADC_ConvCpltCallback+0x188>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	5e9b      	ldrsh	r3, [r3, r2]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_ADC_ConvCpltCallback+0x194>)
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	5e5b      	ldrsh	r3, [r3, r1]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	250e      	movs	r5, #14
 8006be0:	197b      	adds	r3, r7, r5
 8006be2:	801a      	strh	r2, [r3, #0]

	pulsewidth = (uint16_t) (kp * error + ITerm + kd * d_error);  // Calculate output from PID
 8006be4:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <HAL_ADC_ConvCpltCallback+0x188>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	5e9b      	ldrsh	r3, [r3, r2]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7fa f9a0 	bl	8000f30 <__aeabi_i2f>
 8006bf0:	1c02      	adds	r2, r0, #0
 8006bf2:	4b30      	ldr	r3, [pc, #192]	; (8006cb4 <HAL_ADC_ConvCpltCallback+0x198>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	1c19      	adds	r1, r3, #0
 8006bf8:	1c10      	adds	r0, r2, #0
 8006bfa:	f7f9 fea5 	bl	8000948 <__aeabi_fmul>
 8006bfe:	1c03      	adds	r3, r0, #0
 8006c00:	1c1a      	adds	r2, r3, #0
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_ADC_ConvCpltCallback+0x190>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	1c19      	adds	r1, r3, #0
 8006c08:	1c10      	adds	r0, r2, #0
 8006c0a:	f7f9 fc4f 	bl	80004ac <__aeabi_fadd>
 8006c0e:	1c03      	adds	r3, r0, #0
 8006c10:	1c1c      	adds	r4, r3, #0
 8006c12:	197b      	adds	r3, r7, r5
 8006c14:	2200      	movs	r2, #0
 8006c16:	5e9b      	ldrsh	r3, [r3, r2]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7fa f989 	bl	8000f30 <__aeabi_i2f>
 8006c1e:	1c02      	adds	r2, r0, #0
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_ADC_ConvCpltCallback+0x19c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	1c19      	adds	r1, r3, #0
 8006c26:	1c10      	adds	r0, r2, #0
 8006c28:	f7f9 fe8e 	bl	8000948 <__aeabi_fmul>
 8006c2c:	1c03      	adds	r3, r0, #0
 8006c2e:	1c19      	adds	r1, r3, #0
 8006c30:	1c20      	adds	r0, r4, #0
 8006c32:	f7f9 fc3b 	bl	80004ac <__aeabi_fadd>
 8006c36:	1c03      	adds	r3, r0, #0
 8006c38:	1c18      	adds	r0, r3, #0
 8006c3a:	f7f9 fb53 	bl	80002e4 <__aeabi_f2uiz>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8006c44:	801a      	strh	r2, [r3, #0]

	if(pulsewidth > PULSE_MAX) // Prevent output going above max
 8006c46:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	233c      	movs	r3, #60	; 0x3c
 8006c4e:	33ff      	adds	r3, #255	; 0xff
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dd04      	ble.n	8006c5e <HAL_ADC_ConvCpltCallback+0x142>
	{
		pulsewidth = PULSE_MAX;
 8006c54:	233c      	movs	r3, #60	; 0x3c
 8006c56:	33ff      	adds	r3, #255	; 0xff
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8006c5c:	801a      	strh	r2, [r3, #0]
	else if(pulsewidth < 0)
	{
		pulsewidth = 0;
	}

	last_error = error; // Store last error term
 8006c5e:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <HAL_ADC_ConvCpltCallback+0x188>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	5e9a      	ldrsh	r2, [r3, r2]
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_ADC_ConvCpltCallback+0x194>)
 8006c66:	801a      	strh	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth);
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8006c6a:	881a      	ldrh	r2, [r3, #0]
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth);
 8006c72:	23a0      	movs	r3, #160	; 0xa0
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8006c78:	8812      	ldrh	r2, [r2, #0]
 8006c7a:	1a9a      	subs	r2, r3, r2
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_ADC_Start_IT(&hadc1);
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <HAL_ADC_ConvCpltCallback+0x17c>)
 8006c84:	0018      	movs	r0, r3
 8006c86:	f7fa fd5d 	bl	8001744 <HAL_ADC_Start_IT>
}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b004      	add	sp, #16
 8006c90:	bdb0      	pop	{r4, r5, r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20000008 	.word	0x20000008
 8006c98:	20000098 	.word	0x20000098
 8006c9c:	2000000a 	.word	0x2000000a
 8006ca0:	fffff800 	.word	0xfffff800
 8006ca4:	20000254 	.word	0x20000254
 8006ca8:	20000248 	.word	0x20000248
 8006cac:	20000250 	.word	0x20000250
 8006cb0:	20000256 	.word	0x20000256
 8006cb4:	2000000c 	.word	0x2000000c
 8006cb8:	2000024c 	.word	0x2000024c
 8006cbc:	20000006 	.word	0x20000006
 8006cc0:	200000fc 	.word	0x200000fc

08006cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006cc8:	b672      	cpsid	i
}
 8006cca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ccc:	e7fe      	b.n	8006ccc <Error_Handler+0x8>
	...

08006cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <HAL_MspInit+0x44>)
 8006cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cda:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <HAL_MspInit+0x44>)
 8006cdc:	2101      	movs	r1, #1
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <HAL_MspInit+0x44>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <HAL_MspInit+0x44>)
 8006cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf2:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <HAL_MspInit+0x44>)
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	0549      	lsls	r1, r1, #21
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_MspInit+0x44>)
 8006cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d00:	2380      	movs	r3, #128	; 0x80
 8006d02:	055b      	lsls	r3, r3, #21
 8006d04:	4013      	ands	r3, r2
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b002      	add	sp, #8
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	40021000 	.word	0x40021000

08006d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b08b      	sub	sp, #44	; 0x2c
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d20:	2414      	movs	r4, #20
 8006d22:	193b      	adds	r3, r7, r4
 8006d24:	0018      	movs	r0, r3
 8006d26:	2314      	movs	r3, #20
 8006d28:	001a      	movs	r2, r3
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	f000 f9ce 	bl	80070cc <memset>
  if(hadc->Instance==ADC1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	; (8006da8 <HAL_ADC_MspInit+0x90>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d131      	bne.n	8006d9e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d3e:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	0349      	lsls	r1, r1, #13
 8006d44:	430a      	orrs	r2, r1
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40
 8006d48:	4b18      	ldr	r3, [pc, #96]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	035b      	lsls	r3, r3, #13
 8006d50:	4013      	ands	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d56:	4b15      	ldr	r3, [pc, #84]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <HAL_ADC_MspInit+0x94>)
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	2201      	movs	r2, #1
 8006d68:	4013      	ands	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006d6e:	193b      	adds	r3, r7, r4
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d74:	193b      	adds	r3, r7, r4
 8006d76:	2203      	movs	r2, #3
 8006d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7a:	193b      	adds	r3, r7, r4
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d80:	193a      	adds	r2, r7, r4
 8006d82:	23a0      	movs	r3, #160	; 0xa0
 8006d84:	05db      	lsls	r3, r3, #23
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7fb fc63 	bl	8002654 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	200c      	movs	r0, #12
 8006d94:	f7fb fb60 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006d98:	200c      	movs	r0, #12
 8006d9a:	f7fb fb72 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	46bd      	mov	sp, r7
 8006da2:	b00b      	add	sp, #44	; 0x2c
 8006da4:	bd90      	pop	{r4, r7, pc}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	40012400 	.word	0x40012400
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b08f      	sub	sp, #60	; 0x3c
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006db8:	2410      	movs	r4, #16
 8006dba:	193b      	adds	r3, r7, r4
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	2328      	movs	r3, #40	; 0x28
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	f000 f982 	bl	80070cc <memset>
  if(htim_base->Instance==TIM1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIM_Base_MspInit+0x68>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d11d      	bne.n	8006e0e <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8006dd2:	193b      	adds	r3, r7, r4
 8006dd4:	2280      	movs	r2, #128	; 0x80
 8006dd6:	0392      	lsls	r2, r2, #14
 8006dd8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8006dda:	193b      	adds	r3, r7, r4
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	03d2      	lsls	r2, r2, #15
 8006de0:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7fc fac7 	bl	8003378 <HAL_RCCEx_PeriphCLKConfig>
 8006dea:	1e03      	subs	r3, r0, #0
 8006dec:	d001      	beq.n	8006df2 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8006dee:	f7ff ff69 	bl	8006cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <HAL_TIM_Base_MspInit+0x6c>)
 8006df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_TIM_Base_MspInit+0x6c>)
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	0109      	lsls	r1, r1, #4
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <HAL_TIM_Base_MspInit+0x6c>)
 8006e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b00f      	add	sp, #60	; 0x3c
 8006e14:	bd90      	pop	{r4, r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40021000 	.word	0x40021000

08006e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e28:	240c      	movs	r4, #12
 8006e2a:	193b      	adds	r3, r7, r4
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	2314      	movs	r3, #20
 8006e30:	001a      	movs	r2, r3
 8006e32:	2100      	movs	r1, #0
 8006e34:	f000 f94a 	bl	80070cc <memset>
  if(htim->Instance==TIM1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <HAL_TIM_MspPostInit+0x74>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d123      	bne.n	8006e8a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <HAL_TIM_MspPostInit+0x78>)
 8006e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <HAL_TIM_MspPostInit+0x78>)
 8006e48:	2101      	movs	r1, #1
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <HAL_TIM_MspPostInit+0x78>)
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	2201      	movs	r2, #1
 8006e54:	4013      	ands	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006e5a:	193b      	adds	r3, r7, r4
 8006e5c:	22e0      	movs	r2, #224	; 0xe0
 8006e5e:	00d2      	lsls	r2, r2, #3
 8006e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e62:	0021      	movs	r1, r4
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	2202      	movs	r2, #2
 8006e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e70:	187b      	adds	r3, r7, r1
 8006e72:	2200      	movs	r2, #0
 8006e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006e76:	187b      	adds	r3, r7, r1
 8006e78:	2202      	movs	r2, #2
 8006e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e7c:	187a      	adds	r2, r7, r1
 8006e7e:	23a0      	movs	r3, #160	; 0xa0
 8006e80:	05db      	lsls	r3, r3, #23
 8006e82:	0011      	movs	r1, r2
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7fb fbe5 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b009      	add	sp, #36	; 0x24
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40021000 	.word	0x40021000

08006e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b08b      	sub	sp, #44	; 0x2c
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea4:	2414      	movs	r4, #20
 8006ea6:	193b      	adds	r3, r7, r4
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	2314      	movs	r3, #20
 8006eac:	001a      	movs	r2, r3
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f000 f90c 	bl	80070cc <memset>
  if(huart->Instance==USART2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1f      	ldr	r2, [pc, #124]	; (8006f38 <HAL_UART_MspInit+0x9c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d138      	bne.n	8006f30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec2:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	0289      	lsls	r1, r1, #10
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eda:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8006ee6:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	2201      	movs	r2, #1
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8006ef2:	0021      	movs	r1, r4
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	220c      	movs	r2, #12
 8006ef8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efa:	187b      	adds	r3, r7, r1
 8006efc:	2202      	movs	r2, #2
 8006efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f00:	187b      	adds	r3, r7, r1
 8006f02:	2201      	movs	r2, #1
 8006f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f06:	187b      	adds	r3, r7, r1
 8006f08:	2200      	movs	r2, #0
 8006f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	2201      	movs	r2, #1
 8006f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f12:	187a      	adds	r2, r7, r1
 8006f14:	23a0      	movs	r3, #160	; 0xa0
 8006f16:	05db      	lsls	r3, r3, #23
 8006f18:	0011      	movs	r1, r2
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f7fb fb9a 	bl	8002654 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	201c      	movs	r0, #28
 8006f26:	f7fb fa97 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006f2a:	201c      	movs	r0, #28
 8006f2c:	f7fb faa9 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b00b      	add	sp, #44	; 0x2c
 8006f36:	bd90      	pop	{r4, r7, pc}
 8006f38:	40004400 	.word	0x40004400
 8006f3c:	40021000 	.word	0x40021000

08006f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f44:	e7fe      	b.n	8006f44 <NMI_Handler+0x4>

08006f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f4a:	e7fe      	b.n	8006f4a <HardFault_Handler+0x4>

08006f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006f50:	46c0      	nop			; (mov r8, r8)
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f64:	f7fa f8c6 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <ADC1_IRQHandler+0x14>)
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7fa fc68 	bl	800184c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	20000098 	.word	0x20000098

08006f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USART2_IRQHandler+0x14>)
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f7fd fd08 	bl	80049a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	20000148 	.word	0x20000148

08006fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <_sbrk+0x5c>)
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <_sbrk+0x60>)
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <_sbrk+0x64>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fbc:	4b11      	ldr	r3, [pc, #68]	; (8007004 <_sbrk+0x64>)
 8006fbe:	4a12      	ldr	r2, [pc, #72]	; (8007008 <_sbrk+0x68>)
 8006fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fc2:	4b10      	ldr	r3, [pc, #64]	; (8007004 <_sbrk+0x64>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d207      	bcs.n	8006fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fd0:	f000 f852 	bl	8007078 <__errno>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	425b      	negs	r3, r3
 8006fde:	e009      	b.n	8006ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <_sbrk+0x64>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <_sbrk+0x64>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	18d2      	adds	r2, r2, r3
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <_sbrk+0x64>)
 8006ff0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b006      	add	sp, #24
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20002000 	.word	0x20002000
 8007000:	00000400 	.word	0x00000400
 8007004:	20000258 	.word	0x20000258
 8007008:	20000270 	.word	0x20000270

0800700c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007018:	480d      	ldr	r0, [pc, #52]	; (8007050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800701a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800701c:	f7ff fff6 	bl	800700c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007020:	480c      	ldr	r0, [pc, #48]	; (8007054 <LoopForever+0x6>)
  ldr r1, =_edata
 8007022:	490d      	ldr	r1, [pc, #52]	; (8007058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007024:	4a0d      	ldr	r2, [pc, #52]	; (800705c <LoopForever+0xe>)
  movs r3, #0
 8007026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007028:	e002      	b.n	8007030 <LoopCopyDataInit>

0800702a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800702a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800702c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800702e:	3304      	adds	r3, #4

08007030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007034:	d3f9      	bcc.n	800702a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007036:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007038:	4c0a      	ldr	r4, [pc, #40]	; (8007064 <LoopForever+0x16>)
  movs r3, #0
 800703a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800703c:	e001      	b.n	8007042 <LoopFillZerobss>

0800703e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800703e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007040:	3204      	adds	r2, #4

08007042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007044:	d3fb      	bcc.n	800703e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007046:	f000 f81d 	bl	8007084 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800704a:	f7ff fa75 	bl	8006538 <main>

0800704e <LoopForever>:

LoopForever:
  b LoopForever
 800704e:	e7fe      	b.n	800704e <LoopForever>
  ldr   r0, =_estack
 8007050:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007058:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800705c:	08007d7c 	.word	0x08007d7c
  ldr r2, =_sbss
 8007060:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8007064:	2000026c 	.word	0x2000026c

08007068 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007068:	e7fe      	b.n	8007068 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

0800706a <atoi>:
 800706a:	b510      	push	{r4, lr}
 800706c:	220a      	movs	r2, #10
 800706e:	2100      	movs	r1, #0
 8007070:	f000 f8e2 	bl	8007238 <strtol>
 8007074:	bd10      	pop	{r4, pc}
	...

08007078 <__errno>:
 8007078:	4b01      	ldr	r3, [pc, #4]	; (8007080 <__errno+0x8>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	4770      	bx	lr
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	20000014 	.word	0x20000014

08007084 <__libc_init_array>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	2600      	movs	r6, #0
 8007088:	4d0c      	ldr	r5, [pc, #48]	; (80070bc <__libc_init_array+0x38>)
 800708a:	4c0d      	ldr	r4, [pc, #52]	; (80070c0 <__libc_init_array+0x3c>)
 800708c:	1b64      	subs	r4, r4, r5
 800708e:	10a4      	asrs	r4, r4, #2
 8007090:	42a6      	cmp	r6, r4
 8007092:	d109      	bne.n	80070a8 <__libc_init_array+0x24>
 8007094:	2600      	movs	r6, #0
 8007096:	f000 fd25 	bl	8007ae4 <_init>
 800709a:	4d0a      	ldr	r5, [pc, #40]	; (80070c4 <__libc_init_array+0x40>)
 800709c:	4c0a      	ldr	r4, [pc, #40]	; (80070c8 <__libc_init_array+0x44>)
 800709e:	1b64      	subs	r4, r4, r5
 80070a0:	10a4      	asrs	r4, r4, #2
 80070a2:	42a6      	cmp	r6, r4
 80070a4:	d105      	bne.n	80070b2 <__libc_init_array+0x2e>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	00b3      	lsls	r3, r6, #2
 80070aa:	58eb      	ldr	r3, [r5, r3]
 80070ac:	4798      	blx	r3
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7ee      	b.n	8007090 <__libc_init_array+0xc>
 80070b2:	00b3      	lsls	r3, r6, #2
 80070b4:	58eb      	ldr	r3, [r5, r3]
 80070b6:	4798      	blx	r3
 80070b8:	3601      	adds	r6, #1
 80070ba:	e7f2      	b.n	80070a2 <__libc_init_array+0x1e>
 80070bc:	08007d74 	.word	0x08007d74
 80070c0:	08007d74 	.word	0x08007d74
 80070c4:	08007d74 	.word	0x08007d74
 80070c8:	08007d78 	.word	0x08007d78

080070cc <memset>:
 80070cc:	0003      	movs	r3, r0
 80070ce:	1882      	adds	r2, r0, r2
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	7019      	strb	r1, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <siprintf>:
 80070dc:	b40e      	push	{r1, r2, r3}
 80070de:	b500      	push	{lr}
 80070e0:	490b      	ldr	r1, [pc, #44]	; (8007110 <siprintf+0x34>)
 80070e2:	b09c      	sub	sp, #112	; 0x70
 80070e4:	ab1d      	add	r3, sp, #116	; 0x74
 80070e6:	9002      	str	r0, [sp, #8]
 80070e8:	9006      	str	r0, [sp, #24]
 80070ea:	9107      	str	r1, [sp, #28]
 80070ec:	9104      	str	r1, [sp, #16]
 80070ee:	4809      	ldr	r0, [pc, #36]	; (8007114 <siprintf+0x38>)
 80070f0:	4909      	ldr	r1, [pc, #36]	; (8007118 <siprintf+0x3c>)
 80070f2:	cb04      	ldmia	r3!, {r2}
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	a902      	add	r1, sp, #8
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	f000 f90a 	bl	8007314 <_svfiprintf_r>
 8007100:	2300      	movs	r3, #0
 8007102:	9a02      	ldr	r2, [sp, #8]
 8007104:	7013      	strb	r3, [r2, #0]
 8007106:	b01c      	add	sp, #112	; 0x70
 8007108:	bc08      	pop	{r3}
 800710a:	b003      	add	sp, #12
 800710c:	4718      	bx	r3
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	7fffffff 	.word	0x7fffffff
 8007114:	20000014 	.word	0x20000014
 8007118:	ffff0208 	.word	0xffff0208

0800711c <_strtol_l.constprop.0>:
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	b087      	sub	sp, #28
 8007120:	001e      	movs	r6, r3
 8007122:	9005      	str	r0, [sp, #20]
 8007124:	9101      	str	r1, [sp, #4]
 8007126:	9202      	str	r2, [sp, #8]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d045      	beq.n	80071b8 <_strtol_l.constprop.0+0x9c>
 800712c:	000b      	movs	r3, r1
 800712e:	2e24      	cmp	r6, #36	; 0x24
 8007130:	d842      	bhi.n	80071b8 <_strtol_l.constprop.0+0x9c>
 8007132:	4a3f      	ldr	r2, [pc, #252]	; (8007230 <_strtol_l.constprop.0+0x114>)
 8007134:	2108      	movs	r1, #8
 8007136:	4694      	mov	ip, r2
 8007138:	001a      	movs	r2, r3
 800713a:	4660      	mov	r0, ip
 800713c:	7814      	ldrb	r4, [r2, #0]
 800713e:	3301      	adds	r3, #1
 8007140:	5d00      	ldrb	r0, [r0, r4]
 8007142:	001d      	movs	r5, r3
 8007144:	0007      	movs	r7, r0
 8007146:	400f      	ands	r7, r1
 8007148:	4208      	tst	r0, r1
 800714a:	d1f5      	bne.n	8007138 <_strtol_l.constprop.0+0x1c>
 800714c:	2c2d      	cmp	r4, #45	; 0x2d
 800714e:	d13a      	bne.n	80071c6 <_strtol_l.constprop.0+0xaa>
 8007150:	2701      	movs	r7, #1
 8007152:	781c      	ldrb	r4, [r3, #0]
 8007154:	1c95      	adds	r5, r2, #2
 8007156:	2e00      	cmp	r6, #0
 8007158:	d065      	beq.n	8007226 <_strtol_l.constprop.0+0x10a>
 800715a:	2e10      	cmp	r6, #16
 800715c:	d109      	bne.n	8007172 <_strtol_l.constprop.0+0x56>
 800715e:	2c30      	cmp	r4, #48	; 0x30
 8007160:	d107      	bne.n	8007172 <_strtol_l.constprop.0+0x56>
 8007162:	2220      	movs	r2, #32
 8007164:	782b      	ldrb	r3, [r5, #0]
 8007166:	4393      	bics	r3, r2
 8007168:	2b58      	cmp	r3, #88	; 0x58
 800716a:	d157      	bne.n	800721c <_strtol_l.constprop.0+0x100>
 800716c:	2610      	movs	r6, #16
 800716e:	786c      	ldrb	r4, [r5, #1]
 8007170:	3502      	adds	r5, #2
 8007172:	4b30      	ldr	r3, [pc, #192]	; (8007234 <_strtol_l.constprop.0+0x118>)
 8007174:	0031      	movs	r1, r6
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	0018      	movs	r0, r3
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	f7f9 f852 	bl	8000224 <__aeabi_uidivmod>
 8007180:	2300      	movs	r3, #0
 8007182:	2201      	movs	r2, #1
 8007184:	4684      	mov	ip, r0
 8007186:	0018      	movs	r0, r3
 8007188:	9104      	str	r1, [sp, #16]
 800718a:	4252      	negs	r2, r2
 800718c:	0021      	movs	r1, r4
 800718e:	3930      	subs	r1, #48	; 0x30
 8007190:	2909      	cmp	r1, #9
 8007192:	d81d      	bhi.n	80071d0 <_strtol_l.constprop.0+0xb4>
 8007194:	000c      	movs	r4, r1
 8007196:	42a6      	cmp	r6, r4
 8007198:	dd28      	ble.n	80071ec <_strtol_l.constprop.0+0xd0>
 800719a:	2b00      	cmp	r3, #0
 800719c:	db24      	blt.n	80071e8 <_strtol_l.constprop.0+0xcc>
 800719e:	0013      	movs	r3, r2
 80071a0:	4584      	cmp	ip, r0
 80071a2:	d306      	bcc.n	80071b2 <_strtol_l.constprop.0+0x96>
 80071a4:	d102      	bne.n	80071ac <_strtol_l.constprop.0+0x90>
 80071a6:	9904      	ldr	r1, [sp, #16]
 80071a8:	42a1      	cmp	r1, r4
 80071aa:	db02      	blt.n	80071b2 <_strtol_l.constprop.0+0x96>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4370      	muls	r0, r6
 80071b0:	1820      	adds	r0, r4, r0
 80071b2:	782c      	ldrb	r4, [r5, #0]
 80071b4:	3501      	adds	r5, #1
 80071b6:	e7e9      	b.n	800718c <_strtol_l.constprop.0+0x70>
 80071b8:	f7ff ff5e 	bl	8007078 <__errno>
 80071bc:	2316      	movs	r3, #22
 80071be:	6003      	str	r3, [r0, #0]
 80071c0:	2000      	movs	r0, #0
 80071c2:	b007      	add	sp, #28
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c6:	2c2b      	cmp	r4, #43	; 0x2b
 80071c8:	d1c5      	bne.n	8007156 <_strtol_l.constprop.0+0x3a>
 80071ca:	781c      	ldrb	r4, [r3, #0]
 80071cc:	1c95      	adds	r5, r2, #2
 80071ce:	e7c2      	b.n	8007156 <_strtol_l.constprop.0+0x3a>
 80071d0:	0021      	movs	r1, r4
 80071d2:	3941      	subs	r1, #65	; 0x41
 80071d4:	2919      	cmp	r1, #25
 80071d6:	d801      	bhi.n	80071dc <_strtol_l.constprop.0+0xc0>
 80071d8:	3c37      	subs	r4, #55	; 0x37
 80071da:	e7dc      	b.n	8007196 <_strtol_l.constprop.0+0x7a>
 80071dc:	0021      	movs	r1, r4
 80071de:	3961      	subs	r1, #97	; 0x61
 80071e0:	2919      	cmp	r1, #25
 80071e2:	d803      	bhi.n	80071ec <_strtol_l.constprop.0+0xd0>
 80071e4:	3c57      	subs	r4, #87	; 0x57
 80071e6:	e7d6      	b.n	8007196 <_strtol_l.constprop.0+0x7a>
 80071e8:	0013      	movs	r3, r2
 80071ea:	e7e2      	b.n	80071b2 <_strtol_l.constprop.0+0x96>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da09      	bge.n	8007204 <_strtol_l.constprop.0+0xe8>
 80071f0:	2322      	movs	r3, #34	; 0x22
 80071f2:	9a05      	ldr	r2, [sp, #20]
 80071f4:	9803      	ldr	r0, [sp, #12]
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0e1      	beq.n	80071c2 <_strtol_l.constprop.0+0xa6>
 80071fe:	1e6b      	subs	r3, r5, #1
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	e007      	b.n	8007214 <_strtol_l.constprop.0+0xf8>
 8007204:	2f00      	cmp	r7, #0
 8007206:	d000      	beq.n	800720a <_strtol_l.constprop.0+0xee>
 8007208:	4240      	negs	r0, r0
 800720a:	9a02      	ldr	r2, [sp, #8]
 800720c:	2a00      	cmp	r2, #0
 800720e:	d0d8      	beq.n	80071c2 <_strtol_l.constprop.0+0xa6>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f4      	bne.n	80071fe <_strtol_l.constprop.0+0xe2>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	9a01      	ldr	r2, [sp, #4]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e7d2      	b.n	80071c2 <_strtol_l.constprop.0+0xa6>
 800721c:	2430      	movs	r4, #48	; 0x30
 800721e:	2e00      	cmp	r6, #0
 8007220:	d1a7      	bne.n	8007172 <_strtol_l.constprop.0+0x56>
 8007222:	3608      	adds	r6, #8
 8007224:	e7a5      	b.n	8007172 <_strtol_l.constprop.0+0x56>
 8007226:	2c30      	cmp	r4, #48	; 0x30
 8007228:	d09b      	beq.n	8007162 <_strtol_l.constprop.0+0x46>
 800722a:	260a      	movs	r6, #10
 800722c:	e7a1      	b.n	8007172 <_strtol_l.constprop.0+0x56>
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	08007c39 	.word	0x08007c39
 8007234:	7fffffff 	.word	0x7fffffff

08007238 <strtol>:
 8007238:	b510      	push	{r4, lr}
 800723a:	0013      	movs	r3, r2
 800723c:	000a      	movs	r2, r1
 800723e:	0001      	movs	r1, r0
 8007240:	4802      	ldr	r0, [pc, #8]	; (800724c <strtol+0x14>)
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	f7ff ff6a 	bl	800711c <_strtol_l.constprop.0>
 8007248:	bd10      	pop	{r4, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	20000014 	.word	0x20000014

08007250 <__ssputs_r>:
 8007250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007252:	688e      	ldr	r6, [r1, #8]
 8007254:	b085      	sub	sp, #20
 8007256:	0007      	movs	r7, r0
 8007258:	000c      	movs	r4, r1
 800725a:	9203      	str	r2, [sp, #12]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	429e      	cmp	r6, r3
 8007260:	d83c      	bhi.n	80072dc <__ssputs_r+0x8c>
 8007262:	2390      	movs	r3, #144	; 0x90
 8007264:	898a      	ldrh	r2, [r1, #12]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	421a      	tst	r2, r3
 800726a:	d034      	beq.n	80072d6 <__ssputs_r+0x86>
 800726c:	6909      	ldr	r1, [r1, #16]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	6960      	ldr	r0, [r4, #20]
 8007272:	1a5b      	subs	r3, r3, r1
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	2303      	movs	r3, #3
 8007278:	4343      	muls	r3, r0
 800727a:	0fdd      	lsrs	r5, r3, #31
 800727c:	18ed      	adds	r5, r5, r3
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	9802      	ldr	r0, [sp, #8]
 8007282:	3301      	adds	r3, #1
 8007284:	181b      	adds	r3, r3, r0
 8007286:	106d      	asrs	r5, r5, #1
 8007288:	42ab      	cmp	r3, r5
 800728a:	d900      	bls.n	800728e <__ssputs_r+0x3e>
 800728c:	001d      	movs	r5, r3
 800728e:	0553      	lsls	r3, r2, #21
 8007290:	d532      	bpl.n	80072f8 <__ssputs_r+0xa8>
 8007292:	0029      	movs	r1, r5
 8007294:	0038      	movs	r0, r7
 8007296:	f000 fb53 	bl	8007940 <_malloc_r>
 800729a:	1e06      	subs	r6, r0, #0
 800729c:	d109      	bne.n	80072b2 <__ssputs_r+0x62>
 800729e:	230c      	movs	r3, #12
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	2001      	movs	r0, #1
 80072a6:	89a2      	ldrh	r2, [r4, #12]
 80072a8:	4240      	negs	r0, r0
 80072aa:	4313      	orrs	r3, r2
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	b005      	add	sp, #20
 80072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b2:	9a02      	ldr	r2, [sp, #8]
 80072b4:	6921      	ldr	r1, [r4, #16]
 80072b6:	f000 faba 	bl	800782e <memcpy>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	4a14      	ldr	r2, [pc, #80]	; (8007310 <__ssputs_r+0xc0>)
 80072be:	401a      	ands	r2, r3
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	4313      	orrs	r3, r2
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	9b02      	ldr	r3, [sp, #8]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	18f6      	adds	r6, r6, r3
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	6165      	str	r5, [r4, #20]
 80072d0:	9e01      	ldr	r6, [sp, #4]
 80072d2:	1aed      	subs	r5, r5, r3
 80072d4:	60a5      	str	r5, [r4, #8]
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	429e      	cmp	r6, r3
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x8e>
 80072dc:	9e01      	ldr	r6, [sp, #4]
 80072de:	0032      	movs	r2, r6
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f000 faac 	bl	8007840 <memmove>
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	2000      	movs	r0, #0
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	199e      	adds	r6, r3, r6
 80072f4:	6026      	str	r6, [r4, #0]
 80072f6:	e7da      	b.n	80072ae <__ssputs_r+0x5e>
 80072f8:	002a      	movs	r2, r5
 80072fa:	0038      	movs	r0, r7
 80072fc:	f000 fb96 	bl	8007a2c <_realloc_r>
 8007300:	1e06      	subs	r6, r0, #0
 8007302:	d1e0      	bne.n	80072c6 <__ssputs_r+0x76>
 8007304:	0038      	movs	r0, r7
 8007306:	6921      	ldr	r1, [r4, #16]
 8007308:	f000 faae 	bl	8007868 <_free_r>
 800730c:	e7c7      	b.n	800729e <__ssputs_r+0x4e>
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	fffffb7f 	.word	0xfffffb7f

08007314 <_svfiprintf_r>:
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	b0a1      	sub	sp, #132	; 0x84
 8007318:	9003      	str	r0, [sp, #12]
 800731a:	001d      	movs	r5, r3
 800731c:	898b      	ldrh	r3, [r1, #12]
 800731e:	000f      	movs	r7, r1
 8007320:	0016      	movs	r6, r2
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	d511      	bpl.n	800734a <_svfiprintf_r+0x36>
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10e      	bne.n	800734a <_svfiprintf_r+0x36>
 800732c:	2140      	movs	r1, #64	; 0x40
 800732e:	f000 fb07 	bl	8007940 <_malloc_r>
 8007332:	6038      	str	r0, [r7, #0]
 8007334:	6138      	str	r0, [r7, #16]
 8007336:	2800      	cmp	r0, #0
 8007338:	d105      	bne.n	8007346 <_svfiprintf_r+0x32>
 800733a:	230c      	movs	r3, #12
 800733c:	9a03      	ldr	r2, [sp, #12]
 800733e:	3801      	subs	r0, #1
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	b021      	add	sp, #132	; 0x84
 8007344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	ac08      	add	r4, sp, #32
 800734e:	6163      	str	r3, [r4, #20]
 8007350:	3320      	adds	r3, #32
 8007352:	7663      	strb	r3, [r4, #25]
 8007354:	3310      	adds	r3, #16
 8007356:	76a3      	strb	r3, [r4, #26]
 8007358:	9507      	str	r5, [sp, #28]
 800735a:	0035      	movs	r5, r6
 800735c:	782b      	ldrb	r3, [r5, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <_svfiprintf_r+0x52>
 8007362:	2b25      	cmp	r3, #37	; 0x25
 8007364:	d147      	bne.n	80073f6 <_svfiprintf_r+0xe2>
 8007366:	1bab      	subs	r3, r5, r6
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	42b5      	cmp	r5, r6
 800736c:	d00c      	beq.n	8007388 <_svfiprintf_r+0x74>
 800736e:	0032      	movs	r2, r6
 8007370:	0039      	movs	r1, r7
 8007372:	9803      	ldr	r0, [sp, #12]
 8007374:	f7ff ff6c 	bl	8007250 <__ssputs_r>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d100      	bne.n	800737e <_svfiprintf_r+0x6a>
 800737c:	e0ae      	b.n	80074dc <_svfiprintf_r+0x1c8>
 800737e:	6962      	ldr	r2, [r4, #20]
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	4694      	mov	ip, r2
 8007384:	4463      	add	r3, ip
 8007386:	6163      	str	r3, [r4, #20]
 8007388:	782b      	ldrb	r3, [r5, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d100      	bne.n	8007390 <_svfiprintf_r+0x7c>
 800738e:	e0a5      	b.n	80074dc <_svfiprintf_r+0x1c8>
 8007390:	2201      	movs	r2, #1
 8007392:	2300      	movs	r3, #0
 8007394:	4252      	negs	r2, r2
 8007396:	6062      	str	r2, [r4, #4]
 8007398:	a904      	add	r1, sp, #16
 800739a:	3254      	adds	r2, #84	; 0x54
 800739c:	1852      	adds	r2, r2, r1
 800739e:	1c6e      	adds	r6, r5, #1
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	60e3      	str	r3, [r4, #12]
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	7013      	strb	r3, [r2, #0]
 80073a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80073aa:	2205      	movs	r2, #5
 80073ac:	7831      	ldrb	r1, [r6, #0]
 80073ae:	4854      	ldr	r0, [pc, #336]	; (8007500 <_svfiprintf_r+0x1ec>)
 80073b0:	f000 fa32 	bl	8007818 <memchr>
 80073b4:	1c75      	adds	r5, r6, #1
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d11f      	bne.n	80073fa <_svfiprintf_r+0xe6>
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	06d3      	lsls	r3, r2, #27
 80073be:	d504      	bpl.n	80073ca <_svfiprintf_r+0xb6>
 80073c0:	2353      	movs	r3, #83	; 0x53
 80073c2:	a904      	add	r1, sp, #16
 80073c4:	185b      	adds	r3, r3, r1
 80073c6:	2120      	movs	r1, #32
 80073c8:	7019      	strb	r1, [r3, #0]
 80073ca:	0713      	lsls	r3, r2, #28
 80073cc:	d504      	bpl.n	80073d8 <_svfiprintf_r+0xc4>
 80073ce:	2353      	movs	r3, #83	; 0x53
 80073d0:	a904      	add	r1, sp, #16
 80073d2:	185b      	adds	r3, r3, r1
 80073d4:	212b      	movs	r1, #43	; 0x2b
 80073d6:	7019      	strb	r1, [r3, #0]
 80073d8:	7833      	ldrb	r3, [r6, #0]
 80073da:	2b2a      	cmp	r3, #42	; 0x2a
 80073dc:	d016      	beq.n	800740c <_svfiprintf_r+0xf8>
 80073de:	0035      	movs	r5, r6
 80073e0:	2100      	movs	r1, #0
 80073e2:	200a      	movs	r0, #10
 80073e4:	68e3      	ldr	r3, [r4, #12]
 80073e6:	782a      	ldrb	r2, [r5, #0]
 80073e8:	1c6e      	adds	r6, r5, #1
 80073ea:	3a30      	subs	r2, #48	; 0x30
 80073ec:	2a09      	cmp	r2, #9
 80073ee:	d94e      	bls.n	800748e <_svfiprintf_r+0x17a>
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d111      	bne.n	8007418 <_svfiprintf_r+0x104>
 80073f4:	e017      	b.n	8007426 <_svfiprintf_r+0x112>
 80073f6:	3501      	adds	r5, #1
 80073f8:	e7b0      	b.n	800735c <_svfiprintf_r+0x48>
 80073fa:	4b41      	ldr	r3, [pc, #260]	; (8007500 <_svfiprintf_r+0x1ec>)
 80073fc:	6822      	ldr	r2, [r4, #0]
 80073fe:	1ac0      	subs	r0, r0, r3
 8007400:	2301      	movs	r3, #1
 8007402:	4083      	lsls	r3, r0
 8007404:	4313      	orrs	r3, r2
 8007406:	002e      	movs	r6, r5
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	e7ce      	b.n	80073aa <_svfiprintf_r+0x96>
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	1d19      	adds	r1, r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	9107      	str	r1, [sp, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	db01      	blt.n	800741c <_svfiprintf_r+0x108>
 8007418:	930b      	str	r3, [sp, #44]	; 0x2c
 800741a:	e004      	b.n	8007426 <_svfiprintf_r+0x112>
 800741c:	425b      	negs	r3, r3
 800741e:	60e3      	str	r3, [r4, #12]
 8007420:	2302      	movs	r3, #2
 8007422:	4313      	orrs	r3, r2
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	782b      	ldrb	r3, [r5, #0]
 8007428:	2b2e      	cmp	r3, #46	; 0x2e
 800742a:	d10a      	bne.n	8007442 <_svfiprintf_r+0x12e>
 800742c:	786b      	ldrb	r3, [r5, #1]
 800742e:	2b2a      	cmp	r3, #42	; 0x2a
 8007430:	d135      	bne.n	800749e <_svfiprintf_r+0x18a>
 8007432:	9b07      	ldr	r3, [sp, #28]
 8007434:	3502      	adds	r5, #2
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9207      	str	r2, [sp, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	db2b      	blt.n	8007498 <_svfiprintf_r+0x184>
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	4e30      	ldr	r6, [pc, #192]	; (8007504 <_svfiprintf_r+0x1f0>)
 8007444:	2203      	movs	r2, #3
 8007446:	0030      	movs	r0, r6
 8007448:	7829      	ldrb	r1, [r5, #0]
 800744a:	f000 f9e5 	bl	8007818 <memchr>
 800744e:	2800      	cmp	r0, #0
 8007450:	d006      	beq.n	8007460 <_svfiprintf_r+0x14c>
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	1b80      	subs	r0, r0, r6
 8007456:	4083      	lsls	r3, r0
 8007458:	6822      	ldr	r2, [r4, #0]
 800745a:	3501      	adds	r5, #1
 800745c:	4313      	orrs	r3, r2
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	7829      	ldrb	r1, [r5, #0]
 8007462:	2206      	movs	r2, #6
 8007464:	4828      	ldr	r0, [pc, #160]	; (8007508 <_svfiprintf_r+0x1f4>)
 8007466:	1c6e      	adds	r6, r5, #1
 8007468:	7621      	strb	r1, [r4, #24]
 800746a:	f000 f9d5 	bl	8007818 <memchr>
 800746e:	2800      	cmp	r0, #0
 8007470:	d03c      	beq.n	80074ec <_svfiprintf_r+0x1d8>
 8007472:	4b26      	ldr	r3, [pc, #152]	; (800750c <_svfiprintf_r+0x1f8>)
 8007474:	2b00      	cmp	r3, #0
 8007476:	d125      	bne.n	80074c4 <_svfiprintf_r+0x1b0>
 8007478:	2207      	movs	r2, #7
 800747a:	9b07      	ldr	r3, [sp, #28]
 800747c:	3307      	adds	r3, #7
 800747e:	4393      	bics	r3, r2
 8007480:	3308      	adds	r3, #8
 8007482:	9307      	str	r3, [sp, #28]
 8007484:	6963      	ldr	r3, [r4, #20]
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	189b      	adds	r3, r3, r2
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	e765      	b.n	800735a <_svfiprintf_r+0x46>
 800748e:	4343      	muls	r3, r0
 8007490:	0035      	movs	r5, r6
 8007492:	2101      	movs	r1, #1
 8007494:	189b      	adds	r3, r3, r2
 8007496:	e7a6      	b.n	80073e6 <_svfiprintf_r+0xd2>
 8007498:	2301      	movs	r3, #1
 800749a:	425b      	negs	r3, r3
 800749c:	e7d0      	b.n	8007440 <_svfiprintf_r+0x12c>
 800749e:	2300      	movs	r3, #0
 80074a0:	200a      	movs	r0, #10
 80074a2:	001a      	movs	r2, r3
 80074a4:	3501      	adds	r5, #1
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	7829      	ldrb	r1, [r5, #0]
 80074aa:	1c6e      	adds	r6, r5, #1
 80074ac:	3930      	subs	r1, #48	; 0x30
 80074ae:	2909      	cmp	r1, #9
 80074b0:	d903      	bls.n	80074ba <_svfiprintf_r+0x1a6>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c5      	beq.n	8007442 <_svfiprintf_r+0x12e>
 80074b6:	9209      	str	r2, [sp, #36]	; 0x24
 80074b8:	e7c3      	b.n	8007442 <_svfiprintf_r+0x12e>
 80074ba:	4342      	muls	r2, r0
 80074bc:	0035      	movs	r5, r6
 80074be:	2301      	movs	r3, #1
 80074c0:	1852      	adds	r2, r2, r1
 80074c2:	e7f1      	b.n	80074a8 <_svfiprintf_r+0x194>
 80074c4:	ab07      	add	r3, sp, #28
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	003a      	movs	r2, r7
 80074ca:	0021      	movs	r1, r4
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <_svfiprintf_r+0x1fc>)
 80074ce:	9803      	ldr	r0, [sp, #12]
 80074d0:	e000      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074d2:	bf00      	nop
 80074d4:	9004      	str	r0, [sp, #16]
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	d1d3      	bne.n	8007484 <_svfiprintf_r+0x170>
 80074dc:	89bb      	ldrh	r3, [r7, #12]
 80074de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80074e0:	065b      	lsls	r3, r3, #25
 80074e2:	d400      	bmi.n	80074e6 <_svfiprintf_r+0x1d2>
 80074e4:	e72d      	b.n	8007342 <_svfiprintf_r+0x2e>
 80074e6:	2001      	movs	r0, #1
 80074e8:	4240      	negs	r0, r0
 80074ea:	e72a      	b.n	8007342 <_svfiprintf_r+0x2e>
 80074ec:	ab07      	add	r3, sp, #28
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	003a      	movs	r2, r7
 80074f2:	0021      	movs	r1, r4
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <_svfiprintf_r+0x1fc>)
 80074f6:	9803      	ldr	r0, [sp, #12]
 80074f8:	f000 f87c 	bl	80075f4 <_printf_i>
 80074fc:	e7ea      	b.n	80074d4 <_svfiprintf_r+0x1c0>
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	08007d39 	.word	0x08007d39
 8007504:	08007d3f 	.word	0x08007d3f
 8007508:	08007d43 	.word	0x08007d43
 800750c:	00000000 	.word	0x00000000
 8007510:	08007251 	.word	0x08007251

08007514 <_printf_common>:
 8007514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007516:	0015      	movs	r5, r2
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	688a      	ldr	r2, [r1, #8]
 800751c:	690b      	ldr	r3, [r1, #16]
 800751e:	000c      	movs	r4, r1
 8007520:	9000      	str	r0, [sp, #0]
 8007522:	4293      	cmp	r3, r2
 8007524:	da00      	bge.n	8007528 <_printf_common+0x14>
 8007526:	0013      	movs	r3, r2
 8007528:	0022      	movs	r2, r4
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	3243      	adds	r2, #67	; 0x43
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	2a00      	cmp	r2, #0
 8007532:	d001      	beq.n	8007538 <_printf_common+0x24>
 8007534:	3301      	adds	r3, #1
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	069b      	lsls	r3, r3, #26
 800753c:	d502      	bpl.n	8007544 <_printf_common+0x30>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	3302      	adds	r3, #2
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	2306      	movs	r3, #6
 8007548:	0017      	movs	r7, r2
 800754a:	401f      	ands	r7, r3
 800754c:	421a      	tst	r2, r3
 800754e:	d027      	beq.n	80075a0 <_printf_common+0x8c>
 8007550:	0023      	movs	r3, r4
 8007552:	3343      	adds	r3, #67	; 0x43
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	1e5a      	subs	r2, r3, #1
 8007558:	4193      	sbcs	r3, r2
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	0692      	lsls	r2, r2, #26
 800755e:	d430      	bmi.n	80075c2 <_printf_common+0xae>
 8007560:	0022      	movs	r2, r4
 8007562:	9901      	ldr	r1, [sp, #4]
 8007564:	9800      	ldr	r0, [sp, #0]
 8007566:	9e08      	ldr	r6, [sp, #32]
 8007568:	3243      	adds	r2, #67	; 0x43
 800756a:	47b0      	blx	r6
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d025      	beq.n	80075bc <_printf_common+0xa8>
 8007570:	2306      	movs	r3, #6
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	682a      	ldr	r2, [r5, #0]
 8007576:	68e1      	ldr	r1, [r4, #12]
 8007578:	2500      	movs	r5, #0
 800757a:	4003      	ands	r3, r0
 800757c:	2b04      	cmp	r3, #4
 800757e:	d103      	bne.n	8007588 <_printf_common+0x74>
 8007580:	1a8d      	subs	r5, r1, r2
 8007582:	43eb      	mvns	r3, r5
 8007584:	17db      	asrs	r3, r3, #31
 8007586:	401d      	ands	r5, r3
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	4293      	cmp	r3, r2
 800758e:	dd01      	ble.n	8007594 <_printf_common+0x80>
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	18ed      	adds	r5, r5, r3
 8007594:	2700      	movs	r7, #0
 8007596:	42bd      	cmp	r5, r7
 8007598:	d120      	bne.n	80075dc <_printf_common+0xc8>
 800759a:	2000      	movs	r0, #0
 800759c:	e010      	b.n	80075c0 <_printf_common+0xac>
 800759e:	3701      	adds	r7, #1
 80075a0:	68e3      	ldr	r3, [r4, #12]
 80075a2:	682a      	ldr	r2, [r5, #0]
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	42bb      	cmp	r3, r7
 80075a8:	ddd2      	ble.n	8007550 <_printf_common+0x3c>
 80075aa:	0022      	movs	r2, r4
 80075ac:	2301      	movs	r3, #1
 80075ae:	9901      	ldr	r1, [sp, #4]
 80075b0:	9800      	ldr	r0, [sp, #0]
 80075b2:	9e08      	ldr	r6, [sp, #32]
 80075b4:	3219      	adds	r2, #25
 80075b6:	47b0      	blx	r6
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d1f0      	bne.n	800759e <_printf_common+0x8a>
 80075bc:	2001      	movs	r0, #1
 80075be:	4240      	negs	r0, r0
 80075c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075c2:	2030      	movs	r0, #48	; 0x30
 80075c4:	18e1      	adds	r1, r4, r3
 80075c6:	3143      	adds	r1, #67	; 0x43
 80075c8:	7008      	strb	r0, [r1, #0]
 80075ca:	0021      	movs	r1, r4
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	3145      	adds	r1, #69	; 0x45
 80075d0:	7809      	ldrb	r1, [r1, #0]
 80075d2:	18a2      	adds	r2, r4, r2
 80075d4:	3243      	adds	r2, #67	; 0x43
 80075d6:	3302      	adds	r3, #2
 80075d8:	7011      	strb	r1, [r2, #0]
 80075da:	e7c1      	b.n	8007560 <_printf_common+0x4c>
 80075dc:	0022      	movs	r2, r4
 80075de:	2301      	movs	r3, #1
 80075e0:	9901      	ldr	r1, [sp, #4]
 80075e2:	9800      	ldr	r0, [sp, #0]
 80075e4:	9e08      	ldr	r6, [sp, #32]
 80075e6:	321a      	adds	r2, #26
 80075e8:	47b0      	blx	r6
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d0e6      	beq.n	80075bc <_printf_common+0xa8>
 80075ee:	3701      	adds	r7, #1
 80075f0:	e7d1      	b.n	8007596 <_printf_common+0x82>
	...

080075f4 <_printf_i>:
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	b08b      	sub	sp, #44	; 0x2c
 80075f8:	9206      	str	r2, [sp, #24]
 80075fa:	000a      	movs	r2, r1
 80075fc:	3243      	adds	r2, #67	; 0x43
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	9005      	str	r0, [sp, #20]
 8007602:	9204      	str	r2, [sp, #16]
 8007604:	7e0a      	ldrb	r2, [r1, #24]
 8007606:	000c      	movs	r4, r1
 8007608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800760a:	2a78      	cmp	r2, #120	; 0x78
 800760c:	d807      	bhi.n	800761e <_printf_i+0x2a>
 800760e:	2a62      	cmp	r2, #98	; 0x62
 8007610:	d809      	bhi.n	8007626 <_printf_i+0x32>
 8007612:	2a00      	cmp	r2, #0
 8007614:	d100      	bne.n	8007618 <_printf_i+0x24>
 8007616:	e0c1      	b.n	800779c <_printf_i+0x1a8>
 8007618:	2a58      	cmp	r2, #88	; 0x58
 800761a:	d100      	bne.n	800761e <_printf_i+0x2a>
 800761c:	e08c      	b.n	8007738 <_printf_i+0x144>
 800761e:	0026      	movs	r6, r4
 8007620:	3642      	adds	r6, #66	; 0x42
 8007622:	7032      	strb	r2, [r6, #0]
 8007624:	e022      	b.n	800766c <_printf_i+0x78>
 8007626:	0010      	movs	r0, r2
 8007628:	3863      	subs	r0, #99	; 0x63
 800762a:	2815      	cmp	r0, #21
 800762c:	d8f7      	bhi.n	800761e <_printf_i+0x2a>
 800762e:	f7f8 fd69 	bl	8000104 <__gnu_thumb1_case_shi>
 8007632:	0016      	.short	0x0016
 8007634:	fff6001f 	.word	0xfff6001f
 8007638:	fff6fff6 	.word	0xfff6fff6
 800763c:	001ffff6 	.word	0x001ffff6
 8007640:	fff6fff6 	.word	0xfff6fff6
 8007644:	fff6fff6 	.word	0xfff6fff6
 8007648:	003600a8 	.word	0x003600a8
 800764c:	fff6009a 	.word	0xfff6009a
 8007650:	00b9fff6 	.word	0x00b9fff6
 8007654:	0036fff6 	.word	0x0036fff6
 8007658:	fff6fff6 	.word	0xfff6fff6
 800765c:	009e      	.short	0x009e
 800765e:	0026      	movs	r6, r4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	3642      	adds	r6, #66	; 0x42
 8007664:	1d11      	adds	r1, r2, #4
 8007666:	6019      	str	r1, [r3, #0]
 8007668:	6813      	ldr	r3, [r2, #0]
 800766a:	7033      	strb	r3, [r6, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	e0a7      	b.n	80077c0 <_printf_i+0x1cc>
 8007670:	6808      	ldr	r0, [r1, #0]
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	1d0a      	adds	r2, r1, #4
 8007676:	0605      	lsls	r5, r0, #24
 8007678:	d50b      	bpl.n	8007692 <_printf_i+0x9e>
 800767a:	680d      	ldr	r5, [r1, #0]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	2d00      	cmp	r5, #0
 8007680:	da03      	bge.n	800768a <_printf_i+0x96>
 8007682:	232d      	movs	r3, #45	; 0x2d
 8007684:	9a04      	ldr	r2, [sp, #16]
 8007686:	426d      	negs	r5, r5
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	4b61      	ldr	r3, [pc, #388]	; (8007810 <_printf_i+0x21c>)
 800768c:	270a      	movs	r7, #10
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	e01b      	b.n	80076ca <_printf_i+0xd6>
 8007692:	680d      	ldr	r5, [r1, #0]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	0641      	lsls	r1, r0, #25
 8007698:	d5f1      	bpl.n	800767e <_printf_i+0x8a>
 800769a:	b22d      	sxth	r5, r5
 800769c:	e7ef      	b.n	800767e <_printf_i+0x8a>
 800769e:	680d      	ldr	r5, [r1, #0]
 80076a0:	6819      	ldr	r1, [r3, #0]
 80076a2:	1d08      	adds	r0, r1, #4
 80076a4:	6018      	str	r0, [r3, #0]
 80076a6:	062e      	lsls	r6, r5, #24
 80076a8:	d501      	bpl.n	80076ae <_printf_i+0xba>
 80076aa:	680d      	ldr	r5, [r1, #0]
 80076ac:	e003      	b.n	80076b6 <_printf_i+0xc2>
 80076ae:	066d      	lsls	r5, r5, #25
 80076b0:	d5fb      	bpl.n	80076aa <_printf_i+0xb6>
 80076b2:	680d      	ldr	r5, [r1, #0]
 80076b4:	b2ad      	uxth	r5, r5
 80076b6:	4b56      	ldr	r3, [pc, #344]	; (8007810 <_printf_i+0x21c>)
 80076b8:	2708      	movs	r7, #8
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	2a6f      	cmp	r2, #111	; 0x6f
 80076be:	d000      	beq.n	80076c2 <_printf_i+0xce>
 80076c0:	3702      	adds	r7, #2
 80076c2:	0023      	movs	r3, r4
 80076c4:	2200      	movs	r2, #0
 80076c6:	3343      	adds	r3, #67	; 0x43
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	60a3      	str	r3, [r4, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	db03      	blt.n	80076da <_printf_i+0xe6>
 80076d2:	2204      	movs	r2, #4
 80076d4:	6821      	ldr	r1, [r4, #0]
 80076d6:	4391      	bics	r1, r2
 80076d8:	6021      	str	r1, [r4, #0]
 80076da:	2d00      	cmp	r5, #0
 80076dc:	d102      	bne.n	80076e4 <_printf_i+0xf0>
 80076de:	9e04      	ldr	r6, [sp, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <_printf_i+0x10a>
 80076e4:	9e04      	ldr	r6, [sp, #16]
 80076e6:	0028      	movs	r0, r5
 80076e8:	0039      	movs	r1, r7
 80076ea:	f7f8 fd9b 	bl	8000224 <__aeabi_uidivmod>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	3e01      	subs	r6, #1
 80076f2:	5c5b      	ldrb	r3, [r3, r1]
 80076f4:	7033      	strb	r3, [r6, #0]
 80076f6:	002b      	movs	r3, r5
 80076f8:	0005      	movs	r5, r0
 80076fa:	429f      	cmp	r7, r3
 80076fc:	d9f3      	bls.n	80076e6 <_printf_i+0xf2>
 80076fe:	2f08      	cmp	r7, #8
 8007700:	d109      	bne.n	8007716 <_printf_i+0x122>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	07db      	lsls	r3, r3, #31
 8007706:	d506      	bpl.n	8007716 <_printf_i+0x122>
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	6922      	ldr	r2, [r4, #16]
 800770c:	4293      	cmp	r3, r2
 800770e:	dc02      	bgt.n	8007716 <_printf_i+0x122>
 8007710:	2330      	movs	r3, #48	; 0x30
 8007712:	3e01      	subs	r6, #1
 8007714:	7033      	strb	r3, [r6, #0]
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	1b9b      	subs	r3, r3, r6
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	0021      	movs	r1, r4
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	9b06      	ldr	r3, [sp, #24]
 8007726:	aa09      	add	r2, sp, #36	; 0x24
 8007728:	f7ff fef4 	bl	8007514 <_printf_common>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d14c      	bne.n	80077ca <_printf_i+0x1d6>
 8007730:	2001      	movs	r0, #1
 8007732:	4240      	negs	r0, r0
 8007734:	b00b      	add	sp, #44	; 0x2c
 8007736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007738:	3145      	adds	r1, #69	; 0x45
 800773a:	700a      	strb	r2, [r1, #0]
 800773c:	4a34      	ldr	r2, [pc, #208]	; (8007810 <_printf_i+0x21c>)
 800773e:	9203      	str	r2, [sp, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	ca20      	ldmia	r2!, {r5}
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	0608      	lsls	r0, r1, #24
 800774a:	d516      	bpl.n	800777a <_printf_i+0x186>
 800774c:	07cb      	lsls	r3, r1, #31
 800774e:	d502      	bpl.n	8007756 <_printf_i+0x162>
 8007750:	2320      	movs	r3, #32
 8007752:	4319      	orrs	r1, r3
 8007754:	6021      	str	r1, [r4, #0]
 8007756:	2710      	movs	r7, #16
 8007758:	2d00      	cmp	r5, #0
 800775a:	d1b2      	bne.n	80076c2 <_printf_i+0xce>
 800775c:	2320      	movs	r3, #32
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	439a      	bics	r2, r3
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	e7ad      	b.n	80076c2 <_printf_i+0xce>
 8007766:	2220      	movs	r2, #32
 8007768:	6809      	ldr	r1, [r1, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	0022      	movs	r2, r4
 8007770:	2178      	movs	r1, #120	; 0x78
 8007772:	3245      	adds	r2, #69	; 0x45
 8007774:	7011      	strb	r1, [r2, #0]
 8007776:	4a27      	ldr	r2, [pc, #156]	; (8007814 <_printf_i+0x220>)
 8007778:	e7e1      	b.n	800773e <_printf_i+0x14a>
 800777a:	0648      	lsls	r0, r1, #25
 800777c:	d5e6      	bpl.n	800774c <_printf_i+0x158>
 800777e:	b2ad      	uxth	r5, r5
 8007780:	e7e4      	b.n	800774c <_printf_i+0x158>
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	680d      	ldr	r5, [r1, #0]
 8007786:	1d10      	adds	r0, r2, #4
 8007788:	6949      	ldr	r1, [r1, #20]
 800778a:	6018      	str	r0, [r3, #0]
 800778c:	6813      	ldr	r3, [r2, #0]
 800778e:	062e      	lsls	r6, r5, #24
 8007790:	d501      	bpl.n	8007796 <_printf_i+0x1a2>
 8007792:	6019      	str	r1, [r3, #0]
 8007794:	e002      	b.n	800779c <_printf_i+0x1a8>
 8007796:	066d      	lsls	r5, r5, #25
 8007798:	d5fb      	bpl.n	8007792 <_printf_i+0x19e>
 800779a:	8019      	strh	r1, [r3, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	9e04      	ldr	r6, [sp, #16]
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	e7bb      	b.n	800771c <_printf_i+0x128>
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	1d11      	adds	r1, r2, #4
 80077a8:	6019      	str	r1, [r3, #0]
 80077aa:	6816      	ldr	r6, [r2, #0]
 80077ac:	2100      	movs	r1, #0
 80077ae:	0030      	movs	r0, r6
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	f000 f831 	bl	8007818 <memchr>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d001      	beq.n	80077be <_printf_i+0x1ca>
 80077ba:	1b80      	subs	r0, r0, r6
 80077bc:	6060      	str	r0, [r4, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	7013      	strb	r3, [r2, #0]
 80077c8:	e7a8      	b.n	800771c <_printf_i+0x128>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	0032      	movs	r2, r6
 80077ce:	9906      	ldr	r1, [sp, #24]
 80077d0:	9805      	ldr	r0, [sp, #20]
 80077d2:	9d07      	ldr	r5, [sp, #28]
 80077d4:	47a8      	blx	r5
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d0aa      	beq.n	8007730 <_printf_i+0x13c>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	079b      	lsls	r3, r3, #30
 80077de:	d415      	bmi.n	800780c <_printf_i+0x218>
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	68e0      	ldr	r0, [r4, #12]
 80077e4:	4298      	cmp	r0, r3
 80077e6:	daa5      	bge.n	8007734 <_printf_i+0x140>
 80077e8:	0018      	movs	r0, r3
 80077ea:	e7a3      	b.n	8007734 <_printf_i+0x140>
 80077ec:	0022      	movs	r2, r4
 80077ee:	2301      	movs	r3, #1
 80077f0:	9906      	ldr	r1, [sp, #24]
 80077f2:	9805      	ldr	r0, [sp, #20]
 80077f4:	9e07      	ldr	r6, [sp, #28]
 80077f6:	3219      	adds	r2, #25
 80077f8:	47b0      	blx	r6
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d098      	beq.n	8007730 <_printf_i+0x13c>
 80077fe:	3501      	adds	r5, #1
 8007800:	68e3      	ldr	r3, [r4, #12]
 8007802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	42ab      	cmp	r3, r5
 8007808:	dcf0      	bgt.n	80077ec <_printf_i+0x1f8>
 800780a:	e7e9      	b.n	80077e0 <_printf_i+0x1ec>
 800780c:	2500      	movs	r5, #0
 800780e:	e7f7      	b.n	8007800 <_printf_i+0x20c>
 8007810:	08007d4a 	.word	0x08007d4a
 8007814:	08007d5b 	.word	0x08007d5b

08007818 <memchr>:
 8007818:	b2c9      	uxtb	r1, r1
 800781a:	1882      	adds	r2, r0, r2
 800781c:	4290      	cmp	r0, r2
 800781e:	d101      	bne.n	8007824 <memchr+0xc>
 8007820:	2000      	movs	r0, #0
 8007822:	4770      	bx	lr
 8007824:	7803      	ldrb	r3, [r0, #0]
 8007826:	428b      	cmp	r3, r1
 8007828:	d0fb      	beq.n	8007822 <memchr+0xa>
 800782a:	3001      	adds	r0, #1
 800782c:	e7f6      	b.n	800781c <memchr+0x4>

0800782e <memcpy>:
 800782e:	2300      	movs	r3, #0
 8007830:	b510      	push	{r4, lr}
 8007832:	429a      	cmp	r2, r3
 8007834:	d100      	bne.n	8007838 <memcpy+0xa>
 8007836:	bd10      	pop	{r4, pc}
 8007838:	5ccc      	ldrb	r4, [r1, r3]
 800783a:	54c4      	strb	r4, [r0, r3]
 800783c:	3301      	adds	r3, #1
 800783e:	e7f8      	b.n	8007832 <memcpy+0x4>

08007840 <memmove>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4288      	cmp	r0, r1
 8007844:	d902      	bls.n	800784c <memmove+0xc>
 8007846:	188b      	adds	r3, r1, r2
 8007848:	4298      	cmp	r0, r3
 800784a:	d303      	bcc.n	8007854 <memmove+0x14>
 800784c:	2300      	movs	r3, #0
 800784e:	e007      	b.n	8007860 <memmove+0x20>
 8007850:	5c8b      	ldrb	r3, [r1, r2]
 8007852:	5483      	strb	r3, [r0, r2]
 8007854:	3a01      	subs	r2, #1
 8007856:	d2fb      	bcs.n	8007850 <memmove+0x10>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	5ccc      	ldrb	r4, [r1, r3]
 800785c:	54c4      	strb	r4, [r0, r3]
 800785e:	3301      	adds	r3, #1
 8007860:	429a      	cmp	r2, r3
 8007862:	d1fa      	bne.n	800785a <memmove+0x1a>
 8007864:	e7f8      	b.n	8007858 <memmove+0x18>
	...

08007868 <_free_r>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	0005      	movs	r5, r0
 800786c:	2900      	cmp	r1, #0
 800786e:	d010      	beq.n	8007892 <_free_r+0x2a>
 8007870:	1f0c      	subs	r4, r1, #4
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	da00      	bge.n	800787a <_free_r+0x12>
 8007878:	18e4      	adds	r4, r4, r3
 800787a:	0028      	movs	r0, r5
 800787c:	f000 f918 	bl	8007ab0 <__malloc_lock>
 8007880:	4a1d      	ldr	r2, [pc, #116]	; (80078f8 <_free_r+0x90>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <_free_r+0x2c>
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6014      	str	r4, [r2, #0]
 800788c:	0028      	movs	r0, r5
 800788e:	f000 f917 	bl	8007ac0 <__malloc_unlock>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	42a3      	cmp	r3, r4
 8007896:	d908      	bls.n	80078aa <_free_r+0x42>
 8007898:	6821      	ldr	r1, [r4, #0]
 800789a:	1860      	adds	r0, r4, r1
 800789c:	4283      	cmp	r3, r0
 800789e:	d1f3      	bne.n	8007888 <_free_r+0x20>
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	1841      	adds	r1, r0, r1
 80078a6:	6021      	str	r1, [r4, #0]
 80078a8:	e7ee      	b.n	8007888 <_free_r+0x20>
 80078aa:	001a      	movs	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <_free_r+0x4e>
 80078b2:	42a3      	cmp	r3, r4
 80078b4:	d9f9      	bls.n	80078aa <_free_r+0x42>
 80078b6:	6811      	ldr	r1, [r2, #0]
 80078b8:	1850      	adds	r0, r2, r1
 80078ba:	42a0      	cmp	r0, r4
 80078bc:	d10b      	bne.n	80078d6 <_free_r+0x6e>
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	1809      	adds	r1, r1, r0
 80078c2:	1850      	adds	r0, r2, r1
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	4283      	cmp	r3, r0
 80078c8:	d1e0      	bne.n	800788c <_free_r+0x24>
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	1841      	adds	r1, r0, r1
 80078d0:	6011      	str	r1, [r2, #0]
 80078d2:	6053      	str	r3, [r2, #4]
 80078d4:	e7da      	b.n	800788c <_free_r+0x24>
 80078d6:	42a0      	cmp	r0, r4
 80078d8:	d902      	bls.n	80078e0 <_free_r+0x78>
 80078da:	230c      	movs	r3, #12
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	e7d5      	b.n	800788c <_free_r+0x24>
 80078e0:	6821      	ldr	r1, [r4, #0]
 80078e2:	1860      	adds	r0, r4, r1
 80078e4:	4283      	cmp	r3, r0
 80078e6:	d103      	bne.n	80078f0 <_free_r+0x88>
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	1841      	adds	r1, r0, r1
 80078ee:	6021      	str	r1, [r4, #0]
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	6054      	str	r4, [r2, #4]
 80078f4:	e7ca      	b.n	800788c <_free_r+0x24>
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	2000025c 	.word	0x2000025c

080078fc <sbrk_aligned>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4e0f      	ldr	r6, [pc, #60]	; (800793c <sbrk_aligned+0x40>)
 8007900:	000d      	movs	r5, r1
 8007902:	6831      	ldr	r1, [r6, #0]
 8007904:	0004      	movs	r4, r0
 8007906:	2900      	cmp	r1, #0
 8007908:	d102      	bne.n	8007910 <sbrk_aligned+0x14>
 800790a:	f000 f8bf 	bl	8007a8c <_sbrk_r>
 800790e:	6030      	str	r0, [r6, #0]
 8007910:	0029      	movs	r1, r5
 8007912:	0020      	movs	r0, r4
 8007914:	f000 f8ba 	bl	8007a8c <_sbrk_r>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d00a      	beq.n	8007932 <sbrk_aligned+0x36>
 800791c:	2303      	movs	r3, #3
 800791e:	1cc5      	adds	r5, r0, #3
 8007920:	439d      	bics	r5, r3
 8007922:	42a8      	cmp	r0, r5
 8007924:	d007      	beq.n	8007936 <sbrk_aligned+0x3a>
 8007926:	1a29      	subs	r1, r5, r0
 8007928:	0020      	movs	r0, r4
 800792a:	f000 f8af 	bl	8007a8c <_sbrk_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d101      	bne.n	8007936 <sbrk_aligned+0x3a>
 8007932:	2501      	movs	r5, #1
 8007934:	426d      	negs	r5, r5
 8007936:	0028      	movs	r0, r5
 8007938:	bd70      	pop	{r4, r5, r6, pc}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	20000260 	.word	0x20000260

08007940 <_malloc_r>:
 8007940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007942:	2203      	movs	r2, #3
 8007944:	1ccb      	adds	r3, r1, #3
 8007946:	4393      	bics	r3, r2
 8007948:	3308      	adds	r3, #8
 800794a:	0006      	movs	r6, r0
 800794c:	001f      	movs	r7, r3
 800794e:	2b0c      	cmp	r3, #12
 8007950:	d232      	bcs.n	80079b8 <_malloc_r+0x78>
 8007952:	270c      	movs	r7, #12
 8007954:	42b9      	cmp	r1, r7
 8007956:	d831      	bhi.n	80079bc <_malloc_r+0x7c>
 8007958:	0030      	movs	r0, r6
 800795a:	f000 f8a9 	bl	8007ab0 <__malloc_lock>
 800795e:	4d32      	ldr	r5, [pc, #200]	; (8007a28 <_malloc_r+0xe8>)
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	001c      	movs	r4, r3
 8007964:	2c00      	cmp	r4, #0
 8007966:	d12e      	bne.n	80079c6 <_malloc_r+0x86>
 8007968:	0039      	movs	r1, r7
 800796a:	0030      	movs	r0, r6
 800796c:	f7ff ffc6 	bl	80078fc <sbrk_aligned>
 8007970:	0004      	movs	r4, r0
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d11e      	bne.n	80079b4 <_malloc_r+0x74>
 8007976:	682c      	ldr	r4, [r5, #0]
 8007978:	0025      	movs	r5, r4
 800797a:	2d00      	cmp	r5, #0
 800797c:	d14a      	bne.n	8007a14 <_malloc_r+0xd4>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	0029      	movs	r1, r5
 8007982:	18e3      	adds	r3, r4, r3
 8007984:	0030      	movs	r0, r6
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	f000 f880 	bl	8007a8c <_sbrk_r>
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	4283      	cmp	r3, r0
 8007990:	d143      	bne.n	8007a1a <_malloc_r+0xda>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	3703      	adds	r7, #3
 8007996:	1aff      	subs	r7, r7, r3
 8007998:	2303      	movs	r3, #3
 800799a:	439f      	bics	r7, r3
 800799c:	3708      	adds	r7, #8
 800799e:	2f0c      	cmp	r7, #12
 80079a0:	d200      	bcs.n	80079a4 <_malloc_r+0x64>
 80079a2:	270c      	movs	r7, #12
 80079a4:	0039      	movs	r1, r7
 80079a6:	0030      	movs	r0, r6
 80079a8:	f7ff ffa8 	bl	80078fc <sbrk_aligned>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d034      	beq.n	8007a1a <_malloc_r+0xda>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	19df      	adds	r7, r3, r7
 80079b4:	6027      	str	r7, [r4, #0]
 80079b6:	e013      	b.n	80079e0 <_malloc_r+0xa0>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dacb      	bge.n	8007954 <_malloc_r+0x14>
 80079bc:	230c      	movs	r3, #12
 80079be:	2500      	movs	r5, #0
 80079c0:	6033      	str	r3, [r6, #0]
 80079c2:	0028      	movs	r0, r5
 80079c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	1bd1      	subs	r1, r2, r7
 80079ca:	d420      	bmi.n	8007a0e <_malloc_r+0xce>
 80079cc:	290b      	cmp	r1, #11
 80079ce:	d917      	bls.n	8007a00 <_malloc_r+0xc0>
 80079d0:	19e2      	adds	r2, r4, r7
 80079d2:	6027      	str	r7, [r4, #0]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d111      	bne.n	80079fc <_malloc_r+0xbc>
 80079d8:	602a      	str	r2, [r5, #0]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6011      	str	r1, [r2, #0]
 80079de:	6053      	str	r3, [r2, #4]
 80079e0:	0030      	movs	r0, r6
 80079e2:	0025      	movs	r5, r4
 80079e4:	f000 f86c 	bl	8007ac0 <__malloc_unlock>
 80079e8:	2207      	movs	r2, #7
 80079ea:	350b      	adds	r5, #11
 80079ec:	1d23      	adds	r3, r4, #4
 80079ee:	4395      	bics	r5, r2
 80079f0:	1aea      	subs	r2, r5, r3
 80079f2:	429d      	cmp	r5, r3
 80079f4:	d0e5      	beq.n	80079c2 <_malloc_r+0x82>
 80079f6:	1b5b      	subs	r3, r3, r5
 80079f8:	50a3      	str	r3, [r4, r2]
 80079fa:	e7e2      	b.n	80079c2 <_malloc_r+0x82>
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	e7ec      	b.n	80079da <_malloc_r+0x9a>
 8007a00:	6862      	ldr	r2, [r4, #4]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	d101      	bne.n	8007a0a <_malloc_r+0xca>
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	e7ea      	b.n	80079e0 <_malloc_r+0xa0>
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	e7e8      	b.n	80079e0 <_malloc_r+0xa0>
 8007a0e:	0023      	movs	r3, r4
 8007a10:	6864      	ldr	r4, [r4, #4]
 8007a12:	e7a7      	b.n	8007964 <_malloc_r+0x24>
 8007a14:	002c      	movs	r4, r5
 8007a16:	686d      	ldr	r5, [r5, #4]
 8007a18:	e7af      	b.n	800797a <_malloc_r+0x3a>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	0030      	movs	r0, r6
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	f000 f84e 	bl	8007ac0 <__malloc_unlock>
 8007a24:	e7cd      	b.n	80079c2 <_malloc_r+0x82>
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	2000025c 	.word	0x2000025c

08007a2c <_realloc_r>:
 8007a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a2e:	0007      	movs	r7, r0
 8007a30:	000e      	movs	r6, r1
 8007a32:	0014      	movs	r4, r2
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d105      	bne.n	8007a44 <_realloc_r+0x18>
 8007a38:	0011      	movs	r1, r2
 8007a3a:	f7ff ff81 	bl	8007940 <_malloc_r>
 8007a3e:	0005      	movs	r5, r0
 8007a40:	0028      	movs	r0, r5
 8007a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d103      	bne.n	8007a50 <_realloc_r+0x24>
 8007a48:	f7ff ff0e 	bl	8007868 <_free_r>
 8007a4c:	0025      	movs	r5, r4
 8007a4e:	e7f7      	b.n	8007a40 <_realloc_r+0x14>
 8007a50:	f000 f83e 	bl	8007ad0 <_malloc_usable_size_r>
 8007a54:	9001      	str	r0, [sp, #4]
 8007a56:	4284      	cmp	r4, r0
 8007a58:	d803      	bhi.n	8007a62 <_realloc_r+0x36>
 8007a5a:	0035      	movs	r5, r6
 8007a5c:	0843      	lsrs	r3, r0, #1
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	d3ee      	bcc.n	8007a40 <_realloc_r+0x14>
 8007a62:	0021      	movs	r1, r4
 8007a64:	0038      	movs	r0, r7
 8007a66:	f7ff ff6b 	bl	8007940 <_malloc_r>
 8007a6a:	1e05      	subs	r5, r0, #0
 8007a6c:	d0e8      	beq.n	8007a40 <_realloc_r+0x14>
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	0022      	movs	r2, r4
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d900      	bls.n	8007a78 <_realloc_r+0x4c>
 8007a76:	001a      	movs	r2, r3
 8007a78:	0031      	movs	r1, r6
 8007a7a:	0028      	movs	r0, r5
 8007a7c:	f7ff fed7 	bl	800782e <memcpy>
 8007a80:	0031      	movs	r1, r6
 8007a82:	0038      	movs	r0, r7
 8007a84:	f7ff fef0 	bl	8007868 <_free_r>
 8007a88:	e7da      	b.n	8007a40 <_realloc_r+0x14>
	...

08007a8c <_sbrk_r>:
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	b570      	push	{r4, r5, r6, lr}
 8007a90:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_sbrk_r+0x20>)
 8007a92:	0004      	movs	r4, r0
 8007a94:	0008      	movs	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7ff fa82 	bl	8006fa0 <_sbrk>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d103      	bne.n	8007aa8 <_sbrk_r+0x1c>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d000      	beq.n	8007aa8 <_sbrk_r+0x1c>
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	20000264 	.word	0x20000264

08007ab0 <__malloc_lock>:
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4802      	ldr	r0, [pc, #8]	; (8007abc <__malloc_lock+0xc>)
 8007ab4:	f000 f814 	bl	8007ae0 <__retarget_lock_acquire_recursive>
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	20000268 	.word	0x20000268

08007ac0 <__malloc_unlock>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4802      	ldr	r0, [pc, #8]	; (8007acc <__malloc_unlock+0xc>)
 8007ac4:	f000 f80d 	bl	8007ae2 <__retarget_lock_release_recursive>
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	20000268 	.word	0x20000268

08007ad0 <_malloc_usable_size_r>:
 8007ad0:	1f0b      	subs	r3, r1, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	1f18      	subs	r0, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da01      	bge.n	8007ade <_malloc_usable_size_r+0xe>
 8007ada:	580b      	ldr	r3, [r1, r0]
 8007adc:	18c0      	adds	r0, r0, r3
 8007ade:	4770      	bx	lr

08007ae0 <__retarget_lock_acquire_recursive>:
 8007ae0:	4770      	bx	lr

08007ae2 <__retarget_lock_release_recursive>:
 8007ae2:	4770      	bx	lr

08007ae4 <_init>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr

08007af0 <_fini>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr
