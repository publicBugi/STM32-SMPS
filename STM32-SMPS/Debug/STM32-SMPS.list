
STM32-SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a0  080079a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000078  08007a20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08007a20  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014152  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002831  00000000  00000000  000341f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00037b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018451  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bf5  00000000  00000000  00050ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d67b  00000000  00000000  00064be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  001022b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007710 	.word	0x08007710

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08007710 	.word	0x08007710

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f81e 	bl	80002a0 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_f2uiz>:
 8000270:	219e      	movs	r1, #158	; 0x9e
 8000272:	b510      	push	{r4, lr}
 8000274:	05c9      	lsls	r1, r1, #23
 8000276:	1c04      	adds	r4, r0, #0
 8000278:	f000 fc50 	bl	8000b1c <__aeabi_fcmpge>
 800027c:	2800      	cmp	r0, #0
 800027e:	d103      	bne.n	8000288 <__aeabi_f2uiz+0x18>
 8000280:	1c20      	adds	r0, r4, #0
 8000282:	f000 fbad 	bl	80009e0 <__aeabi_f2iz>
 8000286:	bd10      	pop	{r4, pc}
 8000288:	219e      	movs	r1, #158	; 0x9e
 800028a:	1c20      	adds	r0, r4, #0
 800028c:	05c9      	lsls	r1, r1, #23
 800028e:	f000 f9f9 	bl	8000684 <__aeabi_fsub>
 8000292:	f000 fba5 	bl	80009e0 <__aeabi_f2iz>
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	061b      	lsls	r3, r3, #24
 800029a:	469c      	mov	ip, r3
 800029c:	4460      	add	r0, ip
 800029e:	e7f2      	b.n	8000286 <__aeabi_f2uiz+0x16>

080002a0 <__udivmoddi4>:
 80002a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a2:	4657      	mov	r7, sl
 80002a4:	464e      	mov	r6, r9
 80002a6:	4645      	mov	r5, r8
 80002a8:	46de      	mov	lr, fp
 80002aa:	b5e0      	push	{r5, r6, r7, lr}
 80002ac:	0004      	movs	r4, r0
 80002ae:	000d      	movs	r5, r1
 80002b0:	4692      	mov	sl, r2
 80002b2:	4699      	mov	r9, r3
 80002b4:	b083      	sub	sp, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d830      	bhi.n	800031c <__udivmoddi4+0x7c>
 80002ba:	d02d      	beq.n	8000318 <__udivmoddi4+0x78>
 80002bc:	4649      	mov	r1, r9
 80002be:	4650      	mov	r0, sl
 80002c0:	f000 fc54 	bl	8000b6c <__clzdi2>
 80002c4:	0029      	movs	r1, r5
 80002c6:	0006      	movs	r6, r0
 80002c8:	0020      	movs	r0, r4
 80002ca:	f000 fc4f 	bl	8000b6c <__clzdi2>
 80002ce:	1a33      	subs	r3, r6, r0
 80002d0:	4698      	mov	r8, r3
 80002d2:	3b20      	subs	r3, #32
 80002d4:	469b      	mov	fp, r3
 80002d6:	d433      	bmi.n	8000340 <__udivmoddi4+0xa0>
 80002d8:	465a      	mov	r2, fp
 80002da:	4653      	mov	r3, sl
 80002dc:	4093      	lsls	r3, r2
 80002de:	4642      	mov	r2, r8
 80002e0:	001f      	movs	r7, r3
 80002e2:	4653      	mov	r3, sl
 80002e4:	4093      	lsls	r3, r2
 80002e6:	001e      	movs	r6, r3
 80002e8:	42af      	cmp	r7, r5
 80002ea:	d83a      	bhi.n	8000362 <__udivmoddi4+0xc2>
 80002ec:	42af      	cmp	r7, r5
 80002ee:	d100      	bne.n	80002f2 <__udivmoddi4+0x52>
 80002f0:	e078      	b.n	80003e4 <__udivmoddi4+0x144>
 80002f2:	465b      	mov	r3, fp
 80002f4:	1ba4      	subs	r4, r4, r6
 80002f6:	41bd      	sbcs	r5, r7
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da00      	bge.n	80002fe <__udivmoddi4+0x5e>
 80002fc:	e075      	b.n	80003ea <__udivmoddi4+0x14a>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	465a      	mov	r2, fp
 800030a:	4093      	lsls	r3, r2
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	2301      	movs	r3, #1
 8000310:	4642      	mov	r2, r8
 8000312:	4093      	lsls	r3, r2
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	e028      	b.n	800036a <__udivmoddi4+0xca>
 8000318:	4282      	cmp	r2, r0
 800031a:	d9cf      	bls.n	80002bc <__udivmoddi4+0x1c>
 800031c:	2200      	movs	r2, #0
 800031e:	2300      	movs	r3, #0
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <__udivmoddi4+0x8e>
 800032a:	601c      	str	r4, [r3, #0]
 800032c:	605d      	str	r5, [r3, #4]
 800032e:	9800      	ldr	r0, [sp, #0]
 8000330:	9901      	ldr	r1, [sp, #4]
 8000332:	b003      	add	sp, #12
 8000334:	bcf0      	pop	{r4, r5, r6, r7}
 8000336:	46bb      	mov	fp, r7
 8000338:	46b2      	mov	sl, r6
 800033a:	46a9      	mov	r9, r5
 800033c:	46a0      	mov	r8, r4
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000340:	4642      	mov	r2, r8
 8000342:	2320      	movs	r3, #32
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	4652      	mov	r2, sl
 8000348:	40da      	lsrs	r2, r3
 800034a:	4641      	mov	r1, r8
 800034c:	0013      	movs	r3, r2
 800034e:	464a      	mov	r2, r9
 8000350:	408a      	lsls	r2, r1
 8000352:	0017      	movs	r7, r2
 8000354:	4642      	mov	r2, r8
 8000356:	431f      	orrs	r7, r3
 8000358:	4653      	mov	r3, sl
 800035a:	4093      	lsls	r3, r2
 800035c:	001e      	movs	r6, r3
 800035e:	42af      	cmp	r7, r5
 8000360:	d9c4      	bls.n	80002ec <__udivmoddi4+0x4c>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	4643      	mov	r3, r8
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0d9      	beq.n	8000324 <__udivmoddi4+0x84>
 8000370:	07fb      	lsls	r3, r7, #31
 8000372:	0872      	lsrs	r2, r6, #1
 8000374:	431a      	orrs	r2, r3
 8000376:	4646      	mov	r6, r8
 8000378:	087b      	lsrs	r3, r7, #1
 800037a:	e00e      	b.n	800039a <__udivmoddi4+0xfa>
 800037c:	42ab      	cmp	r3, r5
 800037e:	d101      	bne.n	8000384 <__udivmoddi4+0xe4>
 8000380:	42a2      	cmp	r2, r4
 8000382:	d80c      	bhi.n	800039e <__udivmoddi4+0xfe>
 8000384:	1aa4      	subs	r4, r4, r2
 8000386:	419d      	sbcs	r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	1924      	adds	r4, r4, r4
 800038c:	416d      	adcs	r5, r5
 800038e:	2100      	movs	r1, #0
 8000390:	3e01      	subs	r6, #1
 8000392:	1824      	adds	r4, r4, r0
 8000394:	414d      	adcs	r5, r1
 8000396:	2e00      	cmp	r6, #0
 8000398:	d006      	beq.n	80003a8 <__udivmoddi4+0x108>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d9ee      	bls.n	800037c <__udivmoddi4+0xdc>
 800039e:	3e01      	subs	r6, #1
 80003a0:	1924      	adds	r4, r4, r4
 80003a2:	416d      	adcs	r5, r5
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d1f8      	bne.n	800039a <__udivmoddi4+0xfa>
 80003a8:	9800      	ldr	r0, [sp, #0]
 80003aa:	9901      	ldr	r1, [sp, #4]
 80003ac:	465b      	mov	r3, fp
 80003ae:	1900      	adds	r0, r0, r4
 80003b0:	4169      	adcs	r1, r5
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	db24      	blt.n	8000400 <__udivmoddi4+0x160>
 80003b6:	002b      	movs	r3, r5
 80003b8:	465a      	mov	r2, fp
 80003ba:	4644      	mov	r4, r8
 80003bc:	40d3      	lsrs	r3, r2
 80003be:	002a      	movs	r2, r5
 80003c0:	40e2      	lsrs	r2, r4
 80003c2:	001c      	movs	r4, r3
 80003c4:	465b      	mov	r3, fp
 80003c6:	0015      	movs	r5, r2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	db2a      	blt.n	8000422 <__udivmoddi4+0x182>
 80003cc:	0026      	movs	r6, r4
 80003ce:	409e      	lsls	r6, r3
 80003d0:	0033      	movs	r3, r6
 80003d2:	0026      	movs	r6, r4
 80003d4:	4647      	mov	r7, r8
 80003d6:	40be      	lsls	r6, r7
 80003d8:	0032      	movs	r2, r6
 80003da:	1a80      	subs	r0, r0, r2
 80003dc:	4199      	sbcs	r1, r3
 80003de:	9000      	str	r0, [sp, #0]
 80003e0:	9101      	str	r1, [sp, #4]
 80003e2:	e79f      	b.n	8000324 <__udivmoddi4+0x84>
 80003e4:	42a3      	cmp	r3, r4
 80003e6:	d8bc      	bhi.n	8000362 <__udivmoddi4+0xc2>
 80003e8:	e783      	b.n	80002f2 <__udivmoddi4+0x52>
 80003ea:	4642      	mov	r2, r8
 80003ec:	2320      	movs	r3, #32
 80003ee:	2100      	movs	r1, #0
 80003f0:	1a9b      	subs	r3, r3, r2
 80003f2:	2200      	movs	r2, #0
 80003f4:	9100      	str	r1, [sp, #0]
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	2201      	movs	r2, #1
 80003fa:	40da      	lsrs	r2, r3
 80003fc:	9201      	str	r2, [sp, #4]
 80003fe:	e786      	b.n	800030e <__udivmoddi4+0x6e>
 8000400:	4642      	mov	r2, r8
 8000402:	2320      	movs	r3, #32
 8000404:	1a9b      	subs	r3, r3, r2
 8000406:	002a      	movs	r2, r5
 8000408:	4646      	mov	r6, r8
 800040a:	409a      	lsls	r2, r3
 800040c:	0023      	movs	r3, r4
 800040e:	40f3      	lsrs	r3, r6
 8000410:	4644      	mov	r4, r8
 8000412:	4313      	orrs	r3, r2
 8000414:	002a      	movs	r2, r5
 8000416:	40e2      	lsrs	r2, r4
 8000418:	001c      	movs	r4, r3
 800041a:	465b      	mov	r3, fp
 800041c:	0015      	movs	r5, r2
 800041e:	2b00      	cmp	r3, #0
 8000420:	dad4      	bge.n	80003cc <__udivmoddi4+0x12c>
 8000422:	4642      	mov	r2, r8
 8000424:	002f      	movs	r7, r5
 8000426:	2320      	movs	r3, #32
 8000428:	0026      	movs	r6, r4
 800042a:	4097      	lsls	r7, r2
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	40de      	lsrs	r6, r3
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7cd      	b.n	80003d2 <__udivmoddi4+0x132>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fmul>:
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	464f      	mov	r7, r9
 800043c:	4646      	mov	r6, r8
 800043e:	46d6      	mov	lr, sl
 8000440:	0244      	lsls	r4, r0, #9
 8000442:	0045      	lsls	r5, r0, #1
 8000444:	b5c0      	push	{r6, r7, lr}
 8000446:	0a64      	lsrs	r4, r4, #9
 8000448:	1c0f      	adds	r7, r1, #0
 800044a:	0e2d      	lsrs	r5, r5, #24
 800044c:	0fc6      	lsrs	r6, r0, #31
 800044e:	2d00      	cmp	r5, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_fmul+0x1c>
 8000452:	e08d      	b.n	8000570 <__aeabi_fmul+0x138>
 8000454:	2dff      	cmp	r5, #255	; 0xff
 8000456:	d100      	bne.n	800045a <__aeabi_fmul+0x22>
 8000458:	e092      	b.n	8000580 <__aeabi_fmul+0x148>
 800045a:	2300      	movs	r3, #0
 800045c:	2080      	movs	r0, #128	; 0x80
 800045e:	4699      	mov	r9, r3
 8000460:	469a      	mov	sl, r3
 8000462:	00e4      	lsls	r4, r4, #3
 8000464:	04c0      	lsls	r0, r0, #19
 8000466:	4304      	orrs	r4, r0
 8000468:	3d7f      	subs	r5, #127	; 0x7f
 800046a:	0278      	lsls	r0, r7, #9
 800046c:	0a43      	lsrs	r3, r0, #9
 800046e:	4698      	mov	r8, r3
 8000470:	007b      	lsls	r3, r7, #1
 8000472:	0e1b      	lsrs	r3, r3, #24
 8000474:	0fff      	lsrs	r7, r7, #31
 8000476:	2b00      	cmp	r3, #0
 8000478:	d100      	bne.n	800047c <__aeabi_fmul+0x44>
 800047a:	e070      	b.n	800055e <__aeabi_fmul+0x126>
 800047c:	2bff      	cmp	r3, #255	; 0xff
 800047e:	d100      	bne.n	8000482 <__aeabi_fmul+0x4a>
 8000480:	e086      	b.n	8000590 <__aeabi_fmul+0x158>
 8000482:	4642      	mov	r2, r8
 8000484:	00d0      	lsls	r0, r2, #3
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	3b7f      	subs	r3, #127	; 0x7f
 800048a:	18ed      	adds	r5, r5, r3
 800048c:	2300      	movs	r3, #0
 800048e:	04d2      	lsls	r2, r2, #19
 8000490:	4302      	orrs	r2, r0
 8000492:	4690      	mov	r8, r2
 8000494:	469c      	mov	ip, r3
 8000496:	0031      	movs	r1, r6
 8000498:	464b      	mov	r3, r9
 800049a:	4079      	eors	r1, r7
 800049c:	1c68      	adds	r0, r5, #1
 800049e:	2b0f      	cmp	r3, #15
 80004a0:	d81c      	bhi.n	80004dc <__aeabi_fmul+0xa4>
 80004a2:	4a76      	ldr	r2, [pc, #472]	; (800067c <__aeabi_fmul+0x244>)
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	58d3      	ldr	r3, [r2, r3]
 80004a8:	469f      	mov	pc, r3
 80004aa:	0039      	movs	r1, r7
 80004ac:	4644      	mov	r4, r8
 80004ae:	46e2      	mov	sl, ip
 80004b0:	4653      	mov	r3, sl
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d00f      	beq.n	80004d6 <__aeabi_fmul+0x9e>
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d100      	bne.n	80004bc <__aeabi_fmul+0x84>
 80004ba:	e0d7      	b.n	800066c <__aeabi_fmul+0x234>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d137      	bne.n	8000530 <__aeabi_fmul+0xf8>
 80004c0:	2000      	movs	r0, #0
 80004c2:	2400      	movs	r4, #0
 80004c4:	05c0      	lsls	r0, r0, #23
 80004c6:	4320      	orrs	r0, r4
 80004c8:	07c9      	lsls	r1, r1, #31
 80004ca:	4308      	orrs	r0, r1
 80004cc:	bce0      	pop	{r5, r6, r7}
 80004ce:	46ba      	mov	sl, r7
 80004d0:	46b1      	mov	r9, r6
 80004d2:	46a8      	mov	r8, r5
 80004d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d6:	20ff      	movs	r0, #255	; 0xff
 80004d8:	2400      	movs	r4, #0
 80004da:	e7f3      	b.n	80004c4 <__aeabi_fmul+0x8c>
 80004dc:	0c26      	lsrs	r6, r4, #16
 80004de:	0424      	lsls	r4, r4, #16
 80004e0:	0c22      	lsrs	r2, r4, #16
 80004e2:	4644      	mov	r4, r8
 80004e4:	0424      	lsls	r4, r4, #16
 80004e6:	0c24      	lsrs	r4, r4, #16
 80004e8:	4643      	mov	r3, r8
 80004ea:	0027      	movs	r7, r4
 80004ec:	0c1b      	lsrs	r3, r3, #16
 80004ee:	4357      	muls	r7, r2
 80004f0:	4374      	muls	r4, r6
 80004f2:	435a      	muls	r2, r3
 80004f4:	435e      	muls	r6, r3
 80004f6:	1912      	adds	r2, r2, r4
 80004f8:	0c3b      	lsrs	r3, r7, #16
 80004fa:	189b      	adds	r3, r3, r2
 80004fc:	429c      	cmp	r4, r3
 80004fe:	d903      	bls.n	8000508 <__aeabi_fmul+0xd0>
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	0252      	lsls	r2, r2, #9
 8000504:	4694      	mov	ip, r2
 8000506:	4466      	add	r6, ip
 8000508:	043f      	lsls	r7, r7, #16
 800050a:	041a      	lsls	r2, r3, #16
 800050c:	0c3f      	lsrs	r7, r7, #16
 800050e:	19d2      	adds	r2, r2, r7
 8000510:	0194      	lsls	r4, r2, #6
 8000512:	1e67      	subs	r7, r4, #1
 8000514:	41bc      	sbcs	r4, r7
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	0e92      	lsrs	r2, r2, #26
 800051a:	199b      	adds	r3, r3, r6
 800051c:	4314      	orrs	r4, r2
 800051e:	019b      	lsls	r3, r3, #6
 8000520:	431c      	orrs	r4, r3
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	d400      	bmi.n	8000528 <__aeabi_fmul+0xf0>
 8000526:	e09b      	b.n	8000660 <__aeabi_fmul+0x228>
 8000528:	2301      	movs	r3, #1
 800052a:	0862      	lsrs	r2, r4, #1
 800052c:	401c      	ands	r4, r3
 800052e:	4314      	orrs	r4, r2
 8000530:	0002      	movs	r2, r0
 8000532:	327f      	adds	r2, #127	; 0x7f
 8000534:	2a00      	cmp	r2, #0
 8000536:	dd64      	ble.n	8000602 <__aeabi_fmul+0x1ca>
 8000538:	0763      	lsls	r3, r4, #29
 800053a:	d004      	beq.n	8000546 <__aeabi_fmul+0x10e>
 800053c:	230f      	movs	r3, #15
 800053e:	4023      	ands	r3, r4
 8000540:	2b04      	cmp	r3, #4
 8000542:	d000      	beq.n	8000546 <__aeabi_fmul+0x10e>
 8000544:	3404      	adds	r4, #4
 8000546:	0123      	lsls	r3, r4, #4
 8000548:	d503      	bpl.n	8000552 <__aeabi_fmul+0x11a>
 800054a:	0002      	movs	r2, r0
 800054c:	4b4c      	ldr	r3, [pc, #304]	; (8000680 <__aeabi_fmul+0x248>)
 800054e:	3280      	adds	r2, #128	; 0x80
 8000550:	401c      	ands	r4, r3
 8000552:	2afe      	cmp	r2, #254	; 0xfe
 8000554:	dcbf      	bgt.n	80004d6 <__aeabi_fmul+0x9e>
 8000556:	01a4      	lsls	r4, r4, #6
 8000558:	0a64      	lsrs	r4, r4, #9
 800055a:	b2d0      	uxtb	r0, r2
 800055c:	e7b2      	b.n	80004c4 <__aeabi_fmul+0x8c>
 800055e:	4643      	mov	r3, r8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d13d      	bne.n	80005e0 <__aeabi_fmul+0x1a8>
 8000564:	464a      	mov	r2, r9
 8000566:	3301      	adds	r3, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	4691      	mov	r9, r2
 800056c:	469c      	mov	ip, r3
 800056e:	e792      	b.n	8000496 <__aeabi_fmul+0x5e>
 8000570:	2c00      	cmp	r4, #0
 8000572:	d129      	bne.n	80005c8 <__aeabi_fmul+0x190>
 8000574:	2304      	movs	r3, #4
 8000576:	4699      	mov	r9, r3
 8000578:	3b03      	subs	r3, #3
 800057a:	2500      	movs	r5, #0
 800057c:	469a      	mov	sl, r3
 800057e:	e774      	b.n	800046a <__aeabi_fmul+0x32>
 8000580:	2c00      	cmp	r4, #0
 8000582:	d11b      	bne.n	80005bc <__aeabi_fmul+0x184>
 8000584:	2308      	movs	r3, #8
 8000586:	4699      	mov	r9, r3
 8000588:	3b06      	subs	r3, #6
 800058a:	25ff      	movs	r5, #255	; 0xff
 800058c:	469a      	mov	sl, r3
 800058e:	e76c      	b.n	800046a <__aeabi_fmul+0x32>
 8000590:	4643      	mov	r3, r8
 8000592:	35ff      	adds	r5, #255	; 0xff
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10b      	bne.n	80005b0 <__aeabi_fmul+0x178>
 8000598:	2302      	movs	r3, #2
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4691      	mov	r9, r2
 80005a0:	469c      	mov	ip, r3
 80005a2:	e778      	b.n	8000496 <__aeabi_fmul+0x5e>
 80005a4:	4653      	mov	r3, sl
 80005a6:	0031      	movs	r1, r6
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d000      	beq.n	80005ae <__aeabi_fmul+0x176>
 80005ac:	e783      	b.n	80004b6 <__aeabi_fmul+0x7e>
 80005ae:	e792      	b.n	80004d6 <__aeabi_fmul+0x9e>
 80005b0:	2303      	movs	r3, #3
 80005b2:	464a      	mov	r2, r9
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4691      	mov	r9, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	e76c      	b.n	8000496 <__aeabi_fmul+0x5e>
 80005bc:	230c      	movs	r3, #12
 80005be:	4699      	mov	r9, r3
 80005c0:	3b09      	subs	r3, #9
 80005c2:	25ff      	movs	r5, #255	; 0xff
 80005c4:	469a      	mov	sl, r3
 80005c6:	e750      	b.n	800046a <__aeabi_fmul+0x32>
 80005c8:	0020      	movs	r0, r4
 80005ca:	f000 fab1 	bl	8000b30 <__clzsi2>
 80005ce:	2576      	movs	r5, #118	; 0x76
 80005d0:	1f43      	subs	r3, r0, #5
 80005d2:	409c      	lsls	r4, r3
 80005d4:	2300      	movs	r3, #0
 80005d6:	426d      	negs	r5, r5
 80005d8:	4699      	mov	r9, r3
 80005da:	469a      	mov	sl, r3
 80005dc:	1a2d      	subs	r5, r5, r0
 80005de:	e744      	b.n	800046a <__aeabi_fmul+0x32>
 80005e0:	4640      	mov	r0, r8
 80005e2:	f000 faa5 	bl	8000b30 <__clzsi2>
 80005e6:	4642      	mov	r2, r8
 80005e8:	1f43      	subs	r3, r0, #5
 80005ea:	409a      	lsls	r2, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	1a2d      	subs	r5, r5, r0
 80005f0:	4690      	mov	r8, r2
 80005f2:	469c      	mov	ip, r3
 80005f4:	3d76      	subs	r5, #118	; 0x76
 80005f6:	e74e      	b.n	8000496 <__aeabi_fmul+0x5e>
 80005f8:	2480      	movs	r4, #128	; 0x80
 80005fa:	2100      	movs	r1, #0
 80005fc:	20ff      	movs	r0, #255	; 0xff
 80005fe:	03e4      	lsls	r4, r4, #15
 8000600:	e760      	b.n	80004c4 <__aeabi_fmul+0x8c>
 8000602:	2301      	movs	r3, #1
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2b1b      	cmp	r3, #27
 8000608:	dd00      	ble.n	800060c <__aeabi_fmul+0x1d4>
 800060a:	e759      	b.n	80004c0 <__aeabi_fmul+0x88>
 800060c:	0022      	movs	r2, r4
 800060e:	309e      	adds	r0, #158	; 0x9e
 8000610:	40da      	lsrs	r2, r3
 8000612:	4084      	lsls	r4, r0
 8000614:	0013      	movs	r3, r2
 8000616:	1e62      	subs	r2, r4, #1
 8000618:	4194      	sbcs	r4, r2
 800061a:	431c      	orrs	r4, r3
 800061c:	0763      	lsls	r3, r4, #29
 800061e:	d004      	beq.n	800062a <__aeabi_fmul+0x1f2>
 8000620:	230f      	movs	r3, #15
 8000622:	4023      	ands	r3, r4
 8000624:	2b04      	cmp	r3, #4
 8000626:	d000      	beq.n	800062a <__aeabi_fmul+0x1f2>
 8000628:	3404      	adds	r4, #4
 800062a:	0163      	lsls	r3, r4, #5
 800062c:	d51a      	bpl.n	8000664 <__aeabi_fmul+0x22c>
 800062e:	2001      	movs	r0, #1
 8000630:	2400      	movs	r4, #0
 8000632:	e747      	b.n	80004c4 <__aeabi_fmul+0x8c>
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	03c0      	lsls	r0, r0, #15
 8000638:	4204      	tst	r4, r0
 800063a:	d009      	beq.n	8000650 <__aeabi_fmul+0x218>
 800063c:	4643      	mov	r3, r8
 800063e:	4203      	tst	r3, r0
 8000640:	d106      	bne.n	8000650 <__aeabi_fmul+0x218>
 8000642:	4644      	mov	r4, r8
 8000644:	4304      	orrs	r4, r0
 8000646:	0264      	lsls	r4, r4, #9
 8000648:	0039      	movs	r1, r7
 800064a:	20ff      	movs	r0, #255	; 0xff
 800064c:	0a64      	lsrs	r4, r4, #9
 800064e:	e739      	b.n	80004c4 <__aeabi_fmul+0x8c>
 8000650:	2080      	movs	r0, #128	; 0x80
 8000652:	03c0      	lsls	r0, r0, #15
 8000654:	4304      	orrs	r4, r0
 8000656:	0264      	lsls	r4, r4, #9
 8000658:	0031      	movs	r1, r6
 800065a:	20ff      	movs	r0, #255	; 0xff
 800065c:	0a64      	lsrs	r4, r4, #9
 800065e:	e731      	b.n	80004c4 <__aeabi_fmul+0x8c>
 8000660:	0028      	movs	r0, r5
 8000662:	e765      	b.n	8000530 <__aeabi_fmul+0xf8>
 8000664:	01a4      	lsls	r4, r4, #6
 8000666:	2000      	movs	r0, #0
 8000668:	0a64      	lsrs	r4, r4, #9
 800066a:	e72b      	b.n	80004c4 <__aeabi_fmul+0x8c>
 800066c:	2080      	movs	r0, #128	; 0x80
 800066e:	03c0      	lsls	r0, r0, #15
 8000670:	4304      	orrs	r4, r0
 8000672:	0264      	lsls	r4, r4, #9
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	0a64      	lsrs	r4, r4, #9
 8000678:	e724      	b.n	80004c4 <__aeabi_fmul+0x8c>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	08007758 	.word	0x08007758
 8000680:	f7ffffff 	.word	0xf7ffffff

08000684 <__aeabi_fsub>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	46ce      	mov	lr, r9
 8000688:	4647      	mov	r7, r8
 800068a:	0243      	lsls	r3, r0, #9
 800068c:	0a5b      	lsrs	r3, r3, #9
 800068e:	024e      	lsls	r6, r1, #9
 8000690:	00da      	lsls	r2, r3, #3
 8000692:	4694      	mov	ip, r2
 8000694:	0a72      	lsrs	r2, r6, #9
 8000696:	4691      	mov	r9, r2
 8000698:	0045      	lsls	r5, r0, #1
 800069a:	004a      	lsls	r2, r1, #1
 800069c:	b580      	push	{r7, lr}
 800069e:	0e2d      	lsrs	r5, r5, #24
 80006a0:	001f      	movs	r7, r3
 80006a2:	0fc4      	lsrs	r4, r0, #31
 80006a4:	0e12      	lsrs	r2, r2, #24
 80006a6:	0fc9      	lsrs	r1, r1, #31
 80006a8:	09b6      	lsrs	r6, r6, #6
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d05b      	beq.n	8000766 <__aeabi_fsub+0xe2>
 80006ae:	2001      	movs	r0, #1
 80006b0:	4041      	eors	r1, r0
 80006b2:	428c      	cmp	r4, r1
 80006b4:	d039      	beq.n	800072a <__aeabi_fsub+0xa6>
 80006b6:	1aa8      	subs	r0, r5, r2
 80006b8:	2800      	cmp	r0, #0
 80006ba:	dd5a      	ble.n	8000772 <__aeabi_fsub+0xee>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	d06a      	beq.n	8000796 <__aeabi_fsub+0x112>
 80006c0:	2dff      	cmp	r5, #255	; 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fsub+0x42>
 80006c4:	e0d9      	b.n	800087a <__aeabi_fsub+0x1f6>
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4316      	orrs	r6, r2
 80006cc:	281b      	cmp	r0, #27
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_fsub+0x4e>
 80006d0:	e0e9      	b.n	80008a6 <__aeabi_fsub+0x222>
 80006d2:	2001      	movs	r0, #1
 80006d4:	4663      	mov	r3, ip
 80006d6:	1a18      	subs	r0, r3, r0
 80006d8:	0143      	lsls	r3, r0, #5
 80006da:	d400      	bmi.n	80006de <__aeabi_fsub+0x5a>
 80006dc:	e0b4      	b.n	8000848 <__aeabi_fsub+0x1c4>
 80006de:	0180      	lsls	r0, r0, #6
 80006e0:	0987      	lsrs	r7, r0, #6
 80006e2:	0038      	movs	r0, r7
 80006e4:	f000 fa24 	bl	8000b30 <__clzsi2>
 80006e8:	3805      	subs	r0, #5
 80006ea:	4087      	lsls	r7, r0
 80006ec:	4285      	cmp	r5, r0
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_fsub+0x6e>
 80006f0:	e0cc      	b.n	800088c <__aeabi_fsub+0x208>
 80006f2:	1a2d      	subs	r5, r5, r0
 80006f4:	48b5      	ldr	r0, [pc, #724]	; (80009cc <__aeabi_fsub+0x348>)
 80006f6:	4038      	ands	r0, r7
 80006f8:	0743      	lsls	r3, r0, #29
 80006fa:	d004      	beq.n	8000706 <__aeabi_fsub+0x82>
 80006fc:	230f      	movs	r3, #15
 80006fe:	4003      	ands	r3, r0
 8000700:	2b04      	cmp	r3, #4
 8000702:	d000      	beq.n	8000706 <__aeabi_fsub+0x82>
 8000704:	3004      	adds	r0, #4
 8000706:	0143      	lsls	r3, r0, #5
 8000708:	d400      	bmi.n	800070c <__aeabi_fsub+0x88>
 800070a:	e0a0      	b.n	800084e <__aeabi_fsub+0x1ca>
 800070c:	1c6a      	adds	r2, r5, #1
 800070e:	2dfe      	cmp	r5, #254	; 0xfe
 8000710:	d100      	bne.n	8000714 <__aeabi_fsub+0x90>
 8000712:	e08d      	b.n	8000830 <__aeabi_fsub+0x1ac>
 8000714:	0180      	lsls	r0, r0, #6
 8000716:	0a47      	lsrs	r7, r0, #9
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	05d0      	lsls	r0, r2, #23
 800071c:	4338      	orrs	r0, r7
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4320      	orrs	r0, r4
 8000722:	bcc0      	pop	{r6, r7}
 8000724:	46b9      	mov	r9, r7
 8000726:	46b0      	mov	r8, r6
 8000728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072a:	1aa8      	subs	r0, r5, r2
 800072c:	4680      	mov	r8, r0
 800072e:	2800      	cmp	r0, #0
 8000730:	dd45      	ble.n	80007be <__aeabi_fsub+0x13a>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d070      	beq.n	8000818 <__aeabi_fsub+0x194>
 8000736:	2dff      	cmp	r5, #255	; 0xff
 8000738:	d100      	bne.n	800073c <__aeabi_fsub+0xb8>
 800073a:	e09e      	b.n	800087a <__aeabi_fsub+0x1f6>
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	04db      	lsls	r3, r3, #19
 8000740:	431e      	orrs	r6, r3
 8000742:	4643      	mov	r3, r8
 8000744:	2b1b      	cmp	r3, #27
 8000746:	dc00      	bgt.n	800074a <__aeabi_fsub+0xc6>
 8000748:	e0d2      	b.n	80008f0 <__aeabi_fsub+0x26c>
 800074a:	2001      	movs	r0, #1
 800074c:	4460      	add	r0, ip
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d57a      	bpl.n	8000848 <__aeabi_fsub+0x1c4>
 8000752:	3501      	adds	r5, #1
 8000754:	2dff      	cmp	r5, #255	; 0xff
 8000756:	d06b      	beq.n	8000830 <__aeabi_fsub+0x1ac>
 8000758:	2301      	movs	r3, #1
 800075a:	4a9d      	ldr	r2, [pc, #628]	; (80009d0 <__aeabi_fsub+0x34c>)
 800075c:	4003      	ands	r3, r0
 800075e:	0840      	lsrs	r0, r0, #1
 8000760:	4010      	ands	r0, r2
 8000762:	4318      	orrs	r0, r3
 8000764:	e7c8      	b.n	80006f8 <__aeabi_fsub+0x74>
 8000766:	2e00      	cmp	r6, #0
 8000768:	d020      	beq.n	80007ac <__aeabi_fsub+0x128>
 800076a:	428c      	cmp	r4, r1
 800076c:	d023      	beq.n	80007b6 <__aeabi_fsub+0x132>
 800076e:	0028      	movs	r0, r5
 8000770:	38ff      	subs	r0, #255	; 0xff
 8000772:	2800      	cmp	r0, #0
 8000774:	d039      	beq.n	80007ea <__aeabi_fsub+0x166>
 8000776:	1b57      	subs	r7, r2, r5
 8000778:	2d00      	cmp	r5, #0
 800077a:	d000      	beq.n	800077e <__aeabi_fsub+0xfa>
 800077c:	e09d      	b.n	80008ba <__aeabi_fsub+0x236>
 800077e:	4663      	mov	r3, ip
 8000780:	2b00      	cmp	r3, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x102>
 8000784:	e0db      	b.n	800093e <__aeabi_fsub+0x2ba>
 8000786:	1e7b      	subs	r3, r7, #1
 8000788:	2f01      	cmp	r7, #1
 800078a:	d100      	bne.n	800078e <__aeabi_fsub+0x10a>
 800078c:	e10d      	b.n	80009aa <__aeabi_fsub+0x326>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d071      	beq.n	8000876 <__aeabi_fsub+0x1f2>
 8000792:	001f      	movs	r7, r3
 8000794:	e098      	b.n	80008c8 <__aeabi_fsub+0x244>
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0x118>
 800079a:	e0a7      	b.n	80008ec <__aeabi_fsub+0x268>
 800079c:	1e42      	subs	r2, r0, #1
 800079e:	2801      	cmp	r0, #1
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fsub+0x120>
 80007a2:	e0e6      	b.n	8000972 <__aeabi_fsub+0x2ee>
 80007a4:	28ff      	cmp	r0, #255	; 0xff
 80007a6:	d068      	beq.n	800087a <__aeabi_fsub+0x1f6>
 80007a8:	0010      	movs	r0, r2
 80007aa:	e78f      	b.n	80006cc <__aeabi_fsub+0x48>
 80007ac:	2001      	movs	r0, #1
 80007ae:	4041      	eors	r1, r0
 80007b0:	42a1      	cmp	r1, r4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fsub+0x132>
 80007b4:	e77f      	b.n	80006b6 <__aeabi_fsub+0x32>
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	4240      	negs	r0, r0
 80007ba:	4680      	mov	r8, r0
 80007bc:	44a8      	add	r8, r5
 80007be:	4640      	mov	r0, r8
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d038      	beq.n	8000836 <__aeabi_fsub+0x1b2>
 80007c4:	1b51      	subs	r1, r2, r5
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d100      	bne.n	80007cc <__aeabi_fsub+0x148>
 80007ca:	e0ae      	b.n	800092a <__aeabi_fsub+0x2a6>
 80007cc:	2aff      	cmp	r2, #255	; 0xff
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fsub+0x14e>
 80007d0:	e0df      	b.n	8000992 <__aeabi_fsub+0x30e>
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	4660      	mov	r0, ip
 80007d6:	04db      	lsls	r3, r3, #19
 80007d8:	4318      	orrs	r0, r3
 80007da:	4684      	mov	ip, r0
 80007dc:	291b      	cmp	r1, #27
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fsub+0x15e>
 80007e0:	e0d9      	b.n	8000996 <__aeabi_fsub+0x312>
 80007e2:	2001      	movs	r0, #1
 80007e4:	0015      	movs	r5, r2
 80007e6:	1980      	adds	r0, r0, r6
 80007e8:	e7b1      	b.n	800074e <__aeabi_fsub+0xca>
 80007ea:	20fe      	movs	r0, #254	; 0xfe
 80007ec:	1c6a      	adds	r2, r5, #1
 80007ee:	4210      	tst	r0, r2
 80007f0:	d171      	bne.n	80008d6 <__aeabi_fsub+0x252>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fsub+0x174>
 80007f6:	e0a6      	b.n	8000946 <__aeabi_fsub+0x2c2>
 80007f8:	4663      	mov	r3, ip
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x17c>
 80007fe:	e0d9      	b.n	80009b4 <__aeabi_fsub+0x330>
 8000800:	2200      	movs	r2, #0
 8000802:	2e00      	cmp	r6, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0x184>
 8000806:	e788      	b.n	800071a <__aeabi_fsub+0x96>
 8000808:	1b98      	subs	r0, r3, r6
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d400      	bmi.n	8000810 <__aeabi_fsub+0x18c>
 800080e:	e0e1      	b.n	80009d4 <__aeabi_fsub+0x350>
 8000810:	4663      	mov	r3, ip
 8000812:	000c      	movs	r4, r1
 8000814:	1af0      	subs	r0, r6, r3
 8000816:	e76f      	b.n	80006f8 <__aeabi_fsub+0x74>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fsub+0x19a>
 800081c:	e0b7      	b.n	800098e <__aeabi_fsub+0x30a>
 800081e:	0002      	movs	r2, r0
 8000820:	3a01      	subs	r2, #1
 8000822:	2801      	cmp	r0, #1
 8000824:	d100      	bne.n	8000828 <__aeabi_fsub+0x1a4>
 8000826:	e09c      	b.n	8000962 <__aeabi_fsub+0x2de>
 8000828:	28ff      	cmp	r0, #255	; 0xff
 800082a:	d026      	beq.n	800087a <__aeabi_fsub+0x1f6>
 800082c:	4690      	mov	r8, r2
 800082e:	e788      	b.n	8000742 <__aeabi_fsub+0xbe>
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	2700      	movs	r7, #0
 8000834:	e771      	b.n	800071a <__aeabi_fsub+0x96>
 8000836:	20fe      	movs	r0, #254	; 0xfe
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	4210      	tst	r0, r2
 800083c:	d064      	beq.n	8000908 <__aeabi_fsub+0x284>
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d0f6      	beq.n	8000830 <__aeabi_fsub+0x1ac>
 8000842:	0015      	movs	r5, r2
 8000844:	4466      	add	r6, ip
 8000846:	0870      	lsrs	r0, r6, #1
 8000848:	0743      	lsls	r3, r0, #29
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x1ca>
 800084c:	e756      	b.n	80006fc <__aeabi_fsub+0x78>
 800084e:	08c3      	lsrs	r3, r0, #3
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d012      	beq.n	800087a <__aeabi_fsub+0x1f6>
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	0a5f      	lsrs	r7, r3, #9
 8000858:	b2ea      	uxtb	r2, r5
 800085a:	e75e      	b.n	800071a <__aeabi_fsub+0x96>
 800085c:	4662      	mov	r2, ip
 800085e:	2a00      	cmp	r2, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x1e0>
 8000862:	e096      	b.n	8000992 <__aeabi_fsub+0x30e>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d008      	beq.n	800087a <__aeabi_fsub+0x1f6>
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	03d2      	lsls	r2, r2, #15
 800086c:	4213      	tst	r3, r2
 800086e:	d004      	beq.n	800087a <__aeabi_fsub+0x1f6>
 8000870:	4648      	mov	r0, r9
 8000872:	4210      	tst	r0, r2
 8000874:	d101      	bne.n	800087a <__aeabi_fsub+0x1f6>
 8000876:	000c      	movs	r4, r1
 8000878:	464b      	mov	r3, r9
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0d8      	beq.n	8000830 <__aeabi_fsub+0x1ac>
 800087e:	2780      	movs	r7, #128	; 0x80
 8000880:	03ff      	lsls	r7, r7, #15
 8000882:	431f      	orrs	r7, r3
 8000884:	027f      	lsls	r7, r7, #9
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	0a7f      	lsrs	r7, r7, #9
 800088a:	e746      	b.n	800071a <__aeabi_fsub+0x96>
 800088c:	2320      	movs	r3, #32
 800088e:	003a      	movs	r2, r7
 8000890:	1b45      	subs	r5, r0, r5
 8000892:	0038      	movs	r0, r7
 8000894:	3501      	adds	r5, #1
 8000896:	40ea      	lsrs	r2, r5
 8000898:	1b5d      	subs	r5, r3, r5
 800089a:	40a8      	lsls	r0, r5
 800089c:	1e43      	subs	r3, r0, #1
 800089e:	4198      	sbcs	r0, r3
 80008a0:	2500      	movs	r5, #0
 80008a2:	4310      	orrs	r0, r2
 80008a4:	e728      	b.n	80006f8 <__aeabi_fsub+0x74>
 80008a6:	2320      	movs	r3, #32
 80008a8:	1a1b      	subs	r3, r3, r0
 80008aa:	0032      	movs	r2, r6
 80008ac:	409e      	lsls	r6, r3
 80008ae:	40c2      	lsrs	r2, r0
 80008b0:	0030      	movs	r0, r6
 80008b2:	1e43      	subs	r3, r0, #1
 80008b4:	4198      	sbcs	r0, r3
 80008b6:	4310      	orrs	r0, r2
 80008b8:	e70c      	b.n	80006d4 <__aeabi_fsub+0x50>
 80008ba:	2aff      	cmp	r2, #255	; 0xff
 80008bc:	d0db      	beq.n	8000876 <__aeabi_fsub+0x1f2>
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	4660      	mov	r0, ip
 80008c2:	04db      	lsls	r3, r3, #19
 80008c4:	4318      	orrs	r0, r3
 80008c6:	4684      	mov	ip, r0
 80008c8:	2f1b      	cmp	r7, #27
 80008ca:	dd56      	ble.n	800097a <__aeabi_fsub+0x2f6>
 80008cc:	2001      	movs	r0, #1
 80008ce:	000c      	movs	r4, r1
 80008d0:	0015      	movs	r5, r2
 80008d2:	1a30      	subs	r0, r6, r0
 80008d4:	e700      	b.n	80006d8 <__aeabi_fsub+0x54>
 80008d6:	4663      	mov	r3, ip
 80008d8:	1b9f      	subs	r7, r3, r6
 80008da:	017b      	lsls	r3, r7, #5
 80008dc:	d43d      	bmi.n	800095a <__aeabi_fsub+0x2d6>
 80008de:	2f00      	cmp	r7, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fsub+0x260>
 80008e2:	e6fe      	b.n	80006e2 <__aeabi_fsub+0x5e>
 80008e4:	2400      	movs	r4, #0
 80008e6:	2200      	movs	r2, #0
 80008e8:	2700      	movs	r7, #0
 80008ea:	e716      	b.n	800071a <__aeabi_fsub+0x96>
 80008ec:	0005      	movs	r5, r0
 80008ee:	e7af      	b.n	8000850 <__aeabi_fsub+0x1cc>
 80008f0:	0032      	movs	r2, r6
 80008f2:	4643      	mov	r3, r8
 80008f4:	4641      	mov	r1, r8
 80008f6:	40da      	lsrs	r2, r3
 80008f8:	2320      	movs	r3, #32
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	409e      	lsls	r6, r3
 80008fe:	0030      	movs	r0, r6
 8000900:	1e43      	subs	r3, r0, #1
 8000902:	4198      	sbcs	r0, r3
 8000904:	4310      	orrs	r0, r2
 8000906:	e721      	b.n	800074c <__aeabi_fsub+0xc8>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d1a7      	bne.n	800085c <__aeabi_fsub+0x1d8>
 800090c:	4663      	mov	r3, ip
 800090e:	2b00      	cmp	r3, #0
 8000910:	d059      	beq.n	80009c6 <__aeabi_fsub+0x342>
 8000912:	2200      	movs	r2, #0
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x296>
 8000918:	e6ff      	b.n	800071a <__aeabi_fsub+0x96>
 800091a:	0030      	movs	r0, r6
 800091c:	4460      	add	r0, ip
 800091e:	0143      	lsls	r3, r0, #5
 8000920:	d592      	bpl.n	8000848 <__aeabi_fsub+0x1c4>
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <__aeabi_fsub+0x348>)
 8000924:	3501      	adds	r5, #1
 8000926:	4018      	ands	r0, r3
 8000928:	e78e      	b.n	8000848 <__aeabi_fsub+0x1c4>
 800092a:	4663      	mov	r3, ip
 800092c:	2b00      	cmp	r3, #0
 800092e:	d047      	beq.n	80009c0 <__aeabi_fsub+0x33c>
 8000930:	1e4b      	subs	r3, r1, #1
 8000932:	2901      	cmp	r1, #1
 8000934:	d015      	beq.n	8000962 <__aeabi_fsub+0x2de>
 8000936:	29ff      	cmp	r1, #255	; 0xff
 8000938:	d02b      	beq.n	8000992 <__aeabi_fsub+0x30e>
 800093a:	0019      	movs	r1, r3
 800093c:	e74e      	b.n	80007dc <__aeabi_fsub+0x158>
 800093e:	000c      	movs	r4, r1
 8000940:	464b      	mov	r3, r9
 8000942:	003d      	movs	r5, r7
 8000944:	e784      	b.n	8000850 <__aeabi_fsub+0x1cc>
 8000946:	4662      	mov	r2, ip
 8000948:	2a00      	cmp	r2, #0
 800094a:	d18b      	bne.n	8000864 <__aeabi_fsub+0x1e0>
 800094c:	2e00      	cmp	r6, #0
 800094e:	d192      	bne.n	8000876 <__aeabi_fsub+0x1f2>
 8000950:	2780      	movs	r7, #128	; 0x80
 8000952:	2400      	movs	r4, #0
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	03ff      	lsls	r7, r7, #15
 8000958:	e6df      	b.n	800071a <__aeabi_fsub+0x96>
 800095a:	4663      	mov	r3, ip
 800095c:	000c      	movs	r4, r1
 800095e:	1af7      	subs	r7, r6, r3
 8000960:	e6bf      	b.n	80006e2 <__aeabi_fsub+0x5e>
 8000962:	0030      	movs	r0, r6
 8000964:	4460      	add	r0, ip
 8000966:	2501      	movs	r5, #1
 8000968:	0143      	lsls	r3, r0, #5
 800096a:	d400      	bmi.n	800096e <__aeabi_fsub+0x2ea>
 800096c:	e76c      	b.n	8000848 <__aeabi_fsub+0x1c4>
 800096e:	2502      	movs	r5, #2
 8000970:	e6f2      	b.n	8000758 <__aeabi_fsub+0xd4>
 8000972:	4663      	mov	r3, ip
 8000974:	2501      	movs	r5, #1
 8000976:	1b98      	subs	r0, r3, r6
 8000978:	e6ae      	b.n	80006d8 <__aeabi_fsub+0x54>
 800097a:	2320      	movs	r3, #32
 800097c:	4664      	mov	r4, ip
 800097e:	4660      	mov	r0, ip
 8000980:	40fc      	lsrs	r4, r7
 8000982:	1bdf      	subs	r7, r3, r7
 8000984:	40b8      	lsls	r0, r7
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	4320      	orrs	r0, r4
 800098c:	e79f      	b.n	80008ce <__aeabi_fsub+0x24a>
 800098e:	0005      	movs	r5, r0
 8000990:	e75e      	b.n	8000850 <__aeabi_fsub+0x1cc>
 8000992:	464b      	mov	r3, r9
 8000994:	e771      	b.n	800087a <__aeabi_fsub+0x1f6>
 8000996:	2320      	movs	r3, #32
 8000998:	4665      	mov	r5, ip
 800099a:	4660      	mov	r0, ip
 800099c:	40cd      	lsrs	r5, r1
 800099e:	1a59      	subs	r1, r3, r1
 80009a0:	4088      	lsls	r0, r1
 80009a2:	1e43      	subs	r3, r0, #1
 80009a4:	4198      	sbcs	r0, r3
 80009a6:	4328      	orrs	r0, r5
 80009a8:	e71c      	b.n	80007e4 <__aeabi_fsub+0x160>
 80009aa:	4663      	mov	r3, ip
 80009ac:	000c      	movs	r4, r1
 80009ae:	2501      	movs	r5, #1
 80009b0:	1af0      	subs	r0, r6, r3
 80009b2:	e691      	b.n	80006d8 <__aeabi_fsub+0x54>
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d095      	beq.n	80008e4 <__aeabi_fsub+0x260>
 80009b8:	000c      	movs	r4, r1
 80009ba:	464f      	mov	r7, r9
 80009bc:	2200      	movs	r2, #0
 80009be:	e6ac      	b.n	800071a <__aeabi_fsub+0x96>
 80009c0:	464b      	mov	r3, r9
 80009c2:	000d      	movs	r5, r1
 80009c4:	e744      	b.n	8000850 <__aeabi_fsub+0x1cc>
 80009c6:	464f      	mov	r7, r9
 80009c8:	2200      	movs	r2, #0
 80009ca:	e6a6      	b.n	800071a <__aeabi_fsub+0x96>
 80009cc:	fbffffff 	.word	0xfbffffff
 80009d0:	7dffffff 	.word	0x7dffffff
 80009d4:	2800      	cmp	r0, #0
 80009d6:	d000      	beq.n	80009da <__aeabi_fsub+0x356>
 80009d8:	e736      	b.n	8000848 <__aeabi_fsub+0x1c4>
 80009da:	2400      	movs	r4, #0
 80009dc:	2700      	movs	r7, #0
 80009de:	e69c      	b.n	800071a <__aeabi_fsub+0x96>

080009e0 <__aeabi_f2iz>:
 80009e0:	0241      	lsls	r1, r0, #9
 80009e2:	0042      	lsls	r2, r0, #1
 80009e4:	0fc3      	lsrs	r3, r0, #31
 80009e6:	0a49      	lsrs	r1, r1, #9
 80009e8:	2000      	movs	r0, #0
 80009ea:	0e12      	lsrs	r2, r2, #24
 80009ec:	2a7e      	cmp	r2, #126	; 0x7e
 80009ee:	dd03      	ble.n	80009f8 <__aeabi_f2iz+0x18>
 80009f0:	2a9d      	cmp	r2, #157	; 0x9d
 80009f2:	dd02      	ble.n	80009fa <__aeabi_f2iz+0x1a>
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <__aeabi_f2iz+0x3c>)
 80009f6:	1898      	adds	r0, r3, r2
 80009f8:	4770      	bx	lr
 80009fa:	2080      	movs	r0, #128	; 0x80
 80009fc:	0400      	lsls	r0, r0, #16
 80009fe:	4301      	orrs	r1, r0
 8000a00:	2a95      	cmp	r2, #149	; 0x95
 8000a02:	dc07      	bgt.n	8000a14 <__aeabi_f2iz+0x34>
 8000a04:	2096      	movs	r0, #150	; 0x96
 8000a06:	1a82      	subs	r2, r0, r2
 8000a08:	40d1      	lsrs	r1, r2
 8000a0a:	4248      	negs	r0, r1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f3      	bne.n	80009f8 <__aeabi_f2iz+0x18>
 8000a10:	0008      	movs	r0, r1
 8000a12:	e7f1      	b.n	80009f8 <__aeabi_f2iz+0x18>
 8000a14:	3a96      	subs	r2, #150	; 0x96
 8000a16:	4091      	lsls	r1, r2
 8000a18:	e7f7      	b.n	8000a0a <__aeabi_f2iz+0x2a>
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	7fffffff 	.word	0x7fffffff

08000a20 <__aeabi_i2f>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d013      	beq.n	8000a4e <__aeabi_i2f+0x2e>
 8000a26:	17c3      	asrs	r3, r0, #31
 8000a28:	18c6      	adds	r6, r0, r3
 8000a2a:	405e      	eors	r6, r3
 8000a2c:	0fc4      	lsrs	r4, r0, #31
 8000a2e:	0030      	movs	r0, r6
 8000a30:	f000 f87e 	bl	8000b30 <__clzsi2>
 8000a34:	239e      	movs	r3, #158	; 0x9e
 8000a36:	0005      	movs	r5, r0
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	2b96      	cmp	r3, #150	; 0x96
 8000a3c:	dc0f      	bgt.n	8000a5e <__aeabi_i2f+0x3e>
 8000a3e:	2808      	cmp	r0, #8
 8000a40:	dd01      	ble.n	8000a46 <__aeabi_i2f+0x26>
 8000a42:	3d08      	subs	r5, #8
 8000a44:	40ae      	lsls	r6, r5
 8000a46:	0276      	lsls	r6, r6, #9
 8000a48:	0a76      	lsrs	r6, r6, #9
 8000a4a:	b2d8      	uxtb	r0, r3
 8000a4c:	e002      	b.n	8000a54 <__aeabi_i2f+0x34>
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	2600      	movs	r6, #0
 8000a54:	05c0      	lsls	r0, r0, #23
 8000a56:	4330      	orrs	r0, r6
 8000a58:	07e4      	lsls	r4, r4, #31
 8000a5a:	4320      	orrs	r0, r4
 8000a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a5e:	2b99      	cmp	r3, #153	; 0x99
 8000a60:	dd0c      	ble.n	8000a7c <__aeabi_i2f+0x5c>
 8000a62:	2205      	movs	r2, #5
 8000a64:	0031      	movs	r1, r6
 8000a66:	1a12      	subs	r2, r2, r0
 8000a68:	40d1      	lsrs	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	0001      	movs	r1, r0
 8000a6e:	0030      	movs	r0, r6
 8000a70:	311b      	adds	r1, #27
 8000a72:	4088      	lsls	r0, r1
 8000a74:	1e41      	subs	r1, r0, #1
 8000a76:	4188      	sbcs	r0, r1
 8000a78:	4302      	orrs	r2, r0
 8000a7a:	0016      	movs	r6, r2
 8000a7c:	2d05      	cmp	r5, #5
 8000a7e:	dc12      	bgt.n	8000aa6 <__aeabi_i2f+0x86>
 8000a80:	0031      	movs	r1, r6
 8000a82:	4f0d      	ldr	r7, [pc, #52]	; (8000ab8 <__aeabi_i2f+0x98>)
 8000a84:	4039      	ands	r1, r7
 8000a86:	0772      	lsls	r2, r6, #29
 8000a88:	d009      	beq.n	8000a9e <__aeabi_i2f+0x7e>
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	4030      	ands	r0, r6
 8000a8e:	2804      	cmp	r0, #4
 8000a90:	d005      	beq.n	8000a9e <__aeabi_i2f+0x7e>
 8000a92:	3104      	adds	r1, #4
 8000a94:	014a      	lsls	r2, r1, #5
 8000a96:	d502      	bpl.n	8000a9e <__aeabi_i2f+0x7e>
 8000a98:	239f      	movs	r3, #159	; 0x9f
 8000a9a:	4039      	ands	r1, r7
 8000a9c:	1b5b      	subs	r3, r3, r5
 8000a9e:	0189      	lsls	r1, r1, #6
 8000aa0:	0a4e      	lsrs	r6, r1, #9
 8000aa2:	b2d8      	uxtb	r0, r3
 8000aa4:	e7d6      	b.n	8000a54 <__aeabi_i2f+0x34>
 8000aa6:	1f6a      	subs	r2, r5, #5
 8000aa8:	4096      	lsls	r6, r2
 8000aaa:	0031      	movs	r1, r6
 8000aac:	4f02      	ldr	r7, [pc, #8]	; (8000ab8 <__aeabi_i2f+0x98>)
 8000aae:	4039      	ands	r1, r7
 8000ab0:	0772      	lsls	r2, r6, #29
 8000ab2:	d0f4      	beq.n	8000a9e <__aeabi_i2f+0x7e>
 8000ab4:	e7e9      	b.n	8000a8a <__aeabi_i2f+0x6a>
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	fbffffff 	.word	0xfbffffff

08000abc <__aeabi_cfrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	0008      	movs	r0, r1
 8000ac0:	4661      	mov	r1, ip
 8000ac2:	e7ff      	b.n	8000ac4 <__aeabi_cfcmpeq>

08000ac4 <__aeabi_cfcmpeq>:
 8000ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ac6:	f000 f8c9 	bl	8000c5c <__lesf2>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d401      	bmi.n	8000ad2 <__aeabi_cfcmpeq+0xe>
 8000ace:	2100      	movs	r1, #0
 8000ad0:	42c8      	cmn	r0, r1
 8000ad2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ad4 <__aeabi_fcmpeq>:
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	f000 f855 	bl	8000b84 <__eqsf2>
 8000ada:	4240      	negs	r0, r0
 8000adc:	3001      	adds	r0, #1
 8000ade:	bd10      	pop	{r4, pc}

08000ae0 <__aeabi_fcmplt>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	f000 f8bb 	bl	8000c5c <__lesf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	db01      	blt.n	8000aee <__aeabi_fcmplt+0xe>
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	2001      	movs	r0, #1
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)

08000af4 <__aeabi_fcmple>:
 8000af4:	b510      	push	{r4, lr}
 8000af6:	f000 f8b1 	bl	8000c5c <__lesf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	dd01      	ble.n	8000b02 <__aeabi_fcmple+0xe>
 8000afe:	2000      	movs	r0, #0
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	2001      	movs	r0, #1
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)

08000b08 <__aeabi_fcmpgt>:
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	f000 f861 	bl	8000bd0 <__gesf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	dc01      	bgt.n	8000b16 <__aeabi_fcmpgt+0xe>
 8000b12:	2000      	movs	r0, #0
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	2001      	movs	r0, #1
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)

08000b1c <__aeabi_fcmpge>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f857 	bl	8000bd0 <__gesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	da01      	bge.n	8000b2a <__aeabi_fcmpge+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__clzsi2>:
 8000b30:	211c      	movs	r1, #28
 8000b32:	2301      	movs	r3, #1
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d301      	bcc.n	8000b3e <__clzsi2+0xe>
 8000b3a:	0c00      	lsrs	r0, r0, #16
 8000b3c:	3910      	subs	r1, #16
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d301      	bcc.n	8000b48 <__clzsi2+0x18>
 8000b44:	0a00      	lsrs	r0, r0, #8
 8000b46:	3908      	subs	r1, #8
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d301      	bcc.n	8000b52 <__clzsi2+0x22>
 8000b4e:	0900      	lsrs	r0, r0, #4
 8000b50:	3904      	subs	r1, #4
 8000b52:	a202      	add	r2, pc, #8	; (adr r2, 8000b5c <__clzsi2+0x2c>)
 8000b54:	5c10      	ldrb	r0, [r2, r0]
 8000b56:	1840      	adds	r0, r0, r1
 8000b58:	4770      	bx	lr
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	02020304 	.word	0x02020304
 8000b60:	01010101 	.word	0x01010101
	...

08000b6c <__clzdi2>:
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d103      	bne.n	8000b7a <__clzdi2+0xe>
 8000b72:	f7ff ffdd 	bl	8000b30 <__clzsi2>
 8000b76:	3020      	adds	r0, #32
 8000b78:	e002      	b.n	8000b80 <__clzdi2+0x14>
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	f7ff ffd8 	bl	8000b30 <__clzsi2>
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <__eqsf2>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	0042      	lsls	r2, r0, #1
 8000b88:	0245      	lsls	r5, r0, #9
 8000b8a:	024e      	lsls	r6, r1, #9
 8000b8c:	004c      	lsls	r4, r1, #1
 8000b8e:	0fc3      	lsrs	r3, r0, #31
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	2001      	movs	r0, #1
 8000b94:	0e12      	lsrs	r2, r2, #24
 8000b96:	0a76      	lsrs	r6, r6, #9
 8000b98:	0e24      	lsrs	r4, r4, #24
 8000b9a:	0fc9      	lsrs	r1, r1, #31
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d006      	beq.n	8000bae <__eqsf2+0x2a>
 8000ba0:	2cff      	cmp	r4, #255	; 0xff
 8000ba2:	d003      	beq.n	8000bac <__eqsf2+0x28>
 8000ba4:	42a2      	cmp	r2, r4
 8000ba6:	d101      	bne.n	8000bac <__eqsf2+0x28>
 8000ba8:	42b5      	cmp	r5, r6
 8000baa:	d006      	beq.n	8000bba <__eqsf2+0x36>
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d1fc      	bne.n	8000bac <__eqsf2+0x28>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d1fa      	bne.n	8000bac <__eqsf2+0x28>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d1f8      	bne.n	8000bac <__eqsf2+0x28>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d006      	beq.n	8000bcc <__eqsf2+0x48>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d1f3      	bne.n	8000bac <__eqsf2+0x28>
 8000bc4:	0028      	movs	r0, r5
 8000bc6:	1e43      	subs	r3, r0, #1
 8000bc8:	4198      	sbcs	r0, r3
 8000bca:	e7ef      	b.n	8000bac <__eqsf2+0x28>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e7ed      	b.n	8000bac <__eqsf2+0x28>

08000bd0 <__gesf2>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	0042      	lsls	r2, r0, #1
 8000bd4:	0245      	lsls	r5, r0, #9
 8000bd6:	024e      	lsls	r6, r1, #9
 8000bd8:	004c      	lsls	r4, r1, #1
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a6d      	lsrs	r5, r5, #9
 8000bde:	0e12      	lsrs	r2, r2, #24
 8000be0:	0a76      	lsrs	r6, r6, #9
 8000be2:	0e24      	lsrs	r4, r4, #24
 8000be4:	0fc8      	lsrs	r0, r1, #31
 8000be6:	2aff      	cmp	r2, #255	; 0xff
 8000be8:	d01b      	beq.n	8000c22 <__gesf2+0x52>
 8000bea:	2cff      	cmp	r4, #255	; 0xff
 8000bec:	d00e      	beq.n	8000c0c <__gesf2+0x3c>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d11b      	bne.n	8000c2a <__gesf2+0x5a>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d101      	bne.n	8000bfa <__gesf2+0x2a>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d01c      	beq.n	8000c34 <__gesf2+0x64>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d00c      	beq.n	8000c18 <__gesf2+0x48>
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	d01c      	beq.n	8000c3c <__gesf2+0x6c>
 8000c02:	2102      	movs	r1, #2
 8000c04:	1e58      	subs	r0, r3, #1
 8000c06:	4008      	ands	r0, r1
 8000c08:	3801      	subs	r0, #1
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d122      	bne.n	8000c56 <__gesf2+0x86>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d1f4      	bne.n	8000bfe <__gesf2+0x2e>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1f2      	bne.n	8000bfe <__gesf2+0x2e>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f6      	bne.n	8000c0a <__gesf2+0x3a>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4240      	negs	r0, r0
 8000c20:	e7f3      	b.n	8000c0a <__gesf2+0x3a>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d117      	bne.n	8000c56 <__gesf2+0x86>
 8000c26:	2cff      	cmp	r4, #255	; 0xff
 8000c28:	d0f0      	beq.n	8000c0c <__gesf2+0x3c>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d1e7      	bne.n	8000bfe <__gesf2+0x2e>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d1e5      	bne.n	8000bfe <__gesf2+0x2e>
 8000c32:	e7e6      	b.n	8000c02 <__gesf2+0x32>
 8000c34:	2000      	movs	r0, #0
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0e7      	beq.n	8000c0a <__gesf2+0x3a>
 8000c3a:	e7e2      	b.n	8000c02 <__gesf2+0x32>
 8000c3c:	42a2      	cmp	r2, r4
 8000c3e:	dc05      	bgt.n	8000c4c <__gesf2+0x7c>
 8000c40:	dbea      	blt.n	8000c18 <__gesf2+0x48>
 8000c42:	42b5      	cmp	r5, r6
 8000c44:	d802      	bhi.n	8000c4c <__gesf2+0x7c>
 8000c46:	d3e7      	bcc.n	8000c18 <__gesf2+0x48>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7de      	b.n	8000c0a <__gesf2+0x3a>
 8000c4c:	4243      	negs	r3, r0
 8000c4e:	4158      	adcs	r0, r3
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	3801      	subs	r0, #1
 8000c54:	e7d9      	b.n	8000c0a <__gesf2+0x3a>
 8000c56:	2002      	movs	r0, #2
 8000c58:	4240      	negs	r0, r0
 8000c5a:	e7d6      	b.n	8000c0a <__gesf2+0x3a>

08000c5c <__lesf2>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	0042      	lsls	r2, r0, #1
 8000c60:	0245      	lsls	r5, r0, #9
 8000c62:	024e      	lsls	r6, r1, #9
 8000c64:	004c      	lsls	r4, r1, #1
 8000c66:	0fc3      	lsrs	r3, r0, #31
 8000c68:	0a6d      	lsrs	r5, r5, #9
 8000c6a:	0e12      	lsrs	r2, r2, #24
 8000c6c:	0a76      	lsrs	r6, r6, #9
 8000c6e:	0e24      	lsrs	r4, r4, #24
 8000c70:	0fc8      	lsrs	r0, r1, #31
 8000c72:	2aff      	cmp	r2, #255	; 0xff
 8000c74:	d00b      	beq.n	8000c8e <__lesf2+0x32>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d00d      	beq.n	8000c96 <__lesf2+0x3a>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d11f      	bne.n	8000cbe <__lesf2+0x62>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d116      	bne.n	8000cb0 <__lesf2+0x54>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d114      	bne.n	8000cb0 <__lesf2+0x54>
 8000c86:	2000      	movs	r0, #0
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d010      	beq.n	8000cae <__lesf2+0x52>
 8000c8c:	e009      	b.n	8000ca2 <__lesf2+0x46>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d10c      	bne.n	8000cac <__lesf2+0x50>
 8000c92:	2cff      	cmp	r4, #255	; 0xff
 8000c94:	d113      	bne.n	8000cbe <__lesf2+0x62>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d108      	bne.n	8000cac <__lesf2+0x50>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d008      	beq.n	8000cb0 <__lesf2+0x54>
 8000c9e:	4283      	cmp	r3, r0
 8000ca0:	d012      	beq.n	8000cc8 <__lesf2+0x6c>
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	4008      	ands	r0, r1
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e000      	b.n	8000cae <__lesf2+0x52>
 8000cac:	2002      	movs	r0, #2
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d1f4      	bne.n	8000c9e <__lesf2+0x42>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d1fa      	bne.n	8000cae <__lesf2+0x52>
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4240      	negs	r0, r0
 8000cbc:	e7f7      	b.n	8000cae <__lesf2+0x52>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1ed      	bne.n	8000c9e <__lesf2+0x42>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d1eb      	bne.n	8000c9e <__lesf2+0x42>
 8000cc6:	e7ec      	b.n	8000ca2 <__lesf2+0x46>
 8000cc8:	42a2      	cmp	r2, r4
 8000cca:	dc05      	bgt.n	8000cd8 <__lesf2+0x7c>
 8000ccc:	dbf2      	blt.n	8000cb4 <__lesf2+0x58>
 8000cce:	42b5      	cmp	r5, r6
 8000cd0:	d802      	bhi.n	8000cd8 <__lesf2+0x7c>
 8000cd2:	d3ef      	bcc.n	8000cb4 <__lesf2+0x58>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	e7ea      	b.n	8000cae <__lesf2+0x52>
 8000cd8:	4243      	negs	r3, r0
 8000cda:	4158      	adcs	r0, r3
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	3801      	subs	r0, #1
 8000ce0:	e7e5      	b.n	8000cae <__lesf2+0x52>
 8000ce2:	46c0      	nop			; (mov r8, r8)

08000ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x3c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Init+0x3c>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0049      	lsls	r1, r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f810 	bl	8000d24 <HAL_InitTick>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e001      	b.n	8000d14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f005 fdf4 	bl	80068fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_InitTick+0x88>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d02b      	beq.n	8000d94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_InitTick+0x8c>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_InitTick+0x88>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	0019      	movs	r1, r3
 8000d46:	23fa      	movs	r3, #250	; 0xfa
 8000d48:	0098      	lsls	r0, r3, #2
 8000d4a:	f7ff f9e5 	bl	8000118 <__udivsi3>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff f9e0 	bl	8000118 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f001 fa27 	bl	80021ae <HAL_SYSTICK_Config>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d112      	bne.n	8000d8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d80a      	bhi.n	8000d80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2200      	movs	r2, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 f9f6 	bl	8002164 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_InitTick+0x90>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00d      	b.n	8000d9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e008      	b.n	8000d9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e003      	b.n	8000d9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b005      	add	sp, #20
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000010 	.word	0x20000010
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	18d2      	adds	r2, r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	20000094 	.word	0x20000094

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000094 	.word	0x20000094

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff fff0 	bl	8000ddc <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001a      	movs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	189b      	adds	r3, r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	f7ff ffe0 	bl	8000ddc <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	20000004 	.word	0x20000004

08000e38 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e48:	401a      	ands	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	fe3fffff 	.word	0xfe3fffff

08000e60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	23e0      	movs	r3, #224	; 0xe0
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	4013      	ands	r3, r2
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	400a      	ands	r2, r1
 8000e90:	2107      	movs	r1, #7
 8000e92:	4091      	lsls	r1, r2
 8000e94:	000a      	movs	r2, r1
 8000e96:	43d2      	mvns	r2, r2
 8000e98:	401a      	ands	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4099      	lsls	r1, r3
 8000ea4:	000b      	movs	r3, r1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b004      	add	sp, #16
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	2107      	movs	r1, #7
 8000eca:	4091      	lsls	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	0013      	movs	r3, r2
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d101      	bne.n	8000efa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	211f      	movs	r1, #31
 8000f18:	400a      	ands	r2, r1
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	0e9b      	lsrs	r3, r3, #26
 8000f28:	210f      	movs	r1, #15
 8000f2a:	4019      	ands	r1, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	201f      	movs	r0, #31
 8000f30:	4003      	ands	r3, r0
 8000f32:	4099      	lsls	r1, r3
 8000f34:	000b      	movs	r3, r1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	035b      	lsls	r3, r3, #13
 8000f56:	0b5b      	lsrs	r3, r3, #13
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	0352      	lsls	r2, r2, #13
 8000f78:	0b52      	lsrs	r2, r2, #13
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	0212      	lsls	r2, r2, #8
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	07ffff00 	.word	0x07ffff00

08000fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	0552      	lsls	r2, r2, #21
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	6fffffe8 	.word	0x6fffffe8

08001004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	401a      	ands	r2, r3
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	055b      	lsls	r3, r3, #21
 800101a:	429a      	cmp	r2, r3
 800101c:	d101      	bne.n	8001022 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001022:	2300      	movs	r3, #0
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}

0800102c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <LL_ADC_Enable+0x20>)
 800103a:	4013      	ands	r3, r2
 800103c:	2201      	movs	r2, #1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	7fffffe8 	.word	0x7fffffe8

08001050 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <LL_ADC_Disable+0x20>)
 800105e:	4013      	ands	r3, r2
 8001060:	2202      	movs	r2, #2
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	7fffffe8 	.word	0x7fffffe8

08001074 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <LL_ADC_IsEnabled+0x18>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <LL_ADC_IsEnabled+0x1a>
 800108c:	2300      	movs	r3, #0
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d101      	bne.n	80010ae <LL_ADC_IsDisableOngoing+0x18>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_ADC_IsDisableOngoing+0x1a>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <LL_ADC_REG_StartConversion+0x20>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	2204      	movs	r2, #4
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	7fffffe8 	.word	0x7fffffe8

080010dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2204      	movs	r2, #4
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d101      	bne.n	80010f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	231f      	movs	r3, #31
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e17f      	b.n	8001426 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	0018      	movs	r0, r3
 8001132:	f005 fc07 	bl	8006944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2254      	movs	r2, #84	; 0x54
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff5b 	bl	8001004 <LL_ADC_IsInternalRegulatorEnabled>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d115      	bne.n	800117e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff40 	bl	8000fdc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800115c:	4bb4      	ldr	r3, [pc, #720]	; (8001430 <HAL_ADC_Init+0x330>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	49b4      	ldr	r1, [pc, #720]	; (8001434 <HAL_ADC_Init+0x334>)
 8001162:	0018      	movs	r0, r3
 8001164:	f7fe ffd8 	bl	8000118 <__udivsi3>
 8001168:	0003      	movs	r3, r0
 800116a:	3301      	adds	r3, #1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001170:	e002      	b.n	8001178 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3b01      	subs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ff3e 	bl	8001004 <LL_ADC_IsInternalRegulatorEnabled>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d10f      	bne.n	80011ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	2210      	movs	r2, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	2201      	movs	r2, #1
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011a4:	231f      	movs	r3, #31
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff93 	bl	80010dc <LL_ADC_REG_IsConversionOngoing>
 80011b6:	0003      	movs	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	2210      	movs	r2, #16
 80011c0:	4013      	ands	r3, r2
 80011c2:	d000      	beq.n	80011c6 <HAL_ADC_Init+0xc6>
 80011c4:	e122      	b.n	800140c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d000      	beq.n	80011ce <HAL_ADC_Init+0xce>
 80011cc:	e11e      	b.n	800140c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	4a99      	ldr	r2, [pc, #612]	; (8001438 <HAL_ADC_Init+0x338>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	2202      	movs	r2, #2
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff46 	bl	8001074 <LL_ADC_IsEnabled>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d000      	beq.n	80011ee <HAL_ADC_Init+0xee>
 80011ec:	e0ad      	b.n	800134a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e1b      	ldrb	r3, [r3, #24]
 80011f6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011f8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e5b      	ldrb	r3, [r3, #25]
 80011fe:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001200:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7e9b      	ldrb	r3, [r3, #26]
 8001206:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001208:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_ADC_Init+0x118>
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	e000      	b.n	800121a <HAL_ADC_Init+0x11a>
 8001218:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800121a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001220:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da04      	bge.n	8001234 <HAL_ADC_Init+0x134>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	e001      	b.n	8001238 <HAL_ADC_Init+0x138>
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001238:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	212c      	movs	r1, #44	; 0x2c
 800123e:	5c5b      	ldrb	r3, [r3, r1]
 8001240:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001242:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2220      	movs	r2, #32
 800124e:	5c9b      	ldrb	r3, [r3, r2]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d115      	bne.n	8001280 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e9b      	ldrb	r3, [r3, #26]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	0252      	lsls	r2, r2, #9
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e00b      	b.n	8001280 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	2220      	movs	r2, #32
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001278:	2201      	movs	r2, #1
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00a      	beq.n	800129e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128c:	23e0      	movs	r3, #224	; 0xe0
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001296:	4313      	orrs	r3, r2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_ADC_Init+0x33c>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	0f9b      	lsrs	r3, r3, #30
 80012ba:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012c0:	4313      	orrs	r3, r2
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	223c      	movs	r2, #60	; 0x3c
 80012cc:	5c9b      	ldrb	r3, [r3, r2]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d111      	bne.n	80012f6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	0f9b      	lsrs	r3, r3, #30
 80012d8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012de:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80012e4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80012ea:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	2201      	movs	r2, #1
 80012f2:	4313      	orrs	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_ADC_Init+0x340>)
 80012fe:	4013      	ands	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	430a      	orrs	r2, r1
 800130a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	061b      	lsls	r3, r3, #24
 8001314:	429a      	cmp	r2, r3
 8001316:	d018      	beq.n	800134a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	05db      	lsls	r3, r3, #23
 8001320:	429a      	cmp	r2, r3
 8001322:	d012      	beq.n	800134a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	061b      	lsls	r3, r3, #24
 800132c:	429a      	cmp	r2, r3
 800132e:	d00c      	beq.n	800134a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_ADC_Init+0x344>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a44      	ldr	r2, [pc, #272]	; (8001448 <HAL_ADC_Init+0x348>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	23f0      	movs	r3, #240	; 0xf0
 8001340:	039b      	lsls	r3, r3, #14
 8001342:	401a      	ands	r2, r3
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_ADC_Init+0x344>)
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	001a      	movs	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f7ff fd90 	bl	8000e7a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	493a      	ldr	r1, [pc, #232]	; (800144c <HAL_ADC_Init+0x34c>)
 8001364:	001a      	movs	r2, r3
 8001366:	f7ff fd88 	bl	8000e7a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2110      	movs	r1, #16
 800137e:	4249      	negs	r1, r1
 8001380:	430a      	orrs	r2, r1
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
 8001384:	e018      	b.n	80013b8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	039b      	lsls	r3, r3, #14
 800138e:	429a      	cmp	r2, r3
 8001390:	d112      	bne.n	80013b8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	3b01      	subs	r3, #1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	221c      	movs	r2, #28
 80013a2:	4013      	ands	r3, r2
 80013a4:	2210      	movs	r2, #16
 80013a6:	4252      	negs	r2, r2
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0011      	movs	r1, r2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2100      	movs	r1, #0
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fd78 	bl	8000eb4 <LL_ADC_GetSamplingTimeCommonChannels>
 80013c4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d10b      	bne.n	80013e6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	2203      	movs	r2, #3
 80013da:	4393      	bics	r3, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e4:	e01c      	b.n	8001420 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	2212      	movs	r2, #18
 80013ec:	4393      	bics	r3, r2
 80013ee:	2210      	movs	r2, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2201      	movs	r2, #1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001402:	231f      	movs	r3, #31
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800140a:	e009      	b.n	8001420 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	2210      	movs	r2, #16
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001418:	231f      	movs	r3, #31
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001420:	231f      	movs	r3, #31
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b008      	add	sp, #32
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20000010 	.word	0x20000010
 8001434:	00030d40 	.word	0x00030d40
 8001438:	fffffefd 	.word	0xfffffefd
 800143c:	fffe0201 	.word	0xfffe0201
 8001440:	1ffffc02 	.word	0x1ffffc02
 8001444:	40012708 	.word	0x40012708
 8001448:	ffc3ffff 	.word	0xffc3ffff
 800144c:	07ffff04 	.word	0x07ffff04

08001450 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fe3d 	bl	80010dc <LL_ADC_REG_IsConversionOngoing>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d15f      	bne.n	8001526 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2254      	movs	r2, #84	; 0x54
 800146a:	5c9b      	ldrb	r3, [r3, r2]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_ADC_Start_IT+0x24>
 8001470:	2302      	movs	r3, #2
 8001472:	e05f      	b.n	8001534 <HAL_ADC_Start_IT+0xe4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2254      	movs	r2, #84	; 0x54
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800147c:	250f      	movs	r5, #15
 800147e:	197c      	adds	r4, r7, r5
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f000 fb68 	bl	8001b58 <ADC_Enable>
 8001488:	0003      	movs	r3, r0
 800148a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800148c:	197b      	adds	r3, r7, r5
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d143      	bne.n	800151c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_ADC_Start_IT+0xec>)
 800149a:	4013      	ands	r3, r2
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0052      	lsls	r2, r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	221c      	movs	r2, #28
 80014b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2254      	movs	r2, #84	; 0x54
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	211c      	movs	r1, #28
 80014c8:	438a      	bics	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d108      	bne.n	80014e6 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2108      	movs	r1, #8
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
          break;
 80014e4:	e008      	b.n	80014f8 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2104      	movs	r1, #4
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
          break;
 80014f6:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2110      	movs	r1, #16
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fdcf 	bl	80010b8 <LL_ADC_REG_StartConversion>
 800151a:	e008      	b.n	800152e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2254      	movs	r2, #84	; 0x54
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]
 8001524:	e003      	b.n	800152e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001526:	230f      	movs	r3, #15
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2202      	movs	r2, #2
 800152c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781b      	ldrb	r3, [r3, #0]
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	fffff0fe 	.word	0xfffff0fe

08001540 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d017      	beq.n	80015ac <HAL_ADC_IRQHandler+0x54>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	2210      	movs	r2, #16
 800158a:	4013      	ands	r3, r2
 800158c:	d106      	bne.n	800159c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 fd24 	bl	8001fec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2204      	movs	r2, #4
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_ADC_IRQHandler+0x64>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d107      	bne.n	80015cc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2208      	movs	r2, #8
 80015c0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015c2:	d04d      	beq.n	8001660 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	d049      	beq.n	8001660 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	2210      	movs	r2, #16
 80015d2:	4013      	ands	r3, r2
 80015d4:	d106      	bne.n	80015e4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fc7a 	bl	8000ee2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d02e      	beq.n	8001650 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e9b      	ldrb	r3, [r3, #26]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12a      	bne.n	8001650 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2208      	movs	r2, #8
 8001602:	4013      	ands	r3, r2
 8001604:	2b08      	cmp	r3, #8
 8001606:	d123      	bne.n	8001650 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff fd65 	bl	80010dc <LL_ADC_REG_IsConversionOngoing>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d110      	bne.n	8001638 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	210c      	movs	r1, #12
 8001622:	438a      	bics	r2, r1
 8001624:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a56      	ldr	r2, [pc, #344]	; (8001784 <HAL_ADC_IRQHandler+0x22c>)
 800162c:	4013      	ands	r3, r2
 800162e:	2201      	movs	r2, #1
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	; 0x58
 8001636:	e00b      	b.n	8001650 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	2220      	movs	r2, #32
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2201      	movs	r2, #1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	0018      	movs	r0, r3
 8001654:	f005 f8f0 	bl	8006838 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	220c      	movs	r2, #12
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	4013      	ands	r3, r2
 8001666:	d012      	beq.n	800168e <HAL_ADC_IRQHandler+0x136>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4013      	ands	r3, r2
 800166e:	d00e      	beq.n	800168e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	0252      	lsls	r2, r2, #9
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f881 	bl	8001788 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d014      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x16a>
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d00f      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0292      	lsls	r2, r2, #10
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fc8a 	bl	8001fcc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0052      	lsls	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d014      	beq.n	80016f6 <HAL_ADC_IRQHandler+0x19e>
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d00f      	beq.n	80016f6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	02d2      	lsls	r2, r2, #11
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 fc78 	bl	8001fdc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2210      	movs	r2, #16
 80016fa:	4013      	ands	r3, r2
 80016fc:	d02b      	beq.n	8001756 <HAL_ADC_IRQHandler+0x1fe>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2210      	movs	r2, #16
 8001702:	4013      	ands	r3, r2
 8001704:	d027      	beq.n	8001756 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e008      	b.n	8001726 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fc36 	bl	8000f8a <LL_ADC_REG_GetDMATransfer>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d110      	bne.n	800174e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2202      	movs	r2, #2
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f825 	bl	8001798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	019b      	lsls	r3, r3, #6
 800175c:	4013      	ands	r3, r2
 800175e:	d00d      	beq.n	800177c <HAL_ADC_IRQHandler+0x224>
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	4013      	ands	r3, r2
 8001768:	d008      	beq.n	800177c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fc45 	bl	8001ffc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	0192      	lsls	r2, r2, #6
 800177a:	601a      	str	r2, [r3, #0]
  }
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b006      	add	sp, #24
 8001782:	bd80      	pop	{r7, pc}
 8001784:	fffffefe 	.word	0xfffffefe

08001788 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b2:	2317      	movs	r3, #23
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2254      	movs	r2, #84	; 0x54
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x24>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e1c0      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x3a6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2254      	movs	r2, #84	; 0x54
 80017d0:	2101      	movs	r1, #1
 80017d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fc7f 	bl	80010dc <LL_ADC_REG_IsConversionOngoing>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d000      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0x3c>
 80017e2:	e1a3      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d100      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x46>
 80017ec:	e143      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d004      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017fe:	4ac1      	ldr	r2, [pc, #772]	; (8001b04 <HAL_ADC_ConfigChannel+0x35c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d108      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0019      	movs	r1, r3
 800180e:	0010      	movs	r0, r2
 8001810:	f7ff fb98 	bl	8000f44 <LL_ADC_REG_SetSequencerChAdd>
 8001814:	e0c9      	b.n	80019aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	211f      	movs	r1, #31
 8001820:	400b      	ands	r3, r1
 8001822:	210f      	movs	r1, #15
 8001824:	4099      	lsls	r1, r3
 8001826:	000b      	movs	r3, r1
 8001828:	43db      	mvns	r3, r3
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	035b      	lsls	r3, r3, #13
 8001834:	0b5b      	lsrs	r3, r3, #13
 8001836:	d105      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x9c>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	221f      	movs	r2, #31
 8001840:	4013      	ands	r3, r2
 8001842:	e098      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d000      	beq.n	8001850 <HAL_ADC_ConfigChannel+0xa8>
 800184e:	e091      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1cc>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d000      	beq.n	800185c <HAL_ADC_ConfigChannel+0xb4>
 800185a:	e089      	b.n	8001970 <HAL_ADC_ConfigChannel+0x1c8>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d000      	beq.n	8001868 <HAL_ADC_ConfigChannel+0xc0>
 8001866:	e081      	b.n	800196c <HAL_ADC_ConfigChannel+0x1c4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2208      	movs	r2, #8
 800186e:	4013      	ands	r3, r2
 8001870:	d000      	beq.n	8001874 <HAL_ADC_ConfigChannel+0xcc>
 8001872:	e079      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1c0>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2210      	movs	r2, #16
 800187a:	4013      	ands	r3, r2
 800187c:	d000      	beq.n	8001880 <HAL_ADC_ConfigChannel+0xd8>
 800187e:	e071      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1bc>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2220      	movs	r2, #32
 8001886:	4013      	ands	r3, r2
 8001888:	d000      	beq.n	800188c <HAL_ADC_ConfigChannel+0xe4>
 800188a:	e069      	b.n	8001960 <HAL_ADC_ConfigChannel+0x1b8>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	4013      	ands	r3, r2
 8001894:	d000      	beq.n	8001898 <HAL_ADC_ConfigChannel+0xf0>
 8001896:	e061      	b.n	800195c <HAL_ADC_ConfigChannel+0x1b4>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	4013      	ands	r3, r2
 80018a0:	d000      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0xfc>
 80018a2:	e059      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1b0>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	d151      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1ac>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d149      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x1a8>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	d141      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1a4>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4013      	ands	r3, r2
 80018d2:	d139      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1a0>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4013      	ands	r3, r2
 80018de:	d131      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x19c>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	019b      	lsls	r3, r3, #6
 80018e8:	4013      	ands	r3, r2
 80018ea:	d129      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x198>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	d121      	bne.n	800193c <HAL_ADC_ConfigChannel+0x194>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	4013      	ands	r3, r2
 8001902:	d119      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x190>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4013      	ands	r3, r2
 800190e:	d111      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x18c>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d109      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x188>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	02db      	lsls	r3, r3, #11
 8001924:	4013      	ands	r3, r2
 8001926:	d001      	beq.n	800192c <HAL_ADC_ConfigChannel+0x184>
 8001928:	2312      	movs	r3, #18
 800192a:	e024      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	2300      	movs	r3, #0
 800192e:	e022      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	2311      	movs	r3, #17
 8001932:	e020      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001934:	2310      	movs	r3, #16
 8001936:	e01e      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001938:	230f      	movs	r3, #15
 800193a:	e01c      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 800193c:	230e      	movs	r3, #14
 800193e:	e01a      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001940:	230d      	movs	r3, #13
 8001942:	e018      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001944:	230c      	movs	r3, #12
 8001946:	e016      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001948:	230b      	movs	r3, #11
 800194a:	e014      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 800194c:	230a      	movs	r3, #10
 800194e:	e012      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001950:	2309      	movs	r3, #9
 8001952:	e010      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001954:	2308      	movs	r3, #8
 8001956:	e00e      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	2307      	movs	r3, #7
 800195a:	e00c      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 800195c:	2306      	movs	r3, #6
 800195e:	e00a      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001960:	2305      	movs	r3, #5
 8001962:	e008      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001964:	2304      	movs	r3, #4
 8001966:	e006      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001968:	2303      	movs	r3, #3
 800196a:	e004      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1ce>
 8001974:	2300      	movs	r3, #0
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	6852      	ldr	r2, [r2, #4]
 800197a:	201f      	movs	r0, #31
 800197c:	4002      	ands	r2, r0
 800197e:	4093      	lsls	r3, r2
 8001980:	000a      	movs	r2, r1
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	d808      	bhi.n	80019aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	001a      	movs	r2, r3
 80019a6:	f7ff faad 	bl	8000f04 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	001a      	movs	r2, r3
 80019b8:	f7ff faf4 	bl	8000fa4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db00      	blt.n	80019c6 <HAL_ADC_ConfigChannel+0x21e>
 80019c4:	e0bc      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fa49 	bl	8000e60 <LL_ADC_GetCommonPathInternalCh>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a4d      	ldr	r2, [pc, #308]	; (8001b0c <HAL_ADC_ConfigChannel+0x364>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d122      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e4:	d11d      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	0412      	lsls	r2, r2, #16
 80019ec:	4313      	orrs	r3, r2
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f7ff fa20 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019f8:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <HAL_ADC_ConfigChannel+0x368>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4945      	ldr	r1, [pc, #276]	; (8001b14 <HAL_ADC_ConfigChannel+0x36c>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fb8a 	bl	8000118 <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	0013      	movs	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	189b      	adds	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a12:	e002      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f9      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a20:	e08e      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a3c      	ldr	r2, [pc, #240]	; (8001b18 <HAL_ADC_ConfigChannel+0x370>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d10e      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	045b      	lsls	r3, r3, #17
 8001a32:	4013      	ands	r3, r2
 8001a34:	d109      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	0452      	lsls	r2, r2, #17
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001a40:	0019      	movs	r1, r3
 8001a42:	0010      	movs	r0, r2
 8001a44:	f7ff f9f8 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
 8001a48:	e07a      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_ADC_ConfigChannel+0x374>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d000      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x2ae>
 8001a54:	e074      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	03db      	lsls	r3, r3, #15
 8001a5c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a5e:	d000      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x2ba>
 8001a60:	e06e      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	03d2      	lsls	r2, r2, #15
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	0010      	movs	r0, r2
 8001a70:	f7ff f9e2 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
 8001a74:	e064      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d004      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_ADC_ConfigChannel+0x35c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0019      	movs	r1, r3
 8001a96:	0010      	movs	r0, r2
 8001a98:	f7ff fa65 	bl	8000f66 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da4d      	bge.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff f9da 	bl	8000e60 <LL_ADC_GetCommonPathInternalCh>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_ADC_ConfigChannel+0x364>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d108      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_ADC_ConfigChannel+0x378>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f7ff f9b7 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
 8001aca:	e039      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_ADC_ConfigChannel+0x370>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d108      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_ADC_ConfigChannel+0x37c>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	f7ff f9a9 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
 8001ae6:	e02b      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_ADC_ConfigChannel+0x374>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d126      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_ADC_ConfigChannel+0x380>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_ADC_ConfigChannel+0x360>)
 8001afa:	0019      	movs	r1, r3
 8001afc:	0010      	movs	r0, r2
 8001afe:	f7ff f99b 	bl	8000e38 <LL_ADC_SetCommonPathInternalCh>
 8001b02:	e01d      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x398>
 8001b04:	80000004 	.word	0x80000004
 8001b08:	40012708 	.word	0x40012708
 8001b0c:	b0001000 	.word	0xb0001000
 8001b10:	20000010 	.word	0x20000010
 8001b14:	00030d40 	.word	0x00030d40
 8001b18:	b8004000 	.word	0xb8004000
 8001b1c:	b4002000 	.word	0xb4002000
 8001b20:	ff7fffff 	.word	0xff7fffff
 8001b24:	feffffff 	.word	0xfeffffff
 8001b28:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	2220      	movs	r2, #32
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b38:	2317      	movs	r3, #23
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2254      	movs	r2, #84	; 0x54
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b48:	2317      	movs	r3, #23
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b006      	add	sp, #24
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)

08001b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff fa83 	bl	8001074 <LL_ADC_IsEnabled>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d000      	beq.n	8001b74 <ADC_Enable+0x1c>
 8001b72:	e069      	b.n	8001c48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <ADC_Enable+0xfc>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	2210      	movs	r2, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2201      	movs	r2, #1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e056      	b.n	8001c4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fa43 	bl	800102c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <ADC_Enable+0x100>)
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff f959 	bl	8000e60 <LL_ADC_GetCommonPathInternalCh>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d00f      	beq.n	8001bd8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <ADC_Enable+0x104>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4928      	ldr	r1, [pc, #160]	; (8001c60 <ADC_Enable+0x108>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7fe faaa 	bl	8000118 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001bc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bca:	e002      	b.n	8001bd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e5b      	ldrb	r3, [r3, #25]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d033      	beq.n	8001c48 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001be0:	f7ff f8fc 	bl	8000ddc <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001be8:	e027      	b.n	8001c3a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff fa40 	bl	8001074 <LL_ADC_IsEnabled>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d104      	bne.n	8001c02 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fa15 	bl	800102c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c02:	f7ff f8eb 	bl	8000ddc <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d914      	bls.n	8001c3a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d00d      	beq.n	8001c3a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	2210      	movs	r2, #16
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2e:	2201      	movs	r2, #1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e007      	b.n	8001c4a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d1d0      	bne.n	8001bea <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	80000017 	.word	0x80000017
 8001c58:	40012708 	.word	0x40012708
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	00030d40 	.word	0x00030d40

08001c64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fa10 	bl	8001096 <LL_ADC_IsDisableOngoing>
 8001c76:	0003      	movs	r3, r0
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff f9f8 	bl	8001074 <LL_ADC_IsEnabled>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d046      	beq.n	8001d16 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d143      	bne.n	8001d16 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2205      	movs	r2, #5
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10d      	bne.n	8001cb8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff f9d5 	bl	8001050 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2203      	movs	r2, #3
 8001cac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cae:	f7ff f895 	bl	8000ddc <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cb6:	e028      	b.n	8001d0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd4:	f7ff f882 	bl	8000ddc <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d913      	bls.n	8001d0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2201      	movs	r2, #1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e006      	b.n	8001d18 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d1de      	bne.n	8001cd4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b004      	add	sp, #16
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <LL_ADC_SetCalibrationFactor>:
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	22b4      	movs	r2, #180	; 0xb4
 8001d2e:	589b      	ldr	r3, [r3, r2]
 8001d30:	227f      	movs	r2, #127	; 0x7f
 8001d32:	4393      	bics	r3, r2
 8001d34:	001a      	movs	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	21b4      	movs	r1, #180	; 0xb4
 8001d3e:	505a      	str	r2, [r3, r1]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_ADC_GetCalibrationFactor>:
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	22b4      	movs	r2, #180	; 0xb4
 8001d54:	589b      	ldr	r3, [r3, r2]
 8001d56:	227f      	movs	r2, #127	; 0x7f
 8001d58:	4013      	ands	r3, r2
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <LL_ADC_Enable>:
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <LL_ADC_Enable+0x20>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	2201      	movs	r2, #1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	7fffffe8 	.word	0x7fffffe8

08001d88 <LL_ADC_Disable>:
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <LL_ADC_Disable+0x20>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	2202      	movs	r2, #2
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	7fffffe8 	.word	0x7fffffe8

08001dac <LL_ADC_IsEnabled>:
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <LL_ADC_IsEnabled+0x18>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_ADC_IsEnabled+0x1a>
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <LL_ADC_StartCalibration>:
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <LL_ADC_StartCalibration+0x24>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	0612      	lsls	r2, r2, #24
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	7fffffe8 	.word	0x7fffffe8

08001df8 <LL_ADC_IsCalibrationOnGoing>:
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	0fdb      	lsrs	r3, r3, #31
 8001e06:	07da      	lsls	r2, r3, #31
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d101      	bne.n	8001e14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2254      	movs	r2, #84	; 0x54
 8001e34:	5c9b      	ldrb	r3, [r3, r2]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADCEx_Calibration_Start+0x1e>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0ba      	b.n	8001fb4 <HAL_ADCEx_Calibration_Start+0x194>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2254      	movs	r2, #84	; 0x54
 8001e42:	2101      	movs	r1, #1
 8001e44:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001e46:	2317      	movs	r3, #23
 8001e48:	18fc      	adds	r4, r7, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff ff09 	bl	8001c64 <ADC_Disable>
 8001e52:	0003      	movs	r3, r0
 8001e54:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7ff ffa6 	bl	8001dac <LL_ADC_IsEnabled>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d000      	beq.n	8001e66 <HAL_ADCEx_Calibration_Start+0x46>
 8001e64:	e099      	b.n	8001f9a <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_ADCEx_Calibration_Start+0x19c>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2202      	movs	r2, #2
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e02d      	b.n	8001ef4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff ff97 	bl	8001dd0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ea2:	e014      	b.n	8001ece <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d90d      	bls.n	8001ece <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	2212      	movs	r2, #18
 8001eb8:	4393      	bics	r3, r2
 8001eba:	2210      	movs	r2, #16
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2254      	movs	r2, #84	; 0x54
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e072      	b.n	8001fb4 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff ff90 	bl	8001df8 <LL_ADC_IsCalibrationOnGoing>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d1e3      	bne.n	8001ea4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <LL_ADC_GetCalibrationFactor>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	189b      	adds	r3, r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d9ce      	bls.n	8001e98 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001efa:	69f9      	ldr	r1, [r7, #28]
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f7fe f90b 	bl	8000118 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff ff2a 	bl	8001d64 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff01 	bl	8001d20 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7ff ff30 	bl	8001d88 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f28:	f7fe ff58 	bl	8000ddc <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f30:	e01b      	b.n	8001f6a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f32:	f7fe ff53 	bl	8000ddc <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d914      	bls.n	8001f6a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <LL_ADC_IsEnabled>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	2210      	movs	r2, #16
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2201      	movs	r2, #1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e024      	b.n	8001fb4 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff ff1c 	bl	8001dac <LL_ADC_IsEnabled>
 8001f74:	1e03      	subs	r3, r0, #0
 8001f76:	d1dc      	bne.n	8001f32 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68d9      	ldr	r1, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4393      	bics	r3, r2
 8001f90:	2201      	movs	r2, #1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	; 0x58
 8001f98:	e005      	b.n	8001fa6 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2254      	movs	r2, #84	; 0x54
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001fae:	2317      	movs	r3, #23
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b009      	add	sp, #36	; 0x24
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	fffffefd 	.word	0xfffffefd
 8001fc0:	00008003 	.word	0x00008003
 8001fc4:	ffff7ffc 	.word	0xffff7ffc
 8001fc8:	0002f1ff 	.word	0x0002f1ff

08001fcc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	0002      	movs	r2, r0
 8002014:	1dfb      	adds	r3, r7, #7
 8002016:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b7f      	cmp	r3, #127	; 0x7f
 800201e:	d809      	bhi.n	8002034 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	001a      	movs	r2, r3
 8002026:	231f      	movs	r3, #31
 8002028:	401a      	ands	r2, r3
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_EnableIRQ+0x30>)
 800202c:	2101      	movs	r1, #1
 800202e:	4091      	lsls	r1, r2
 8002030:	000a      	movs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	0002      	movs	r2, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b7f      	cmp	r3, #127	; 0x7f
 8002054:	d828      	bhi.n	80020a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002056:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <__NVIC_SetPriority+0xd4>)
 8002058:	1dfb      	adds	r3, r7, #7
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	33c0      	adds	r3, #192	; 0xc0
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	589b      	ldr	r3, [r3, r2]
 8002066:	1dfa      	adds	r2, r7, #7
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	0011      	movs	r1, r2
 800206c:	2203      	movs	r2, #3
 800206e:	400a      	ands	r2, r1
 8002070:	00d2      	lsls	r2, r2, #3
 8002072:	21ff      	movs	r1, #255	; 0xff
 8002074:	4091      	lsls	r1, r2
 8002076:	000a      	movs	r2, r1
 8002078:	43d2      	mvns	r2, r2
 800207a:	401a      	ands	r2, r3
 800207c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	401a      	ands	r2, r3
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	0018      	movs	r0, r3
 800208c:	2303      	movs	r3, #3
 800208e:	4003      	ands	r3, r0
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002094:	481f      	ldr	r0, [pc, #124]	; (8002114 <__NVIC_SetPriority+0xd4>)
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b25b      	sxtb	r3, r3
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	430a      	orrs	r2, r1
 80020a0:	33c0      	adds	r3, #192	; 0xc0
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020a6:	e031      	b.n	800210c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <__NVIC_SetPriority+0xd8>)
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	0019      	movs	r1, r3
 80020b0:	230f      	movs	r3, #15
 80020b2:	400b      	ands	r3, r1
 80020b4:	3b08      	subs	r3, #8
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	3306      	adds	r3, #6
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	18d3      	adds	r3, r2, r3
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1dfa      	adds	r2, r7, #7
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	0011      	movs	r1, r2
 80020c8:	2203      	movs	r2, #3
 80020ca:	400a      	ands	r2, r1
 80020cc:	00d2      	lsls	r2, r2, #3
 80020ce:	21ff      	movs	r1, #255	; 0xff
 80020d0:	4091      	lsls	r1, r2
 80020d2:	000a      	movs	r2, r1
 80020d4:	43d2      	mvns	r2, r2
 80020d6:	401a      	ands	r2, r3
 80020d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	22ff      	movs	r2, #255	; 0xff
 80020e0:	401a      	ands	r2, r3
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	2303      	movs	r3, #3
 80020ea:	4003      	ands	r3, r0
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <__NVIC_SetPriority+0xd8>)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	001c      	movs	r4, r3
 80020f8:	230f      	movs	r3, #15
 80020fa:	4023      	ands	r3, r4
 80020fc:	3b08      	subs	r3, #8
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	430a      	orrs	r2, r1
 8002102:	3306      	adds	r3, #6
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	18c3      	adds	r3, r0, r3
 8002108:	3304      	adds	r3, #4
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b003      	add	sp, #12
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	045b      	lsls	r3, r3, #17
 800212c:	429a      	cmp	r2, r3
 800212e:	d301      	bcc.n	8002134 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002130:	2301      	movs	r3, #1
 8002132:	e010      	b.n	8002156 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <SysTick_Config+0x44>)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	3a01      	subs	r2, #1
 800213a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213c:	2301      	movs	r3, #1
 800213e:	425b      	negs	r3, r3
 8002140:	2103      	movs	r1, #3
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff ff7c 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x44>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x44>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	210f      	movs	r1, #15
 8002170:	187b      	adds	r3, r7, r1
 8002172:	1c02      	adds	r2, r0, #0
 8002174:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	187b      	adds	r3, r7, r1
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b25b      	sxtb	r3, r3
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	0002      	movs	r2, r0
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff ff33 	bl	800200c <__NVIC_EnableIRQ>
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff ffaf 	bl	800211c <SysTick_Config>
 80021be:	0003      	movs	r3, r0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e050      	b.n	800227c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2225      	movs	r2, #37	; 0x25
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d008      	beq.n	80021f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2204      	movs	r2, #4
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2224      	movs	r2, #36	; 0x24
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e041      	b.n	800227c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	210e      	movs	r1, #14
 8002204:	438a      	bics	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	491c      	ldr	r1, [pc, #112]	; (8002284 <HAL_DMA_Abort+0xbc>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_DMA_Abort+0xc0>)
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	221c      	movs	r2, #28
 8002232:	4013      	ands	r3, r2
 8002234:	2201      	movs	r2, #1
 8002236:	409a      	lsls	r2, r3
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_DMA_Abort+0xc0>)
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002246:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00c      	beq.n	800226a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_DMA_Abort+0xbc>)
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002268:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2225      	movs	r2, #37	; 0x25
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2224      	movs	r2, #36	; 0x24
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	210f      	movs	r1, #15
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2225      	movs	r2, #37	; 0x25
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d006      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e049      	b.n	800234a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	210e      	movs	r1, #14
 80022c2:	438a      	bics	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	491d      	ldr	r1, [pc, #116]	; (8002358 <HAL_DMA_Abort_IT+0xcc>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_DMA_Abort_IT+0xd0>)
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	221c      	movs	r2, #28
 80022f0:	4013      	ands	r3, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_DMA_Abort_IT+0xd0>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002304:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002318:	490f      	ldr	r1, [pc, #60]	; (8002358 <HAL_DMA_Abort_IT+0xcc>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002326:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2225      	movs	r2, #37	; 0x25
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	0010      	movs	r0, r2
 8002348:	4798      	blx	r3
    }
  }
  return status;
 800234a:	230f      	movs	r3, #15
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	781b      	ldrb	r3, [r3, #0]
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	fffffeff 	.word	0xfffffeff
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236e:	e147      	b.n	8002600 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <HAL_GPIO_Init+0x28>
 8002386:	e138      	b.n	80025fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	4013      	ands	r3, r2
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x40>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	2201      	movs	r2, #1
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	58d3      	ldr	r3, [r2, r3]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2207      	movs	r2, #7
 800245c:	4013      	ands	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2107      	movs	r1, #7
 8002476:	400b      	ands	r3, r1
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	6939      	ldr	r1, [r7, #16]
 8002490:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2203      	movs	r2, #3
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_GPIO_Init+0x174>
 80024d2:	e092      	b.n	80025fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3318      	adds	r3, #24
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2203      	movs	r2, #3
 80024e6:	4013      	ands	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	220f      	movs	r2, #15
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	43da      	mvns	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	23a0      	movs	r3, #160	; 0xa0
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	429a      	cmp	r2, r3
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x1ca>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2bc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x1c6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x1c2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <HAL_GPIO_Init+0x2c4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x1be>
 800251a:	2303      	movs	r3, #3
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 800251e:	2305      	movs	r3, #5
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x1cc>
 800252a:	2300      	movs	r3, #0
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	2103      	movs	r1, #3
 8002530:	400a      	ands	r2, r1
 8002532:	00d2      	lsls	r2, r2, #3
 8002534:	4093      	lsls	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800253c:	4936      	ldr	r1, [pc, #216]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3318      	adds	r3, #24
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	035b      	lsls	r3, r3, #13
 8002562:	4013      	ands	r3, r2
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43da      	mvns	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	039b      	lsls	r3, r3, #14
 800258c:	4013      	ands	r3, r2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259e:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025a0:	2384      	movs	r3, #132	; 0x84
 80025a2:	58d3      	ldr	r3, [r2, r3]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c4:	4914      	ldr	r1, [pc, #80]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025c6:	2284      	movs	r2, #132	; 0x84
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	58d3      	ldr	r3, [r2, r3]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	025b      	lsls	r3, r3, #9
 80025e6:	4013      	ands	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f2:	4909      	ldr	r1, [pc, #36]	; (8002618 <HAL_GPIO_Init+0x2b8>)
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	40da      	lsrs	r2, r3
 8002608:	1e13      	subs	r3, r2, #0
 800260a:	d000      	beq.n	800260e <HAL_GPIO_Init+0x2ae>
 800260c:	e6b0      	b.n	8002370 <HAL_GPIO_Init+0x10>
  }
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b006      	add	sp, #24
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021800 	.word	0x40021800
 800261c:	50000400 	.word	0x50000400
 8002620:	50000800 	.word	0x50000800
 8002624:	50000c00 	.word	0x50000c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	1c0a      	adds	r2, r1, #0
 800263e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	1c7b      	adds	r3, r7, #1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002648:	1cbb      	adds	r3, r7, #2
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d11f      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	0013      	movs	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	189b      	adds	r3, r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4912      	ldr	r1, [pc, #72]	; (80026e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd3e 	bl	8000118 <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a2:	e008      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e009      	b.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	401a      	ands	r2, r3
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d0ed      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40007000 	.word	0x40007000
 80026d8:	fffff9ff 	.word	0xfffff9ff
 80026dc:	20000010 	.word	0x20000010
 80026e0:	000f4240 	.word	0x000f4240

080026e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	23e0      	movs	r3, #224	; 0xe0
 80026ee:	01db      	lsls	r3, r3, #7
 80026f0:	4013      	ands	r3, r2
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e2fe      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x1e>
 8002718:	e07c      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4bc0      	ldr	r3, [pc, #768]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d102      	bne.n	800273a <HAL_RCC_OscConfig+0x3e>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d002      	beq.n	8002740 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4bb9      	ldr	r3, [pc, #740]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	4013      	ands	r3, r2
 800274a:	d062      	beq.n	8002812 <HAL_RCC_OscConfig+0x116>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d15e      	bne.n	8002812 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2d9      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x78>
 8002764:	4bb0      	ldr	r3, [pc, #704]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4baf      	ldr	r3, [pc, #700]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	0249      	lsls	r1, r1, #9
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e020      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	02db      	lsls	r3, r3, #11
 800277c:	429a      	cmp	r2, r3
 800277e:	d10e      	bne.n	800279e <HAL_RCC_OscConfig+0xa2>
 8002780:	4ba9      	ldr	r3, [pc, #676]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4ba8      	ldr	r3, [pc, #672]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	02c9      	lsls	r1, r1, #11
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	4ba6      	ldr	r3, [pc, #664]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4ba5      	ldr	r3, [pc, #660]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0249      	lsls	r1, r1, #9
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0xba>
 800279e:	4ba2      	ldr	r3, [pc, #648]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	49a1      	ldr	r1, [pc, #644]	; (8002a2c <HAL_RCC_OscConfig+0x330>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b9e      	ldr	r3, [pc, #632]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	499f      	ldr	r1, [pc, #636]	; (8002a30 <HAL_RCC_OscConfig+0x334>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d014      	beq.n	80027e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fb0d 	bl	8000ddc <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fb08 	bl	8000ddc <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e298      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b93      	ldr	r3, [pc, #588]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xcc>
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe faf8 	bl	8000ddc <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f2:	f7fe faf3 	bl	8000ddc <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e283      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0xf6>
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_RCC_OscConfig+0x124>
 800281e:	e099      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2203      	movs	r2, #3
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b10      	cmp	r3, #16
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0x144>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d002      	beq.n	8002846 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d135      	bne.n	80028b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002846:	4b78      	ldr	r3, [pc, #480]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4013      	ands	r3, r2
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x162>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e256      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b72      	ldr	r3, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6e      	ldr	r2, [pc, #440]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800288e:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	2207      	movs	r2, #7
 8002896:	4013      	ands	r3, r2
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x340>)
 800289a:	40da      	lsrs	r2, r3
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x344>)
 800289e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x348>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe fa3d 	bl	8000d24 <HAL_InitTick>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d051      	beq.n	8002952 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e22c      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d030      	beq.n	800291c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5e      	ldr	r2, [pc, #376]	; (8002a38 <HAL_RCC_OscConfig+0x33c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fa7e 	bl	8000ddc <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fa79 	bl	8000ddc <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e209      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4013      	ands	r3, r2
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_RCC_OscConfig+0x338>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002922:	4949      	ldr	r1, [pc, #292]	; (8002a48 <HAL_RCC_OscConfig+0x34c>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fa58 	bl	8000ddc <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fa53 	bl	8000ddc <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1e3      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x236>
 8002950:	e000      	b.n	8002954 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	4013      	ands	r3, r2
 800295c:	d047      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2238      	movs	r2, #56	; 0x38
 8002964:	4013      	ands	r3, r2
 8002966:	2b18      	cmp	r3, #24
 8002968:	d10a      	bne.n	8002980 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d03c      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d138      	bne.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e1c5      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fa22 	bl	8000ddc <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7fe fa1d 	bl	8000ddc <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1ad      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b4:	2202      	movs	r2, #2
 80029b6:	4013      	ands	r3, r2
 80029b8:	d0f1      	beq.n	800299e <HAL_RCC_OscConfig+0x2a2>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	438a      	bics	r2, r1
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fa08 	bl	8000ddc <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fa03 	bl	8000ddc <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e193      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d1f1      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d100      	bne.n	80029fa <HAL_RCC_OscConfig+0x2fe>
 80029f8:	e0c6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d11e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d100      	bne.n	8002a1a <HAL_RCC_OscConfig+0x31e>
 8002a18:	e0b6      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d000      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a22:	e0b1      	b.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e171      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	fffeffff 	.word	0xfffeffff
 8002a30:	fffbffff 	.word	0xfffbffff
 8002a34:	ffff80ff 	.word	0xffff80ff
 8002a38:	ffffc7ff 	.word	0xffffc7ff
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	20000010 	.word	0x20000010
 8002a44:	20000000 	.word	0x20000000
 8002a48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a4c:	4bb1      	ldr	r3, [pc, #708]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	4013      	ands	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_OscConfig+0x360>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x362>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4bac      	ldr	r3, [pc, #688]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a66:	4bab      	ldr	r3, [pc, #684]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a70:	4ba8      	ldr	r3, [pc, #672]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4ba4      	ldr	r3, [pc, #656]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a92:	4ba1      	ldr	r3, [pc, #644]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe f99c 	bl	8000ddc <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7fe f997 	bl	8000ddc <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e127      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b96      	ldr	r3, [pc, #600]	; (8002d18 <HAL_RCC_OscConfig+0x61c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e2>
 8002ad0:	4b90      	ldr	r3, [pc, #576]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad4:	4b8f      	ldr	r3, [pc, #572]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x404>
 8002ae6:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aea:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002aec:	2104      	movs	r1, #4
 8002aee:	430a      	orrs	r2, r1
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af2:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af6:	4b87      	ldr	r3, [pc, #540]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002af8:	2101      	movs	r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
 8002b00:	4b84      	ldr	r3, [pc, #528]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b04:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	438a      	bics	r2, r1
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b0c:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b10:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b12:	2104      	movs	r1, #4
 8002b14:	438a      	bics	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f95c 	bl	8000ddc <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe f957 	bl	8000ddc <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	4a79      	ldr	r2, [pc, #484]	; (8002d1c <HAL_RCC_OscConfig+0x620>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0e6      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x42e>
 8002b48:	e013      	b.n	8002b72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f947 	bl	8000ddc <HAL_GetTick>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe f942 	bl	8000ddc <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x620>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0d1      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b72:	231f      	movs	r3, #31
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b80:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b82:	4967      	ldr	r1, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x624>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d100      	bne.n	8002b92 <HAL_RCC_OscConfig+0x496>
 8002b90:	e0bb      	b.n	8002d0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b92:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2238      	movs	r2, #56	; 0x38
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d100      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4a4>
 8002b9e:	e07b      	b.n	8002c98 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d156      	bne.n	8002c56 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b5a      	ldr	r3, [pc, #360]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002bae:	495d      	ldr	r1, [pc, #372]	; (8002d24 <HAL_RCC_OscConfig+0x628>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f912 	bl	8000ddc <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe f90d 	bl	8000ddc <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e09d      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	049b      	lsls	r3, r3, #18
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_RCC_OscConfig+0x62c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c10:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0449      	lsls	r1, r1, #17
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c1e:	4b3d      	ldr	r3, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0549      	lsls	r1, r1, #21
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f8d6 	bl	8000ddc <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe f8d1 	bl	8000ddc <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e061      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	049b      	lsls	r3, r3, #18
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x53a>
 8002c54:	e059      	b.n	8002d0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c5c:	4931      	ldr	r1, [pc, #196]	; (8002d24 <HAL_RCC_OscConfig+0x628>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe f8bb 	bl	8000ddc <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe f8b6 	bl	8000ddc <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e046      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	049b      	lsls	r3, r3, #18
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002c90:	4926      	ldr	r1, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x630>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e038      	b.n	8002d0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e033      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x618>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2203      	movs	r2, #3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d126      	bne.n	8002d06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2270      	movs	r2, #112	; 0x70
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11f      	bne.n	8002d06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	23fe      	movs	r3, #254	; 0xfe
 8002cca:	01db      	lsls	r3, r3, #7
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d116      	bne.n	8002d06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	23f8      	movs	r3, #248	; 0xf8
 8002cdc:	039b      	lsls	r3, r3, #14
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10e      	bne.n	8002d06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	23e0      	movs	r3, #224	; 0xe0
 8002cec:	051b      	lsls	r3, r3, #20
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	0f5b      	lsrs	r3, r3, #29
 8002cfc:	075a      	lsls	r2, r3, #29
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b008      	add	sp, #32
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	00001388 	.word	0x00001388
 8002d20:	efffffff 	.word	0xefffffff
 8002d24:	feffffff 	.word	0xfeffffff
 8002d28:	11c1808c 	.word	0x11c1808c
 8002d2c:	eefefffc 	.word	0xeefefffc

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0e9      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2207      	movs	r2, #7
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d91e      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2207      	movs	r2, #7
 8002d58:	4393      	bics	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d64:	f7fe f83a 	bl	8000ddc <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe f835 	bl	8000ddc <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_RCC_ClockConfig+0x1f4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0ca      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2207      	movs	r2, #7
 8002d88:	4013      	ands	r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d006      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	21e0      	movs	r1, #224	; 0xe0
 8002dac:	01c9      	lsls	r1, r1, #7
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4a5d      	ldr	r2, [pc, #372]	; (8002f2c <HAL_RCC_ClockConfig+0x1fc>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	0019      	movs	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d057      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	4013      	ands	r3, r2
 8002de2:	d12b      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e097      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d11f      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e08b      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4013      	ands	r3, r2
 8002e12:	d113      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07f      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e074      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e06d      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2207      	movs	r2, #7
 8002e42:	4393      	bics	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fd ffc4 	bl	8000ddc <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5a:	f7fd ffbf 	bl	8000ddc <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <HAL_RCC_ClockConfig+0x1f4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2238      	movs	r2, #56	; 0x38
 8002e74:	401a      	ands	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1ec      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2207      	movs	r2, #7
 8002e86:	4013      	ands	r3, r2
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d21e      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2207      	movs	r2, #7
 8002e94:	4393      	bics	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea0:	f7fd ff9c 	bl	8000ddc <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ea8:	e009      	b.n	8002ebe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f7fd ff97 	bl	8000ddc <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x1f4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e02c      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_RCC_ClockConfig+0x200>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eea:	f000 f829 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002eee:	0001      	movs	r1, r0
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	401a      	ands	r2, r3
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCC_ClockConfig+0x204>)
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	58d3      	ldr	r3, [r2, r3]
 8002f00:	221f      	movs	r2, #31
 8002f02:	4013      	ands	r3, r2
 8002f04:	000a      	movs	r2, r1
 8002f06:	40da      	lsrs	r2, r3
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x208>)
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x20c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd ff07 	bl	8000d24 <HAL_InitTick>
 8002f16:	0003      	movs	r3, r0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000
 8002f24:	00001388 	.word	0x00001388
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	fffff0ff 	.word	0xfffff0ff
 8002f30:	ffff8fff 	.word	0xffff8fff
 8002f34:	08007804 	.word	0x08007804
 8002f38:	20000010 	.word	0x20000010
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f46:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2238      	movs	r2, #56	; 0x38
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0adb      	lsrs	r3, r3, #11
 8002f56:	2207      	movs	r2, #7
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	0013      	movs	r3, r2
 8002f60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f62:	6839      	ldr	r1, [r7, #0]
 8002f64:	4835      	ldr	r0, [pc, #212]	; (800303c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f66:	f7fd f8d7 	bl	8000118 <__udivsi3>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e05d      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2238      	movs	r2, #56	; 0x38
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e054      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2238      	movs	r2, #56	; 0x38
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d138      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2203      	movs	r2, #3
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4824      	ldr	r0, [pc, #144]	; (8003040 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fb0:	f7fd f8b2 	bl	8000118 <__udivsi3>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	227f      	movs	r2, #127	; 0x7f
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	434b      	muls	r3, r1
 8002fc4:	617b      	str	r3, [r7, #20]
        break;
 8002fc6:	e00d      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	481c      	ldr	r0, [pc, #112]	; (800303c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fcc:	f7fd f8a4 	bl	8000118 <__udivsi3>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	227f      	movs	r2, #127	; 0x7f
 8002fdc:	4013      	ands	r3, r2
 8002fde:	434b      	muls	r3, r1
 8002fe0:	617b      	str	r3, [r7, #20]
        break;
 8002fe2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fe4:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0f5b      	lsrs	r3, r3, #29
 8002fea:	2207      	movs	r2, #7
 8002fec:	4013      	ands	r3, r2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f7fd f88f 	bl	8000118 <__udivsi3>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e015      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2238      	movs	r2, #56	; 0x38
 8003006:	4013      	ands	r3, r2
 8003008:	2b20      	cmp	r3, #32
 800300a:	d103      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e00b      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2238      	movs	r2, #56	; 0x38
 800301a:	4013      	ands	r3, r2
 800301c:	2b18      	cmp	r3, #24
 800301e:	d103      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003020:	23fa      	movs	r3, #250	; 0xfa
 8003022:	01db      	lsls	r3, r3, #7
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e001      	b.n	800302c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800302c:	693b      	ldr	r3, [r7, #16]
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b006      	add	sp, #24
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021000 	.word	0x40021000
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200

08003044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b02      	ldr	r3, [pc, #8]	; (8003054 <HAL_RCC_GetHCLKFreq+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000010 	.word	0x20000010

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800305c:	f7ff fff2 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003060:	0004      	movs	r4, r0
 8003062:	f7ff fb3f 	bl	80026e4 <LL_RCC_GetAPB1Prescaler>
 8003066:	0003      	movs	r3, r0
 8003068:	0b1a      	lsrs	r2, r3, #12
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	58d3      	ldr	r3, [r2, r3]
 8003070:	221f      	movs	r2, #31
 8003072:	4013      	ands	r3, r2
 8003074:	40dc      	lsrs	r4, r3
 8003076:	0023      	movs	r3, r4
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bdb0      	pop	{r4, r5, r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	08007844 	.word	0x08007844

08003084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800308c:	2313      	movs	r3, #19
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003094:	2312      	movs	r3, #18
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	d100      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030a8:	e0a3      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2011      	movs	r0, #17
 80030ac:	183b      	adds	r3, r7, r0
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4ba5      	ldr	r3, [pc, #660]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	055b      	lsls	r3, r3, #21
 80030ba:	4013      	ands	r3, r2
 80030bc:	d110      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4ba2      	ldr	r3, [pc, #648]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c2:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	0549      	lsls	r1, r1, #21
 80030c8:	430a      	orrs	r2, r1
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80030cc:	4b9e      	ldr	r3, [pc, #632]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	055b      	lsls	r3, r3, #21
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e0:	4b9a      	ldr	r3, [pc, #616]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b99      	ldr	r3, [pc, #612]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0049      	lsls	r1, r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ee:	f7fd fe75 	bl	8000ddc <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f6:	e00b      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7fd fe70 	bl	8000ddc <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d904      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003106:	2313      	movs	r3, #19
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
        break;
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003110:	4b8e      	ldr	r3, [pc, #568]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4013      	ands	r3, r2
 800311a:	d0ed      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800311c:	2313      	movs	r3, #19
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d154      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4013      	ands	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d019      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	d014      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	4a82      	ldr	r2, [pc, #520]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003148:	4013      	ands	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800314c:	4b7e      	ldr	r3, [pc, #504]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800314e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003150:	4b7d      	ldr	r3, [pc, #500]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	0249      	lsls	r1, r1, #9
 8003156:	430a      	orrs	r2, r1
 8003158:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800315c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800315e:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003160:	497c      	ldr	r1, [pc, #496]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003162:	400a      	ands	r2, r1
 8003164:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2201      	movs	r2, #1
 8003170:	4013      	ands	r3, r2
 8003172:	d016      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd fe32 	bl	8000ddc <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317c:	e00c      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fd fe2d 	bl	8000ddc <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	4a73      	ldr	r2, [pc, #460]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d904      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800318e:	2313      	movs	r3, #19
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
            break;
 8003196:	e004      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d0ed      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031a2:	2313      	movs	r3, #19
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031bc:	430a      	orrs	r2, r1
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c0:	e00c      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031c2:	2312      	movs	r3, #18
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2213      	movs	r2, #19
 80031c8:	18ba      	adds	r2, r7, r2
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e005      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	2312      	movs	r3, #18
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2213      	movs	r2, #19
 80031d6:	18ba      	adds	r2, r7, r2
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031dc:	2311      	movs	r3, #17
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ea:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ec:	495b      	ldr	r1, [pc, #364]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fc:	4b52      	ldr	r3, [pc, #328]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	2203      	movs	r2, #3
 8003202:	4393      	bics	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800320c:	430a      	orrs	r2, r1
 800320e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2210      	movs	r2, #16
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800321a:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800322a:	430a      	orrs	r2, r1
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4013      	ands	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	4a49      	ldr	r2, [pc, #292]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003240:	4013      	ands	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800324a:	430a      	orrs	r2, r1
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800326a:	430a      	orrs	r2, r1
 800326c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2220      	movs	r2, #32
 8003274:	4013      	ands	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003278:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003288:	430a      	orrs	r2, r1
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	01db      	lsls	r3, r3, #7
 8003294:	4013      	ands	r3, r2
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	0899      	lsrs	r1, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	05db      	lsls	r3, r3, #23
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d106      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0249      	lsls	r1, r1, #9
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	039b      	lsls	r3, r3, #14
 80032cc:	4013      	ands	r3, r2
 80032ce:	d016      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	4a26      	ldr	r2, [pc, #152]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032e0:	430a      	orrs	r2, r1
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	03db      	lsls	r3, r3, #15
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d106      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	0449      	lsls	r1, r1, #17
 80032fa:	430a      	orrs	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	4013      	ands	r3, r2
 8003308:	d016      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800331a:	430a      	orrs	r2, r1
 800331c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	01db      	lsls	r3, r3, #7
 8003326:	429a      	cmp	r2, r3
 8003328:	d106      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0249      	lsls	r1, r1, #9
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003338:	2312      	movs	r3, #18
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b006      	add	sp, #24
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
 8003350:	fffffcff 	.word	0xfffffcff
 8003354:	fffeffff 	.word	0xfffeffff
 8003358:	00001388 	.word	0x00001388
 800335c:	efffffff 	.word	0xefffffff
 8003360:	fffff3ff 	.word	0xfffff3ff
 8003364:	fff3ffff 	.word	0xfff3ffff
 8003368:	ffcfffff 	.word	0xffcfffff
 800336c:	ffffcfff 	.word	0xffffcfff
 8003370:	ffbfffff 	.word	0xffbfffff
 8003374:	ffff3fff 	.word	0xffff3fff

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e04a      	b.n	8003420 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	223d      	movs	r2, #61	; 0x3d
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f003 fb1b 	bl	80069dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223d      	movs	r2, #61	; 0x3d
 80033aa:	2102      	movs	r1, #2
 80033ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	0019      	movs	r1, r3
 80033b8:	0010      	movs	r0, r2
 80033ba:	f000 fb49 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2248      	movs	r2, #72	; 0x48
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223e      	movs	r2, #62	; 0x3e
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223f      	movs	r2, #63	; 0x3f
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2241      	movs	r2, #65	; 0x41
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2242      	movs	r2, #66	; 0x42
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2243      	movs	r2, #67	; 0x43
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2244      	movs	r2, #68	; 0x44
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2245      	movs	r2, #69	; 0x45
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2246      	movs	r2, #70	; 0x46
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2247      	movs	r2, #71	; 0x47
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223d      	movs	r2, #61	; 0x3d
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e04a      	b.n	80034d0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	; 0x3d
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223c      	movs	r2, #60	; 0x3c
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f841 	bl	80034d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223d      	movs	r2, #61	; 0x3d
 800345a:	2102      	movs	r1, #2
 800345c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	0019      	movs	r1, r3
 8003468:	0010      	movs	r0, r2
 800346a:	f000 faf1 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2248      	movs	r2, #72	; 0x48
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223e      	movs	r2, #62	; 0x3e
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223f      	movs	r2, #63	; 0x3f
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2241      	movs	r2, #65	; 0x41
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2242      	movs	r2, #66	; 0x42
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2243      	movs	r2, #67	; 0x43
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2244      	movs	r2, #68	; 0x44
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2245      	movs	r2, #69	; 0x45
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2246      	movs	r2, #70	; 0x46
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2247      	movs	r2, #71	; 0x47
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223d      	movs	r2, #61	; 0x3d
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <HAL_TIM_PWM_Start+0x22>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	223e      	movs	r2, #62	; 0x3e
 80034fc:	5c9b      	ldrb	r3, [r3, r2]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	4193      	sbcs	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e037      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d108      	bne.n	8003522 <HAL_TIM_PWM_Start+0x3a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223f      	movs	r2, #63	; 0x3f
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	4193      	sbcs	r3, r2
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e02b      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d108      	bne.n	800353a <HAL_TIM_PWM_Start+0x52>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e01f      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d108      	bne.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2241      	movs	r2, #65	; 0x41
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4193      	sbcs	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e013      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d108      	bne.n	800356a <HAL_TIM_PWM_Start+0x82>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2242      	movs	r2, #66	; 0x42
 800355c:	5c9b      	ldrb	r3, [r3, r2]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	4193      	sbcs	r3, r2
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e007      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2243      	movs	r2, #67	; 0x43
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	4193      	sbcs	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e081      	b.n	8003686 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223e      	movs	r2, #62	; 0x3e
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]
 8003590:	e023      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xba>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223f      	movs	r2, #63	; 0x3f
 800359c:	2102      	movs	r1, #2
 800359e:	5499      	strb	r1, [r3, r2]
 80035a0:	e01b      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xca>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]
 80035b0:	e013      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xda>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2241      	movs	r2, #65	; 0x41
 80035bc:	2102      	movs	r1, #2
 80035be:	5499      	strb	r1, [r3, r2]
 80035c0:	e00b      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xea>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2242      	movs	r2, #66	; 0x42
 80035cc:	2102      	movs	r1, #2
 80035ce:	5499      	strb	r1, [r3, r2]
 80035d0:	e003      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2243      	movs	r2, #67	; 0x43
 80035d6:	2102      	movs	r1, #2
 80035d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fde2 	bl	80041ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_TIM_PWM_Start+0x1a8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d009      	beq.n	8003606 <HAL_TIM_PWM_Start+0x11e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_TIM_PWM_Start+0x1ac>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_TIM_PWM_Start+0x11e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_TIM_PWM_Start+0x1b0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_TIM_PWM_Start+0x122>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_TIM_PWM_Start+0x124>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	0209      	lsls	r1, r1, #8
 800361e:	430a      	orrs	r2, r1
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_TIM_PWM_Start+0x1a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00a      	beq.n	8003642 <HAL_TIM_PWM_Start+0x15a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	05db      	lsls	r3, r3, #23
 8003634:	429a      	cmp	r2, r3
 8003636:	d004      	beq.n	8003642 <HAL_TIM_PWM_Start+0x15a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	; (800369c <HAL_TIM_PWM_Start+0x1b4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d116      	bne.n	8003670 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <HAL_TIM_PWM_Start+0x1b8>)
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d016      	beq.n	8003682 <HAL_TIM_PWM_Start+0x19a>
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	025b      	lsls	r3, r3, #9
 800365a:	429a      	cmp	r2, r3
 800365c:	d011      	beq.n	8003682 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	e008      	b.n	8003682 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2101      	movs	r1, #1
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e000      	b.n	8003684 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b004      	add	sp, #16
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	40000400 	.word	0x40000400
 80036a0:	00010007 	.word	0x00010007

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2317      	movs	r3, #23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	223c      	movs	r2, #60	; 0x3c
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0e5      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	223c      	movs	r2, #60	; 0x3c
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b14      	cmp	r3, #20
 80036d2:	d900      	bls.n	80036d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036d4:	e0d1      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	009a      	lsls	r2, r3, #2
 80036da:	4b70      	ldr	r3, [pc, #448]	; (800389c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 fa26 	bl	8003b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2108      	movs	r1, #8
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2104      	movs	r1, #4
 800370c:	438a      	bics	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	619a      	str	r2, [r3, #24]
      break;
 8003722:	e0af      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f000 fa85 	bl	8003c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0109      	lsls	r1, r1, #4
 8003740:	430a      	orrs	r2, r1
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4954      	ldr	r1, [pc, #336]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003750:	400a      	ands	r2, r1
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
      break;
 8003768:	e08c      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f000 fae0 	bl	8003d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2108      	movs	r1, #8
 8003784:	430a      	orrs	r2, r1
 8003786:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2104      	movs	r1, #4
 8003794:	438a      	bics	r2, r1
 8003796:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69d9      	ldr	r1, [r3, #28]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	61da      	str	r2, [r3, #28]
      break;
 80037aa:	e06b      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 fb41 	bl	8003e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0109      	lsls	r1, r1, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4932      	ldr	r1, [pc, #200]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037d8:	400a      	ands	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69d9      	ldr	r1, [r3, #28]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
      break;
 80037f0:	e048      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	0011      	movs	r1, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 fb82 	bl	8003f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2108      	movs	r1, #8
 800380c:	430a      	orrs	r2, r1
 800380e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2104      	movs	r1, #4
 800381c:	438a      	bics	r2, r1
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003832:	e027      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fbbb 	bl	8003fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	0109      	lsls	r1, r1, #4
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4910      	ldr	r1, [pc, #64]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003860:	400a      	ands	r2, r1
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003878:	e004      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
      break;
 8003882:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	223c      	movs	r2, #60	; 0x3c
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

  return status;
 800388c:	2317      	movs	r3, #23
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	08007798 	.word	0x08007798
 80038a0:	fffffbff 	.word	0xfffffbff

080038a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	230f      	movs	r3, #15
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223c      	movs	r2, #60	; 0x3c
 80038ba:	5c9b      	ldrb	r3, [r3, r2]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x20>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0bc      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x19a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	223c      	movs	r2, #60	; 0x3c
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	223d      	movs	r2, #61	; 0x3d
 80038d0:	2102      	movs	r1, #2
 80038d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a59      	ldr	r2, [pc, #356]	; (8003a4c <HAL_TIM_ConfigClockSource+0x1a8>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	0192      	lsls	r2, r2, #6
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0xde>
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0192      	lsls	r2, r2, #6
 8003904:	4293      	cmp	r3, r2
 8003906:	d900      	bls.n	800390a <HAL_TIM_ConfigClockSource+0x66>
 8003908:	e088      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	0152      	lsls	r2, r2, #5
 800390e:	4293      	cmp	r3, r2
 8003910:	d100      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x70>
 8003912:	e088      	b.n	8003a26 <HAL_TIM_ConfigClockSource+0x182>
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	0152      	lsls	r2, r2, #5
 8003918:	4293      	cmp	r3, r2
 800391a:	d900      	bls.n	800391e <HAL_TIM_ConfigClockSource+0x7a>
 800391c:	e07e      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800391e:	2b70      	cmp	r3, #112	; 0x70
 8003920:	d018      	beq.n	8003954 <HAL_TIM_ConfigClockSource+0xb0>
 8003922:	d900      	bls.n	8003926 <HAL_TIM_ConfigClockSource+0x82>
 8003924:	e07a      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003926:	2b60      	cmp	r3, #96	; 0x60
 8003928:	d04f      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x126>
 800392a:	d900      	bls.n	800392e <HAL_TIM_ConfigClockSource+0x8a>
 800392c:	e076      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800392e:	2b50      	cmp	r3, #80	; 0x50
 8003930:	d03b      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x106>
 8003932:	d900      	bls.n	8003936 <HAL_TIM_ConfigClockSource+0x92>
 8003934:	e072      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d057      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x146>
 800393a:	d900      	bls.n	800393e <HAL_TIM_ConfigClockSource+0x9a>
 800393c:	e06e      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800393e:	2b30      	cmp	r3, #48	; 0x30
 8003940:	d063      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003942:	d86b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d060      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003948:	d868      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d05d      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 800394e:	2b10      	cmp	r3, #16
 8003950:	d05b      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003952:	e063      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f000 fc02 	bl	800416c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2277      	movs	r2, #119	; 0x77
 8003974:	4313      	orrs	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]
      break;
 8003980:	e052      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f000 fbeb 	bl	800416c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	01c9      	lsls	r1, r1, #7
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
      break;
 80039a8:	e03e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	001a      	movs	r2, r3
 80039b8:	f000 fb5c 	bl	8004074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2150      	movs	r1, #80	; 0x50
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fbb6 	bl	8004134 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e02e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	001a      	movs	r2, r3
 80039d8:	f000 fb7a 	bl	80040d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2160      	movs	r1, #96	; 0x60
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 fba6 	bl	8004134 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e01e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	001a      	movs	r2, r3
 80039f8:	f000 fb3c 	bl	8004074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 fb96 	bl	8004134 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e00e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f000 fb8d 	bl	8004134 <TIM_ITRx_SetConfig>
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
      break;
 8003a24:	e000      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	223d      	movs	r2, #61	; 0x3d
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	223c      	movs	r2, #60	; 0x3c
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

  return status;
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	ffceff88 	.word	0xffceff88
 8003a4c:	ffff00ff 	.word	0xffff00ff

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a30      	ldr	r2, [pc, #192]	; (8003b24 <TIM_Base_SetConfig+0xd4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d008      	beq.n	8003a7a <TIM_Base_SetConfig+0x2a>
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d003      	beq.n	8003a7a <TIM_Base_SetConfig+0x2a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <TIM_Base_SetConfig+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2270      	movs	r2, #112	; 0x70
 8003a7e:	4393      	bics	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <TIM_Base_SetConfig+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d014      	beq.n	8003abe <TIM_Base_SetConfig+0x6e>
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	05db      	lsls	r3, r3, #23
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0x6e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <TIM_Base_SetConfig+0xd8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x6e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <TIM_Base_SetConfig+0xdc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x6e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <TIM_Base_SetConfig+0xe0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x6e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <TIM_Base_SetConfig+0xe4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <TIM_Base_SetConfig+0xe8>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <TIM_Base_SetConfig+0xd4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_Base_SetConfig+0xbe>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <TIM_Base_SetConfig+0xe0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_Base_SetConfig+0xbe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <TIM_Base_SetConfig+0xe4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d103      	bne.n	8003b16 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	615a      	str	r2, [r3, #20]
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40002000 	.word	0x40002000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800
 8003b38:	fffffcff 	.word	0xfffffcff

08003b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	001a      	movs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <TIM_OC1_SetConfig+0xe8>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2203      	movs	r2, #3
 8003b72:	4393      	bics	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4393      	bics	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <TIM_OC1_SetConfig+0xec>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_OC1_SetConfig+0x6e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <TIM_OC1_SetConfig+0xf0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_OC1_SetConfig+0x6e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <TIM_OC1_SetConfig+0xf4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4393      	bics	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <TIM_OC1_SetConfig+0xec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_OC1_SetConfig+0xa0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <TIM_OC1_SetConfig+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC1_SetConfig+0xa0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC1_SetConfig+0xf4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <TIM_OC1_SetConfig+0xf8>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <TIM_OC1_SetConfig+0xfc>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	fffeff8f 	.word	0xfffeff8f
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800
 8003c34:	fffffeff 	.word	0xfffffeff
 8003c38:	fffffdff 	.word	0xfffffdff

08003c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	001a      	movs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <TIM_OC2_SetConfig+0xe0>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <TIM_OC2_SetConfig+0xe4>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2220      	movs	r2, #32
 8003c86:	4393      	bics	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <TIM_OC2_SetConfig+0xe8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10d      	bne.n	8003cba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	4393      	bics	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2240      	movs	r2, #64	; 0x40
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <TIM_OC2_SetConfig+0xe8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC2_SetConfig+0x96>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <TIM_OC2_SetConfig+0xec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC2_SetConfig+0x96>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC2_SetConfig+0xf0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC2_SetConfig+0xf4>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <TIM_OC2_SetConfig+0xf8>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	feff8fff 	.word	0xfeff8fff
 8003d20:	fffffcff 	.word	0xfffffcff
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40014800 	.word	0x40014800
 8003d30:	fffffbff 	.word	0xfffffbff
 8003d34:	fffff7ff 	.word	0xfffff7ff

08003d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <TIM_OC3_SetConfig+0xdc>)
 8003d48:	401a      	ands	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <TIM_OC3_SetConfig+0xe0>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	4393      	bics	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <TIM_OC3_SetConfig+0xe4>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <TIM_OC3_SetConfig+0xe8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <TIM_OC3_SetConfig+0xec>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <TIM_OC3_SetConfig+0xf0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <TIM_OC3_SetConfig+0xe8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_OC3_SetConfig+0x92>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <TIM_OC3_SetConfig+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC3_SetConfig+0x92>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <TIM_OC3_SetConfig+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <TIM_OC3_SetConfig+0xfc>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <TIM_OC3_SetConfig+0x100>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	fffffeff 	.word	0xfffffeff
 8003e18:	fffeff8f 	.word	0xfffeff8f
 8003e1c:	fffffdff 	.word	0xfffffdff
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	fffff7ff 	.word	0xfffff7ff
 8003e28:	fffffbff 	.word	0xfffffbff
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800
 8003e34:	ffffefff 	.word	0xffffefff
 8003e38:	ffffdfff 	.word	0xffffdfff

08003e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <TIM_OC4_SetConfig+0xa8>)
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <TIM_OC4_SetConfig+0xac>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <TIM_OC4_SetConfig+0xb0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <TIM_OC4_SetConfig+0xb4>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <TIM_OC4_SetConfig+0xb8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC4_SetConfig+0x70>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <TIM_OC4_SetConfig+0xbc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC4_SetConfig+0x70>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <TIM_OC4_SetConfig+0xc0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d109      	bne.n	8003ec0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC4_SetConfig+0xc4>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b006      	add	sp, #24
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	ffffefff 	.word	0xffffefff
 8003ee8:	feff8fff 	.word	0xfeff8fff
 8003eec:	fffffcff 	.word	0xfffffcff
 8003ef0:	ffffdfff 	.word	0xffffdfff
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	ffffbfff 	.word	0xffffbfff

08003f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <TIM_OC5_SetConfig+0x9c>)
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <TIM_OC5_SetConfig+0xa0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <TIM_OC5_SetConfig+0xa4>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <TIM_OC5_SetConfig+0xa8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_OC5_SetConfig+0x66>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <TIM_OC5_SetConfig+0xac>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_OC5_SetConfig+0x66>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <TIM_OC5_SetConfig+0xb0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d109      	bne.n	8003f7e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <TIM_OC5_SetConfig+0x9c>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b006      	add	sp, #24
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	fffeffff 	.word	0xfffeffff
 8003fa4:	fffeff8f 	.word	0xfffeff8f
 8003fa8:	fffdffff 	.word	0xfffdffff
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a24      	ldr	r2, [pc, #144]	; (8004058 <TIM_OC6_SetConfig+0xa0>)
 8003fc8:	401a      	ands	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <TIM_OC6_SetConfig+0xa4>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <TIM_OC6_SetConfig+0xa8>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	051b      	lsls	r3, r3, #20
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <TIM_OC6_SetConfig+0xac>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_OC6_SetConfig+0x68>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <TIM_OC6_SetConfig+0xb0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC6_SetConfig+0x68>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <TIM_OC6_SetConfig+0xb4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d109      	bne.n	8004034 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <TIM_OC6_SetConfig+0xb8>)
 8004024:	4013      	ands	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b006      	add	sp, #24
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	ffefffff 	.word	0xffefffff
 800405c:	feff8fff 	.word	0xfeff8fff
 8004060:	ffdfffff 	.word	0xffdfffff
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800
 8004070:	fffbffff 	.word	0xfffbffff

08004074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	2201      	movs	r2, #1
 800408c:	4393      	bics	r3, r2
 800408e:	001a      	movs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	22f0      	movs	r2, #240	; 0xf0
 800409e:	4393      	bics	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	220a      	movs	r2, #10
 80040b0:	4393      	bics	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	621a      	str	r2, [r3, #32]
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b006      	add	sp, #24
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4393      	bics	r3, r2
 80040e4:	001a      	movs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <TIM_TI2_ConfigInputStage+0x60>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	22a0      	movs	r2, #160	; 0xa0
 800410c:	4393      	bics	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b006      	add	sp, #24
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	ffff0fff 	.word	0xffff0fff

08004134 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <TIM_ITRx_SetConfig+0x34>)
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	2207      	movs	r2, #7
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	ffcfff8f 	.word	0xffcfff8f

0800416c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <TIM_ETR_SetConfig+0x3c>)
 8004184:	4013      	ands	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	431a      	orrs	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b006      	add	sp, #24
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	ffff00ff 	.word	0xffff00ff

080041ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	221f      	movs	r2, #31
 80041bc:	4013      	ands	r3, r2
 80041be:	2201      	movs	r2, #1
 80041c0:	409a      	lsls	r2, r3
 80041c2:	0013      	movs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	43d2      	mvns	r2, r2
 80041ce:	401a      	ands	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1a      	ldr	r2, [r3, #32]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	211f      	movs	r1, #31
 80041dc:	400b      	ands	r3, r1
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4099      	lsls	r1, r3
 80041e2:	000b      	movs	r3, r1
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b006      	add	sp, #24
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	223c      	movs	r2, #60	; 0x3c
 8004202:	5c9b      	ldrb	r3, [r3, r2]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e050      	b.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	223c      	movs	r2, #60	; 0x3c
 8004210:	2101      	movs	r1, #1
 8004212:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	223d      	movs	r2, #61	; 0x3d
 8004218:	2102      	movs	r1, #2
 800421a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a20      	ldr	r2, [pc, #128]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2270      	movs	r2, #112	; 0x70
 800424c:	4393      	bics	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a14      	ldr	r2, [pc, #80]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00a      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	05db      	lsls	r3, r3, #23
 8004274:	429a      	cmp	r2, r3
 8004276:	d004      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10c      	bne.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	4393      	bics	r3, r2
 8004288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4313      	orrs	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223d      	movs	r2, #61	; 0x3d
 80042a0:	2101      	movs	r1, #1
 80042a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223c      	movs	r2, #60	; 0x3c
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	ff0fffff 	.word	0xff0fffff
 80042c0:	40000400 	.word	0x40000400

080042c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e079      	b.n	80043d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	223c      	movs	r2, #60	; 0x3c
 80042e4:	2101      	movs	r1, #1
 80042e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	22ff      	movs	r2, #255	; 0xff
 80042ec:	4393      	bics	r3, r2
 80042ee:	001a      	movs	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a38      	ldr	r2, [pc, #224]	; (80043dc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80042fc:	401a      	ands	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800430a:	401a      	ands	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004318:	401a      	ands	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004326:	401a      	ands	r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004334:	401a      	ands	r2, r3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004342:	401a      	ands	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004350:	401a      	ands	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d106      	bne.n	8004374 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800436a:	401a      	ands	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d121      	bne.n	80043c2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004382:	401a      	ands	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	051b      	lsls	r3, r3, #20
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004392:	401a      	ands	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80043a0:	401a      	ands	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d106      	bne.n	80043c2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80043b8:	401a      	ands	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223c      	movs	r2, #60	; 0x3c
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b004      	add	sp, #16
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	fffffcff 	.word	0xfffffcff
 80043e0:	fffffbff 	.word	0xfffffbff
 80043e4:	fffff7ff 	.word	0xfffff7ff
 80043e8:	ffffefff 	.word	0xffffefff
 80043ec:	ffffdfff 	.word	0xffffdfff
 80043f0:	ffffbfff 	.word	0xffffbfff
 80043f4:	fff0ffff 	.word	0xfff0ffff
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	efffffff 	.word	0xefffffff
 8004400:	ff0fffff 	.word	0xff0fffff
 8004404:	feffffff 	.word	0xfeffffff
 8004408:	fdffffff 	.word	0xfdffffff
 800440c:	dfffffff 	.word	0xdfffffff

08004410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e046      	b.n	80044b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2288      	movs	r2, #136	; 0x88
 8004426:	589b      	ldr	r3, [r3, r2]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2284      	movs	r2, #132	; 0x84
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f002 fb46 	bl	8006ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2288      	movs	r2, #136	; 0x88
 8004440:	2124      	movs	r1, #36	; 0x24
 8004442:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 fc6c 	bl	8004d34 <UART_SetConfig>
 800445c:	0003      	movs	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e024      	b.n	80044b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f000 fed7 	bl	8005224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	490d      	ldr	r1, [pc, #52]	; (80044b8 <HAL_UART_Init+0xa8>)
 8004482:	400a      	ands	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	212a      	movs	r1, #42	; 0x2a
 8004492:	438a      	bics	r2, r1
 8004494:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 ff6f 	bl	800538c <UART_CheckIdleState>
 80044ae:	0003      	movs	r3, r0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	ffffb7ff 	.word	0xffffb7ff

080044bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	1dbb      	adds	r3, r7, #6
 80044ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2288      	movs	r2, #136	; 0x88
 80044d0:	589b      	ldr	r3, [r3, r2]
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d000      	beq.n	80044d8 <HAL_UART_Transmit+0x1c>
 80044d6:	e088      	b.n	80045ea <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_UART_Transmit+0x2a>
 80044de:	1dbb      	adds	r3, r7, #6
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e080      	b.n	80045ec <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	015b      	lsls	r3, r3, #5
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d109      	bne.n	800450a <HAL_UART_Transmit+0x4e>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2201      	movs	r2, #1
 8004502:	4013      	ands	r3, r2
 8004504:	d001      	beq.n	800450a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e070      	b.n	80045ec <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2290      	movs	r2, #144	; 0x90
 800450e:	2100      	movs	r1, #0
 8004510:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2288      	movs	r2, #136	; 0x88
 8004516:	2121      	movs	r1, #33	; 0x21
 8004518:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fc fc5f 	bl	8000ddc <HAL_GetTick>
 800451e:	0003      	movs	r3, r0
 8004520:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1dba      	adds	r2, r7, #6
 8004526:	2154      	movs	r1, #84	; 0x54
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1dba      	adds	r2, r7, #6
 8004530:	2156      	movs	r1, #86	; 0x56
 8004532:	8812      	ldrh	r2, [r2, #0]
 8004534:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	015b      	lsls	r3, r3, #5
 800453e:	429a      	cmp	r2, r3
 8004540:	d108      	bne.n	8004554 <HAL_UART_Transmit+0x98>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e003      	b.n	800455c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800455c:	e02c      	b.n	80045b8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	0013      	movs	r3, r2
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	f000 ff5c 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e039      	b.n	80045ec <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	001a      	movs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	05d2      	lsls	r2, r2, #23
 800458a:	0dd2      	lsrs	r2, r2, #23
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e007      	b.n	80045a6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2256      	movs	r2, #86	; 0x56
 80045aa:	5a9b      	ldrh	r3, [r3, r2]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b299      	uxth	r1, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2256      	movs	r2, #86	; 0x56
 80045b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2256      	movs	r2, #86	; 0x56
 80045bc:	5a9b      	ldrh	r3, [r3, r2]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1cc      	bne.n	800455e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	0013      	movs	r3, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	2140      	movs	r1, #64	; 0x40
 80045d2:	f000 ff29 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80045d6:	1e03      	subs	r3, r0, #0
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e006      	b.n	80045ec <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2288      	movs	r2, #136	; 0x88
 80045e2:	2120      	movs	r1, #32
 80045e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b008      	add	sp, #32
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	1dbb      	adds	r3, r7, #6
 8004600:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	228c      	movs	r2, #140	; 0x8c
 8004606:	589b      	ldr	r3, [r3, r2]
 8004608:	2b20      	cmp	r3, #32
 800460a:	d14a      	bne.n	80046a2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_UART_Receive_IT+0x26>
 8004612:	1dbb      	adds	r3, r7, #6
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e042      	b.n	80046a4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	429a      	cmp	r2, r3
 8004628:	d109      	bne.n	800463e <HAL_UART_Receive_IT+0x4a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	d001      	beq.n	800463e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e032      	b.n	80046a4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_UART_Receive_IT+0xb8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d020      	beq.n	8004690 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	4013      	ands	r3, r2
 800465a:	d019      	beq.n	8004690 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	613b      	str	r3, [r7, #16]
  return(result);
 8004662:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	04c9      	lsls	r1, r1, #19
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004690:	1dbb      	adds	r3, r7, #6
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 ff8d 	bl	80055b8 <UART_Start_Receive_IT>
 800469e:	0003      	movs	r3, r0
 80046a0:	e000      	b.n	80046a4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b008      	add	sp, #32
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40008000 	.word	0x40008000

080046b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b0:	b5b0      	push	{r4, r5, r7, lr}
 80046b2:	b0aa      	sub	sp, #168	; 0xa8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	22a4      	movs	r2, #164	; 0xa4
 80046c0:	18b9      	adds	r1, r7, r2
 80046c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	20a0      	movs	r0, #160	; 0xa0
 80046cc:	1839      	adds	r1, r7, r0
 80046ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	249c      	movs	r4, #156	; 0x9c
 80046d8:	1939      	adds	r1, r7, r4
 80046da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046dc:	0011      	movs	r1, r2
 80046de:	18bb      	adds	r3, r7, r2
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4aa2      	ldr	r2, [pc, #648]	; (800496c <HAL_UART_IRQHandler+0x2bc>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	2298      	movs	r2, #152	; 0x98
 80046e8:	18bd      	adds	r5, r7, r2
 80046ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80046ec:	18bb      	adds	r3, r7, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11a      	bne.n	800472a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2220      	movs	r2, #32
 80046fa:	4013      	ands	r3, r2
 80046fc:	d015      	beq.n	800472a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2220      	movs	r2, #32
 8004704:	4013      	ands	r3, r2
 8004706:	d105      	bne.n	8004714 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004708:	193b      	adds	r3, r7, r4
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	055b      	lsls	r3, r3, #21
 8004710:	4013      	ands	r3, r2
 8004712:	d00a      	beq.n	800472a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <HAL_UART_IRQHandler+0x6e>
 800471c:	e2dc      	b.n	8004cd8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	0010      	movs	r0, r2
 8004726:	4798      	blx	r3
      }
      return;
 8004728:	e2d6      	b.n	8004cd8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800472a:	2398      	movs	r3, #152	; 0x98
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_UART_IRQHandler+0x86>
 8004734:	e122      	b.n	800497c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004736:	239c      	movs	r3, #156	; 0x9c
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a8c      	ldr	r2, [pc, #560]	; (8004970 <HAL_UART_IRQHandler+0x2c0>)
 800473e:	4013      	ands	r3, r2
 8004740:	d106      	bne.n	8004750 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004742:	23a0      	movs	r3, #160	; 0xa0
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a8a      	ldr	r2, [pc, #552]	; (8004974 <HAL_UART_IRQHandler+0x2c4>)
 800474a:	4013      	ands	r3, r2
 800474c:	d100      	bne.n	8004750 <HAL_UART_IRQHandler+0xa0>
 800474e:	e115      	b.n	800497c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004750:	23a4      	movs	r3, #164	; 0xa4
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2201      	movs	r2, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d012      	beq.n	8004782 <HAL_UART_IRQHandler+0xd2>
 800475c:	23a0      	movs	r3, #160	; 0xa0
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d00b      	beq.n	8004782 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2290      	movs	r2, #144	; 0x90
 8004776:	589b      	ldr	r3, [r3, r2]
 8004778:	2201      	movs	r2, #1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2190      	movs	r1, #144	; 0x90
 8004780:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004782:	23a4      	movs	r3, #164	; 0xa4
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2202      	movs	r2, #2
 800478a:	4013      	ands	r3, r2
 800478c:	d011      	beq.n	80047b2 <HAL_UART_IRQHandler+0x102>
 800478e:	239c      	movs	r3, #156	; 0x9c
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2202      	movs	r2, #2
 80047a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2290      	movs	r2, #144	; 0x90
 80047a6:	589b      	ldr	r3, [r3, r2]
 80047a8:	2204      	movs	r2, #4
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2190      	movs	r1, #144	; 0x90
 80047b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047b2:	23a4      	movs	r3, #164	; 0xa4
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2204      	movs	r2, #4
 80047ba:	4013      	ands	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_UART_IRQHandler+0x132>
 80047be:	239c      	movs	r3, #156	; 0x9c
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2204      	movs	r2, #4
 80047d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2290      	movs	r2, #144	; 0x90
 80047d6:	589b      	ldr	r3, [r3, r2]
 80047d8:	2202      	movs	r2, #2
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2190      	movs	r1, #144	; 0x90
 80047e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047e2:	23a4      	movs	r3, #164	; 0xa4
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2208      	movs	r2, #8
 80047ea:	4013      	ands	r3, r2
 80047ec:	d017      	beq.n	800481e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047ee:	23a0      	movs	r3, #160	; 0xa0
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2220      	movs	r2, #32
 80047f6:	4013      	ands	r3, r2
 80047f8:	d105      	bne.n	8004806 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047fa:	239c      	movs	r3, #156	; 0x9c
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5b      	ldr	r2, [pc, #364]	; (8004970 <HAL_UART_IRQHandler+0x2c0>)
 8004802:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004804:	d00b      	beq.n	800481e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2208      	movs	r2, #8
 800480c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2290      	movs	r2, #144	; 0x90
 8004812:	589b      	ldr	r3, [r3, r2]
 8004814:	2208      	movs	r2, #8
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2190      	movs	r1, #144	; 0x90
 800481c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800481e:	23a4      	movs	r3, #164	; 0xa4
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_UART_IRQHandler+0x1a4>
 800482c:	23a0      	movs	r3, #160	; 0xa0
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	04db      	lsls	r3, r3, #19
 8004836:	4013      	ands	r3, r2
 8004838:	d00c      	beq.n	8004854 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2290      	movs	r2, #144	; 0x90
 8004848:	589b      	ldr	r3, [r3, r2]
 800484a:	2220      	movs	r2, #32
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2190      	movs	r1, #144	; 0x90
 8004852:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2290      	movs	r2, #144	; 0x90
 8004858:	589b      	ldr	r3, [r3, r2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d100      	bne.n	8004860 <HAL_UART_IRQHandler+0x1b0>
 800485e:	e23d      	b.n	8004cdc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004860:	23a4      	movs	r3, #164	; 0xa4
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	4013      	ands	r3, r2
 800486a:	d015      	beq.n	8004898 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800486c:	23a0      	movs	r3, #160	; 0xa0
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2220      	movs	r2, #32
 8004874:	4013      	ands	r3, r2
 8004876:	d106      	bne.n	8004886 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004878:	239c      	movs	r3, #156	; 0x9c
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	055b      	lsls	r3, r3, #21
 8004882:	4013      	ands	r3, r2
 8004884:	d008      	beq.n	8004898 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	0010      	movs	r0, r2
 8004896:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2290      	movs	r2, #144	; 0x90
 800489c:	589b      	ldr	r3, [r3, r2]
 800489e:	2194      	movs	r1, #148	; 0x94
 80048a0:	187a      	adds	r2, r7, r1
 80048a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d004      	beq.n	80048bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2228      	movs	r2, #40	; 0x28
 80048b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ba:	d04c      	beq.n	8004956 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 ff9e 	bl	8005800 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d13c      	bne.n	800494c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d2:	f3ef 8310 	mrs	r3, PRIMASK
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80048d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	2090      	movs	r0, #144	; 0x90
 80048dc:	183a      	adds	r2, r7, r0
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	2301      	movs	r3, #1
 80048e2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2140      	movs	r1, #64	; 0x40
 80048f8:	438a      	bics	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	183b      	adds	r3, r7, r0
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004904:	f383 8810 	msr	PRIMASK, r3
}
 8004908:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2280      	movs	r2, #128	; 0x80
 800490e:	589b      	ldr	r3, [r3, r2]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d016      	beq.n	8004942 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	589b      	ldr	r3, [r3, r2]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_UART_IRQHandler+0x2c8>)
 800491c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	589b      	ldr	r3, [r3, r2]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fd fcb1 	bl	800228c <HAL_DMA_Abort_IT>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d01c      	beq.n	8004968 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	589b      	ldr	r3, [r3, r2]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	5852      	ldr	r2, [r2, r1]
 800493c:	0010      	movs	r0, r2
 800493e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e012      	b.n	8004968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f9e1 	bl	8004d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494a:	e00d      	b.n	8004968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f9dc 	bl	8004d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e008      	b.n	8004968 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f000 f9d7 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2290      	movs	r2, #144	; 0x90
 8004962:	2100      	movs	r1, #0
 8004964:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004966:	e1b9      	b.n	8004cdc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	46c0      	nop			; (mov r8, r8)
    return;
 800496a:	e1b7      	b.n	8004cdc <HAL_UART_IRQHandler+0x62c>
 800496c:	0000080f 	.word	0x0000080f
 8004970:	10000001 	.word	0x10000001
 8004974:	04000120 	.word	0x04000120
 8004978:	080058cd 	.word	0x080058cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d000      	beq.n	8004986 <HAL_UART_IRQHandler+0x2d6>
 8004984:	e13e      	b.n	8004c04 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004986:	23a4      	movs	r3, #164	; 0xa4
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2210      	movs	r2, #16
 800498e:	4013      	ands	r3, r2
 8004990:	d100      	bne.n	8004994 <HAL_UART_IRQHandler+0x2e4>
 8004992:	e137      	b.n	8004c04 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004994:	23a0      	movs	r3, #160	; 0xa0
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2210      	movs	r2, #16
 800499c:	4013      	ands	r3, r2
 800499e:	d100      	bne.n	80049a2 <HAL_UART_IRQHandler+0x2f2>
 80049a0:	e130      	b.n	8004c04 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2210      	movs	r2, #16
 80049a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d000      	beq.n	80049ba <HAL_UART_IRQHandler+0x30a>
 80049b8:	e0a4      	b.n	8004b04 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	589b      	ldr	r3, [r3, r2]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	217e      	movs	r1, #126	; 0x7e
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049ca:	187b      	adds	r3, r7, r1
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d100      	bne.n	80049d4 <HAL_UART_IRQHandler+0x324>
 80049d2:	e185      	b.n	8004ce0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	225c      	movs	r2, #92	; 0x5c
 80049d8:	5a9b      	ldrh	r3, [r3, r2]
 80049da:	187a      	adds	r2, r7, r1
 80049dc:	8812      	ldrh	r2, [r2, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d300      	bcc.n	80049e4 <HAL_UART_IRQHandler+0x334>
 80049e2:	e17d      	b.n	8004ce0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	187a      	adds	r2, r7, r1
 80049e8:	215e      	movs	r1, #94	; 0x5e
 80049ea:	8812      	ldrh	r2, [r2, #0]
 80049ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	589b      	ldr	r3, [r3, r2]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	4013      	ands	r3, r2
 80049fc:	d170      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a08:	2301      	movs	r3, #1
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	f383 8810 	msr	PRIMASK, r3
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	49b4      	ldr	r1, [pc, #720]	; (8004cf0 <HAL_UART_IRQHandler+0x640>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	f383 8810 	msr	PRIMASK, r3
}
 8004a2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a30:	f3ef 8310 	mrs	r3, PRIMASK
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	677b      	str	r3, [r7, #116]	; 0x74
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	438a      	bics	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	f383 8810 	msr	PRIMASK, r3
}
 8004a60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a62:	f3ef 8310 	mrs	r3, PRIMASK
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a72:	f383 8810 	msr	PRIMASK, r3
}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2140      	movs	r1, #64	; 0x40
 8004a84:	438a      	bics	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	f383 8810 	msr	PRIMASK, r3
}
 8004a92:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	228c      	movs	r2, #140	; 0x8c
 8004a98:	2120      	movs	r1, #32
 8004a9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aac:	2301      	movs	r3, #1
 8004aae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2110      	movs	r1, #16
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2280      	movs	r2, #128	; 0x80
 8004ad8:	589b      	ldr	r3, [r3, r2]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fd fb74 	bl	80021c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	225c      	movs	r2, #92	; 0x5c
 8004aea:	5a9a      	ldrh	r2, [r3, r2]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	215e      	movs	r1, #94	; 0x5e
 8004af0:	5a5b      	ldrh	r3, [r3, r1]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f90d 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b02:	e0ed      	b.n	8004ce0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	225c      	movs	r2, #92	; 0x5c
 8004b08:	5a99      	ldrh	r1, [r3, r2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	225e      	movs	r2, #94	; 0x5e
 8004b0e:	5a9b      	ldrh	r3, [r3, r2]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	208e      	movs	r0, #142	; 0x8e
 8004b14:	183b      	adds	r3, r7, r0
 8004b16:	1a8a      	subs	r2, r1, r2
 8004b18:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	225e      	movs	r2, #94	; 0x5e
 8004b1e:	5a9b      	ldrh	r3, [r3, r2]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d100      	bne.n	8004b28 <HAL_UART_IRQHandler+0x478>
 8004b26:	e0dd      	b.n	8004ce4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004b28:	183b      	adds	r3, r7, r0
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d100      	bne.n	8004b32 <HAL_UART_IRQHandler+0x482>
 8004b30:	e0d8      	b.n	8004ce4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b3a:	2488      	movs	r4, #136	; 0x88
 8004b3c:	193a      	adds	r2, r7, r4
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4967      	ldr	r1, [pc, #412]	; (8004cf4 <HAL_UART_IRQHandler+0x644>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	193b      	adds	r3, r7, r4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f383 8810 	msr	PRIMASK, r3
}
 8004b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b72:	2484      	movs	r4, #132	; 0x84
 8004b74:	193a      	adds	r2, r7, r4
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	2301      	movs	r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f383 8810 	msr	PRIMASK, r3
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	495a      	ldr	r1, [pc, #360]	; (8004cf8 <HAL_UART_IRQHandler+0x648>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	193b      	adds	r3, r7, r4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ba0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	228c      	movs	r2, #140	; 0x8c
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	2480      	movs	r4, #128	; 0x80
 8004bc0:	193a      	adds	r2, r7, r4
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	f383 8810 	msr	PRIMASK, r3
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2110      	movs	r1, #16
 8004bdc:	438a      	bics	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	193b      	adds	r3, r7, r4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf4:	183b      	adds	r3, r7, r0
 8004bf6:	881a      	ldrh	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 f88d 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c02:	e06f      	b.n	8004ce4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c04:	23a4      	movs	r3, #164	; 0xa4
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	035b      	lsls	r3, r3, #13
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d010      	beq.n	8004c34 <HAL_UART_IRQHandler+0x584>
 8004c12:	239c      	movs	r3, #156	; 0x9c
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	03db      	lsls	r3, r3, #15
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	0352      	lsls	r2, r2, #13
 8004c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f001 faf1 	bl	8006214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c32:	e05a      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c34:	23a4      	movs	r3, #164	; 0xa4
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d016      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c40:	23a0      	movs	r3, #160	; 0xa0
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d106      	bne.n	8004c5a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c4c:	239c      	movs	r3, #156	; 0x9c
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	4013      	ands	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d042      	beq.n	8004ce8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	0010      	movs	r0, r2
 8004c6a:	4798      	blx	r3
    }
    return;
 8004c6c:	e03c      	b.n	8004ce8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c6e:	23a4      	movs	r3, #164	; 0xa4
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2240      	movs	r2, #64	; 0x40
 8004c76:	4013      	ands	r3, r2
 8004c78:	d00a      	beq.n	8004c90 <HAL_UART_IRQHandler+0x5e0>
 8004c7a:	23a0      	movs	r3, #160	; 0xa0
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2240      	movs	r2, #64	; 0x40
 8004c82:	4013      	ands	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 fe36 	bl	80058fa <UART_EndTransmit_IT>
    return;
 8004c8e:	e02c      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c90:	23a4      	movs	r3, #164	; 0xa4
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x606>
 8004c9e:	23a0      	movs	r3, #160	; 0xa0
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	05db      	lsls	r3, r3, #23
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f001 fac0 	bl	8006234 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cb4:	e019      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cb6:	23a4      	movs	r3, #164	; 0xa4
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	045b      	lsls	r3, r3, #17
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d012      	beq.n	8004cea <HAL_UART_IRQHandler+0x63a>
 8004cc4:	23a0      	movs	r3, #160	; 0xa0
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da0d      	bge.n	8004cea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f001 faa7 	bl	8006224 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cd6:	e008      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
      return;
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	e006      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
    return;
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	e004      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
      return;
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	e002      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
      return;
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	e000      	b.n	8004cea <HAL_UART_IRQHandler+0x63a>
    return;
 8004ce8:	46c0      	nop			; (mov r8, r8)
  }
}
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b02a      	add	sp, #168	; 0xa8
 8004cee:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf0:	fffffeff 	.word	0xfffffeff
 8004cf4:	fffffedf 	.word	0xfffffedf
 8004cf8:	effffffe 	.word	0xeffffffe

08004cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	000a      	movs	r2, r1
 8004d26:	1cbb      	adds	r3, r7, #2
 8004d28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b002      	add	sp, #8
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b5b0      	push	{r4, r5, r7, lr}
 8004d36:	b090      	sub	sp, #64	; 0x40
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d3c:	231a      	movs	r3, #26
 8004d3e:	2220      	movs	r2, #32
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	19db      	adds	r3, r3, r7
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4ac4      	ldr	r2, [pc, #784]	; (8005078 <UART_SetConfig+0x344>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4abf      	ldr	r2, [pc, #764]	; (800507c <UART_SetConfig+0x348>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0018      	movs	r0, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	68d9      	ldr	r1, [r3, #12]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4ab9      	ldr	r2, [pc, #740]	; (8005080 <UART_SetConfig+0x34c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004da6:	4313      	orrs	r3, r2
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4ab4      	ldr	r2, [pc, #720]	; (8005084 <UART_SetConfig+0x350>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	220f      	movs	r2, #15
 8004dc8:	4393      	bics	r3, r2
 8004dca:	0018      	movs	r0, r3
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4aaa      	ldr	r2, [pc, #680]	; (8005088 <UART_SetConfig+0x354>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d131      	bne.n	8004e48 <UART_SetConfig+0x114>
 8004de4:	4ba9      	ldr	r3, [pc, #676]	; (800508c <UART_SetConfig+0x358>)
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	2203      	movs	r2, #3
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d01d      	beq.n	8004e2c <UART_SetConfig+0xf8>
 8004df0:	d823      	bhi.n	8004e3a <UART_SetConfig+0x106>
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d00c      	beq.n	8004e10 <UART_SetConfig+0xdc>
 8004df6:	d820      	bhi.n	8004e3a <UART_SetConfig+0x106>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <UART_SetConfig+0xce>
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d00e      	beq.n	8004e1e <UART_SetConfig+0xea>
 8004e00:	e01b      	b.n	8004e3a <UART_SetConfig+0x106>
 8004e02:	231b      	movs	r3, #27
 8004e04:	2220      	movs	r2, #32
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	19db      	adds	r3, r3, r7
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e071      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e10:	231b      	movs	r3, #27
 8004e12:	2220      	movs	r2, #32
 8004e14:	189b      	adds	r3, r3, r2
 8004e16:	19db      	adds	r3, r3, r7
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e06a      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e1e:	231b      	movs	r3, #27
 8004e20:	2220      	movs	r2, #32
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	19db      	adds	r3, r3, r7
 8004e26:	2204      	movs	r2, #4
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e063      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e2c:	231b      	movs	r3, #27
 8004e2e:	2220      	movs	r2, #32
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	19db      	adds	r3, r3, r7
 8004e34:	2208      	movs	r2, #8
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e05c      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e3a:	231b      	movs	r3, #27
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	19db      	adds	r3, r3, r7
 8004e42:	2210      	movs	r2, #16
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e055      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a90      	ldr	r2, [pc, #576]	; (8005090 <UART_SetConfig+0x35c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d106      	bne.n	8004e60 <UART_SetConfig+0x12c>
 8004e52:	231b      	movs	r3, #27
 8004e54:	2220      	movs	r2, #32
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	19db      	adds	r3, r3, r7
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e049      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a86      	ldr	r2, [pc, #536]	; (8005080 <UART_SetConfig+0x34c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d13e      	bne.n	8004ee8 <UART_SetConfig+0x1b4>
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <UART_SetConfig+0x358>)
 8004e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e6e:	23c0      	movs	r3, #192	; 0xc0
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4013      	ands	r3, r2
 8004e74:	22c0      	movs	r2, #192	; 0xc0
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <UART_SetConfig+0x198>
 8004e7c:	22c0      	movs	r2, #192	; 0xc0
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d82a      	bhi.n	8004eda <UART_SetConfig+0x1a6>
 8004e84:	2280      	movs	r2, #128	; 0x80
 8004e86:	0112      	lsls	r2, r2, #4
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d011      	beq.n	8004eb0 <UART_SetConfig+0x17c>
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0112      	lsls	r2, r2, #4
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d822      	bhi.n	8004eda <UART_SetConfig+0x1a6>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <UART_SetConfig+0x16e>
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	00d2      	lsls	r2, r2, #3
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00e      	beq.n	8004ebe <UART_SetConfig+0x18a>
 8004ea0:	e01b      	b.n	8004eda <UART_SetConfig+0x1a6>
 8004ea2:	231b      	movs	r3, #27
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	189b      	adds	r3, r3, r2
 8004ea8:	19db      	adds	r3, r3, r7
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e021      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004eb0:	231b      	movs	r3, #27
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	19db      	adds	r3, r3, r7
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e01a      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004ebe:	231b      	movs	r3, #27
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	19db      	adds	r3, r3, r7
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e013      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004ecc:	231b      	movs	r3, #27
 8004ece:	2220      	movs	r2, #32
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	19db      	adds	r3, r3, r7
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e00c      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004eda:	231b      	movs	r3, #27
 8004edc:	2220      	movs	r2, #32
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	19db      	adds	r3, r3, r7
 8004ee2:	2210      	movs	r2, #16
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e005      	b.n	8004ef4 <UART_SetConfig+0x1c0>
 8004ee8:	231b      	movs	r3, #27
 8004eea:	2220      	movs	r2, #32
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	19db      	adds	r3, r3, r7
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a61      	ldr	r2, [pc, #388]	; (8005080 <UART_SetConfig+0x34c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d000      	beq.n	8004f00 <UART_SetConfig+0x1cc>
 8004efe:	e092      	b.n	8005026 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f00:	231b      	movs	r3, #27
 8004f02:	2220      	movs	r2, #32
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	19db      	adds	r3, r3, r7
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d015      	beq.n	8004f3a <UART_SetConfig+0x206>
 8004f0e:	dc18      	bgt.n	8004f42 <UART_SetConfig+0x20e>
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d00d      	beq.n	8004f30 <UART_SetConfig+0x1fc>
 8004f14:	dc15      	bgt.n	8004f42 <UART_SetConfig+0x20e>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0x1ec>
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d005      	beq.n	8004f2a <UART_SetConfig+0x1f6>
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f20:	f7fe f89a 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8004f24:	0003      	movs	r3, r0
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f28:	e014      	b.n	8004f54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2a:	4b5a      	ldr	r3, [pc, #360]	; (8005094 <UART_SetConfig+0x360>)
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f2e:	e011      	b.n	8004f54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f30:	f7fe f806 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8004f34:	0003      	movs	r3, r0
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f38:	e00c      	b.n	8004f54 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f40:	e008      	b.n	8004f54 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f46:	231a      	movs	r3, #26
 8004f48:	2220      	movs	r2, #32
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	19db      	adds	r3, r3, r7
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
        break;
 8004f52:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d100      	bne.n	8004f5c <UART_SetConfig+0x228>
 8004f5a:	e147      	b.n	80051ec <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f60:	4b4d      	ldr	r3, [pc, #308]	; (8005098 <UART_SetConfig+0x364>)
 8004f62:	0052      	lsls	r2, r2, #1
 8004f64:	5ad3      	ldrh	r3, [r2, r3]
 8004f66:	0019      	movs	r1, r3
 8004f68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f6a:	f7fb f8d5 	bl	8000118 <__udivsi3>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	0013      	movs	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d305      	bcc.n	8004f8e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d906      	bls.n	8004f9c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004f8e:	231a      	movs	r3, #26
 8004f90:	2220      	movs	r2, #32
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	19db      	adds	r3, r3, r7
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e127      	b.n	80051ec <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <UART_SetConfig+0x364>)
 8004faa:	0052      	lsls	r2, r2, #1
 8004fac:	5ad3      	ldrh	r3, [r2, r3]
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	69b8      	ldr	r0, [r7, #24]
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	f7fb f938 	bl	8000230 <__aeabi_uldivmod>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	000b      	movs	r3, r1
 8004fc4:	0e11      	lsrs	r1, r2, #24
 8004fc6:	021d      	lsls	r5, r3, #8
 8004fc8:	430d      	orrs	r5, r1
 8004fca:	0214      	lsls	r4, r2, #8
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68b8      	ldr	r0, [r7, #8]
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	1900      	adds	r0, r0, r4
 8004fde:	4169      	adcs	r1, r5
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f7fb f91f 	bl	8000230 <__aeabi_uldivmod>
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	000b      	movs	r3, r1
 8004ff6:	0013      	movs	r3, r2
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffc:	23c0      	movs	r3, #192	; 0xc0
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	429a      	cmp	r2, r3
 8005002:	d309      	bcc.n	8005018 <UART_SetConfig+0x2e4>
 8005004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	035b      	lsls	r3, r3, #13
 800500a:	429a      	cmp	r2, r3
 800500c:	d204      	bcs.n	8005018 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	e0e9      	b.n	80051ec <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005018:	231a      	movs	r3, #26
 800501a:	2220      	movs	r2, #32
 800501c:	189b      	adds	r3, r3, r2
 800501e:	19db      	adds	r3, r3, r7
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e0e2      	b.n	80051ec <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	429a      	cmp	r2, r3
 8005030:	d000      	beq.n	8005034 <UART_SetConfig+0x300>
 8005032:	e083      	b.n	800513c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005034:	231b      	movs	r3, #27
 8005036:	2220      	movs	r2, #32
 8005038:	189b      	adds	r3, r3, r2
 800503a:	19db      	adds	r3, r3, r7
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b08      	cmp	r3, #8
 8005040:	d015      	beq.n	800506e <UART_SetConfig+0x33a>
 8005042:	dc2b      	bgt.n	800509c <UART_SetConfig+0x368>
 8005044:	2b04      	cmp	r3, #4
 8005046:	d00d      	beq.n	8005064 <UART_SetConfig+0x330>
 8005048:	dc28      	bgt.n	800509c <UART_SetConfig+0x368>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <UART_SetConfig+0x320>
 800504e:	2b02      	cmp	r3, #2
 8005050:	d005      	beq.n	800505e <UART_SetConfig+0x32a>
 8005052:	e023      	b.n	800509c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005054:	f7fe f800 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8005058:	0003      	movs	r3, r0
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800505c:	e027      	b.n	80050ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <UART_SetConfig+0x360>)
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005062:	e024      	b.n	80050ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005064:	f7fd ff6c 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8005068:	0003      	movs	r3, r0
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800506c:	e01f      	b.n	80050ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005074:	e01b      	b.n	80050ae <UART_SetConfig+0x37a>
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	cfff69f3 	.word	0xcfff69f3
 800507c:	ffffcfff 	.word	0xffffcfff
 8005080:	40008000 	.word	0x40008000
 8005084:	11fff4ff 	.word	0x11fff4ff
 8005088:	40013800 	.word	0x40013800
 800508c:	40021000 	.word	0x40021000
 8005090:	40004400 	.word	0x40004400
 8005094:	00f42400 	.word	0x00f42400
 8005098:	080077ec 	.word	0x080077ec
      default:
        pclk = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80050a0:	231a      	movs	r3, #26
 80050a2:	2220      	movs	r2, #32
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	19db      	adds	r3, r3, r7
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
        break;
 80050ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d100      	bne.n	80050b6 <UART_SetConfig+0x382>
 80050b4:	e09a      	b.n	80051ec <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ba:	4b58      	ldr	r3, [pc, #352]	; (800521c <UART_SetConfig+0x4e8>)
 80050bc:	0052      	lsls	r2, r2, #1
 80050be:	5ad3      	ldrh	r3, [r2, r3]
 80050c0:	0019      	movs	r1, r3
 80050c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050c4:	f7fb f828 	bl	8000118 <__udivsi3>
 80050c8:	0003      	movs	r3, r0
 80050ca:	005a      	lsls	r2, r3, #1
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	18d2      	adds	r2, r2, r3
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	0019      	movs	r1, r3
 80050da:	0010      	movs	r0, r2
 80050dc:	f7fb f81c 	bl	8000118 <__udivsi3>
 80050e0:	0003      	movs	r3, r0
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	d921      	bls.n	800512e <UART_SetConfig+0x3fa>
 80050ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	025b      	lsls	r3, r3, #9
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d21c      	bcs.n	800512e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	200e      	movs	r0, #14
 80050fa:	2420      	movs	r4, #32
 80050fc:	1903      	adds	r3, r0, r4
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	210f      	movs	r1, #15
 8005102:	438a      	bics	r2, r1
 8005104:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	b29b      	uxth	r3, r3
 800510c:	2207      	movs	r2, #7
 800510e:	4013      	ands	r3, r2
 8005110:	b299      	uxth	r1, r3
 8005112:	1903      	adds	r3, r0, r4
 8005114:	19db      	adds	r3, r3, r7
 8005116:	1902      	adds	r2, r0, r4
 8005118:	19d2      	adds	r2, r2, r7
 800511a:	8812      	ldrh	r2, [r2, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	1902      	adds	r2, r0, r4
 8005126:	19d2      	adds	r2, r2, r7
 8005128:	8812      	ldrh	r2, [r2, #0]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	e05e      	b.n	80051ec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800512e:	231a      	movs	r3, #26
 8005130:	2220      	movs	r2, #32
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e057      	b.n	80051ec <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800513c:	231b      	movs	r3, #27
 800513e:	2220      	movs	r2, #32
 8005140:	189b      	adds	r3, r3, r2
 8005142:	19db      	adds	r3, r3, r7
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b08      	cmp	r3, #8
 8005148:	d015      	beq.n	8005176 <UART_SetConfig+0x442>
 800514a:	dc18      	bgt.n	800517e <UART_SetConfig+0x44a>
 800514c:	2b04      	cmp	r3, #4
 800514e:	d00d      	beq.n	800516c <UART_SetConfig+0x438>
 8005150:	dc15      	bgt.n	800517e <UART_SetConfig+0x44a>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <UART_SetConfig+0x428>
 8005156:	2b02      	cmp	r3, #2
 8005158:	d005      	beq.n	8005166 <UART_SetConfig+0x432>
 800515a:	e010      	b.n	800517e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fd ff7c 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8005160:	0003      	movs	r3, r0
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005164:	e014      	b.n	8005190 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <UART_SetConfig+0x4ec>)
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800516a:	e011      	b.n	8005190 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516c:	f7fd fee8 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8005170:	0003      	movs	r3, r0
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005174:	e00c      	b.n	8005190 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800517c:	e008      	b.n	8005190 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005182:	231a      	movs	r3, #26
 8005184:	2220      	movs	r2, #32
 8005186:	189b      	adds	r3, r3, r2
 8005188:	19db      	adds	r3, r3, r7
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
        break;
 800518e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02a      	beq.n	80051ec <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <UART_SetConfig+0x4e8>)
 800519c:	0052      	lsls	r2, r2, #1
 800519e:	5ad3      	ldrh	r3, [r2, r3]
 80051a0:	0019      	movs	r1, r3
 80051a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051a4:	f7fa ffb8 	bl	8000118 <__udivsi3>
 80051a8:	0003      	movs	r3, r0
 80051aa:	001a      	movs	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	18d2      	adds	r2, r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	0019      	movs	r1, r3
 80051ba:	0010      	movs	r0, r2
 80051bc:	f7fa ffac 	bl	8000118 <__udivsi3>
 80051c0:	0003      	movs	r3, r0
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	d90a      	bls.n	80051e0 <UART_SetConfig+0x4ac>
 80051ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	025b      	lsls	r3, r3, #9
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d205      	bcs.n	80051e0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e005      	b.n	80051ec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	231a      	movs	r3, #26
 80051e2:	2220      	movs	r2, #32
 80051e4:	189b      	adds	r3, r3, r2
 80051e6:	19db      	adds	r3, r3, r7
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	226a      	movs	r2, #106	; 0x6a
 80051f0:	2101      	movs	r1, #1
 80051f2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	2268      	movs	r2, #104	; 0x68
 80051f8:	2101      	movs	r1, #1
 80051fa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2200      	movs	r2, #0
 8005200:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2200      	movs	r2, #0
 8005206:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005208:	231a      	movs	r3, #26
 800520a:	2220      	movs	r2, #32
 800520c:	189b      	adds	r3, r3, r2
 800520e:	19db      	adds	r3, r3, r7
 8005210:	781b      	ldrb	r3, [r3, #0]
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b010      	add	sp, #64	; 0x40
 8005218:	bdb0      	pop	{r4, r5, r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	080077ec 	.word	0x080077ec
 8005220:	00f42400 	.word	0x00f42400

08005224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	d00b      	beq.n	800524e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <UART_AdvFeatureConfig+0x144>)
 800523e:	4013      	ands	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	2202      	movs	r2, #2
 8005254:	4013      	ands	r3, r2
 8005256:	d00b      	beq.n	8005270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4a43      	ldr	r2, [pc, #268]	; (800536c <UART_AdvFeatureConfig+0x148>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	2204      	movs	r2, #4
 8005276:	4013      	ands	r3, r2
 8005278:	d00b      	beq.n	8005292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <UART_AdvFeatureConfig+0x14c>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	2208      	movs	r2, #8
 8005298:	4013      	ands	r3, r2
 800529a:	d00b      	beq.n	80052b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a34      	ldr	r2, [pc, #208]	; (8005374 <UART_AdvFeatureConfig+0x150>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	2210      	movs	r2, #16
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <UART_AdvFeatureConfig+0x154>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	2220      	movs	r2, #32
 80052dc:	4013      	ands	r3, r2
 80052de:	d00b      	beq.n	80052f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a25      	ldr	r2, [pc, #148]	; (800537c <UART_AdvFeatureConfig+0x158>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	4013      	ands	r3, r2
 8005300:	d01d      	beq.n	800533e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <UART_AdvFeatureConfig+0x15c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	035b      	lsls	r3, r3, #13
 8005322:	429a      	cmp	r2, r3
 8005324:	d10b      	bne.n	800533e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <UART_AdvFeatureConfig+0x160>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	4013      	ands	r3, r2
 8005346:	d00b      	beq.n	8005360 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <UART_AdvFeatureConfig+0x164>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}
 8005368:	fffdffff 	.word	0xfffdffff
 800536c:	fffeffff 	.word	0xfffeffff
 8005370:	fffbffff 	.word	0xfffbffff
 8005374:	ffff7fff 	.word	0xffff7fff
 8005378:	ffffefff 	.word	0xffffefff
 800537c:	ffffdfff 	.word	0xffffdfff
 8005380:	ffefffff 	.word	0xffefffff
 8005384:	ff9fffff 	.word	0xff9fffff
 8005388:	fff7ffff 	.word	0xfff7ffff

0800538c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2290      	movs	r2, #144	; 0x90
 8005398:	2100      	movs	r1, #0
 800539a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800539c:	f7fb fd1e 	bl	8000ddc <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2208      	movs	r2, #8
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d10c      	bne.n	80053cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2280      	movs	r2, #128	; 0x80
 80053b6:	0391      	lsls	r1, r2, #14
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <UART_CheckIdleState+0x98>)
 80053bc:	9200      	str	r2, [sp, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	f000 f832 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d001      	beq.n	80053cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e026      	b.n	800541a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d10c      	bne.n	80053f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	03d1      	lsls	r1, r2, #15
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4a10      	ldr	r2, [pc, #64]	; (8005424 <UART_CheckIdleState+0x98>)
 80053e4:	9200      	str	r2, [sp, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f000 f81e 	bl	8005428 <UART_WaitOnFlagUntilTimeout>
 80053ec:	1e03      	subs	r3, r0, #0
 80053ee:	d001      	beq.n	80053f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e012      	b.n	800541a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2288      	movs	r2, #136	; 0x88
 80053f8:	2120      	movs	r1, #32
 80053fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	228c      	movs	r2, #140	; 0x8c
 8005400:	2120      	movs	r1, #32
 8005402:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2284      	movs	r2, #132	; 0x84
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	01ffffff 	.word	0x01ffffff

08005428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b094      	sub	sp, #80	; 0x50
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	1dfb      	adds	r3, r7, #7
 8005436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	e0a7      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543c:	3301      	adds	r3, #1
 800543e:	d100      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005440:	e0a3      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fb fccb 	bl	8000ddc <HAL_GetTick>
 8005446:	0002      	movs	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x30>
 8005452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13f      	bne.n	80054d8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005458:	f3ef 8310 	mrs	r3, PRIMASK
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
 8005462:	2301      	movs	r3, #1
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	f383 8810 	msr	PRIMASK, r3
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	494e      	ldr	r1, [pc, #312]	; (80055b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800547a:	400a      	ands	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800548a:	f3ef 8310 	mrs	r3, PRIMASK
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
 8005494:	2301      	movs	r3, #1
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f383 8810 	msr	PRIMASK, r3
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2101      	movs	r1, #1
 80054ac:	438a      	bics	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	f383 8810 	msr	PRIMASK, r3
}
 80054ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2288      	movs	r2, #136	; 0x88
 80054c0:	2120      	movs	r1, #32
 80054c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	228c      	movs	r2, #140	; 0x8c
 80054c8:	2120      	movs	r1, #32
 80054ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2284      	movs	r2, #132	; 0x84
 80054d0:	2100      	movs	r1, #0
 80054d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e069      	b.n	80055ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2204      	movs	r2, #4
 80054e0:	4013      	ands	r3, r2
 80054e2:	d052      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	401a      	ands	r2, r3
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d148      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	0112      	lsls	r2, r2, #4
 8005500:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005502:	f3ef 8310 	mrs	r3, PRIMASK
 8005506:	613b      	str	r3, [r7, #16]
  return(result);
 8005508:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	2301      	movs	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4924      	ldr	r1, [pc, #144]	; (80055b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005524:	400a      	ands	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f383 8810 	msr	PRIMASK, r3
}
 8005532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	61fb      	str	r3, [r7, #28]
  return(result);
 800553a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	64bb      	str	r3, [r7, #72]	; 0x48
 800553e:	2301      	movs	r3, #1
 8005540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	438a      	bics	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2288      	movs	r2, #136	; 0x88
 800556a:	2120      	movs	r1, #32
 800556c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	228c      	movs	r2, #140	; 0x8c
 8005572:	2120      	movs	r1, #32
 8005574:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2290      	movs	r2, #144	; 0x90
 800557a:	2120      	movs	r1, #32
 800557c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2284      	movs	r2, #132	; 0x84
 8005582:	2100      	movs	r1, #0
 8005584:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e010      	b.n	80055ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	425a      	negs	r2, r3
 800559a:	4153      	adcs	r3, r2
 800559c:	b2db      	uxtb	r3, r3
 800559e:	001a      	movs	r2, r3
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d100      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x182>
 80055a8:	e747      	b.n	800543a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b014      	add	sp, #80	; 0x50
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	fffffe5f 	.word	0xfffffe5f

080055b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b098      	sub	sp, #96	; 0x60
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	1dbb      	adds	r3, r7, #6
 80055c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1dba      	adds	r2, r7, #6
 80055d0:	215c      	movs	r1, #92	; 0x5c
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1dba      	adds	r2, r7, #6
 80055da:	215e      	movs	r1, #94	; 0x5e
 80055dc:	8812      	ldrh	r2, [r2, #0]
 80055de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	015b      	lsls	r3, r3, #5
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10d      	bne.n	800560e <UART_Start_Receive_IT+0x56>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <UART_Start_Receive_IT+0x4c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2260      	movs	r2, #96	; 0x60
 80055fe:	497b      	ldr	r1, [pc, #492]	; (80057ec <UART_Start_Receive_IT+0x234>)
 8005600:	5299      	strh	r1, [r3, r2]
 8005602:	e02e      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2260      	movs	r2, #96	; 0x60
 8005608:	21ff      	movs	r1, #255	; 0xff
 800560a:	5299      	strh	r1, [r3, r2]
 800560c:	e029      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10d      	bne.n	8005632 <UART_Start_Receive_IT+0x7a>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <UART_Start_Receive_IT+0x70>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2260      	movs	r2, #96	; 0x60
 8005622:	21ff      	movs	r1, #255	; 0xff
 8005624:	5299      	strh	r1, [r3, r2]
 8005626:	e01c      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2260      	movs	r2, #96	; 0x60
 800562c:	217f      	movs	r1, #127	; 0x7f
 800562e:	5299      	strh	r1, [r3, r2]
 8005630:	e017      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	055b      	lsls	r3, r3, #21
 800563a:	429a      	cmp	r2, r3
 800563c:	d10d      	bne.n	800565a <UART_Start_Receive_IT+0xa2>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <UART_Start_Receive_IT+0x98>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2260      	movs	r2, #96	; 0x60
 800564a:	217f      	movs	r1, #127	; 0x7f
 800564c:	5299      	strh	r1, [r3, r2]
 800564e:	e008      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2260      	movs	r2, #96	; 0x60
 8005654:	213f      	movs	r1, #63	; 0x3f
 8005656:	5299      	strh	r1, [r3, r2]
 8005658:	e003      	b.n	8005662 <UART_Start_Receive_IT+0xaa>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2260      	movs	r2, #96	; 0x60
 800565e:	2100      	movs	r1, #0
 8005660:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2290      	movs	r2, #144	; 0x90
 8005666:	2100      	movs	r1, #0
 8005668:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	228c      	movs	r2, #140	; 0x8c
 800566e:	2122      	movs	r1, #34	; 0x22
 8005670:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567c:	2301      	movs	r3, #1
 800567e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2101      	movs	r1, #1
 8005694:	430a      	orrs	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	059b      	lsls	r3, r3, #22
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d150      	bne.n	8005752 <UART_Start_Receive_IT+0x19a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2268      	movs	r2, #104	; 0x68
 80056b4:	5a9b      	ldrh	r3, [r3, r2]
 80056b6:	1dba      	adds	r2, r7, #6
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d349      	bcc.n	8005752 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d107      	bne.n	80056da <UART_Start_Receive_IT+0x122>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a46      	ldr	r2, [pc, #280]	; (80057f0 <UART_Start_Receive_IT+0x238>)
 80056d6:	675a      	str	r2, [r3, #116]	; 0x74
 80056d8:	e002      	b.n	80056e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a45      	ldr	r2, [pc, #276]	; (80057f4 <UART_Start_Receive_IT+0x23c>)
 80056de:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d019      	beq.n	800571c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f2:	2301      	movs	r3, #1
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	0049      	lsls	r1, r1, #1
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	f383 8810 	msr	PRIMASK, r3
}
 800571a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005724:	657b      	str	r3, [r7, #84]	; 0x54
 8005726:	2301      	movs	r3, #1
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	0549      	lsls	r1, r1, #21
 8005740:	430a      	orrs	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	e047      	b.n	80057e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	015b      	lsls	r3, r3, #5
 800575a:	429a      	cmp	r2, r3
 800575c:	d107      	bne.n	800576e <UART_Start_Receive_IT+0x1b6>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <UART_Start_Receive_IT+0x240>)
 800576a:	675a      	str	r2, [r3, #116]	; 0x74
 800576c:	e002      	b.n	8005774 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <UART_Start_Receive_IT+0x244>)
 8005772:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d019      	beq.n	80057b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577c:	f3ef 8310 	mrs	r3, PRIMASK
 8005780:	61fb      	str	r3, [r7, #28]
  return(result);
 8005782:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005786:	2301      	movs	r3, #1
 8005788:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f383 8810 	msr	PRIMASK, r3
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2190      	movs	r1, #144	; 0x90
 800579e:	0049      	lsls	r1, r1, #1
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	f383 8810 	msr	PRIMASK, r3
}
 80057ae:	e018      	b.n	80057e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b0:	f3ef 8310 	mrs	r3, PRIMASK
 80057b4:	613b      	str	r3, [r7, #16]
  return(result);
 80057b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057b8:	653b      	str	r3, [r7, #80]	; 0x50
 80057ba:	2301      	movs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2120      	movs	r1, #32
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f383 8810 	msr	PRIMASK, r3
}
 80057e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b018      	add	sp, #96	; 0x60
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	000001ff 	.word	0x000001ff
 80057f0:	08005f29 	.word	0x08005f29
 80057f4:	08005c3d 	.word	0x08005c3d
 80057f8:	08005ac9 	.word	0x08005ac9
 80057fc:	08005955 	.word	0x08005955

08005800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	617b      	str	r3, [r7, #20]
  return(result);
 800580e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
 8005812:	2301      	movs	r3, #1
 8005814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4926      	ldr	r1, [pc, #152]	; (80058c4 <UART_EndRxTransfer+0xc4>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	623b      	str	r3, [r7, #32]
  return(result);
 8005840:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
 8005844:	2301      	movs	r3, #1
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	f383 8810 	msr	PRIMASK, r3
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	491b      	ldr	r1, [pc, #108]	; (80058c8 <UART_EndRxTransfer+0xc8>)
 800585c:	400a      	ands	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d118      	bne.n	80058a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005874:	f3ef 8310 	mrs	r3, PRIMASK
 8005878:	60bb      	str	r3, [r7, #8]
  return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	2301      	movs	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f383 8810 	msr	PRIMASK, r3
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2110      	movs	r1, #16
 8005896:	438a      	bics	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	228c      	movs	r2, #140	; 0x8c
 80058aa:	2120      	movs	r1, #32
 80058ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b00e      	add	sp, #56	; 0x38
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	fffffedf 	.word	0xfffffedf
 80058c8:	effffffe 	.word	0xeffffffe

080058cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	225e      	movs	r2, #94	; 0x5e
 80058de:	2100      	movs	r1, #0
 80058e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2256      	movs	r2, #86	; 0x56
 80058e6:	2100      	movs	r1, #0
 80058e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff fa0d 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005902:	f3ef 8310 	mrs	r3, PRIMASK
 8005906:	60bb      	str	r3, [r7, #8]
  return(result);
 8005908:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	2301      	movs	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f383 8810 	msr	PRIMASK, r3
}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2140      	movs	r1, #64	; 0x40
 8005924:	438a      	bics	r2, r1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f383 8810 	msr	PRIMASK, r3
}
 8005932:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2288      	movs	r2, #136	; 0x88
 8005938:	2120      	movs	r1, #32
 800593a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0018      	movs	r0, r3
 8005946:	f7ff f9d9 	bl	8004cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	b006      	add	sp, #24
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b090      	sub	sp, #64	; 0x40
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800595c:	203e      	movs	r0, #62	; 0x3e
 800595e:	183b      	adds	r3, r7, r0
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	2160      	movs	r1, #96	; 0x60
 8005964:	5a52      	ldrh	r2, [r2, r1]
 8005966:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	228c      	movs	r2, #140	; 0x8c
 800596c:	589b      	ldr	r3, [r3, r2]
 800596e:	2b22      	cmp	r3, #34	; 0x22
 8005970:	d000      	beq.n	8005974 <UART_RxISR_8BIT+0x20>
 8005972:	e09a      	b.n	8005aaa <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800597a:	213c      	movs	r1, #60	; 0x3c
 800597c:	187b      	adds	r3, r7, r1
 800597e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005980:	187b      	adds	r3, r7, r1
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	183b      	adds	r3, r7, r0
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b2d9      	uxtb	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	400a      	ands	r2, r1
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	225e      	movs	r2, #94	; 0x5e
 80059a4:	5a9b      	ldrh	r3, [r3, r2]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b299      	uxth	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	225e      	movs	r2, #94	; 0x5e
 80059b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	225e      	movs	r2, #94	; 0x5e
 80059b6:	5a9b      	ldrh	r3, [r3, r2]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d000      	beq.n	80059c0 <UART_RxISR_8BIT+0x6c>
 80059be:	e07c      	b.n	8005aba <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c0:	f3ef 8310 	mrs	r3, PRIMASK
 80059c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80059c6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ca:	2301      	movs	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	f383 8810 	msr	PRIMASK, r3
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4938      	ldr	r1, [pc, #224]	; (8005ac4 <UART_RxISR_8BIT+0x170>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
 80059fc:	2301      	movs	r3, #1
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f383 8810 	msr	PRIMASK, r3
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	438a      	bics	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	228c      	movs	r2, #140	; 0x8c
 8005a28:	2120      	movs	r1, #32
 8005a2a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d12f      	bne.n	8005aa0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a4c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a50:	2301      	movs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f383 8810 	msr	PRIMASK, r3
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2110      	movs	r1, #16
 8005a68:	438a      	bics	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d103      	bne.n	8005a8e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	225c      	movs	r2, #92	; 0x5c
 8005a92:	5a9a      	ldrh	r2, [r3, r2]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	0011      	movs	r1, r2
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7ff f93f 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a9e:	e00c      	b.n	8005aba <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 fe66 	bl	8006774 <HAL_UART_RxCpltCallback>
}
 8005aa8:	e007      	b.n	8005aba <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2108      	movs	r1, #8
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	619a      	str	r2, [r3, #24]
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b010      	add	sp, #64	; 0x40
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	fffffedf 	.word	0xfffffedf

08005ac8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b090      	sub	sp, #64	; 0x40
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ad0:	203e      	movs	r0, #62	; 0x3e
 8005ad2:	183b      	adds	r3, r7, r0
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	2160      	movs	r1, #96	; 0x60
 8005ad8:	5a52      	ldrh	r2, [r2, r1]
 8005ada:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	228c      	movs	r2, #140	; 0x8c
 8005ae0:	589b      	ldr	r3, [r3, r2]
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	d000      	beq.n	8005ae8 <UART_RxISR_16BIT+0x20>
 8005ae6:	e09a      	b.n	8005c1e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aee:	213c      	movs	r1, #60	; 0x3c
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	183a      	adds	r2, r7, r0
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	225e      	movs	r2, #94	; 0x5e
 8005b18:	5a9b      	ldrh	r3, [r3, r2]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	225e      	movs	r2, #94	; 0x5e
 8005b24:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	225e      	movs	r2, #94	; 0x5e
 8005b2a:	5a9b      	ldrh	r3, [r3, r2]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d000      	beq.n	8005b34 <UART_RxISR_16BIT+0x6c>
 8005b32:	e07c      	b.n	8005c2e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b34:	f3ef 8310 	mrs	r3, PRIMASK
 8005b38:	617b      	str	r3, [r7, #20]
  return(result);
 8005b3a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			; (mov r8, r8)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4938      	ldr	r1, [pc, #224]	; (8005c38 <UART_RxISR_16BIT+0x170>)
 8005b56:	400a      	ands	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	623b      	str	r3, [r7, #32]
  return(result);
 8005b6c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b70:	2301      	movs	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2101      	movs	r1, #1
 8005b88:	438a      	bics	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	228c      	movs	r2, #140	; 0x8c
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12f      	bne.n	8005c14 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bba:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2110      	movs	r1, #16
 8005bdc:	438a      	bics	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f383 8810 	msr	PRIMASK, r3
}
 8005bea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d103      	bne.n	8005c02 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	225c      	movs	r2, #92	; 0x5c
 8005c06:	5a9a      	ldrh	r2, [r3, r2]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0011      	movs	r1, r2
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff f885 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c12:	e00c      	b.n	8005c2e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 fdac 	bl	8006774 <HAL_UART_RxCpltCallback>
}
 8005c1c:	e007      	b.n	8005c2e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2108      	movs	r1, #8
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	619a      	str	r2, [r3, #24]
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b010      	add	sp, #64	; 0x40
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	fffffedf 	.word	0xfffffedf

08005c3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b09c      	sub	sp, #112	; 0x70
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005c44:	236a      	movs	r3, #106	; 0x6a
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	2160      	movs	r1, #96	; 0x60
 8005c4c:	5a52      	ldrh	r2, [r2, r1]
 8005c4e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	228c      	movs	r2, #140	; 0x8c
 8005c6c:	589b      	ldr	r3, [r3, r2]
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	d000      	beq.n	8005c74 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005c72:	e144      	b.n	8005efe <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c74:	235e      	movs	r3, #94	; 0x5e
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	2168      	movs	r1, #104	; 0x68
 8005c7c:	5a52      	ldrh	r2, [r2, r1]
 8005c7e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c80:	e0eb      	b.n	8005e5a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c88:	215c      	movs	r1, #92	; 0x5c
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c8e:	187b      	adds	r3, r7, r1
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	236a      	movs	r3, #106	; 0x6a
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b2d9      	uxtb	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	225e      	movs	r2, #94	; 0x5e
 8005cb4:	5a9b      	ldrh	r3, [r3, r2]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b299      	uxth	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	225e      	movs	r2, #94	; 0x5e
 8005cc0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	2207      	movs	r2, #7
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d049      	beq.n	8005d66 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d010      	beq.n	8005cfc <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005cda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2290      	movs	r2, #144	; 0x90
 8005cf0:	589b      	ldr	r3, [r3, r2]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2190      	movs	r1, #144	; 0x90
 8005cfa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfe:	2202      	movs	r2, #2
 8005d00:	4013      	ands	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d06:	2201      	movs	r2, #1
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2202      	movs	r2, #2
 8005d12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2290      	movs	r2, #144	; 0x90
 8005d18:	589b      	ldr	r3, [r3, r2]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2190      	movs	r1, #144	; 0x90
 8005d22:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	2204      	movs	r2, #4
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x110>
 8005d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4013      	ands	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2290      	movs	r2, #144	; 0x90
 8005d40:	589b      	ldr	r3, [r3, r2]
 8005d42:	2202      	movs	r2, #2
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2190      	movs	r1, #144	; 0x90
 8005d4a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2290      	movs	r2, #144	; 0x90
 8005d50:	589b      	ldr	r3, [r3, r2]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7fe ffd7 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2290      	movs	r2, #144	; 0x90
 8005d62:	2100      	movs	r1, #0
 8005d64:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	225e      	movs	r2, #94	; 0x5e
 8005d6a:	5a9b      	ldrh	r3, [r3, r2]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d173      	bne.n	8005e5a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d72:	f3ef 8310 	mrs	r3, PRIMASK
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4961      	ldr	r1, [pc, #388]	; (8005f18 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005d94:	400a      	ands	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	f383 8810 	msr	PRIMASK, r3
}
 8005da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da4:	f3ef 8310 	mrs	r3, PRIMASK
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dac:	657b      	str	r3, [r7, #84]	; 0x54
 8005dae:	2301      	movs	r3, #1
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db4:	f383 8810 	msr	PRIMASK, r3
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4955      	ldr	r1, [pc, #340]	; (8005f1c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005dc6:	400a      	ands	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
 8005dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dcc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	228c      	movs	r2, #140	; 0x8c
 8005dda:	2120      	movs	r1, #32
 8005ddc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d12f      	bne.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfc:	623b      	str	r3, [r7, #32]
  return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	653b      	str	r3, [r7, #80]	; 0x50
 8005e02:	2301      	movs	r3, #1
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2110      	movs	r1, #16
 8005e1a:	438a      	bics	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2210      	movs	r2, #16
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d103      	bne.n	8005e40 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	225c      	movs	r2, #92	; 0x5c
 8005e44:	5a9a      	ldrh	r2, [r3, r2]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0011      	movs	r1, r2
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fe ff66 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
 8005e50:	e003      	b.n	8005e5a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 fc8d 	bl	8006774 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e5a:	235e      	movs	r3, #94	; 0x5e
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <UART_RxISR_8BIT_FIFOEN+0x232>
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	2220      	movs	r2, #32
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d000      	beq.n	8005e6e <UART_RxISR_8BIT_FIFOEN+0x232>
 8005e6c:	e709      	b.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e6e:	204e      	movs	r0, #78	; 0x4e
 8005e70:	183b      	adds	r3, r7, r0
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	215e      	movs	r1, #94	; 0x5e
 8005e76:	5a52      	ldrh	r2, [r2, r1]
 8005e78:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e7a:	0001      	movs	r1, r0
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d044      	beq.n	8005f0e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2268      	movs	r2, #104	; 0x68
 8005e88:	5a9b      	ldrh	r3, [r3, r2]
 8005e8a:	187a      	adds	r2, r7, r1
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d23d      	bcs.n	8005f0e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e98:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	491b      	ldr	r1, [pc, #108]	; (8005f20 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005ec8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eca:	f3ef 8310 	mrs	r3, PRIMASK
 8005ece:	617b      	str	r3, [r7, #20]
  return(result);
 8005ed0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f383 8810 	msr	PRIMASK, r3
}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2120      	movs	r1, #32
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f383 8810 	msr	PRIMASK, r3
}
 8005efa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005efc:	e007      	b.n	8005f0e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2108      	movs	r1, #8
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b01c      	add	sp, #112	; 0x70
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	fffffeff 	.word	0xfffffeff
 8005f1c:	effffffe 	.word	0xeffffffe
 8005f20:	efffffff 	.word	0xefffffff
 8005f24:	08005955 	.word	0x08005955

08005f28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b09e      	sub	sp, #120	; 0x78
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005f30:	2372      	movs	r3, #114	; 0x72
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	2160      	movs	r1, #96	; 0x60
 8005f38:	5a52      	ldrh	r2, [r2, r1]
 8005f3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	228c      	movs	r2, #140	; 0x8c
 8005f58:	589b      	ldr	r3, [r3, r2]
 8005f5a:	2b22      	cmp	r3, #34	; 0x22
 8005f5c:	d000      	beq.n	8005f60 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005f5e:	e144      	b.n	80061ea <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f60:	2366      	movs	r3, #102	; 0x66
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	2168      	movs	r1, #104	; 0x68
 8005f68:	5a52      	ldrh	r2, [r2, r1]
 8005f6a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f6c:	e0eb      	b.n	8006146 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f74:	2164      	movs	r1, #100	; 0x64
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	2272      	movs	r2, #114	; 0x72
 8005f84:	18ba      	adds	r2, r7, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	8812      	ldrh	r2, [r2, #0]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f96:	1c9a      	adds	r2, r3, #2
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	225e      	movs	r2, #94	; 0x5e
 8005fa0:	5a9b      	ldrh	r3, [r3, r2]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b299      	uxth	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	225e      	movs	r2, #94	; 0x5e
 8005fac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb8:	2207      	movs	r2, #7
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d049      	beq.n	8006052 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d010      	beq.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2290      	movs	r2, #144	; 0x90
 8005fdc:	589b      	ldr	r3, [r3, r2]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2190      	movs	r1, #144	; 0x90
 8005fe6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fea:	2202      	movs	r2, #2
 8005fec:	4013      	ands	r3, r2
 8005fee:	d00f      	beq.n	8006010 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2290      	movs	r2, #144	; 0x90
 8006004:	589b      	ldr	r3, [r3, r2]
 8006006:	2204      	movs	r2, #4
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2190      	movs	r1, #144	; 0x90
 800600e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006012:	2204      	movs	r2, #4
 8006014:	4013      	ands	r3, r2
 8006016:	d00f      	beq.n	8006038 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601a:	2201      	movs	r2, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d00b      	beq.n	8006038 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2204      	movs	r2, #4
 8006026:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2290      	movs	r2, #144	; 0x90
 800602c:	589b      	ldr	r3, [r3, r2]
 800602e:	2202      	movs	r2, #2
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2190      	movs	r1, #144	; 0x90
 8006036:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2290      	movs	r2, #144	; 0x90
 800603c:	589b      	ldr	r3, [r3, r2]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fe fe61 	bl	8004d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2290      	movs	r2, #144	; 0x90
 800604e:	2100      	movs	r1, #0
 8006050:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	225e      	movs	r2, #94	; 0x5e
 8006056:	5a9b      	ldrh	r3, [r3, r2]
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d173      	bne.n	8006146 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800605e:	f3ef 8310 	mrs	r3, PRIMASK
 8006062:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006068:	2301      	movs	r3, #1
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	f383 8810 	msr	PRIMASK, r3
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4961      	ldr	r1, [pc, #388]	; (8006204 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006080:	400a      	ands	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	f383 8810 	msr	PRIMASK, r3
}
 800608e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006090:	f3ef 8310 	mrs	r3, PRIMASK
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006098:	65bb      	str	r3, [r7, #88]	; 0x58
 800609a:	2301      	movs	r3, #1
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4955      	ldr	r1, [pc, #340]	; (8006208 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80060b2:	400a      	ands	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]
 80060b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	228c      	movs	r2, #140	; 0x8c
 80060c6:	2120      	movs	r1, #32
 80060c8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d12f      	bne.n	800613e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e4:	f3ef 8310 	mrs	r3, PRIMASK
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54
 80060ee:	2301      	movs	r3, #1
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	f383 8810 	msr	PRIMASK, r3
}
 80060f8:	46c0      	nop			; (mov r8, r8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2110      	movs	r1, #16
 8006106:	438a      	bics	r2, r1
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	f383 8810 	msr	PRIMASK, r3
}
 8006114:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	2210      	movs	r2, #16
 800611e:	4013      	ands	r3, r2
 8006120:	2b10      	cmp	r3, #16
 8006122:	d103      	bne.n	800612c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2210      	movs	r2, #16
 800612a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	225c      	movs	r2, #92	; 0x5c
 8006130:	5a9a      	ldrh	r2, [r3, r2]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0011      	movs	r1, r2
 8006136:	0018      	movs	r0, r3
 8006138:	f7fe fdf0 	bl	8004d1c <HAL_UARTEx_RxEventCallback>
 800613c:	e003      	b.n	8006146 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	0018      	movs	r0, r3
 8006142:	f000 fb17 	bl	8006774 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006146:	2366      	movs	r3, #102	; 0x66
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006152:	2220      	movs	r2, #32
 8006154:	4013      	ands	r3, r2
 8006156:	d000      	beq.n	800615a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006158:	e709      	b.n	8005f6e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800615a:	2052      	movs	r0, #82	; 0x52
 800615c:	183b      	adds	r3, r7, r0
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	215e      	movs	r1, #94	; 0x5e
 8006162:	5a52      	ldrh	r2, [r2, r1]
 8006164:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006166:	0001      	movs	r1, r0
 8006168:	187b      	adds	r3, r7, r1
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d044      	beq.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2268      	movs	r2, #104	; 0x68
 8006174:	5a9b      	ldrh	r3, [r3, r2]
 8006176:	187a      	adds	r2, r7, r1
 8006178:	8812      	ldrh	r2, [r2, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d23d      	bcs.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	60fb      	str	r3, [r7, #12]
  return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	2301      	movs	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	491b      	ldr	r1, [pc, #108]	; (800620c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a17      	ldr	r2, [pc, #92]	; (8006210 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80061b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80061bc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c0:	2301      	movs	r3, #1
 80061c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2120      	movs	r1, #32
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061e8:	e007      	b.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2108      	movs	r1, #8
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b01e      	add	sp, #120	; 0x78
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	fffffeff 	.word	0xfffffeff
 8006208:	effffffe 	.word	0xeffffffe
 800620c:	efffffff 	.word	0xefffffff
 8006210:	08005ac9 	.word	0x08005ac9

08006214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b002      	add	sp, #8
 8006242:	bd80      	pop	{r7, pc}

08006244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006248:	f7fa fd4c 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800624c:	f000 f858 	bl	8006300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006250:	f000 fa2e 	bl	80066b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006254:	f000 f9f8 	bl	8006648 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8006258:	f000 f8b0 	bl	80063bc <MX_ADC1_Init>
  MX_TIM1_Init();
 800625c:	f000 f918 	bl	8006490 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Initialize PWM Channel 1
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <main+0x98>)
 8006262:	2100      	movs	r1, #0
 8006264:	0018      	movs	r0, r3
 8006266:	f7fd f93f 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Initialize PWM Channel 2
 800626a:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <main+0x98>)
 800626c:	2104      	movs	r1, #4
 800626e:	0018      	movs	r0, r3
 8006270:	f7fd f93a 	bl	80034e8 <HAL_TIM_PWM_Start>


  UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "STM32-SMPS Initialized!\r\n");	 // Transmit UART Startup message
 8006274:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <main+0x9c>)
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <main+0xa0>)
 8006278:	0011      	movs	r1, r2
 800627a:	0018      	movs	r0, r3
 800627c:	f000 fd44 	bl	8006d08 <siprintf>
 8006280:	0003      	movs	r3, r0
 8006282:	b29a      	uxth	r2, r3
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <main+0xa4>)
 8006286:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <main+0xa4>)
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	4915      	ldr	r1, [pc, #84]	; (80062e4 <main+0xa0>)
 800628e:	4817      	ldr	r0, [pc, #92]	; (80062ec <main+0xa8>)
 8006290:	2364      	movs	r3, #100	; 0x64
 8006292:	f7fe f913 	bl	80044bc <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4);		// Initialize UART Interrupt transmission
 8006296:	4916      	ldr	r1, [pc, #88]	; (80062f0 <main+0xac>)
 8006298:	4b14      	ldr	r3, [pc, #80]	; (80062ec <main+0xa8>)
 800629a:	2204      	movs	r2, #4
 800629c:	0018      	movs	r0, r3
 800629e:	f7fe f9a9 	bl	80045f4 <HAL_UART_Receive_IT>
  	  // Set to receive 4 bytes (123\n)
  	  // Consider replacing with DMA based receive?
  HAL_ADCEx_Calibration_Start(&hadc1);
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <main+0xb0>)
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fb fdbb 	bl	8001e20 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(ADCFlag)
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <main+0xb4>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <main+0x90>
	{

		HAL_ADC_Start_IT(&hadc1); // Fetch error value
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <main+0xb0>)
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7fb f8cb 	bl	8001450 <HAL_ADC_Start_IT>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth);
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <main+0xb8>)
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <main+0x98>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth);
 80062c4:	23a0      	movs	r3, #160	; 0xa0
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <main+0xb8>)
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	1a9a      	subs	r2, r3, r2
 80062ce:	4b03      	ldr	r3, [pc, #12]	; (80062dc <main+0x98>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	HAL_Delay(100);
 80062d4:	2064      	movs	r0, #100	; 0x64
 80062d6:	f7fa fd8b 	bl	8000df0 <HAL_Delay>
	if(ADCFlag)
 80062da:	e7e6      	b.n	80062aa <main+0x66>
 80062dc:	200000fc 	.word	0x200000fc
 80062e0:	08007728 	.word	0x08007728
 80062e4:	200001e0 	.word	0x200001e0
 80062e8:	20000244 	.word	0x20000244
 80062ec:	20000148 	.word	0x20000148
 80062f0:	20000248 	.word	0x20000248
 80062f4:	20000098 	.word	0x20000098
 80062f8:	20000008 	.word	0x20000008
 80062fc:	20000006 	.word	0x20000006

08006300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b093      	sub	sp, #76	; 0x4c
 8006304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006306:	2410      	movs	r4, #16
 8006308:	193b      	adds	r3, r7, r4
 800630a:	0018      	movs	r0, r3
 800630c:	2338      	movs	r3, #56	; 0x38
 800630e:	001a      	movs	r2, r3
 8006310:	2100      	movs	r1, #0
 8006312:	f000 fcf1 	bl	8006cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006316:	003b      	movs	r3, r7
 8006318:	0018      	movs	r0, r3
 800631a:	2310      	movs	r3, #16
 800631c:	001a      	movs	r2, r3
 800631e:	2100      	movs	r1, #0
 8006320:	f000 fcea 	bl	8006cf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	0018      	movs	r0, r3
 800632a:	f7fc f99b 	bl	8002664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800632e:	193b      	adds	r3, r7, r4
 8006330:	2202      	movs	r2, #2
 8006332:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006334:	193b      	adds	r3, r7, r4
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	0052      	lsls	r2, r2, #1
 800633a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800633c:	0021      	movs	r1, r4
 800633e:	187b      	adds	r3, r7, r1
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006344:	187b      	adds	r3, r7, r1
 8006346:	2240      	movs	r2, #64	; 0x40
 8006348:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800634a:	187b      	adds	r3, r7, r1
 800634c:	2202      	movs	r2, #2
 800634e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006350:	187b      	adds	r3, r7, r1
 8006352:	2202      	movs	r2, #2
 8006354:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006356:	187b      	adds	r3, r7, r1
 8006358:	2200      	movs	r2, #0
 800635a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800635c:	187b      	adds	r3, r7, r1
 800635e:	2210      	movs	r2, #16
 8006360:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006362:	187b      	adds	r3, r7, r1
 8006364:	2280      	movs	r2, #128	; 0x80
 8006366:	0292      	lsls	r2, r2, #10
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800636a:	187b      	adds	r3, r7, r1
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	0492      	lsls	r2, r2, #18
 8006370:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8006372:	187b      	adds	r3, r7, r1
 8006374:	22c0      	movs	r2, #192	; 0xc0
 8006376:	05d2      	lsls	r2, r2, #23
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800637a:	187b      	adds	r3, r7, r1
 800637c:	0018      	movs	r0, r3
 800637e:	f7fc f9bd 	bl	80026fc <HAL_RCC_OscConfig>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d001      	beq.n	800638a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8006386:	f000 fab3 	bl	80068f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800638a:	003b      	movs	r3, r7
 800638c:	2207      	movs	r2, #7
 800638e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006390:	003b      	movs	r3, r7
 8006392:	2202      	movs	r2, #2
 8006394:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006396:	003b      	movs	r3, r7
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800639c:	003b      	movs	r3, r7
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063a2:	003b      	movs	r3, r7
 80063a4:	2102      	movs	r1, #2
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7fc fcc2 	bl	8002d30 <HAL_RCC_ClockConfig>
 80063ac:	1e03      	subs	r3, r0, #0
 80063ae:	d001      	beq.n	80063b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80063b0:	f000 fa9e 	bl	80068f0 <Error_Handler>
  }
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b013      	add	sp, #76	; 0x4c
 80063ba:	bd90      	pop	{r4, r7, pc}

080063bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	0018      	movs	r0, r3
 80063c6:	230c      	movs	r3, #12
 80063c8:	001a      	movs	r2, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	f000 fc94 	bl	8006cf8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063d2:	4a2e      	ldr	r2, [pc, #184]	; (800648c <MX_ADC1_Init+0xd0>)
 80063d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80063d6:	4b2c      	ldr	r3, [pc, #176]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063d8:	2280      	movs	r2, #128	; 0x80
 80063da:	05d2      	lsls	r2, r2, #23
 80063dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063e4:	4b28      	ldr	r3, [pc, #160]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80063ea:	4b27      	ldr	r3, [pc, #156]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063f2:	2204      	movs	r2, #4
 80063f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80063fc:	4b22      	ldr	r3, [pc, #136]	; (8006488 <MX_ADC1_Init+0xcc>)
 80063fe:	2200      	movs	r2, #0
 8006400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006402:	4b21      	ldr	r3, [pc, #132]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006404:	2200      	movs	r2, #0
 8006406:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006408:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <MX_ADC1_Init+0xcc>)
 800640a:	2201      	movs	r2, #1
 800640c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800640e:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006410:	2220      	movs	r2, #32
 8006412:	2100      	movs	r1, #0
 8006414:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006416:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006418:	2200      	movs	r2, #0
 800641a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <MX_ADC1_Init+0xcc>)
 800641e:	2200      	movs	r2, #0
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006424:	222c      	movs	r2, #44	; 0x2c
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <MX_ADC1_Init+0xcc>)
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006432:	2200      	movs	r2, #0
 8006434:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006438:	2200      	movs	r2, #0
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <MX_ADC1_Init+0xcc>)
 800643e:	223c      	movs	r2, #60	; 0x3c
 8006440:	2100      	movs	r1, #0
 8006442:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006444:	4b10      	ldr	r3, [pc, #64]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006446:	2200      	movs	r2, #0
 8006448:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <MX_ADC1_Init+0xcc>)
 800644c:	0018      	movs	r0, r3
 800644e:	f7fa fe57 	bl	8001100 <HAL_ADC_Init>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d001      	beq.n	800645a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8006456:	f000 fa4b 	bl	80068f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	2200      	movs	r2, #0
 8006464:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	2200      	movs	r2, #0
 800646a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800646c:	1d3a      	adds	r2, r7, #4
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <MX_ADC1_Init+0xcc>)
 8006470:	0011      	movs	r1, r2
 8006472:	0018      	movs	r0, r3
 8006474:	f7fb f998 	bl	80017a8 <HAL_ADC_ConfigChannel>
 8006478:	1e03      	subs	r3, r0, #0
 800647a:	d001      	beq.n	8006480 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800647c:	f000 fa38 	bl	80068f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006480:	46c0      	nop			; (mov r8, r8)
 8006482:	46bd      	mov	sp, r7
 8006484:	b004      	add	sp, #16
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000098 	.word	0x20000098
 800648c:	40012400 	.word	0x40012400

08006490 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b09c      	sub	sp, #112	; 0x70
 8006494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006496:	2360      	movs	r3, #96	; 0x60
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	0018      	movs	r0, r3
 800649c:	2310      	movs	r3, #16
 800649e:	001a      	movs	r2, r3
 80064a0:	2100      	movs	r1, #0
 80064a2:	f000 fc29 	bl	8006cf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a6:	2354      	movs	r3, #84	; 0x54
 80064a8:	18fb      	adds	r3, r7, r3
 80064aa:	0018      	movs	r0, r3
 80064ac:	230c      	movs	r3, #12
 80064ae:	001a      	movs	r2, r3
 80064b0:	2100      	movs	r1, #0
 80064b2:	f000 fc21 	bl	8006cf8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b6:	2338      	movs	r3, #56	; 0x38
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	0018      	movs	r0, r3
 80064bc:	231c      	movs	r3, #28
 80064be:	001a      	movs	r2, r3
 80064c0:	2100      	movs	r1, #0
 80064c2:	f000 fc19 	bl	8006cf8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	0018      	movs	r0, r3
 80064ca:	2334      	movs	r3, #52	; 0x34
 80064cc:	001a      	movs	r2, r3
 80064ce:	2100      	movs	r1, #0
 80064d0:	f000 fc12 	bl	8006cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064d4:	4b5a      	ldr	r3, [pc, #360]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064d6:	4a5b      	ldr	r2, [pc, #364]	; (8006644 <MX_TIM1_Init+0x1b4>)
 80064d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064da:	4b59      	ldr	r3, [pc, #356]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064dc:	2200      	movs	r2, #0
 80064de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80064e0:	4b57      	ldr	r3, [pc, #348]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064e2:	2220      	movs	r2, #32
 80064e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 80064e6:	4b56      	ldr	r3, [pc, #344]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064e8:	22a0      	movs	r2, #160	; 0xa0
 80064ea:	0092      	lsls	r2, r2, #2
 80064ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064ee:	4b54      	ldr	r3, [pc, #336]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064f4:	4b52      	ldr	r3, [pc, #328]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064fa:	4b51      	ldr	r3, [pc, #324]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006500:	4b4f      	ldr	r3, [pc, #316]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006502:	0018      	movs	r0, r3
 8006504:	f7fc ff38 	bl	8003378 <HAL_TIM_Base_Init>
 8006508:	1e03      	subs	r3, r0, #0
 800650a:	d001      	beq.n	8006510 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800650c:	f000 f9f0 	bl	80068f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006510:	2160      	movs	r1, #96	; 0x60
 8006512:	187b      	adds	r3, r7, r1
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	0152      	lsls	r2, r2, #5
 8006518:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800651a:	187a      	adds	r2, r7, r1
 800651c:	4b48      	ldr	r3, [pc, #288]	; (8006640 <MX_TIM1_Init+0x1b0>)
 800651e:	0011      	movs	r1, r2
 8006520:	0018      	movs	r0, r3
 8006522:	f7fd f9bf 	bl	80038a4 <HAL_TIM_ConfigClockSource>
 8006526:	1e03      	subs	r3, r0, #0
 8006528:	d001      	beq.n	800652e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800652a:	f000 f9e1 	bl	80068f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800652e:	4b44      	ldr	r3, [pc, #272]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006530:	0018      	movs	r0, r3
 8006532:	f7fc ff79 	bl	8003428 <HAL_TIM_PWM_Init>
 8006536:	1e03      	subs	r3, r0, #0
 8006538:	d001      	beq.n	800653e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800653a:	f000 f9d9 	bl	80068f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800653e:	2154      	movs	r1, #84	; 0x54
 8006540:	187b      	adds	r3, r7, r1
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006546:	187b      	adds	r3, r7, r1
 8006548:	2200      	movs	r2, #0
 800654a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800654c:	187b      	adds	r3, r7, r1
 800654e:	2200      	movs	r2, #0
 8006550:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006552:	187a      	adds	r2, r7, r1
 8006554:	4b3a      	ldr	r3, [pc, #232]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006556:	0011      	movs	r1, r2
 8006558:	0018      	movs	r0, r3
 800655a:	f7fd fe4b 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 800655e:	1e03      	subs	r3, r0, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8006562:	f000 f9c5 	bl	80068f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006566:	2138      	movs	r1, #56	; 0x38
 8006568:	187b      	adds	r3, r7, r1
 800656a:	2260      	movs	r2, #96	; 0x60
 800656c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 160;
 800656e:	187b      	adds	r3, r7, r1
 8006570:	22a0      	movs	r2, #160	; 0xa0
 8006572:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006574:	187b      	adds	r3, r7, r1
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800657a:	187b      	adds	r3, r7, r1
 800657c:	2200      	movs	r2, #0
 800657e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006580:	187b      	adds	r3, r7, r1
 8006582:	2204      	movs	r2, #4
 8006584:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006586:	187b      	adds	r3, r7, r1
 8006588:	2200      	movs	r2, #0
 800658a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800658c:	187b      	adds	r3, r7, r1
 800658e:	2200      	movs	r2, #0
 8006590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006592:	1879      	adds	r1, r7, r1
 8006594:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006596:	2200      	movs	r2, #0
 8006598:	0018      	movs	r0, r3
 800659a:	f7fd f883 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 800659e:	1e03      	subs	r3, r0, #0
 80065a0:	d001      	beq.n	80065a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80065a2:	f000 f9a5 	bl	80068f0 <Error_Handler>
  }
  sConfigOC.Pulse = 480;
 80065a6:	2138      	movs	r1, #56	; 0x38
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	22f0      	movs	r2, #240	; 0xf0
 80065ac:	0052      	lsls	r2, r2, #1
 80065ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	2202      	movs	r2, #2
 80065b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065b6:	1879      	adds	r1, r7, r1
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <MX_TIM1_Init+0x1b0>)
 80065ba:	2204      	movs	r2, #4
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fd f871 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d001      	beq.n	80065ca <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80065c6:	f000 f993 	bl	80068f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	2200      	movs	r2, #0
 80065e6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	0192      	lsls	r2, r2, #6
 80065ee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	2200      	movs	r2, #0
 80065fa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	2200      	movs	r2, #0
 8006600:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	0492      	lsls	r2, r2, #18
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	2200      	movs	r2, #0
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	2200      	movs	r2, #0
 8006614:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800661c:	1d3a      	adds	r2, r7, #4
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006620:	0011      	movs	r1, r2
 8006622:	0018      	movs	r0, r3
 8006624:	f7fd fe4e 	bl	80042c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d001      	beq.n	8006630 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 800662c:	f000 f960 	bl	80068f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <MX_TIM1_Init+0x1b0>)
 8006632:	0018      	movs	r0, r3
 8006634:	f000 fa0a 	bl	8006a4c <HAL_TIM_MspPostInit>

}
 8006638:	46c0      	nop			; (mov r8, r8)
 800663a:	46bd      	mov	sp, r7
 800663c:	b01c      	add	sp, #112	; 0x70
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200000fc 	.word	0x200000fc
 8006644:	40012c00 	.word	0x40012c00

08006648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <MX_USART2_UART_Init+0x64>)
 8006650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006654:	22e1      	movs	r2, #225	; 0xe1
 8006656:	0252      	lsls	r2, r2, #9
 8006658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006662:	2200      	movs	r2, #0
 8006664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006668:	2200      	movs	r2, #0
 800666a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800666c:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 800666e:	220c      	movs	r2, #12
 8006670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006674:	2200      	movs	r2, #0
 8006676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 800667a:	2200      	movs	r2, #0
 800667c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006680:	2200      	movs	r2, #0
 8006682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006684:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006686:	2200      	movs	r2, #0
 8006688:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 800668c:	2200      	movs	r2, #0
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <MX_USART2_UART_Init+0x60>)
 8006692:	0018      	movs	r0, r3
 8006694:	f7fd febc 	bl	8004410 <HAL_UART_Init>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d001      	beq.n	80066a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800669c:	f000 f928 	bl	80068f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	20000148 	.word	0x20000148
 80066ac:	40004400 	.word	0x40004400

080066b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b6:	240c      	movs	r4, #12
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	0018      	movs	r0, r3
 80066bc:	2314      	movs	r3, #20
 80066be:	001a      	movs	r2, r3
 80066c0:	2100      	movs	r1, #0
 80066c2:	f000 fb19 	bl	8006cf8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066c6:	4b28      	ldr	r3, [pc, #160]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066cc:	2104      	movs	r1, #4
 80066ce:	430a      	orrs	r2, r1
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34
 80066d2:	4b25      	ldr	r3, [pc, #148]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	2204      	movs	r2, #4
 80066d8:	4013      	ands	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066e4:	2120      	movs	r1, #32
 80066e6:	430a      	orrs	r2, r1
 80066e8:	635a      	str	r2, [r3, #52]	; 0x34
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	2220      	movs	r2, #32
 80066f0:	4013      	ands	r3, r2
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <MX_GPIO_Init+0xb8>)
 80066fc:	2101      	movs	r1, #1
 80066fe:	430a      	orrs	r2, r1
 8006700:	635a      	str	r2, [r3, #52]	; 0x34
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <MX_GPIO_Init+0xb8>)
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	2201      	movs	r2, #1
 8006708:	4013      	ands	r3, r2
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <MX_GPIO_Init+0xbc>)
 8006710:	2200      	movs	r2, #0
 8006712:	2140      	movs	r1, #64	; 0x40
 8006714:	0018      	movs	r0, r3
 8006716:	f7fb ff87 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800671a:	193b      	adds	r3, r7, r4
 800671c:	2204      	movs	r2, #4
 800671e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006720:	193b      	adds	r3, r7, r4
 8006722:	2288      	movs	r2, #136	; 0x88
 8006724:	0352      	lsls	r2, r2, #13
 8006726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	193b      	adds	r3, r7, r4
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800672e:	193b      	adds	r3, r7, r4
 8006730:	4a0f      	ldr	r2, [pc, #60]	; (8006770 <MX_GPIO_Init+0xc0>)
 8006732:	0019      	movs	r1, r3
 8006734:	0010      	movs	r0, r2
 8006736:	f7fb fe13 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800673a:	0021      	movs	r1, r4
 800673c:	187b      	adds	r3, r7, r1
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006742:	187b      	adds	r3, r7, r1
 8006744:	2201      	movs	r2, #1
 8006746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	187b      	adds	r3, r7, r1
 800674a:	2200      	movs	r2, #0
 800674c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800674e:	187b      	adds	r3, r7, r1
 8006750:	2200      	movs	r2, #0
 8006752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006754:	187b      	adds	r3, r7, r1
 8006756:	4a05      	ldr	r2, [pc, #20]	; (800676c <MX_GPIO_Init+0xbc>)
 8006758:	0019      	movs	r1, r3
 800675a:	0010      	movs	r0, r2
 800675c:	f7fb fe00 	bl	8002360 <HAL_GPIO_Init>

}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b009      	add	sp, #36	; 0x24
 8006766:	bd90      	pop	{r4, r7, pc}
 8006768:	40021000 	.word	0x40021000
 800676c:	50000800 	.word	0x50000800
 8006770:	50001400 	.word	0x50001400

08006774 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	// Interrupt when buffer is full ("213\n"
    ADCFlag = 0;	// Disable ADC control
 800677c:	4b21      	ldr	r3, [pc, #132]	; (8006804 <HAL_UART_RxCpltCallback+0x90>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
	pulsewidth= atoi(UART_RX_BUFF); // Convert buffer to received value
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <HAL_UART_RxCpltCallback+0x94>)
 8006784:	0018      	movs	r0, r3
 8006786:	f000 fa86 	bl	8006c96 <atoi>
 800678a:	0003      	movs	r3, r0
 800678c:	b29a      	uxth	r2, r3
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 8006790:	801a      	strh	r2, [r3, #0]
    if(pulsewidth > PULSE_MAX)	//
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	001a      	movs	r2, r3
 8006798:	239b      	movs	r3, #155	; 0x9b
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	429a      	cmp	r2, r3
 800679e:	dd07      	ble.n	80067b0 <HAL_UART_RxCpltCallback+0x3c>
    {
    	pulsewidth = PULSE_MAX;	// If pulsewidth is given as larger than max, set to max
 80067a0:	239b      	movs	r3, #155	; 0x9b
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 80067a8:	801a      	strh	r2, [r3, #0]
    	ADCFlag=1;	// And enable ADC Control
 80067aa:	4b16      	ldr	r3, [pc, #88]	; (8006804 <HAL_UART_RxCpltCallback+0x90>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
    }
    UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "Pulse width: %d\r\n", pulsewidth);
 80067b0:	4b16      	ldr	r3, [pc, #88]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	001a      	movs	r2, r3
 80067b6:	4916      	ldr	r1, [pc, #88]	; (8006810 <HAL_UART_RxCpltCallback+0x9c>)
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <HAL_UART_RxCpltCallback+0xa0>)
 80067ba:	0018      	movs	r0, r3
 80067bc:	f000 faa4 	bl	8006d08 <siprintf>
 80067c0:	0003      	movs	r3, r0
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	4b14      	ldr	r3, [pc, #80]	; (8006818 <HAL_UART_RxCpltCallback+0xa4>)
 80067c6:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100); // Echo pulse width
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <HAL_UART_RxCpltCallback+0xa4>)
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	4911      	ldr	r1, [pc, #68]	; (8006814 <HAL_UART_RxCpltCallback+0xa0>)
 80067ce:	4813      	ldr	r0, [pc, #76]	; (800681c <HAL_UART_RxCpltCallback+0xa8>)
 80067d0:	2364      	movs	r3, #100	; 0x64
 80067d2:	f7fd fe73 	bl	80044bc <HAL_UART_Transmit>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth); // Update PWM CH 1
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <HAL_UART_RxCpltCallback+0xac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth); // Update PWM CH 2
 80067e0:	23a0      	movs	r3, #160	; 0xa0
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_UART_RxCpltCallback+0x98>)
 80067e6:	8812      	ldrh	r2, [r2, #0]
 80067e8:	1a9a      	subs	r2, r3, r2
 80067ea:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <HAL_UART_RxCpltCallback+0xac>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4); // Enable next UART Receive interrupt
 80067f0:	4905      	ldr	r1, [pc, #20]	; (8006808 <HAL_UART_RxCpltCallback+0x94>)
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <HAL_UART_RxCpltCallback+0xa8>)
 80067f4:	2204      	movs	r2, #4
 80067f6:	0018      	movs	r0, r3
 80067f8:	f7fd fefc 	bl	80045f4 <HAL_UART_Receive_IT>
}
 80067fc:	46c0      	nop			; (mov r8, r8)
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000008 	.word	0x20000008
 8006808:	20000248 	.word	0x20000248
 800680c:	20000006 	.word	0x20000006
 8006810:	08007744 	.word	0x08007744
 8006814:	200001e0 	.word	0x200001e0
 8006818:	20000244 	.word	0x20000244
 800681c:	20000148 	.word	0x20000148
 8006820:	200000fc 	.word	0x200000fc

08006824 <read_TIM1>:

uint32_t read_TIM1() {
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  return TIM1->CNT;
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <read_TIM1+0x10>)
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	40012c00 	.word	0x40012c00

08006838 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	// Read & Update The ADC Result
	prevTime = currTime;
 8006840:	4b23      	ldr	r3, [pc, #140]	; (80068d0 <HAL_ADC_ConvCpltCallback+0x98>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b23      	ldr	r3, [pc, #140]	; (80068d4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8006846:	601a      	str	r2, [r3, #0]
	currTime = read_TIM1();
 8006848:	f7ff ffec 	bl	8006824 <read_TIM1>
 800684c:	0002      	movs	r2, r0
 800684e:	4b20      	ldr	r3, [pc, #128]	; (80068d0 <HAL_ADC_ConvCpltCallback+0x98>)
 8006850:	601a      	str	r2, [r3, #0]
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8006854:	0018      	movs	r0, r3
 8006856:	f7fa fe73 	bl	8001540 <HAL_ADC_GetValue>
 800685a:	0003      	movs	r3, r0
 800685c:	b29a      	uxth	r2, r3
 800685e:	4b1f      	ldr	r3, [pc, #124]	; (80068dc <HAL_ADC_ConvCpltCallback+0xa4>)
 8006860:	801a      	strh	r2, [r3, #0]
	totError = AD_RES * (currTime - prevTime);
 8006862:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_ADC_ConvCpltCallback+0x98>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	b29b      	uxth	r3, r3
 800686e:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <HAL_ADC_ConvCpltCallback+0xa4>)
 8006870:	8812      	ldrh	r2, [r2, #0]
 8006872:	4353      	muls	r3, r2
 8006874:	b29a      	uxth	r2, r3
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8006878:	801a      	strh	r2, [r3, #0]
	pulsewidth = PULSE_STEP *  (Kp * AD_RES );
 800687a:	4b18      	ldr	r3, [pc, #96]	; (80068dc <HAL_ADC_ConvCpltCallback+0xa4>)
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	0018      	movs	r0, r3
 8006880:	f7fa f8ce 	bl	8000a20 <__aeabi_i2f>
 8006884:	1c02      	adds	r2, r0, #0
 8006886:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <HAL_ADC_ConvCpltCallback+0xac>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1c19      	adds	r1, r3, #0
 800688c:	1c10      	adds	r0, r2, #0
 800688e:	f7f9 fdd3 	bl	8000438 <__aeabi_fmul>
 8006892:	1c03      	adds	r3, r0, #0
 8006894:	1c1a      	adds	r2, r3, #0
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006898:	1c19      	adds	r1, r3, #0
 800689a:	1c10      	adds	r0, r2, #0
 800689c:	f7f9 fdcc 	bl	8000438 <__aeabi_fmul>
 80068a0:	1c03      	adds	r3, r0, #0
 80068a2:	1c18      	adds	r0, r3, #0
 80068a4:	f7f9 fce4 	bl	8000270 <__aeabi_f2uiz>
 80068a8:	0003      	movs	r3, r0
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80068ae:	801a      	strh	r2, [r3, #0]
	if(pulsewidth > PULSE_MAX)
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	001a      	movs	r2, r3
 80068b6:	239b      	movs	r3, #155	; 0x9b
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	dd04      	ble.n	80068c8 <HAL_ADC_ConvCpltCallback+0x90>
	{
		pulsewidth = PULSE_MAX;
 80068be:	239b      	movs	r3, #155	; 0x9b
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80068c6:	801a      	strh	r2, [r3, #0]
	}
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	2000024c 	.word	0x2000024c
 80068d4:	20000250 	.word	0x20000250
 80068d8:	20000098 	.word	0x20000098
 80068dc:	200001dc 	.word	0x200001dc
 80068e0:	20000254 	.word	0x20000254
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	3d9b0000 	.word	0x3d9b0000
 80068ec:	20000006 	.word	0x20000006

080068f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80068f4:	b672      	cpsid	i
}
 80068f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80068f8:	e7fe      	b.n	80068f8 <Error_Handler+0x8>
	...

080068fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <HAL_MspInit+0x44>)
 8006904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006906:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_MspInit+0x44>)
 8006908:	2101      	movs	r1, #1
 800690a:	430a      	orrs	r2, r1
 800690c:	641a      	str	r2, [r3, #64]	; 0x40
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <HAL_MspInit+0x44>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2201      	movs	r2, #1
 8006914:	4013      	ands	r3, r2
 8006916:	607b      	str	r3, [r7, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_MspInit+0x44>)
 800691c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <HAL_MspInit+0x44>)
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0549      	lsls	r1, r1, #21
 8006924:	430a      	orrs	r2, r1
 8006926:	63da      	str	r2, [r3, #60]	; 0x3c
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_MspInit+0x44>)
 800692a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	055b      	lsls	r3, r3, #21
 8006930:	4013      	ands	r3, r2
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b002      	add	sp, #8
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	40021000 	.word	0x40021000

08006944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b08b      	sub	sp, #44	; 0x2c
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800694c:	2414      	movs	r4, #20
 800694e:	193b      	adds	r3, r7, r4
 8006950:	0018      	movs	r0, r3
 8006952:	2314      	movs	r3, #20
 8006954:	001a      	movs	r2, r3
 8006956:	2100      	movs	r1, #0
 8006958:	f000 f9ce 	bl	8006cf8 <memset>
  if(hadc->Instance==ADC1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_ADC_MspInit+0x90>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d131      	bne.n	80069ca <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006966:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 8006968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	0349      	lsls	r1, r1, #13
 8006970:	430a      	orrs	r2, r1
 8006972:	641a      	str	r2, [r3, #64]	; 0x40
 8006974:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 8006976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	035b      	lsls	r3, r3, #13
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 8006984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 8006988:	2101      	movs	r1, #1
 800698a:	430a      	orrs	r2, r1
 800698c:	635a      	str	r2, [r3, #52]	; 0x34
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <HAL_ADC_MspInit+0x94>)
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	2201      	movs	r2, #1
 8006994:	4013      	ands	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800699a:	193b      	adds	r3, r7, r4
 800699c:	2201      	movs	r2, #1
 800699e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	2203      	movs	r2, #3
 80069a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a6:	193b      	adds	r3, r7, r4
 80069a8:	2200      	movs	r2, #0
 80069aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ac:	193a      	adds	r2, r7, r4
 80069ae:	23a0      	movs	r3, #160	; 0xa0
 80069b0:	05db      	lsls	r3, r3, #23
 80069b2:	0011      	movs	r1, r2
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fb fcd3 	bl	8002360 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	200c      	movs	r0, #12
 80069c0:	f7fb fbd0 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80069c4:	200c      	movs	r0, #12
 80069c6:	f7fb fbe2 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b00b      	add	sp, #44	; 0x2c
 80069d0:	bd90      	pop	{r4, r7, pc}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	40012400 	.word	0x40012400
 80069d8:	40021000 	.word	0x40021000

080069dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b08f      	sub	sp, #60	; 0x3c
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069e4:	2410      	movs	r4, #16
 80069e6:	193b      	adds	r3, r7, r4
 80069e8:	0018      	movs	r0, r3
 80069ea:	2328      	movs	r3, #40	; 0x28
 80069ec:	001a      	movs	r2, r3
 80069ee:	2100      	movs	r1, #0
 80069f0:	f000 f982 	bl	8006cf8 <memset>
  if(htim_base->Instance==TIM1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <HAL_TIM_Base_MspInit+0x68>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d11d      	bne.n	8006a3a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80069fe:	193b      	adds	r3, r7, r4
 8006a00:	2280      	movs	r2, #128	; 0x80
 8006a02:	0392      	lsls	r2, r2, #14
 8006a04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	2280      	movs	r2, #128	; 0x80
 8006a0a:	03d2      	lsls	r2, r2, #15
 8006a0c:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7fc fb37 	bl	8003084 <HAL_RCCEx_PeriphCLKConfig>
 8006a16:	1e03      	subs	r3, r0, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8006a1a:	f7ff ff69 	bl	80068f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <HAL_TIM_Base_MspInit+0x6c>)
 8006a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_TIM_Base_MspInit+0x6c>)
 8006a24:	2180      	movs	r1, #128	; 0x80
 8006a26:	0109      	lsls	r1, r1, #4
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_TIM_Base_MspInit+0x6c>)
 8006a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a30:	2380      	movs	r3, #128	; 0x80
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b00f      	add	sp, #60	; 0x3c
 8006a40:	bd90      	pop	{r4, r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	40012c00 	.word	0x40012c00
 8006a48:	40021000 	.word	0x40021000

08006a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	240c      	movs	r4, #12
 8006a56:	193b      	adds	r3, r7, r4
 8006a58:	0018      	movs	r0, r3
 8006a5a:	2314      	movs	r3, #20
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2100      	movs	r1, #0
 8006a60:	f000 f94a 	bl	8006cf8 <memset>
  if(htim->Instance==TIM1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <HAL_TIM_MspPostInit+0x74>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d123      	bne.n	8006ab6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a6e:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <HAL_TIM_MspPostInit+0x78>)
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <HAL_TIM_MspPostInit+0x78>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	430a      	orrs	r2, r1
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34
 8006a7a:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <HAL_TIM_MspPostInit+0x78>)
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4013      	ands	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006a86:	193b      	adds	r3, r7, r4
 8006a88:	22c0      	movs	r2, #192	; 0xc0
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a8e:	0021      	movs	r1, r4
 8006a90:	187b      	adds	r3, r7, r1
 8006a92:	2202      	movs	r2, #2
 8006a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	187b      	adds	r3, r7, r1
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	187b      	adds	r3, r7, r1
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa8:	187a      	adds	r2, r7, r1
 8006aaa:	23a0      	movs	r3, #160	; 0xa0
 8006aac:	05db      	lsls	r3, r3, #23
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f7fb fc55 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b009      	add	sp, #36	; 0x24
 8006abc:	bd90      	pop	{r4, r7, pc}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b08b      	sub	sp, #44	; 0x2c
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad0:	2414      	movs	r4, #20
 8006ad2:	193b      	adds	r3, r7, r4
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	2314      	movs	r3, #20
 8006ad8:	001a      	movs	r2, r3
 8006ada:	2100      	movs	r1, #0
 8006adc:	f000 f90c 	bl	8006cf8 <memset>
  if(huart->Instance==USART2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_UART_MspInit+0x9c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d138      	bne.n	8006b5c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006aea:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aee:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	0289      	lsls	r1, r1, #10
 8006af4:	430a      	orrs	r2, r1
 8006af6:	63da      	str	r2, [r3, #60]	; 0x3c
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	029b      	lsls	r3, r3, #10
 8006b00:	4013      	ands	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0a:	4b17      	ldr	r3, [pc, #92]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <HAL_UART_MspInit+0xa0>)
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	2201      	movs	r2, #1
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8006b1e:	0021      	movs	r1, r4
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	220c      	movs	r2, #12
 8006b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b26:	187b      	adds	r3, r7, r1
 8006b28:	2202      	movs	r2, #2
 8006b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b2c:	187b      	adds	r3, r7, r1
 8006b2e:	2201      	movs	r2, #1
 8006b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b32:	187b      	adds	r3, r7, r1
 8006b34:	2200      	movs	r2, #0
 8006b36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006b38:	187b      	adds	r3, r7, r1
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b3e:	187a      	adds	r2, r7, r1
 8006b40:	23a0      	movs	r3, #160	; 0xa0
 8006b42:	05db      	lsls	r3, r3, #23
 8006b44:	0011      	movs	r1, r2
 8006b46:	0018      	movs	r0, r3
 8006b48:	f7fb fc0a 	bl	8002360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	201c      	movs	r0, #28
 8006b52:	f7fb fb07 	bl	8002164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b56:	201c      	movs	r0, #28
 8006b58:	f7fb fb19 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b00b      	add	sp, #44	; 0x2c
 8006b62:	bd90      	pop	{r4, r7, pc}
 8006b64:	40004400 	.word	0x40004400
 8006b68:	40021000 	.word	0x40021000

08006b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b70:	e7fe      	b.n	8006b70 <NMI_Handler+0x4>

08006b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b76:	e7fe      	b.n	8006b76 <HardFault_Handler+0x4>

08006b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b90:	f7fa f912 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <ADC1_IRQHandler+0x14>)
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7fa fcd8 	bl	8001558 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	20000098 	.word	0x20000098

08006bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USART2_IRQHandler+0x14>)
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7fd fd78 	bl	80046b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	20000148 	.word	0x20000148

08006bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006bd4:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <_sbrk+0x5c>)
 8006bd6:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <_sbrk+0x60>)
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006be0:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <_sbrk+0x64>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <_sbrk+0x64>)
 8006bea:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <_sbrk+0x68>)
 8006bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <_sbrk+0x64>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	18d3      	adds	r3, r2, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d207      	bcs.n	8006c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006bfc:	f000 f852 	bl	8006ca4 <__errno>
 8006c00:	0003      	movs	r3, r0
 8006c02:	220c      	movs	r2, #12
 8006c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c06:	2301      	movs	r3, #1
 8006c08:	425b      	negs	r3, r3
 8006c0a:	e009      	b.n	8006c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <_sbrk+0x64>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <_sbrk+0x64>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	18d2      	adds	r2, r2, r3
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <_sbrk+0x64>)
 8006c1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b006      	add	sp, #24
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20002000 	.word	0x20002000
 8006c2c:	00000400 	.word	0x00000400
 8006c30:	20000258 	.word	0x20000258
 8006c34:	20000270 	.word	0x20000270

08006c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c3c:	46c0      	nop			; (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006c44:	480d      	ldr	r0, [pc, #52]	; (8006c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006c46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006c48:	f7ff fff6 	bl	8006c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c4c:	480c      	ldr	r0, [pc, #48]	; (8006c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8006c4e:	490d      	ldr	r1, [pc, #52]	; (8006c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006c50:	4a0d      	ldr	r2, [pc, #52]	; (8006c88 <LoopForever+0xe>)
  movs r3, #0
 8006c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c54:	e002      	b.n	8006c5c <LoopCopyDataInit>

08006c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c5a:	3304      	adds	r3, #4

08006c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c60:	d3f9      	bcc.n	8006c56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006c64:	4c0a      	ldr	r4, [pc, #40]	; (8006c90 <LoopForever+0x16>)
  movs r3, #0
 8006c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c68:	e001      	b.n	8006c6e <LoopFillZerobss>

08006c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c6c:	3204      	adds	r2, #4

08006c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c70:	d3fb      	bcc.n	8006c6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006c72:	f000 f81d 	bl	8006cb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006c76:	f7ff fae5 	bl	8006244 <main>

08006c7a <LoopForever>:

LoopForever:
  b LoopForever
 8006c7a:	e7fe      	b.n	8006c7a <LoopForever>
  ldr   r0, =_estack
 8006c7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8006c88:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 8006c8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8006c90:	2000026c 	.word	0x2000026c

08006c94 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c94:	e7fe      	b.n	8006c94 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

08006c96 <atoi>:
 8006c96:	b510      	push	{r4, lr}
 8006c98:	220a      	movs	r2, #10
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f000 f8e2 	bl	8006e64 <strtol>
 8006ca0:	bd10      	pop	{r4, pc}
	...

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	; (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	20000014 	.word	0x20000014

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	; (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	; (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	f000 fd25 	bl	8007710 <_init>
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	; (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	; (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	00b3      	lsls	r3, r6, #2
 8006cd6:	58eb      	ldr	r3, [r5, r3]
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	00b3      	lsls	r3, r6, #2
 8006ce0:	58eb      	ldr	r3, [r5, r3]
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	080079a0 	.word	0x080079a0
 8006cec:	080079a0 	.word	0x080079a0
 8006cf0:	080079a0 	.word	0x080079a0
 8006cf4:	080079a4 	.word	0x080079a4

08006cf8 <memset>:
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	1882      	adds	r2, r0, r2
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	7019      	strb	r1, [r3, #0]
 8006d04:	3301      	adds	r3, #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <siprintf>:
 8006d08:	b40e      	push	{r1, r2, r3}
 8006d0a:	b500      	push	{lr}
 8006d0c:	490b      	ldr	r1, [pc, #44]	; (8006d3c <siprintf+0x34>)
 8006d0e:	b09c      	sub	sp, #112	; 0x70
 8006d10:	ab1d      	add	r3, sp, #116	; 0x74
 8006d12:	9002      	str	r0, [sp, #8]
 8006d14:	9006      	str	r0, [sp, #24]
 8006d16:	9107      	str	r1, [sp, #28]
 8006d18:	9104      	str	r1, [sp, #16]
 8006d1a:	4809      	ldr	r0, [pc, #36]	; (8006d40 <siprintf+0x38>)
 8006d1c:	4909      	ldr	r1, [pc, #36]	; (8006d44 <siprintf+0x3c>)
 8006d1e:	cb04      	ldmia	r3!, {r2}
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	6800      	ldr	r0, [r0, #0]
 8006d24:	a902      	add	r1, sp, #8
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	f000 f90a 	bl	8006f40 <_svfiprintf_r>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9a02      	ldr	r2, [sp, #8]
 8006d30:	7013      	strb	r3, [r2, #0]
 8006d32:	b01c      	add	sp, #112	; 0x70
 8006d34:	bc08      	pop	{r3}
 8006d36:	b003      	add	sp, #12
 8006d38:	4718      	bx	r3
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	7fffffff 	.word	0x7fffffff
 8006d40:	20000014 	.word	0x20000014
 8006d44:	ffff0208 	.word	0xffff0208

08006d48 <_strtol_l.constprop.0>:
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	001e      	movs	r6, r3
 8006d4e:	9005      	str	r0, [sp, #20]
 8006d50:	9101      	str	r1, [sp, #4]
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d045      	beq.n	8006de4 <_strtol_l.constprop.0+0x9c>
 8006d58:	000b      	movs	r3, r1
 8006d5a:	2e24      	cmp	r6, #36	; 0x24
 8006d5c:	d842      	bhi.n	8006de4 <_strtol_l.constprop.0+0x9c>
 8006d5e:	4a3f      	ldr	r2, [pc, #252]	; (8006e5c <_strtol_l.constprop.0+0x114>)
 8006d60:	2108      	movs	r1, #8
 8006d62:	4694      	mov	ip, r2
 8006d64:	001a      	movs	r2, r3
 8006d66:	4660      	mov	r0, ip
 8006d68:	7814      	ldrb	r4, [r2, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	5d00      	ldrb	r0, [r0, r4]
 8006d6e:	001d      	movs	r5, r3
 8006d70:	0007      	movs	r7, r0
 8006d72:	400f      	ands	r7, r1
 8006d74:	4208      	tst	r0, r1
 8006d76:	d1f5      	bne.n	8006d64 <_strtol_l.constprop.0+0x1c>
 8006d78:	2c2d      	cmp	r4, #45	; 0x2d
 8006d7a:	d13a      	bne.n	8006df2 <_strtol_l.constprop.0+0xaa>
 8006d7c:	2701      	movs	r7, #1
 8006d7e:	781c      	ldrb	r4, [r3, #0]
 8006d80:	1c95      	adds	r5, r2, #2
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d065      	beq.n	8006e52 <_strtol_l.constprop.0+0x10a>
 8006d86:	2e10      	cmp	r6, #16
 8006d88:	d109      	bne.n	8006d9e <_strtol_l.constprop.0+0x56>
 8006d8a:	2c30      	cmp	r4, #48	; 0x30
 8006d8c:	d107      	bne.n	8006d9e <_strtol_l.constprop.0+0x56>
 8006d8e:	2220      	movs	r2, #32
 8006d90:	782b      	ldrb	r3, [r5, #0]
 8006d92:	4393      	bics	r3, r2
 8006d94:	2b58      	cmp	r3, #88	; 0x58
 8006d96:	d157      	bne.n	8006e48 <_strtol_l.constprop.0+0x100>
 8006d98:	2610      	movs	r6, #16
 8006d9a:	786c      	ldrb	r4, [r5, #1]
 8006d9c:	3502      	adds	r5, #2
 8006d9e:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <_strtol_l.constprop.0+0x118>)
 8006da0:	0031      	movs	r1, r6
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	0018      	movs	r0, r3
 8006da6:	9303      	str	r3, [sp, #12]
 8006da8:	f7f9 fa3c 	bl	8000224 <__aeabi_uidivmod>
 8006dac:	2300      	movs	r3, #0
 8006dae:	2201      	movs	r2, #1
 8006db0:	4684      	mov	ip, r0
 8006db2:	0018      	movs	r0, r3
 8006db4:	9104      	str	r1, [sp, #16]
 8006db6:	4252      	negs	r2, r2
 8006db8:	0021      	movs	r1, r4
 8006dba:	3930      	subs	r1, #48	; 0x30
 8006dbc:	2909      	cmp	r1, #9
 8006dbe:	d81d      	bhi.n	8006dfc <_strtol_l.constprop.0+0xb4>
 8006dc0:	000c      	movs	r4, r1
 8006dc2:	42a6      	cmp	r6, r4
 8006dc4:	dd28      	ble.n	8006e18 <_strtol_l.constprop.0+0xd0>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	db24      	blt.n	8006e14 <_strtol_l.constprop.0+0xcc>
 8006dca:	0013      	movs	r3, r2
 8006dcc:	4584      	cmp	ip, r0
 8006dce:	d306      	bcc.n	8006dde <_strtol_l.constprop.0+0x96>
 8006dd0:	d102      	bne.n	8006dd8 <_strtol_l.constprop.0+0x90>
 8006dd2:	9904      	ldr	r1, [sp, #16]
 8006dd4:	42a1      	cmp	r1, r4
 8006dd6:	db02      	blt.n	8006dde <_strtol_l.constprop.0+0x96>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4370      	muls	r0, r6
 8006ddc:	1820      	adds	r0, r4, r0
 8006dde:	782c      	ldrb	r4, [r5, #0]
 8006de0:	3501      	adds	r5, #1
 8006de2:	e7e9      	b.n	8006db8 <_strtol_l.constprop.0+0x70>
 8006de4:	f7ff ff5e 	bl	8006ca4 <__errno>
 8006de8:	2316      	movs	r3, #22
 8006dea:	6003      	str	r3, [r0, #0]
 8006dec:	2000      	movs	r0, #0
 8006dee:	b007      	add	sp, #28
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df2:	2c2b      	cmp	r4, #43	; 0x2b
 8006df4:	d1c5      	bne.n	8006d82 <_strtol_l.constprop.0+0x3a>
 8006df6:	781c      	ldrb	r4, [r3, #0]
 8006df8:	1c95      	adds	r5, r2, #2
 8006dfa:	e7c2      	b.n	8006d82 <_strtol_l.constprop.0+0x3a>
 8006dfc:	0021      	movs	r1, r4
 8006dfe:	3941      	subs	r1, #65	; 0x41
 8006e00:	2919      	cmp	r1, #25
 8006e02:	d801      	bhi.n	8006e08 <_strtol_l.constprop.0+0xc0>
 8006e04:	3c37      	subs	r4, #55	; 0x37
 8006e06:	e7dc      	b.n	8006dc2 <_strtol_l.constprop.0+0x7a>
 8006e08:	0021      	movs	r1, r4
 8006e0a:	3961      	subs	r1, #97	; 0x61
 8006e0c:	2919      	cmp	r1, #25
 8006e0e:	d803      	bhi.n	8006e18 <_strtol_l.constprop.0+0xd0>
 8006e10:	3c57      	subs	r4, #87	; 0x57
 8006e12:	e7d6      	b.n	8006dc2 <_strtol_l.constprop.0+0x7a>
 8006e14:	0013      	movs	r3, r2
 8006e16:	e7e2      	b.n	8006dde <_strtol_l.constprop.0+0x96>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	da09      	bge.n	8006e30 <_strtol_l.constprop.0+0xe8>
 8006e1c:	2322      	movs	r3, #34	; 0x22
 8006e1e:	9a05      	ldr	r2, [sp, #20]
 8006e20:	9803      	ldr	r0, [sp, #12]
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0e1      	beq.n	8006dee <_strtol_l.constprop.0+0xa6>
 8006e2a:	1e6b      	subs	r3, r5, #1
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	e007      	b.n	8006e40 <_strtol_l.constprop.0+0xf8>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	d000      	beq.n	8006e36 <_strtol_l.constprop.0+0xee>
 8006e34:	4240      	negs	r0, r0
 8006e36:	9a02      	ldr	r2, [sp, #8]
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	d0d8      	beq.n	8006dee <_strtol_l.constprop.0+0xa6>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f4      	bne.n	8006e2a <_strtol_l.constprop.0+0xe2>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	9a01      	ldr	r2, [sp, #4]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e7d2      	b.n	8006dee <_strtol_l.constprop.0+0xa6>
 8006e48:	2430      	movs	r4, #48	; 0x30
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	d1a7      	bne.n	8006d9e <_strtol_l.constprop.0+0x56>
 8006e4e:	3608      	adds	r6, #8
 8006e50:	e7a5      	b.n	8006d9e <_strtol_l.constprop.0+0x56>
 8006e52:	2c30      	cmp	r4, #48	; 0x30
 8006e54:	d09b      	beq.n	8006d8e <_strtol_l.constprop.0+0x46>
 8006e56:	260a      	movs	r6, #10
 8006e58:	e7a1      	b.n	8006d9e <_strtol_l.constprop.0+0x56>
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	08007865 	.word	0x08007865
 8006e60:	7fffffff 	.word	0x7fffffff

08006e64 <strtol>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	0013      	movs	r3, r2
 8006e68:	000a      	movs	r2, r1
 8006e6a:	0001      	movs	r1, r0
 8006e6c:	4802      	ldr	r0, [pc, #8]	; (8006e78 <strtol+0x14>)
 8006e6e:	6800      	ldr	r0, [r0, #0]
 8006e70:	f7ff ff6a 	bl	8006d48 <_strtol_l.constprop.0>
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000014 	.word	0x20000014

08006e7c <__ssputs_r>:
 8006e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7e:	688e      	ldr	r6, [r1, #8]
 8006e80:	b085      	sub	sp, #20
 8006e82:	0007      	movs	r7, r0
 8006e84:	000c      	movs	r4, r1
 8006e86:	9203      	str	r2, [sp, #12]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	429e      	cmp	r6, r3
 8006e8c:	d83c      	bhi.n	8006f08 <__ssputs_r+0x8c>
 8006e8e:	2390      	movs	r3, #144	; 0x90
 8006e90:	898a      	ldrh	r2, [r1, #12]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	421a      	tst	r2, r3
 8006e96:	d034      	beq.n	8006f02 <__ssputs_r+0x86>
 8006e98:	6909      	ldr	r1, [r1, #16]
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	6960      	ldr	r0, [r4, #20]
 8006e9e:	1a5b      	subs	r3, r3, r1
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	4343      	muls	r3, r0
 8006ea6:	0fdd      	lsrs	r5, r3, #31
 8006ea8:	18ed      	adds	r5, r5, r3
 8006eaa:	9b01      	ldr	r3, [sp, #4]
 8006eac:	9802      	ldr	r0, [sp, #8]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	181b      	adds	r3, r3, r0
 8006eb2:	106d      	asrs	r5, r5, #1
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	d900      	bls.n	8006eba <__ssputs_r+0x3e>
 8006eb8:	001d      	movs	r5, r3
 8006eba:	0553      	lsls	r3, r2, #21
 8006ebc:	d532      	bpl.n	8006f24 <__ssputs_r+0xa8>
 8006ebe:	0029      	movs	r1, r5
 8006ec0:	0038      	movs	r0, r7
 8006ec2:	f000 fb53 	bl	800756c <_malloc_r>
 8006ec6:	1e06      	subs	r6, r0, #0
 8006ec8:	d109      	bne.n	8006ede <__ssputs_r+0x62>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	2340      	movs	r3, #64	; 0x40
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	89a2      	ldrh	r2, [r4, #12]
 8006ed4:	4240      	negs	r0, r0
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	b005      	add	sp, #20
 8006edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ede:	9a02      	ldr	r2, [sp, #8]
 8006ee0:	6921      	ldr	r1, [r4, #16]
 8006ee2:	f000 faba 	bl	800745a <memcpy>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <__ssputs_r+0xc0>)
 8006eea:	401a      	ands	r2, r3
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	9b02      	ldr	r3, [sp, #8]
 8006ef4:	6126      	str	r6, [r4, #16]
 8006ef6:	18f6      	adds	r6, r6, r3
 8006ef8:	6026      	str	r6, [r4, #0]
 8006efa:	6165      	str	r5, [r4, #20]
 8006efc:	9e01      	ldr	r6, [sp, #4]
 8006efe:	1aed      	subs	r5, r5, r3
 8006f00:	60a5      	str	r5, [r4, #8]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	429e      	cmp	r6, r3
 8006f06:	d900      	bls.n	8006f0a <__ssputs_r+0x8e>
 8006f08:	9e01      	ldr	r6, [sp, #4]
 8006f0a:	0032      	movs	r2, r6
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	f000 faac 	bl	800746c <memmove>
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	2000      	movs	r0, #0
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	60a3      	str	r3, [r4, #8]
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	199e      	adds	r6, r3, r6
 8006f20:	6026      	str	r6, [r4, #0]
 8006f22:	e7da      	b.n	8006eda <__ssputs_r+0x5e>
 8006f24:	002a      	movs	r2, r5
 8006f26:	0038      	movs	r0, r7
 8006f28:	f000 fb96 	bl	8007658 <_realloc_r>
 8006f2c:	1e06      	subs	r6, r0, #0
 8006f2e:	d1e0      	bne.n	8006ef2 <__ssputs_r+0x76>
 8006f30:	0038      	movs	r0, r7
 8006f32:	6921      	ldr	r1, [r4, #16]
 8006f34:	f000 faae 	bl	8007494 <_free_r>
 8006f38:	e7c7      	b.n	8006eca <__ssputs_r+0x4e>
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	fffffb7f 	.word	0xfffffb7f

08006f40 <_svfiprintf_r>:
 8006f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f42:	b0a1      	sub	sp, #132	; 0x84
 8006f44:	9003      	str	r0, [sp, #12]
 8006f46:	001d      	movs	r5, r3
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	000f      	movs	r7, r1
 8006f4c:	0016      	movs	r6, r2
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	d511      	bpl.n	8006f76 <_svfiprintf_r+0x36>
 8006f52:	690b      	ldr	r3, [r1, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10e      	bne.n	8006f76 <_svfiprintf_r+0x36>
 8006f58:	2140      	movs	r1, #64	; 0x40
 8006f5a:	f000 fb07 	bl	800756c <_malloc_r>
 8006f5e:	6038      	str	r0, [r7, #0]
 8006f60:	6138      	str	r0, [r7, #16]
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d105      	bne.n	8006f72 <_svfiprintf_r+0x32>
 8006f66:	230c      	movs	r3, #12
 8006f68:	9a03      	ldr	r2, [sp, #12]
 8006f6a:	3801      	subs	r0, #1
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	b021      	add	sp, #132	; 0x84
 8006f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	2300      	movs	r3, #0
 8006f78:	ac08      	add	r4, sp, #32
 8006f7a:	6163      	str	r3, [r4, #20]
 8006f7c:	3320      	adds	r3, #32
 8006f7e:	7663      	strb	r3, [r4, #25]
 8006f80:	3310      	adds	r3, #16
 8006f82:	76a3      	strb	r3, [r4, #26]
 8006f84:	9507      	str	r5, [sp, #28]
 8006f86:	0035      	movs	r5, r6
 8006f88:	782b      	ldrb	r3, [r5, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <_svfiprintf_r+0x52>
 8006f8e:	2b25      	cmp	r3, #37	; 0x25
 8006f90:	d147      	bne.n	8007022 <_svfiprintf_r+0xe2>
 8006f92:	1bab      	subs	r3, r5, r6
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	42b5      	cmp	r5, r6
 8006f98:	d00c      	beq.n	8006fb4 <_svfiprintf_r+0x74>
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	0039      	movs	r1, r7
 8006f9e:	9803      	ldr	r0, [sp, #12]
 8006fa0:	f7ff ff6c 	bl	8006e7c <__ssputs_r>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d100      	bne.n	8006faa <_svfiprintf_r+0x6a>
 8006fa8:	e0ae      	b.n	8007108 <_svfiprintf_r+0x1c8>
 8006faa:	6962      	ldr	r2, [r4, #20]
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	4694      	mov	ip, r2
 8006fb0:	4463      	add	r3, ip
 8006fb2:	6163      	str	r3, [r4, #20]
 8006fb4:	782b      	ldrb	r3, [r5, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d100      	bne.n	8006fbc <_svfiprintf_r+0x7c>
 8006fba:	e0a5      	b.n	8007108 <_svfiprintf_r+0x1c8>
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4252      	negs	r2, r2
 8006fc2:	6062      	str	r2, [r4, #4]
 8006fc4:	a904      	add	r1, sp, #16
 8006fc6:	3254      	adds	r2, #84	; 0x54
 8006fc8:	1852      	adds	r2, r2, r1
 8006fca:	1c6e      	adds	r6, r5, #1
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	60e3      	str	r3, [r4, #12]
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	7013      	strb	r3, [r2, #0]
 8006fd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	7831      	ldrb	r1, [r6, #0]
 8006fda:	4854      	ldr	r0, [pc, #336]	; (800712c <_svfiprintf_r+0x1ec>)
 8006fdc:	f000 fa32 	bl	8007444 <memchr>
 8006fe0:	1c75      	adds	r5, r6, #1
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d11f      	bne.n	8007026 <_svfiprintf_r+0xe6>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	06d3      	lsls	r3, r2, #27
 8006fea:	d504      	bpl.n	8006ff6 <_svfiprintf_r+0xb6>
 8006fec:	2353      	movs	r3, #83	; 0x53
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	185b      	adds	r3, r3, r1
 8006ff2:	2120      	movs	r1, #32
 8006ff4:	7019      	strb	r1, [r3, #0]
 8006ff6:	0713      	lsls	r3, r2, #28
 8006ff8:	d504      	bpl.n	8007004 <_svfiprintf_r+0xc4>
 8006ffa:	2353      	movs	r3, #83	; 0x53
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	185b      	adds	r3, r3, r1
 8007000:	212b      	movs	r1, #43	; 0x2b
 8007002:	7019      	strb	r1, [r3, #0]
 8007004:	7833      	ldrb	r3, [r6, #0]
 8007006:	2b2a      	cmp	r3, #42	; 0x2a
 8007008:	d016      	beq.n	8007038 <_svfiprintf_r+0xf8>
 800700a:	0035      	movs	r5, r6
 800700c:	2100      	movs	r1, #0
 800700e:	200a      	movs	r0, #10
 8007010:	68e3      	ldr	r3, [r4, #12]
 8007012:	782a      	ldrb	r2, [r5, #0]
 8007014:	1c6e      	adds	r6, r5, #1
 8007016:	3a30      	subs	r2, #48	; 0x30
 8007018:	2a09      	cmp	r2, #9
 800701a:	d94e      	bls.n	80070ba <_svfiprintf_r+0x17a>
 800701c:	2900      	cmp	r1, #0
 800701e:	d111      	bne.n	8007044 <_svfiprintf_r+0x104>
 8007020:	e017      	b.n	8007052 <_svfiprintf_r+0x112>
 8007022:	3501      	adds	r5, #1
 8007024:	e7b0      	b.n	8006f88 <_svfiprintf_r+0x48>
 8007026:	4b41      	ldr	r3, [pc, #260]	; (800712c <_svfiprintf_r+0x1ec>)
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	1ac0      	subs	r0, r0, r3
 800702c:	2301      	movs	r3, #1
 800702e:	4083      	lsls	r3, r0
 8007030:	4313      	orrs	r3, r2
 8007032:	002e      	movs	r6, r5
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	e7ce      	b.n	8006fd6 <_svfiprintf_r+0x96>
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	1d19      	adds	r1, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db01      	blt.n	8007048 <_svfiprintf_r+0x108>
 8007044:	930b      	str	r3, [sp, #44]	; 0x2c
 8007046:	e004      	b.n	8007052 <_svfiprintf_r+0x112>
 8007048:	425b      	negs	r3, r3
 800704a:	60e3      	str	r3, [r4, #12]
 800704c:	2302      	movs	r3, #2
 800704e:	4313      	orrs	r3, r2
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	782b      	ldrb	r3, [r5, #0]
 8007054:	2b2e      	cmp	r3, #46	; 0x2e
 8007056:	d10a      	bne.n	800706e <_svfiprintf_r+0x12e>
 8007058:	786b      	ldrb	r3, [r5, #1]
 800705a:	2b2a      	cmp	r3, #42	; 0x2a
 800705c:	d135      	bne.n	80070ca <_svfiprintf_r+0x18a>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	3502      	adds	r5, #2
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9207      	str	r2, [sp, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	db2b      	blt.n	80070c4 <_svfiprintf_r+0x184>
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	4e30      	ldr	r6, [pc, #192]	; (8007130 <_svfiprintf_r+0x1f0>)
 8007070:	2203      	movs	r2, #3
 8007072:	0030      	movs	r0, r6
 8007074:	7829      	ldrb	r1, [r5, #0]
 8007076:	f000 f9e5 	bl	8007444 <memchr>
 800707a:	2800      	cmp	r0, #0
 800707c:	d006      	beq.n	800708c <_svfiprintf_r+0x14c>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	1b80      	subs	r0, r0, r6
 8007082:	4083      	lsls	r3, r0
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	3501      	adds	r5, #1
 8007088:	4313      	orrs	r3, r2
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	7829      	ldrb	r1, [r5, #0]
 800708e:	2206      	movs	r2, #6
 8007090:	4828      	ldr	r0, [pc, #160]	; (8007134 <_svfiprintf_r+0x1f4>)
 8007092:	1c6e      	adds	r6, r5, #1
 8007094:	7621      	strb	r1, [r4, #24]
 8007096:	f000 f9d5 	bl	8007444 <memchr>
 800709a:	2800      	cmp	r0, #0
 800709c:	d03c      	beq.n	8007118 <_svfiprintf_r+0x1d8>
 800709e:	4b26      	ldr	r3, [pc, #152]	; (8007138 <_svfiprintf_r+0x1f8>)
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d125      	bne.n	80070f0 <_svfiprintf_r+0x1b0>
 80070a4:	2207      	movs	r2, #7
 80070a6:	9b07      	ldr	r3, [sp, #28]
 80070a8:	3307      	adds	r3, #7
 80070aa:	4393      	bics	r3, r2
 80070ac:	3308      	adds	r3, #8
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	6963      	ldr	r3, [r4, #20]
 80070b2:	9a04      	ldr	r2, [sp, #16]
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	6163      	str	r3, [r4, #20]
 80070b8:	e765      	b.n	8006f86 <_svfiprintf_r+0x46>
 80070ba:	4343      	muls	r3, r0
 80070bc:	0035      	movs	r5, r6
 80070be:	2101      	movs	r1, #1
 80070c0:	189b      	adds	r3, r3, r2
 80070c2:	e7a6      	b.n	8007012 <_svfiprintf_r+0xd2>
 80070c4:	2301      	movs	r3, #1
 80070c6:	425b      	negs	r3, r3
 80070c8:	e7d0      	b.n	800706c <_svfiprintf_r+0x12c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	200a      	movs	r0, #10
 80070ce:	001a      	movs	r2, r3
 80070d0:	3501      	adds	r5, #1
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	7829      	ldrb	r1, [r5, #0]
 80070d6:	1c6e      	adds	r6, r5, #1
 80070d8:	3930      	subs	r1, #48	; 0x30
 80070da:	2909      	cmp	r1, #9
 80070dc:	d903      	bls.n	80070e6 <_svfiprintf_r+0x1a6>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c5      	beq.n	800706e <_svfiprintf_r+0x12e>
 80070e2:	9209      	str	r2, [sp, #36]	; 0x24
 80070e4:	e7c3      	b.n	800706e <_svfiprintf_r+0x12e>
 80070e6:	4342      	muls	r2, r0
 80070e8:	0035      	movs	r5, r6
 80070ea:	2301      	movs	r3, #1
 80070ec:	1852      	adds	r2, r2, r1
 80070ee:	e7f1      	b.n	80070d4 <_svfiprintf_r+0x194>
 80070f0:	ab07      	add	r3, sp, #28
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	003a      	movs	r2, r7
 80070f6:	0021      	movs	r1, r4
 80070f8:	4b10      	ldr	r3, [pc, #64]	; (800713c <_svfiprintf_r+0x1fc>)
 80070fa:	9803      	ldr	r0, [sp, #12]
 80070fc:	e000      	b.n	8007100 <_svfiprintf_r+0x1c0>
 80070fe:	bf00      	nop
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	d1d3      	bne.n	80070b0 <_svfiprintf_r+0x170>
 8007108:	89bb      	ldrh	r3, [r7, #12]
 800710a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800710c:	065b      	lsls	r3, r3, #25
 800710e:	d400      	bmi.n	8007112 <_svfiprintf_r+0x1d2>
 8007110:	e72d      	b.n	8006f6e <_svfiprintf_r+0x2e>
 8007112:	2001      	movs	r0, #1
 8007114:	4240      	negs	r0, r0
 8007116:	e72a      	b.n	8006f6e <_svfiprintf_r+0x2e>
 8007118:	ab07      	add	r3, sp, #28
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	003a      	movs	r2, r7
 800711e:	0021      	movs	r1, r4
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <_svfiprintf_r+0x1fc>)
 8007122:	9803      	ldr	r0, [sp, #12]
 8007124:	f000 f87c 	bl	8007220 <_printf_i>
 8007128:	e7ea      	b.n	8007100 <_svfiprintf_r+0x1c0>
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	08007965 	.word	0x08007965
 8007130:	0800796b 	.word	0x0800796b
 8007134:	0800796f 	.word	0x0800796f
 8007138:	00000000 	.word	0x00000000
 800713c:	08006e7d 	.word	0x08006e7d

08007140 <_printf_common>:
 8007140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007142:	0015      	movs	r5, r2
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	688a      	ldr	r2, [r1, #8]
 8007148:	690b      	ldr	r3, [r1, #16]
 800714a:	000c      	movs	r4, r1
 800714c:	9000      	str	r0, [sp, #0]
 800714e:	4293      	cmp	r3, r2
 8007150:	da00      	bge.n	8007154 <_printf_common+0x14>
 8007152:	0013      	movs	r3, r2
 8007154:	0022      	movs	r2, r4
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	3243      	adds	r2, #67	; 0x43
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	2a00      	cmp	r2, #0
 800715e:	d001      	beq.n	8007164 <_printf_common+0x24>
 8007160:	3301      	adds	r3, #1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	069b      	lsls	r3, r3, #26
 8007168:	d502      	bpl.n	8007170 <_printf_common+0x30>
 800716a:	682b      	ldr	r3, [r5, #0]
 800716c:	3302      	adds	r3, #2
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	2306      	movs	r3, #6
 8007174:	0017      	movs	r7, r2
 8007176:	401f      	ands	r7, r3
 8007178:	421a      	tst	r2, r3
 800717a:	d027      	beq.n	80071cc <_printf_common+0x8c>
 800717c:	0023      	movs	r3, r4
 800717e:	3343      	adds	r3, #67	; 0x43
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	4193      	sbcs	r3, r2
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	0692      	lsls	r2, r2, #26
 800718a:	d430      	bmi.n	80071ee <_printf_common+0xae>
 800718c:	0022      	movs	r2, r4
 800718e:	9901      	ldr	r1, [sp, #4]
 8007190:	9800      	ldr	r0, [sp, #0]
 8007192:	9e08      	ldr	r6, [sp, #32]
 8007194:	3243      	adds	r2, #67	; 0x43
 8007196:	47b0      	blx	r6
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d025      	beq.n	80071e8 <_printf_common+0xa8>
 800719c:	2306      	movs	r3, #6
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	682a      	ldr	r2, [r5, #0]
 80071a2:	68e1      	ldr	r1, [r4, #12]
 80071a4:	2500      	movs	r5, #0
 80071a6:	4003      	ands	r3, r0
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d103      	bne.n	80071b4 <_printf_common+0x74>
 80071ac:	1a8d      	subs	r5, r1, r2
 80071ae:	43eb      	mvns	r3, r5
 80071b0:	17db      	asrs	r3, r3, #31
 80071b2:	401d      	ands	r5, r3
 80071b4:	68a3      	ldr	r3, [r4, #8]
 80071b6:	6922      	ldr	r2, [r4, #16]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	dd01      	ble.n	80071c0 <_printf_common+0x80>
 80071bc:	1a9b      	subs	r3, r3, r2
 80071be:	18ed      	adds	r5, r5, r3
 80071c0:	2700      	movs	r7, #0
 80071c2:	42bd      	cmp	r5, r7
 80071c4:	d120      	bne.n	8007208 <_printf_common+0xc8>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e010      	b.n	80071ec <_printf_common+0xac>
 80071ca:	3701      	adds	r7, #1
 80071cc:	68e3      	ldr	r3, [r4, #12]
 80071ce:	682a      	ldr	r2, [r5, #0]
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	42bb      	cmp	r3, r7
 80071d4:	ddd2      	ble.n	800717c <_printf_common+0x3c>
 80071d6:	0022      	movs	r2, r4
 80071d8:	2301      	movs	r3, #1
 80071da:	9901      	ldr	r1, [sp, #4]
 80071dc:	9800      	ldr	r0, [sp, #0]
 80071de:	9e08      	ldr	r6, [sp, #32]
 80071e0:	3219      	adds	r2, #25
 80071e2:	47b0      	blx	r6
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d1f0      	bne.n	80071ca <_printf_common+0x8a>
 80071e8:	2001      	movs	r0, #1
 80071ea:	4240      	negs	r0, r0
 80071ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ee:	2030      	movs	r0, #48	; 0x30
 80071f0:	18e1      	adds	r1, r4, r3
 80071f2:	3143      	adds	r1, #67	; 0x43
 80071f4:	7008      	strb	r0, [r1, #0]
 80071f6:	0021      	movs	r1, r4
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	3145      	adds	r1, #69	; 0x45
 80071fc:	7809      	ldrb	r1, [r1, #0]
 80071fe:	18a2      	adds	r2, r4, r2
 8007200:	3243      	adds	r2, #67	; 0x43
 8007202:	3302      	adds	r3, #2
 8007204:	7011      	strb	r1, [r2, #0]
 8007206:	e7c1      	b.n	800718c <_printf_common+0x4c>
 8007208:	0022      	movs	r2, r4
 800720a:	2301      	movs	r3, #1
 800720c:	9901      	ldr	r1, [sp, #4]
 800720e:	9800      	ldr	r0, [sp, #0]
 8007210:	9e08      	ldr	r6, [sp, #32]
 8007212:	321a      	adds	r2, #26
 8007214:	47b0      	blx	r6
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d0e6      	beq.n	80071e8 <_printf_common+0xa8>
 800721a:	3701      	adds	r7, #1
 800721c:	e7d1      	b.n	80071c2 <_printf_common+0x82>
	...

08007220 <_printf_i>:
 8007220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007222:	b08b      	sub	sp, #44	; 0x2c
 8007224:	9206      	str	r2, [sp, #24]
 8007226:	000a      	movs	r2, r1
 8007228:	3243      	adds	r2, #67	; 0x43
 800722a:	9307      	str	r3, [sp, #28]
 800722c:	9005      	str	r0, [sp, #20]
 800722e:	9204      	str	r2, [sp, #16]
 8007230:	7e0a      	ldrb	r2, [r1, #24]
 8007232:	000c      	movs	r4, r1
 8007234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007236:	2a78      	cmp	r2, #120	; 0x78
 8007238:	d807      	bhi.n	800724a <_printf_i+0x2a>
 800723a:	2a62      	cmp	r2, #98	; 0x62
 800723c:	d809      	bhi.n	8007252 <_printf_i+0x32>
 800723e:	2a00      	cmp	r2, #0
 8007240:	d100      	bne.n	8007244 <_printf_i+0x24>
 8007242:	e0c1      	b.n	80073c8 <_printf_i+0x1a8>
 8007244:	2a58      	cmp	r2, #88	; 0x58
 8007246:	d100      	bne.n	800724a <_printf_i+0x2a>
 8007248:	e08c      	b.n	8007364 <_printf_i+0x144>
 800724a:	0026      	movs	r6, r4
 800724c:	3642      	adds	r6, #66	; 0x42
 800724e:	7032      	strb	r2, [r6, #0]
 8007250:	e022      	b.n	8007298 <_printf_i+0x78>
 8007252:	0010      	movs	r0, r2
 8007254:	3863      	subs	r0, #99	; 0x63
 8007256:	2815      	cmp	r0, #21
 8007258:	d8f7      	bhi.n	800724a <_printf_i+0x2a>
 800725a:	f7f8 ff53 	bl	8000104 <__gnu_thumb1_case_shi>
 800725e:	0016      	.short	0x0016
 8007260:	fff6001f 	.word	0xfff6001f
 8007264:	fff6fff6 	.word	0xfff6fff6
 8007268:	001ffff6 	.word	0x001ffff6
 800726c:	fff6fff6 	.word	0xfff6fff6
 8007270:	fff6fff6 	.word	0xfff6fff6
 8007274:	003600a8 	.word	0x003600a8
 8007278:	fff6009a 	.word	0xfff6009a
 800727c:	00b9fff6 	.word	0x00b9fff6
 8007280:	0036fff6 	.word	0x0036fff6
 8007284:	fff6fff6 	.word	0xfff6fff6
 8007288:	009e      	.short	0x009e
 800728a:	0026      	movs	r6, r4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	3642      	adds	r6, #66	; 0x42
 8007290:	1d11      	adds	r1, r2, #4
 8007292:	6019      	str	r1, [r3, #0]
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	7033      	strb	r3, [r6, #0]
 8007298:	2301      	movs	r3, #1
 800729a:	e0a7      	b.n	80073ec <_printf_i+0x1cc>
 800729c:	6808      	ldr	r0, [r1, #0]
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	1d0a      	adds	r2, r1, #4
 80072a2:	0605      	lsls	r5, r0, #24
 80072a4:	d50b      	bpl.n	80072be <_printf_i+0x9e>
 80072a6:	680d      	ldr	r5, [r1, #0]
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	2d00      	cmp	r5, #0
 80072ac:	da03      	bge.n	80072b6 <_printf_i+0x96>
 80072ae:	232d      	movs	r3, #45	; 0x2d
 80072b0:	9a04      	ldr	r2, [sp, #16]
 80072b2:	426d      	negs	r5, r5
 80072b4:	7013      	strb	r3, [r2, #0]
 80072b6:	4b61      	ldr	r3, [pc, #388]	; (800743c <_printf_i+0x21c>)
 80072b8:	270a      	movs	r7, #10
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	e01b      	b.n	80072f6 <_printf_i+0xd6>
 80072be:	680d      	ldr	r5, [r1, #0]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	0641      	lsls	r1, r0, #25
 80072c4:	d5f1      	bpl.n	80072aa <_printf_i+0x8a>
 80072c6:	b22d      	sxth	r5, r5
 80072c8:	e7ef      	b.n	80072aa <_printf_i+0x8a>
 80072ca:	680d      	ldr	r5, [r1, #0]
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	1d08      	adds	r0, r1, #4
 80072d0:	6018      	str	r0, [r3, #0]
 80072d2:	062e      	lsls	r6, r5, #24
 80072d4:	d501      	bpl.n	80072da <_printf_i+0xba>
 80072d6:	680d      	ldr	r5, [r1, #0]
 80072d8:	e003      	b.n	80072e2 <_printf_i+0xc2>
 80072da:	066d      	lsls	r5, r5, #25
 80072dc:	d5fb      	bpl.n	80072d6 <_printf_i+0xb6>
 80072de:	680d      	ldr	r5, [r1, #0]
 80072e0:	b2ad      	uxth	r5, r5
 80072e2:	4b56      	ldr	r3, [pc, #344]	; (800743c <_printf_i+0x21c>)
 80072e4:	2708      	movs	r7, #8
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	2a6f      	cmp	r2, #111	; 0x6f
 80072ea:	d000      	beq.n	80072ee <_printf_i+0xce>
 80072ec:	3702      	adds	r7, #2
 80072ee:	0023      	movs	r3, r4
 80072f0:	2200      	movs	r2, #0
 80072f2:	3343      	adds	r3, #67	; 0x43
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	db03      	blt.n	8007306 <_printf_i+0xe6>
 80072fe:	2204      	movs	r2, #4
 8007300:	6821      	ldr	r1, [r4, #0]
 8007302:	4391      	bics	r1, r2
 8007304:	6021      	str	r1, [r4, #0]
 8007306:	2d00      	cmp	r5, #0
 8007308:	d102      	bne.n	8007310 <_printf_i+0xf0>
 800730a:	9e04      	ldr	r6, [sp, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <_printf_i+0x10a>
 8007310:	9e04      	ldr	r6, [sp, #16]
 8007312:	0028      	movs	r0, r5
 8007314:	0039      	movs	r1, r7
 8007316:	f7f8 ff85 	bl	8000224 <__aeabi_uidivmod>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	3e01      	subs	r6, #1
 800731e:	5c5b      	ldrb	r3, [r3, r1]
 8007320:	7033      	strb	r3, [r6, #0]
 8007322:	002b      	movs	r3, r5
 8007324:	0005      	movs	r5, r0
 8007326:	429f      	cmp	r7, r3
 8007328:	d9f3      	bls.n	8007312 <_printf_i+0xf2>
 800732a:	2f08      	cmp	r7, #8
 800732c:	d109      	bne.n	8007342 <_printf_i+0x122>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	07db      	lsls	r3, r3, #31
 8007332:	d506      	bpl.n	8007342 <_printf_i+0x122>
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	6922      	ldr	r2, [r4, #16]
 8007338:	4293      	cmp	r3, r2
 800733a:	dc02      	bgt.n	8007342 <_printf_i+0x122>
 800733c:	2330      	movs	r3, #48	; 0x30
 800733e:	3e01      	subs	r6, #1
 8007340:	7033      	strb	r3, [r6, #0]
 8007342:	9b04      	ldr	r3, [sp, #16]
 8007344:	1b9b      	subs	r3, r3, r6
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	0021      	movs	r1, r4
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	9805      	ldr	r0, [sp, #20]
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	aa09      	add	r2, sp, #36	; 0x24
 8007354:	f7ff fef4 	bl	8007140 <_printf_common>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d14c      	bne.n	80073f6 <_printf_i+0x1d6>
 800735c:	2001      	movs	r0, #1
 800735e:	4240      	negs	r0, r0
 8007360:	b00b      	add	sp, #44	; 0x2c
 8007362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007364:	3145      	adds	r1, #69	; 0x45
 8007366:	700a      	strb	r2, [r1, #0]
 8007368:	4a34      	ldr	r2, [pc, #208]	; (800743c <_printf_i+0x21c>)
 800736a:	9203      	str	r2, [sp, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	6821      	ldr	r1, [r4, #0]
 8007370:	ca20      	ldmia	r2!, {r5}
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	0608      	lsls	r0, r1, #24
 8007376:	d516      	bpl.n	80073a6 <_printf_i+0x186>
 8007378:	07cb      	lsls	r3, r1, #31
 800737a:	d502      	bpl.n	8007382 <_printf_i+0x162>
 800737c:	2320      	movs	r3, #32
 800737e:	4319      	orrs	r1, r3
 8007380:	6021      	str	r1, [r4, #0]
 8007382:	2710      	movs	r7, #16
 8007384:	2d00      	cmp	r5, #0
 8007386:	d1b2      	bne.n	80072ee <_printf_i+0xce>
 8007388:	2320      	movs	r3, #32
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	439a      	bics	r2, r3
 800738e:	6022      	str	r2, [r4, #0]
 8007390:	e7ad      	b.n	80072ee <_printf_i+0xce>
 8007392:	2220      	movs	r2, #32
 8007394:	6809      	ldr	r1, [r1, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	6022      	str	r2, [r4, #0]
 800739a:	0022      	movs	r2, r4
 800739c:	2178      	movs	r1, #120	; 0x78
 800739e:	3245      	adds	r2, #69	; 0x45
 80073a0:	7011      	strb	r1, [r2, #0]
 80073a2:	4a27      	ldr	r2, [pc, #156]	; (8007440 <_printf_i+0x220>)
 80073a4:	e7e1      	b.n	800736a <_printf_i+0x14a>
 80073a6:	0648      	lsls	r0, r1, #25
 80073a8:	d5e6      	bpl.n	8007378 <_printf_i+0x158>
 80073aa:	b2ad      	uxth	r5, r5
 80073ac:	e7e4      	b.n	8007378 <_printf_i+0x158>
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	680d      	ldr	r5, [r1, #0]
 80073b2:	1d10      	adds	r0, r2, #4
 80073b4:	6949      	ldr	r1, [r1, #20]
 80073b6:	6018      	str	r0, [r3, #0]
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	062e      	lsls	r6, r5, #24
 80073bc:	d501      	bpl.n	80073c2 <_printf_i+0x1a2>
 80073be:	6019      	str	r1, [r3, #0]
 80073c0:	e002      	b.n	80073c8 <_printf_i+0x1a8>
 80073c2:	066d      	lsls	r5, r5, #25
 80073c4:	d5fb      	bpl.n	80073be <_printf_i+0x19e>
 80073c6:	8019      	strh	r1, [r3, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9e04      	ldr	r6, [sp, #16]
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	e7bb      	b.n	8007348 <_printf_i+0x128>
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	1d11      	adds	r1, r2, #4
 80073d4:	6019      	str	r1, [r3, #0]
 80073d6:	6816      	ldr	r6, [r2, #0]
 80073d8:	2100      	movs	r1, #0
 80073da:	0030      	movs	r0, r6
 80073dc:	6862      	ldr	r2, [r4, #4]
 80073de:	f000 f831 	bl	8007444 <memchr>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d001      	beq.n	80073ea <_printf_i+0x1ca>
 80073e6:	1b80      	subs	r0, r0, r6
 80073e8:	6060      	str	r0, [r4, #4]
 80073ea:	6863      	ldr	r3, [r4, #4]
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	2300      	movs	r3, #0
 80073f0:	9a04      	ldr	r2, [sp, #16]
 80073f2:	7013      	strb	r3, [r2, #0]
 80073f4:	e7a8      	b.n	8007348 <_printf_i+0x128>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	0032      	movs	r2, r6
 80073fa:	9906      	ldr	r1, [sp, #24]
 80073fc:	9805      	ldr	r0, [sp, #20]
 80073fe:	9d07      	ldr	r5, [sp, #28]
 8007400:	47a8      	blx	r5
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d0aa      	beq.n	800735c <_printf_i+0x13c>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	079b      	lsls	r3, r3, #30
 800740a:	d415      	bmi.n	8007438 <_printf_i+0x218>
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	68e0      	ldr	r0, [r4, #12]
 8007410:	4298      	cmp	r0, r3
 8007412:	daa5      	bge.n	8007360 <_printf_i+0x140>
 8007414:	0018      	movs	r0, r3
 8007416:	e7a3      	b.n	8007360 <_printf_i+0x140>
 8007418:	0022      	movs	r2, r4
 800741a:	2301      	movs	r3, #1
 800741c:	9906      	ldr	r1, [sp, #24]
 800741e:	9805      	ldr	r0, [sp, #20]
 8007420:	9e07      	ldr	r6, [sp, #28]
 8007422:	3219      	adds	r2, #25
 8007424:	47b0      	blx	r6
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d098      	beq.n	800735c <_printf_i+0x13c>
 800742a:	3501      	adds	r5, #1
 800742c:	68e3      	ldr	r3, [r4, #12]
 800742e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	42ab      	cmp	r3, r5
 8007434:	dcf0      	bgt.n	8007418 <_printf_i+0x1f8>
 8007436:	e7e9      	b.n	800740c <_printf_i+0x1ec>
 8007438:	2500      	movs	r5, #0
 800743a:	e7f7      	b.n	800742c <_printf_i+0x20c>
 800743c:	08007976 	.word	0x08007976
 8007440:	08007987 	.word	0x08007987

08007444 <memchr>:
 8007444:	b2c9      	uxtb	r1, r1
 8007446:	1882      	adds	r2, r0, r2
 8007448:	4290      	cmp	r0, r2
 800744a:	d101      	bne.n	8007450 <memchr+0xc>
 800744c:	2000      	movs	r0, #0
 800744e:	4770      	bx	lr
 8007450:	7803      	ldrb	r3, [r0, #0]
 8007452:	428b      	cmp	r3, r1
 8007454:	d0fb      	beq.n	800744e <memchr+0xa>
 8007456:	3001      	adds	r0, #1
 8007458:	e7f6      	b.n	8007448 <memchr+0x4>

0800745a <memcpy>:
 800745a:	2300      	movs	r3, #0
 800745c:	b510      	push	{r4, lr}
 800745e:	429a      	cmp	r2, r3
 8007460:	d100      	bne.n	8007464 <memcpy+0xa>
 8007462:	bd10      	pop	{r4, pc}
 8007464:	5ccc      	ldrb	r4, [r1, r3]
 8007466:	54c4      	strb	r4, [r0, r3]
 8007468:	3301      	adds	r3, #1
 800746a:	e7f8      	b.n	800745e <memcpy+0x4>

0800746c <memmove>:
 800746c:	b510      	push	{r4, lr}
 800746e:	4288      	cmp	r0, r1
 8007470:	d902      	bls.n	8007478 <memmove+0xc>
 8007472:	188b      	adds	r3, r1, r2
 8007474:	4298      	cmp	r0, r3
 8007476:	d303      	bcc.n	8007480 <memmove+0x14>
 8007478:	2300      	movs	r3, #0
 800747a:	e007      	b.n	800748c <memmove+0x20>
 800747c:	5c8b      	ldrb	r3, [r1, r2]
 800747e:	5483      	strb	r3, [r0, r2]
 8007480:	3a01      	subs	r2, #1
 8007482:	d2fb      	bcs.n	800747c <memmove+0x10>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	5ccc      	ldrb	r4, [r1, r3]
 8007488:	54c4      	strb	r4, [r0, r3]
 800748a:	3301      	adds	r3, #1
 800748c:	429a      	cmp	r2, r3
 800748e:	d1fa      	bne.n	8007486 <memmove+0x1a>
 8007490:	e7f8      	b.n	8007484 <memmove+0x18>
	...

08007494 <_free_r>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	0005      	movs	r5, r0
 8007498:	2900      	cmp	r1, #0
 800749a:	d010      	beq.n	80074be <_free_r+0x2a>
 800749c:	1f0c      	subs	r4, r1, #4
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da00      	bge.n	80074a6 <_free_r+0x12>
 80074a4:	18e4      	adds	r4, r4, r3
 80074a6:	0028      	movs	r0, r5
 80074a8:	f000 f918 	bl	80076dc <__malloc_lock>
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <_free_r+0x90>)
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <_free_r+0x2c>
 80074b4:	6063      	str	r3, [r4, #4]
 80074b6:	6014      	str	r4, [r2, #0]
 80074b8:	0028      	movs	r0, r5
 80074ba:	f000 f917 	bl	80076ec <__malloc_unlock>
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d908      	bls.n	80074d6 <_free_r+0x42>
 80074c4:	6821      	ldr	r1, [r4, #0]
 80074c6:	1860      	adds	r0, r4, r1
 80074c8:	4283      	cmp	r3, r0
 80074ca:	d1f3      	bne.n	80074b4 <_free_r+0x20>
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	1841      	adds	r1, r0, r1
 80074d2:	6021      	str	r1, [r4, #0]
 80074d4:	e7ee      	b.n	80074b4 <_free_r+0x20>
 80074d6:	001a      	movs	r2, r3
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <_free_r+0x4e>
 80074de:	42a3      	cmp	r3, r4
 80074e0:	d9f9      	bls.n	80074d6 <_free_r+0x42>
 80074e2:	6811      	ldr	r1, [r2, #0]
 80074e4:	1850      	adds	r0, r2, r1
 80074e6:	42a0      	cmp	r0, r4
 80074e8:	d10b      	bne.n	8007502 <_free_r+0x6e>
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	1809      	adds	r1, r1, r0
 80074ee:	1850      	adds	r0, r2, r1
 80074f0:	6011      	str	r1, [r2, #0]
 80074f2:	4283      	cmp	r3, r0
 80074f4:	d1e0      	bne.n	80074b8 <_free_r+0x24>
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	1841      	adds	r1, r0, r1
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	6053      	str	r3, [r2, #4]
 8007500:	e7da      	b.n	80074b8 <_free_r+0x24>
 8007502:	42a0      	cmp	r0, r4
 8007504:	d902      	bls.n	800750c <_free_r+0x78>
 8007506:	230c      	movs	r3, #12
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	e7d5      	b.n	80074b8 <_free_r+0x24>
 800750c:	6821      	ldr	r1, [r4, #0]
 800750e:	1860      	adds	r0, r4, r1
 8007510:	4283      	cmp	r3, r0
 8007512:	d103      	bne.n	800751c <_free_r+0x88>
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	1841      	adds	r1, r0, r1
 800751a:	6021      	str	r1, [r4, #0]
 800751c:	6063      	str	r3, [r4, #4]
 800751e:	6054      	str	r4, [r2, #4]
 8007520:	e7ca      	b.n	80074b8 <_free_r+0x24>
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	2000025c 	.word	0x2000025c

08007528 <sbrk_aligned>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4e0f      	ldr	r6, [pc, #60]	; (8007568 <sbrk_aligned+0x40>)
 800752c:	000d      	movs	r5, r1
 800752e:	6831      	ldr	r1, [r6, #0]
 8007530:	0004      	movs	r4, r0
 8007532:	2900      	cmp	r1, #0
 8007534:	d102      	bne.n	800753c <sbrk_aligned+0x14>
 8007536:	f000 f8bf 	bl	80076b8 <_sbrk_r>
 800753a:	6030      	str	r0, [r6, #0]
 800753c:	0029      	movs	r1, r5
 800753e:	0020      	movs	r0, r4
 8007540:	f000 f8ba 	bl	80076b8 <_sbrk_r>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d00a      	beq.n	800755e <sbrk_aligned+0x36>
 8007548:	2303      	movs	r3, #3
 800754a:	1cc5      	adds	r5, r0, #3
 800754c:	439d      	bics	r5, r3
 800754e:	42a8      	cmp	r0, r5
 8007550:	d007      	beq.n	8007562 <sbrk_aligned+0x3a>
 8007552:	1a29      	subs	r1, r5, r0
 8007554:	0020      	movs	r0, r4
 8007556:	f000 f8af 	bl	80076b8 <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d101      	bne.n	8007562 <sbrk_aligned+0x3a>
 800755e:	2501      	movs	r5, #1
 8007560:	426d      	negs	r5, r5
 8007562:	0028      	movs	r0, r5
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	20000260 	.word	0x20000260

0800756c <_malloc_r>:
 800756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756e:	2203      	movs	r2, #3
 8007570:	1ccb      	adds	r3, r1, #3
 8007572:	4393      	bics	r3, r2
 8007574:	3308      	adds	r3, #8
 8007576:	0006      	movs	r6, r0
 8007578:	001f      	movs	r7, r3
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d232      	bcs.n	80075e4 <_malloc_r+0x78>
 800757e:	270c      	movs	r7, #12
 8007580:	42b9      	cmp	r1, r7
 8007582:	d831      	bhi.n	80075e8 <_malloc_r+0x7c>
 8007584:	0030      	movs	r0, r6
 8007586:	f000 f8a9 	bl	80076dc <__malloc_lock>
 800758a:	4d32      	ldr	r5, [pc, #200]	; (8007654 <_malloc_r+0xe8>)
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	001c      	movs	r4, r3
 8007590:	2c00      	cmp	r4, #0
 8007592:	d12e      	bne.n	80075f2 <_malloc_r+0x86>
 8007594:	0039      	movs	r1, r7
 8007596:	0030      	movs	r0, r6
 8007598:	f7ff ffc6 	bl	8007528 <sbrk_aligned>
 800759c:	0004      	movs	r4, r0
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d11e      	bne.n	80075e0 <_malloc_r+0x74>
 80075a2:	682c      	ldr	r4, [r5, #0]
 80075a4:	0025      	movs	r5, r4
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	d14a      	bne.n	8007640 <_malloc_r+0xd4>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	0029      	movs	r1, r5
 80075ae:	18e3      	adds	r3, r4, r3
 80075b0:	0030      	movs	r0, r6
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	f000 f880 	bl	80076b8 <_sbrk_r>
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	4283      	cmp	r3, r0
 80075bc:	d143      	bne.n	8007646 <_malloc_r+0xda>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	3703      	adds	r7, #3
 80075c2:	1aff      	subs	r7, r7, r3
 80075c4:	2303      	movs	r3, #3
 80075c6:	439f      	bics	r7, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	2f0c      	cmp	r7, #12
 80075cc:	d200      	bcs.n	80075d0 <_malloc_r+0x64>
 80075ce:	270c      	movs	r7, #12
 80075d0:	0039      	movs	r1, r7
 80075d2:	0030      	movs	r0, r6
 80075d4:	f7ff ffa8 	bl	8007528 <sbrk_aligned>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d034      	beq.n	8007646 <_malloc_r+0xda>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	19df      	adds	r7, r3, r7
 80075e0:	6027      	str	r7, [r4, #0]
 80075e2:	e013      	b.n	800760c <_malloc_r+0xa0>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dacb      	bge.n	8007580 <_malloc_r+0x14>
 80075e8:	230c      	movs	r3, #12
 80075ea:	2500      	movs	r5, #0
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	0028      	movs	r0, r5
 80075f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	1bd1      	subs	r1, r2, r7
 80075f6:	d420      	bmi.n	800763a <_malloc_r+0xce>
 80075f8:	290b      	cmp	r1, #11
 80075fa:	d917      	bls.n	800762c <_malloc_r+0xc0>
 80075fc:	19e2      	adds	r2, r4, r7
 80075fe:	6027      	str	r7, [r4, #0]
 8007600:	42a3      	cmp	r3, r4
 8007602:	d111      	bne.n	8007628 <_malloc_r+0xbc>
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	6053      	str	r3, [r2, #4]
 800760c:	0030      	movs	r0, r6
 800760e:	0025      	movs	r5, r4
 8007610:	f000 f86c 	bl	80076ec <__malloc_unlock>
 8007614:	2207      	movs	r2, #7
 8007616:	350b      	adds	r5, #11
 8007618:	1d23      	adds	r3, r4, #4
 800761a:	4395      	bics	r5, r2
 800761c:	1aea      	subs	r2, r5, r3
 800761e:	429d      	cmp	r5, r3
 8007620:	d0e5      	beq.n	80075ee <_malloc_r+0x82>
 8007622:	1b5b      	subs	r3, r3, r5
 8007624:	50a3      	str	r3, [r4, r2]
 8007626:	e7e2      	b.n	80075ee <_malloc_r+0x82>
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	e7ec      	b.n	8007606 <_malloc_r+0x9a>
 800762c:	6862      	ldr	r2, [r4, #4]
 800762e:	42a3      	cmp	r3, r4
 8007630:	d101      	bne.n	8007636 <_malloc_r+0xca>
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	e7ea      	b.n	800760c <_malloc_r+0xa0>
 8007636:	605a      	str	r2, [r3, #4]
 8007638:	e7e8      	b.n	800760c <_malloc_r+0xa0>
 800763a:	0023      	movs	r3, r4
 800763c:	6864      	ldr	r4, [r4, #4]
 800763e:	e7a7      	b.n	8007590 <_malloc_r+0x24>
 8007640:	002c      	movs	r4, r5
 8007642:	686d      	ldr	r5, [r5, #4]
 8007644:	e7af      	b.n	80075a6 <_malloc_r+0x3a>
 8007646:	230c      	movs	r3, #12
 8007648:	0030      	movs	r0, r6
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	f000 f84e 	bl	80076ec <__malloc_unlock>
 8007650:	e7cd      	b.n	80075ee <_malloc_r+0x82>
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	2000025c 	.word	0x2000025c

08007658 <_realloc_r>:
 8007658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800765a:	0007      	movs	r7, r0
 800765c:	000e      	movs	r6, r1
 800765e:	0014      	movs	r4, r2
 8007660:	2900      	cmp	r1, #0
 8007662:	d105      	bne.n	8007670 <_realloc_r+0x18>
 8007664:	0011      	movs	r1, r2
 8007666:	f7ff ff81 	bl	800756c <_malloc_r>
 800766a:	0005      	movs	r5, r0
 800766c:	0028      	movs	r0, r5
 800766e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007670:	2a00      	cmp	r2, #0
 8007672:	d103      	bne.n	800767c <_realloc_r+0x24>
 8007674:	f7ff ff0e 	bl	8007494 <_free_r>
 8007678:	0025      	movs	r5, r4
 800767a:	e7f7      	b.n	800766c <_realloc_r+0x14>
 800767c:	f000 f83e 	bl	80076fc <_malloc_usable_size_r>
 8007680:	9001      	str	r0, [sp, #4]
 8007682:	4284      	cmp	r4, r0
 8007684:	d803      	bhi.n	800768e <_realloc_r+0x36>
 8007686:	0035      	movs	r5, r6
 8007688:	0843      	lsrs	r3, r0, #1
 800768a:	42a3      	cmp	r3, r4
 800768c:	d3ee      	bcc.n	800766c <_realloc_r+0x14>
 800768e:	0021      	movs	r1, r4
 8007690:	0038      	movs	r0, r7
 8007692:	f7ff ff6b 	bl	800756c <_malloc_r>
 8007696:	1e05      	subs	r5, r0, #0
 8007698:	d0e8      	beq.n	800766c <_realloc_r+0x14>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	0022      	movs	r2, r4
 800769e:	429c      	cmp	r4, r3
 80076a0:	d900      	bls.n	80076a4 <_realloc_r+0x4c>
 80076a2:	001a      	movs	r2, r3
 80076a4:	0031      	movs	r1, r6
 80076a6:	0028      	movs	r0, r5
 80076a8:	f7ff fed7 	bl	800745a <memcpy>
 80076ac:	0031      	movs	r1, r6
 80076ae:	0038      	movs	r0, r7
 80076b0:	f7ff fef0 	bl	8007494 <_free_r>
 80076b4:	e7da      	b.n	800766c <_realloc_r+0x14>
	...

080076b8 <_sbrk_r>:
 80076b8:	2300      	movs	r3, #0
 80076ba:	b570      	push	{r4, r5, r6, lr}
 80076bc:	4d06      	ldr	r5, [pc, #24]	; (80076d8 <_sbrk_r+0x20>)
 80076be:	0004      	movs	r4, r0
 80076c0:	0008      	movs	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7ff fa82 	bl	8006bcc <_sbrk>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d103      	bne.n	80076d4 <_sbrk_r+0x1c>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d000      	beq.n	80076d4 <_sbrk_r+0x1c>
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	20000264 	.word	0x20000264

080076dc <__malloc_lock>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4802      	ldr	r0, [pc, #8]	; (80076e8 <__malloc_lock+0xc>)
 80076e0:	f000 f814 	bl	800770c <__retarget_lock_acquire_recursive>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	20000268 	.word	0x20000268

080076ec <__malloc_unlock>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4802      	ldr	r0, [pc, #8]	; (80076f8 <__malloc_unlock+0xc>)
 80076f0:	f000 f80d 	bl	800770e <__retarget_lock_release_recursive>
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	20000268 	.word	0x20000268

080076fc <_malloc_usable_size_r>:
 80076fc:	1f0b      	subs	r3, r1, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	1f18      	subs	r0, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	da01      	bge.n	800770a <_malloc_usable_size_r+0xe>
 8007706:	580b      	ldr	r3, [r1, r0]
 8007708:	18c0      	adds	r0, r0, r3
 800770a:	4770      	bx	lr

0800770c <__retarget_lock_acquire_recursive>:
 800770c:	4770      	bx	lr

0800770e <__retarget_lock_release_recursive>:
 800770e:	4770      	bx	lr

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
