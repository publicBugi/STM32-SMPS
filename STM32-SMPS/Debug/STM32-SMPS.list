
STM32-SMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000007c  0800801c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800801c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014209  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002828  00000000  00000000  000342ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00037c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001844b  00000000  00000000  00038c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cb3  00000000  00000000  0005109b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d69a  00000000  00000000  00064d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001023e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  00102438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007cf8 	.word	0x08007cf8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	08007cf8 	.word	0x08007cf8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0008      	movs	r0, r1
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 fb41 	bl	80008c0 <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 facd 	bl	80007e8 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fb33 	bl	80008c0 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb29 	bl	80008c0 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fad9 	bl	8000834 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 facf 	bl	8000834 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_uldivmod>:
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d111      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d10f      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_uldivmod+0xe>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uldivmod+0x16>
 80002b4:	2100      	movs	r1, #0
 80002b6:	43c9      	mvns	r1, r1
 80002b8:	0008      	movs	r0, r1
 80002ba:	b407      	push	{r0, r1, r2}
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__aeabi_uldivmod+0x24>)
 80002be:	a102      	add	r1, pc, #8	; (adr r1, 80002c8 <__aeabi_uldivmod+0x24>)
 80002c0:	1840      	adds	r0, r0, r1
 80002c2:	9002      	str	r0, [sp, #8]
 80002c4:	bd03      	pop	{r0, r1, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	ffffff65 	.word	0xffffff65
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f81e 	bl	8000314 <__udivmoddi4>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_f2uiz>:
 80002e4:	219e      	movs	r1, #158	; 0x9e
 80002e6:	b510      	push	{r4, lr}
 80002e8:	05c9      	lsls	r1, r1, #23
 80002ea:	1c04      	adds	r4, r0, #0
 80002ec:	f7ff ffd0 	bl	8000290 <__aeabi_fcmpge>
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d103      	bne.n	80002fc <__aeabi_f2uiz+0x18>
 80002f4:	1c20      	adds	r0, r4, #0
 80002f6:	f000 fdfb 	bl	8000ef0 <__aeabi_f2iz>
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	219e      	movs	r1, #158	; 0x9e
 80002fe:	1c20      	adds	r0, r4, #0
 8000300:	05c9      	lsls	r1, r1, #23
 8000302:	f000 fc47 	bl	8000b94 <__aeabi_fsub>
 8000306:	f000 fdf3 	bl	8000ef0 <__aeabi_f2iz>
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	061b      	lsls	r3, r3, #24
 800030e:	469c      	mov	ip, r3
 8000310:	4460      	add	r0, ip
 8000312:	e7f2      	b.n	80002fa <__aeabi_f2uiz+0x16>

08000314 <__udivmoddi4>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	4657      	mov	r7, sl
 8000318:	464e      	mov	r6, r9
 800031a:	4645      	mov	r5, r8
 800031c:	46de      	mov	lr, fp
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	0004      	movs	r4, r0
 8000322:	000d      	movs	r5, r1
 8000324:	4692      	mov	sl, r2
 8000326:	4699      	mov	r9, r3
 8000328:	b083      	sub	sp, #12
 800032a:	428b      	cmp	r3, r1
 800032c:	d830      	bhi.n	8000390 <__udivmoddi4+0x7c>
 800032e:	d02d      	beq.n	800038c <__udivmoddi4+0x78>
 8000330:	4649      	mov	r1, r9
 8000332:	4650      	mov	r0, sl
 8000334:	f000 feaa 	bl	800108c <__clzdi2>
 8000338:	0029      	movs	r1, r5
 800033a:	0006      	movs	r6, r0
 800033c:	0020      	movs	r0, r4
 800033e:	f000 fea5 	bl	800108c <__clzdi2>
 8000342:	1a33      	subs	r3, r6, r0
 8000344:	4698      	mov	r8, r3
 8000346:	3b20      	subs	r3, #32
 8000348:	469b      	mov	fp, r3
 800034a:	d433      	bmi.n	80003b4 <__udivmoddi4+0xa0>
 800034c:	465a      	mov	r2, fp
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	4642      	mov	r2, r8
 8000354:	001f      	movs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	001e      	movs	r6, r3
 800035c:	42af      	cmp	r7, r5
 800035e:	d83a      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 8000360:	42af      	cmp	r7, r5
 8000362:	d100      	bne.n	8000366 <__udivmoddi4+0x52>
 8000364:	e078      	b.n	8000458 <__udivmoddi4+0x144>
 8000366:	465b      	mov	r3, fp
 8000368:	1ba4      	subs	r4, r4, r6
 800036a:	41bd      	sbcs	r5, r7
 800036c:	2b00      	cmp	r3, #0
 800036e:	da00      	bge.n	8000372 <__udivmoddi4+0x5e>
 8000370:	e075      	b.n	800045e <__udivmoddi4+0x14a>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	465a      	mov	r2, fp
 800037e:	4093      	lsls	r3, r2
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	4642      	mov	r2, r8
 8000386:	4093      	lsls	r3, r2
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	e028      	b.n	80003de <__udivmoddi4+0xca>
 800038c:	4282      	cmp	r2, r0
 800038e:	d9cf      	bls.n	8000330 <__udivmoddi4+0x1c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <__udivmoddi4+0x8e>
 800039e:	601c      	str	r4, [r3, #0]
 80003a0:	605d      	str	r5, [r3, #4]
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	b003      	add	sp, #12
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	46bb      	mov	fp, r7
 80003ac:	46b2      	mov	sl, r6
 80003ae:	46a9      	mov	r9, r5
 80003b0:	46a0      	mov	r8, r4
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b4:	4642      	mov	r2, r8
 80003b6:	2320      	movs	r3, #32
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	4652      	mov	r2, sl
 80003bc:	40da      	lsrs	r2, r3
 80003be:	4641      	mov	r1, r8
 80003c0:	0013      	movs	r3, r2
 80003c2:	464a      	mov	r2, r9
 80003c4:	408a      	lsls	r2, r1
 80003c6:	0017      	movs	r7, r2
 80003c8:	4642      	mov	r2, r8
 80003ca:	431f      	orrs	r7, r3
 80003cc:	4653      	mov	r3, sl
 80003ce:	4093      	lsls	r3, r2
 80003d0:	001e      	movs	r6, r3
 80003d2:	42af      	cmp	r7, r5
 80003d4:	d9c4      	bls.n	8000360 <__udivmoddi4+0x4c>
 80003d6:	2200      	movs	r2, #0
 80003d8:	2300      	movs	r3, #0
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	4643      	mov	r3, r8
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0d9      	beq.n	8000398 <__udivmoddi4+0x84>
 80003e4:	07fb      	lsls	r3, r7, #31
 80003e6:	0872      	lsrs	r2, r6, #1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	4646      	mov	r6, r8
 80003ec:	087b      	lsrs	r3, r7, #1
 80003ee:	e00e      	b.n	800040e <__udivmoddi4+0xfa>
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d101      	bne.n	80003f8 <__udivmoddi4+0xe4>
 80003f4:	42a2      	cmp	r2, r4
 80003f6:	d80c      	bhi.n	8000412 <__udivmoddi4+0xfe>
 80003f8:	1aa4      	subs	r4, r4, r2
 80003fa:	419d      	sbcs	r5, r3
 80003fc:	2001      	movs	r0, #1
 80003fe:	1924      	adds	r4, r4, r4
 8000400:	416d      	adcs	r5, r5
 8000402:	2100      	movs	r1, #0
 8000404:	3e01      	subs	r6, #1
 8000406:	1824      	adds	r4, r4, r0
 8000408:	414d      	adcs	r5, r1
 800040a:	2e00      	cmp	r6, #0
 800040c:	d006      	beq.n	800041c <__udivmoddi4+0x108>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d9ee      	bls.n	80003f0 <__udivmoddi4+0xdc>
 8000412:	3e01      	subs	r6, #1
 8000414:	1924      	adds	r4, r4, r4
 8000416:	416d      	adcs	r5, r5
 8000418:	2e00      	cmp	r6, #0
 800041a:	d1f8      	bne.n	800040e <__udivmoddi4+0xfa>
 800041c:	9800      	ldr	r0, [sp, #0]
 800041e:	9901      	ldr	r1, [sp, #4]
 8000420:	465b      	mov	r3, fp
 8000422:	1900      	adds	r0, r0, r4
 8000424:	4169      	adcs	r1, r5
 8000426:	2b00      	cmp	r3, #0
 8000428:	db24      	blt.n	8000474 <__udivmoddi4+0x160>
 800042a:	002b      	movs	r3, r5
 800042c:	465a      	mov	r2, fp
 800042e:	4644      	mov	r4, r8
 8000430:	40d3      	lsrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	db2a      	blt.n	8000496 <__udivmoddi4+0x182>
 8000440:	0026      	movs	r6, r4
 8000442:	409e      	lsls	r6, r3
 8000444:	0033      	movs	r3, r6
 8000446:	0026      	movs	r6, r4
 8000448:	4647      	mov	r7, r8
 800044a:	40be      	lsls	r6, r7
 800044c:	0032      	movs	r2, r6
 800044e:	1a80      	subs	r0, r0, r2
 8000450:	4199      	sbcs	r1, r3
 8000452:	9000      	str	r0, [sp, #0]
 8000454:	9101      	str	r1, [sp, #4]
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x84>
 8000458:	42a3      	cmp	r3, r4
 800045a:	d8bc      	bhi.n	80003d6 <__udivmoddi4+0xc2>
 800045c:	e783      	b.n	8000366 <__udivmoddi4+0x52>
 800045e:	4642      	mov	r2, r8
 8000460:	2320      	movs	r3, #32
 8000462:	2100      	movs	r1, #0
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	9100      	str	r1, [sp, #0]
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	40da      	lsrs	r2, r3
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	e786      	b.n	8000382 <__udivmoddi4+0x6e>
 8000474:	4642      	mov	r2, r8
 8000476:	2320      	movs	r3, #32
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	002a      	movs	r2, r5
 800047c:	4646      	mov	r6, r8
 800047e:	409a      	lsls	r2, r3
 8000480:	0023      	movs	r3, r4
 8000482:	40f3      	lsrs	r3, r6
 8000484:	4644      	mov	r4, r8
 8000486:	4313      	orrs	r3, r2
 8000488:	002a      	movs	r2, r5
 800048a:	40e2      	lsrs	r2, r4
 800048c:	001c      	movs	r4, r3
 800048e:	465b      	mov	r3, fp
 8000490:	0015      	movs	r5, r2
 8000492:	2b00      	cmp	r3, #0
 8000494:	dad4      	bge.n	8000440 <__udivmoddi4+0x12c>
 8000496:	4642      	mov	r2, r8
 8000498:	002f      	movs	r7, r5
 800049a:	2320      	movs	r3, #32
 800049c:	0026      	movs	r6, r4
 800049e:	4097      	lsls	r7, r2
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	40de      	lsrs	r6, r3
 80004a4:	003b      	movs	r3, r7
 80004a6:	4333      	orrs	r3, r6
 80004a8:	e7cd      	b.n	8000446 <__udivmoddi4+0x132>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_fadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46c6      	mov	lr, r8
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	024e      	lsls	r6, r1, #9
 80004b6:	0045      	lsls	r5, r0, #1
 80004b8:	004f      	lsls	r7, r1, #1
 80004ba:	00da      	lsls	r2, r3, #3
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	469c      	mov	ip, r3
 80004c0:	0a70      	lsrs	r0, r6, #9
 80004c2:	4690      	mov	r8, r2
 80004c4:	b500      	push	{lr}
 80004c6:	0e2d      	lsrs	r5, r5, #24
 80004c8:	0e3f      	lsrs	r7, r7, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09b6      	lsrs	r6, r6, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d04b      	beq.n	800056a <__aeabi_fadd+0xbe>
 80004d2:	1bea      	subs	r2, r5, r7
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	dd36      	ble.n	8000546 <__aeabi_fadd+0x9a>
 80004d8:	2f00      	cmp	r7, #0
 80004da:	d061      	beq.n	80005a0 <__aeabi_fadd+0xf4>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x36>
 80004e0:	e0ad      	b.n	800063e <__aeabi_fadd+0x192>
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	04db      	lsls	r3, r3, #19
 80004e6:	431e      	orrs	r6, r3
 80004e8:	2a1b      	cmp	r2, #27
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0x42>
 80004ec:	e0d3      	b.n	8000696 <__aeabi_fadd+0x1ea>
 80004ee:	2001      	movs	r0, #1
 80004f0:	4643      	mov	r3, r8
 80004f2:	1a18      	subs	r0, r3, r0
 80004f4:	0143      	lsls	r3, r0, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x4e>
 80004f8:	e08c      	b.n	8000614 <__aeabi_fadd+0x168>
 80004fa:	0180      	lsls	r0, r0, #6
 80004fc:	0987      	lsrs	r7, r0, #6
 80004fe:	0038      	movs	r0, r7
 8000500:	f000 fda6 	bl	8001050 <__clzsi2>
 8000504:	3805      	subs	r0, #5
 8000506:	4087      	lsls	r7, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x62>
 800050c:	e0b6      	b.n	800067c <__aeabi_fadd+0x1d0>
 800050e:	1a2d      	subs	r5, r5, r0
 8000510:	48b3      	ldr	r0, [pc, #716]	; (80007e0 <__aeabi_fadd+0x334>)
 8000512:	4038      	ands	r0, r7
 8000514:	0743      	lsls	r3, r0, #29
 8000516:	d004      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000518:	230f      	movs	r3, #15
 800051a:	4003      	ands	r3, r0
 800051c:	2b04      	cmp	r3, #4
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000520:	3004      	adds	r0, #4
 8000522:	0143      	lsls	r3, r0, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x7c>
 8000526:	e078      	b.n	800061a <__aeabi_fadd+0x16e>
 8000528:	1c6a      	adds	r2, r5, #1
 800052a:	2dfe      	cmp	r5, #254	; 0xfe
 800052c:	d065      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800052e:	0180      	lsls	r0, r0, #6
 8000530:	0a43      	lsrs	r3, r0, #9
 8000532:	469c      	mov	ip, r3
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	4663      	mov	r3, ip
 8000538:	05d0      	lsls	r0, r2, #23
 800053a:	4318      	orrs	r0, r3
 800053c:	07e4      	lsls	r4, r4, #31
 800053e:	4320      	orrs	r0, r4
 8000540:	bc80      	pop	{r7}
 8000542:	46b8      	mov	r8, r7
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	2a00      	cmp	r2, #0
 8000548:	d035      	beq.n	80005b6 <__aeabi_fadd+0x10a>
 800054a:	1b7a      	subs	r2, r7, r5
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_fadd+0xa6>
 8000550:	e0af      	b.n	80006b2 <__aeabi_fadd+0x206>
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xae>
 8000558:	e0a7      	b.n	80006aa <__aeabi_fadd+0x1fe>
 800055a:	1e53      	subs	r3, r2, #1
 800055c:	2a01      	cmp	r2, #1
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0xb6>
 8000560:	e12f      	b.n	80007c2 <__aeabi_fadd+0x316>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d069      	beq.n	800063a <__aeabi_fadd+0x18e>
 8000566:	001a      	movs	r2, r3
 8000568:	e0aa      	b.n	80006c0 <__aeabi_fadd+0x214>
 800056a:	1be9      	subs	r1, r5, r7
 800056c:	2900      	cmp	r1, #0
 800056e:	dd70      	ble.n	8000652 <__aeabi_fadd+0x1a6>
 8000570:	2f00      	cmp	r7, #0
 8000572:	d037      	beq.n	80005e4 <__aeabi_fadd+0x138>
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d062      	beq.n	800063e <__aeabi_fadd+0x192>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	291b      	cmp	r1, #27
 8000580:	dc00      	bgt.n	8000584 <__aeabi_fadd+0xd8>
 8000582:	e0b0      	b.n	80006e6 <__aeabi_fadd+0x23a>
 8000584:	2001      	movs	r0, #1
 8000586:	4440      	add	r0, r8
 8000588:	0143      	lsls	r3, r0, #5
 800058a:	d543      	bpl.n	8000614 <__aeabi_fadd+0x168>
 800058c:	3501      	adds	r5, #1
 800058e:	2dff      	cmp	r5, #255	; 0xff
 8000590:	d033      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000592:	2301      	movs	r3, #1
 8000594:	4a93      	ldr	r2, [pc, #588]	; (80007e4 <__aeabi_fadd+0x338>)
 8000596:	4003      	ands	r3, r0
 8000598:	0840      	lsrs	r0, r0, #1
 800059a:	4010      	ands	r0, r2
 800059c:	4318      	orrs	r0, r3
 800059e:	e7b9      	b.n	8000514 <__aeabi_fadd+0x68>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xfa>
 80005a4:	e083      	b.n	80006ae <__aeabi_fadd+0x202>
 80005a6:	1e51      	subs	r1, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x102>
 80005ac:	e0d8      	b.n	8000760 <__aeabi_fadd+0x2b4>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d045      	beq.n	800063e <__aeabi_fadd+0x192>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e798      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005b6:	27fe      	movs	r7, #254	; 0xfe
 80005b8:	1c6a      	adds	r2, r5, #1
 80005ba:	4217      	tst	r7, r2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x114>
 80005be:	e086      	b.n	80006ce <__aeabi_fadd+0x222>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x11a>
 80005c4:	e0b7      	b.n	8000736 <__aeabi_fadd+0x28a>
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x122>
 80005cc:	e0f3      	b.n	80007b6 <__aeabi_fadd+0x30a>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d0b0      	beq.n	8000536 <__aeabi_fadd+0x8a>
 80005d4:	1b98      	subs	r0, r3, r6
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x130>
 80005da:	e0fa      	b.n	80007d2 <__aeabi_fadd+0x326>
 80005dc:	4643      	mov	r3, r8
 80005de:	000c      	movs	r4, r1
 80005e0:	1af0      	subs	r0, r6, r3
 80005e2:	e797      	b.n	8000514 <__aeabi_fadd+0x68>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x13e>
 80005e8:	e0c8      	b.n	800077c <__aeabi_fadd+0x2d0>
 80005ea:	1e4a      	subs	r2, r1, #1
 80005ec:	2901      	cmp	r1, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x146>
 80005f0:	e0ae      	b.n	8000750 <__aeabi_fadd+0x2a4>
 80005f2:	29ff      	cmp	r1, #255	; 0xff
 80005f4:	d023      	beq.n	800063e <__aeabi_fadd+0x192>
 80005f6:	0011      	movs	r1, r2
 80005f8:	e7c1      	b.n	800057e <__aeabi_fadd+0xd2>
 80005fa:	2300      	movs	r3, #0
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	469c      	mov	ip, r3
 8000600:	e799      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4211      	tst	r1, r2
 8000608:	d077      	beq.n	80006fa <__aeabi_fadd+0x24e>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d0f5      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800060e:	0015      	movs	r5, r2
 8000610:	4446      	add	r6, r8
 8000612:	0870      	lsrs	r0, r6, #1
 8000614:	0743      	lsls	r3, r0, #29
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0x16e>
 8000618:	e77e      	b.n	8000518 <__aeabi_fadd+0x6c>
 800061a:	08c3      	lsrs	r3, r0, #3
 800061c:	2dff      	cmp	r5, #255	; 0xff
 800061e:	d00e      	beq.n	800063e <__aeabi_fadd+0x192>
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	0a5b      	lsrs	r3, r3, #9
 8000624:	469c      	mov	ip, r3
 8000626:	b2ea      	uxtb	r2, r5
 8000628:	e785      	b.n	8000536 <__aeabi_fadd+0x8a>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d007      	beq.n	800063e <__aeabi_fadd+0x192>
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	03d2      	lsls	r2, r2, #15
 8000632:	4213      	tst	r3, r2
 8000634:	d003      	beq.n	800063e <__aeabi_fadd+0x192>
 8000636:	4210      	tst	r0, r2
 8000638:	d101      	bne.n	800063e <__aeabi_fadd+0x192>
 800063a:	000c      	movs	r4, r1
 800063c:	0003      	movs	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0db      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4318      	orrs	r0, r3
 8000648:	0240      	lsls	r0, r0, #9
 800064a:	0a43      	lsrs	r3, r0, #9
 800064c:	469c      	mov	ip, r3
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	e771      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000652:	2900      	cmp	r1, #0
 8000654:	d0d5      	beq.n	8000602 <__aeabi_fadd+0x156>
 8000656:	1b7a      	subs	r2, r7, r5
 8000658:	2d00      	cmp	r5, #0
 800065a:	d160      	bne.n	800071e <__aeabi_fadd+0x272>
 800065c:	4643      	mov	r3, r8
 800065e:	2b00      	cmp	r3, #0
 8000660:	d024      	beq.n	80006ac <__aeabi_fadd+0x200>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d073      	beq.n	8000750 <__aeabi_fadd+0x2a4>
 8000668:	2aff      	cmp	r2, #255	; 0xff
 800066a:	d0e7      	beq.n	800063c <__aeabi_fadd+0x190>
 800066c:	001a      	movs	r2, r3
 800066e:	2a1b      	cmp	r2, #27
 8000670:	dc00      	bgt.n	8000674 <__aeabi_fadd+0x1c8>
 8000672:	e085      	b.n	8000780 <__aeabi_fadd+0x2d4>
 8000674:	2001      	movs	r0, #1
 8000676:	003d      	movs	r5, r7
 8000678:	1980      	adds	r0, r0, r6
 800067a:	e785      	b.n	8000588 <__aeabi_fadd+0xdc>
 800067c:	2320      	movs	r3, #32
 800067e:	003a      	movs	r2, r7
 8000680:	1b45      	subs	r5, r0, r5
 8000682:	0038      	movs	r0, r7
 8000684:	3501      	adds	r5, #1
 8000686:	40ea      	lsrs	r2, r5
 8000688:	1b5d      	subs	r5, r3, r5
 800068a:	40a8      	lsls	r0, r5
 800068c:	1e43      	subs	r3, r0, #1
 800068e:	4198      	sbcs	r0, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4310      	orrs	r0, r2
 8000694:	e73e      	b.n	8000514 <__aeabi_fadd+0x68>
 8000696:	2320      	movs	r3, #32
 8000698:	0030      	movs	r0, r6
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	0031      	movs	r1, r6
 800069e:	4098      	lsls	r0, r3
 80006a0:	40d1      	lsrs	r1, r2
 80006a2:	1e43      	subs	r3, r0, #1
 80006a4:	4198      	sbcs	r0, r3
 80006a6:	4308      	orrs	r0, r1
 80006a8:	e722      	b.n	80004f0 <__aeabi_fadd+0x44>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	0015      	movs	r5, r2
 80006b0:	e7b4      	b.n	800061c <__aeabi_fadd+0x170>
 80006b2:	2fff      	cmp	r7, #255	; 0xff
 80006b4:	d0c1      	beq.n	800063a <__aeabi_fadd+0x18e>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	4640      	mov	r0, r8
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	4318      	orrs	r0, r3
 80006be:	4680      	mov	r8, r0
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd51      	ble.n	8000768 <__aeabi_fadd+0x2bc>
 80006c4:	2001      	movs	r0, #1
 80006c6:	000c      	movs	r4, r1
 80006c8:	003d      	movs	r5, r7
 80006ca:	1a30      	subs	r0, r6, r0
 80006cc:	e712      	b.n	80004f4 <__aeabi_fadd+0x48>
 80006ce:	4643      	mov	r3, r8
 80006d0:	1b9f      	subs	r7, r3, r6
 80006d2:	017b      	lsls	r3, r7, #5
 80006d4:	d42b      	bmi.n	800072e <__aeabi_fadd+0x282>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x230>
 80006da:	e710      	b.n	80004fe <__aeabi_fadd+0x52>
 80006dc:	2300      	movs	r3, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	469c      	mov	ip, r3
 80006e4:	e727      	b.n	8000536 <__aeabi_fadd+0x8a>
 80006e6:	2320      	movs	r3, #32
 80006e8:	0032      	movs	r2, r6
 80006ea:	0030      	movs	r0, r6
 80006ec:	40ca      	lsrs	r2, r1
 80006ee:	1a59      	subs	r1, r3, r1
 80006f0:	4088      	lsls	r0, r1
 80006f2:	1e43      	subs	r3, r0, #1
 80006f4:	4198      	sbcs	r0, r3
 80006f6:	4310      	orrs	r0, r2
 80006f8:	e745      	b.n	8000586 <__aeabi_fadd+0xda>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d14a      	bne.n	8000794 <__aeabi_fadd+0x2e8>
 80006fe:	4643      	mov	r3, r8
 8000700:	2b00      	cmp	r3, #0
 8000702:	d063      	beq.n	80007cc <__aeabi_fadd+0x320>
 8000704:	2200      	movs	r2, #0
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x260>
 800070a:	e714      	b.n	8000536 <__aeabi_fadd+0x8a>
 800070c:	0030      	movs	r0, r6
 800070e:	4440      	add	r0, r8
 8000710:	0143      	lsls	r3, r0, #5
 8000712:	d400      	bmi.n	8000716 <__aeabi_fadd+0x26a>
 8000714:	e77e      	b.n	8000614 <__aeabi_fadd+0x168>
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <__aeabi_fadd+0x334>)
 8000718:	3501      	adds	r5, #1
 800071a:	4018      	ands	r0, r3
 800071c:	e77a      	b.n	8000614 <__aeabi_fadd+0x168>
 800071e:	2fff      	cmp	r7, #255	; 0xff
 8000720:	d08c      	beq.n	800063c <__aeabi_fadd+0x190>
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	4641      	mov	r1, r8
 8000726:	04db      	lsls	r3, r3, #19
 8000728:	4319      	orrs	r1, r3
 800072a:	4688      	mov	r8, r1
 800072c:	e79f      	b.n	800066e <__aeabi_fadd+0x1c2>
 800072e:	4643      	mov	r3, r8
 8000730:	000c      	movs	r4, r1
 8000732:	1af7      	subs	r7, r6, r3
 8000734:	e6e3      	b.n	80004fe <__aeabi_fadd+0x52>
 8000736:	4642      	mov	r2, r8
 8000738:	2a00      	cmp	r2, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fadd+0x292>
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x17e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x298>
 8000742:	e77a      	b.n	800063a <__aeabi_fadd+0x18e>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	2400      	movs	r4, #0
 800074a:	469c      	mov	ip, r3
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	e6f2      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000750:	0030      	movs	r0, r6
 8000752:	4440      	add	r0, r8
 8000754:	2501      	movs	r5, #1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b0>
 800075a:	e75b      	b.n	8000614 <__aeabi_fadd+0x168>
 800075c:	2502      	movs	r5, #2
 800075e:	e718      	b.n	8000592 <__aeabi_fadd+0xe6>
 8000760:	4643      	mov	r3, r8
 8000762:	2501      	movs	r5, #1
 8000764:	1b98      	subs	r0, r3, r6
 8000766:	e6c5      	b.n	80004f4 <__aeabi_fadd+0x48>
 8000768:	2320      	movs	r3, #32
 800076a:	4644      	mov	r4, r8
 800076c:	4640      	mov	r0, r8
 800076e:	40d4      	lsrs	r4, r2
 8000770:	1a9a      	subs	r2, r3, r2
 8000772:	4090      	lsls	r0, r2
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	4320      	orrs	r0, r4
 800077a:	e7a4      	b.n	80006c6 <__aeabi_fadd+0x21a>
 800077c:	000d      	movs	r5, r1
 800077e:	e74d      	b.n	800061c <__aeabi_fadd+0x170>
 8000780:	2320      	movs	r3, #32
 8000782:	4641      	mov	r1, r8
 8000784:	4640      	mov	r0, r8
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1a9a      	subs	r2, r3, r2
 800078a:	4090      	lsls	r0, r2
 800078c:	1e43      	subs	r3, r0, #1
 800078e:	4198      	sbcs	r0, r3
 8000790:	4308      	orrs	r0, r1
 8000792:	e770      	b.n	8000676 <__aeabi_fadd+0x1ca>
 8000794:	4642      	mov	r2, r8
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x2f0>
 800079a:	e74f      	b.n	800063c <__aeabi_fadd+0x190>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2f6>
 80007a0:	e74d      	b.n	800063e <__aeabi_fadd+0x192>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4213      	tst	r3, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x300>
 80007aa:	e748      	b.n	800063e <__aeabi_fadd+0x192>
 80007ac:	4210      	tst	r0, r2
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x306>
 80007b0:	e745      	b.n	800063e <__aeabi_fadd+0x192>
 80007b2:	0003      	movs	r3, r0
 80007b4:	e743      	b.n	800063e <__aeabi_fadd+0x192>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d090      	beq.n	80006dc <__aeabi_fadd+0x230>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4684      	mov	ip, r0
 80007be:	2200      	movs	r2, #0
 80007c0:	e6b9      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007c2:	4643      	mov	r3, r8
 80007c4:	000c      	movs	r4, r1
 80007c6:	1af0      	subs	r0, r6, r3
 80007c8:	3501      	adds	r5, #1
 80007ca:	e693      	b.n	80004f4 <__aeabi_fadd+0x48>
 80007cc:	4684      	mov	ip, r0
 80007ce:	2200      	movs	r2, #0
 80007d0:	e6b1      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x32c>
 80007d6:	e71d      	b.n	8000614 <__aeabi_fadd+0x168>
 80007d8:	2300      	movs	r3, #0
 80007da:	2400      	movs	r4, #0
 80007dc:	469c      	mov	ip, r3
 80007de:	e6aa      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007e0:	fbffffff 	.word	0xfbffffff
 80007e4:	7dffffff 	.word	0x7dffffff

080007e8 <__eqsf2>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0042      	lsls	r2, r0, #1
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	024e      	lsls	r6, r1, #9
 80007f0:	004c      	lsls	r4, r1, #1
 80007f2:	0fc3      	lsrs	r3, r0, #31
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	2001      	movs	r0, #1
 80007f8:	0e12      	lsrs	r2, r2, #24
 80007fa:	0a76      	lsrs	r6, r6, #9
 80007fc:	0e24      	lsrs	r4, r4, #24
 80007fe:	0fc9      	lsrs	r1, r1, #31
 8000800:	2aff      	cmp	r2, #255	; 0xff
 8000802:	d006      	beq.n	8000812 <__eqsf2+0x2a>
 8000804:	2cff      	cmp	r4, #255	; 0xff
 8000806:	d003      	beq.n	8000810 <__eqsf2+0x28>
 8000808:	42a2      	cmp	r2, r4
 800080a:	d101      	bne.n	8000810 <__eqsf2+0x28>
 800080c:	42b5      	cmp	r5, r6
 800080e:	d006      	beq.n	800081e <__eqsf2+0x36>
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2d00      	cmp	r5, #0
 8000814:	d1fc      	bne.n	8000810 <__eqsf2+0x28>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d1fa      	bne.n	8000810 <__eqsf2+0x28>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d1f8      	bne.n	8000810 <__eqsf2+0x28>
 800081e:	428b      	cmp	r3, r1
 8000820:	d006      	beq.n	8000830 <__eqsf2+0x48>
 8000822:	2001      	movs	r0, #1
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1f3      	bne.n	8000810 <__eqsf2+0x28>
 8000828:	0028      	movs	r0, r5
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4198      	sbcs	r0, r3
 800082e:	e7ef      	b.n	8000810 <__eqsf2+0x28>
 8000830:	2000      	movs	r0, #0
 8000832:	e7ed      	b.n	8000810 <__eqsf2+0x28>

08000834 <__gesf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	024e      	lsls	r6, r1, #9
 800083c:	004c      	lsls	r4, r1, #1
 800083e:	0fc3      	lsrs	r3, r0, #31
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e12      	lsrs	r2, r2, #24
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc8      	lsrs	r0, r1, #31
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d01b      	beq.n	8000886 <__gesf2+0x52>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d00e      	beq.n	8000870 <__gesf2+0x3c>
 8000852:	2a00      	cmp	r2, #0
 8000854:	d11b      	bne.n	800088e <__gesf2+0x5a>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d101      	bne.n	800085e <__gesf2+0x2a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d01c      	beq.n	8000898 <__gesf2+0x64>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d00c      	beq.n	800087c <__gesf2+0x48>
 8000862:	4283      	cmp	r3, r0
 8000864:	d01c      	beq.n	80008a0 <__gesf2+0x6c>
 8000866:	2102      	movs	r1, #2
 8000868:	1e58      	subs	r0, r3, #1
 800086a:	4008      	ands	r0, r1
 800086c:	3801      	subs	r0, #1
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2e00      	cmp	r6, #0
 8000872:	d122      	bne.n	80008ba <__gesf2+0x86>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d1f4      	bne.n	8000862 <__gesf2+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d1f2      	bne.n	8000862 <__gesf2+0x2e>
 800087c:	2800      	cmp	r0, #0
 800087e:	d1f6      	bne.n	800086e <__gesf2+0x3a>
 8000880:	2001      	movs	r0, #1
 8000882:	4240      	negs	r0, r0
 8000884:	e7f3      	b.n	800086e <__gesf2+0x3a>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d117      	bne.n	80008ba <__gesf2+0x86>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d0f0      	beq.n	8000870 <__gesf2+0x3c>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d1e7      	bne.n	8000862 <__gesf2+0x2e>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d1e5      	bne.n	8000862 <__gesf2+0x2e>
 8000896:	e7e6      	b.n	8000866 <__gesf2+0x32>
 8000898:	2000      	movs	r0, #0
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e7      	beq.n	800086e <__gesf2+0x3a>
 800089e:	e7e2      	b.n	8000866 <__gesf2+0x32>
 80008a0:	42a2      	cmp	r2, r4
 80008a2:	dc05      	bgt.n	80008b0 <__gesf2+0x7c>
 80008a4:	dbea      	blt.n	800087c <__gesf2+0x48>
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	d802      	bhi.n	80008b0 <__gesf2+0x7c>
 80008aa:	d3e7      	bcc.n	800087c <__gesf2+0x48>
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7de      	b.n	800086e <__gesf2+0x3a>
 80008b0:	4243      	negs	r3, r0
 80008b2:	4158      	adcs	r0, r3
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	3801      	subs	r0, #1
 80008b8:	e7d9      	b.n	800086e <__gesf2+0x3a>
 80008ba:	2002      	movs	r0, #2
 80008bc:	4240      	negs	r0, r0
 80008be:	e7d6      	b.n	800086e <__gesf2+0x3a>

080008c0 <__lesf2>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	0042      	lsls	r2, r0, #1
 80008c4:	0245      	lsls	r5, r0, #9
 80008c6:	024e      	lsls	r6, r1, #9
 80008c8:	004c      	lsls	r4, r1, #1
 80008ca:	0fc3      	lsrs	r3, r0, #31
 80008cc:	0a6d      	lsrs	r5, r5, #9
 80008ce:	0e12      	lsrs	r2, r2, #24
 80008d0:	0a76      	lsrs	r6, r6, #9
 80008d2:	0e24      	lsrs	r4, r4, #24
 80008d4:	0fc8      	lsrs	r0, r1, #31
 80008d6:	2aff      	cmp	r2, #255	; 0xff
 80008d8:	d00b      	beq.n	80008f2 <__lesf2+0x32>
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d00d      	beq.n	80008fa <__lesf2+0x3a>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d11f      	bne.n	8000922 <__lesf2+0x62>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d116      	bne.n	8000914 <__lesf2+0x54>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d114      	bne.n	8000914 <__lesf2+0x54>
 80008ea:	2000      	movs	r0, #0
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d010      	beq.n	8000912 <__lesf2+0x52>
 80008f0:	e009      	b.n	8000906 <__lesf2+0x46>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d10c      	bne.n	8000910 <__lesf2+0x50>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d113      	bne.n	8000922 <__lesf2+0x62>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d108      	bne.n	8000910 <__lesf2+0x50>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d008      	beq.n	8000914 <__lesf2+0x54>
 8000902:	4283      	cmp	r3, r0
 8000904:	d012      	beq.n	800092c <__lesf2+0x6c>
 8000906:	2102      	movs	r1, #2
 8000908:	1e58      	subs	r0, r3, #1
 800090a:	4008      	ands	r0, r1
 800090c:	3801      	subs	r0, #1
 800090e:	e000      	b.n	8000912 <__lesf2+0x52>
 8000910:	2002      	movs	r0, #2
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	2d00      	cmp	r5, #0
 8000916:	d1f4      	bne.n	8000902 <__lesf2+0x42>
 8000918:	2800      	cmp	r0, #0
 800091a:	d1fa      	bne.n	8000912 <__lesf2+0x52>
 800091c:	2001      	movs	r0, #1
 800091e:	4240      	negs	r0, r0
 8000920:	e7f7      	b.n	8000912 <__lesf2+0x52>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d1ed      	bne.n	8000902 <__lesf2+0x42>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d1eb      	bne.n	8000902 <__lesf2+0x42>
 800092a:	e7ec      	b.n	8000906 <__lesf2+0x46>
 800092c:	42a2      	cmp	r2, r4
 800092e:	dc05      	bgt.n	800093c <__lesf2+0x7c>
 8000930:	dbf2      	blt.n	8000918 <__lesf2+0x58>
 8000932:	42b5      	cmp	r5, r6
 8000934:	d802      	bhi.n	800093c <__lesf2+0x7c>
 8000936:	d3ef      	bcc.n	8000918 <__lesf2+0x58>
 8000938:	2000      	movs	r0, #0
 800093a:	e7ea      	b.n	8000912 <__lesf2+0x52>
 800093c:	4243      	negs	r3, r0
 800093e:	4158      	adcs	r0, r3
 8000940:	0040      	lsls	r0, r0, #1
 8000942:	3801      	subs	r0, #1
 8000944:	e7e5      	b.n	8000912 <__lesf2+0x52>
 8000946:	46c0      	nop			; (mov r8, r8)

08000948 <__aeabi_fmul>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	0244      	lsls	r4, r0, #9
 8000952:	0045      	lsls	r5, r0, #1
 8000954:	b5c0      	push	{r6, r7, lr}
 8000956:	0a64      	lsrs	r4, r4, #9
 8000958:	1c0f      	adds	r7, r1, #0
 800095a:	0e2d      	lsrs	r5, r5, #24
 800095c:	0fc6      	lsrs	r6, r0, #31
 800095e:	2d00      	cmp	r5, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fmul+0x1c>
 8000962:	e08d      	b.n	8000a80 <__aeabi_fmul+0x138>
 8000964:	2dff      	cmp	r5, #255	; 0xff
 8000966:	d100      	bne.n	800096a <__aeabi_fmul+0x22>
 8000968:	e092      	b.n	8000a90 <__aeabi_fmul+0x148>
 800096a:	2300      	movs	r3, #0
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	00e4      	lsls	r4, r4, #3
 8000974:	04c0      	lsls	r0, r0, #19
 8000976:	4304      	orrs	r4, r0
 8000978:	3d7f      	subs	r5, #127	; 0x7f
 800097a:	0278      	lsls	r0, r7, #9
 800097c:	0a43      	lsrs	r3, r0, #9
 800097e:	4698      	mov	r8, r3
 8000980:	007b      	lsls	r3, r7, #1
 8000982:	0e1b      	lsrs	r3, r3, #24
 8000984:	0fff      	lsrs	r7, r7, #31
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fmul+0x44>
 800098a:	e070      	b.n	8000a6e <__aeabi_fmul+0x126>
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d100      	bne.n	8000992 <__aeabi_fmul+0x4a>
 8000990:	e086      	b.n	8000aa0 <__aeabi_fmul+0x158>
 8000992:	4642      	mov	r2, r8
 8000994:	00d0      	lsls	r0, r2, #3
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	3b7f      	subs	r3, #127	; 0x7f
 800099a:	18ed      	adds	r5, r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	04d2      	lsls	r2, r2, #19
 80009a0:	4302      	orrs	r2, r0
 80009a2:	4690      	mov	r8, r2
 80009a4:	469c      	mov	ip, r3
 80009a6:	0031      	movs	r1, r6
 80009a8:	464b      	mov	r3, r9
 80009aa:	4079      	eors	r1, r7
 80009ac:	1c68      	adds	r0, r5, #1
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d81c      	bhi.n	80009ec <__aeabi_fmul+0xa4>
 80009b2:	4a76      	ldr	r2, [pc, #472]	; (8000b8c <__aeabi_fmul+0x244>)
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	58d3      	ldr	r3, [r2, r3]
 80009b8:	469f      	mov	pc, r3
 80009ba:	0039      	movs	r1, r7
 80009bc:	4644      	mov	r4, r8
 80009be:	46e2      	mov	sl, ip
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d00f      	beq.n	80009e6 <__aeabi_fmul+0x9e>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x84>
 80009ca:	e0d7      	b.n	8000b7c <__aeabi_fmul+0x234>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d137      	bne.n	8000a40 <__aeabi_fmul+0xf8>
 80009d0:	2000      	movs	r0, #0
 80009d2:	2400      	movs	r4, #0
 80009d4:	05c0      	lsls	r0, r0, #23
 80009d6:	4320      	orrs	r0, r4
 80009d8:	07c9      	lsls	r1, r1, #31
 80009da:	4308      	orrs	r0, r1
 80009dc:	bce0      	pop	{r5, r6, r7}
 80009de:	46ba      	mov	sl, r7
 80009e0:	46b1      	mov	r9, r6
 80009e2:	46a8      	mov	r8, r5
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2400      	movs	r4, #0
 80009ea:	e7f3      	b.n	80009d4 <__aeabi_fmul+0x8c>
 80009ec:	0c26      	lsrs	r6, r4, #16
 80009ee:	0424      	lsls	r4, r4, #16
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	4644      	mov	r4, r8
 80009f4:	0424      	lsls	r4, r4, #16
 80009f6:	0c24      	lsrs	r4, r4, #16
 80009f8:	4643      	mov	r3, r8
 80009fa:	0027      	movs	r7, r4
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	4357      	muls	r7, r2
 8000a00:	4374      	muls	r4, r6
 8000a02:	435a      	muls	r2, r3
 8000a04:	435e      	muls	r6, r3
 8000a06:	1912      	adds	r2, r2, r4
 8000a08:	0c3b      	lsrs	r3, r7, #16
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d903      	bls.n	8000a18 <__aeabi_fmul+0xd0>
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	4694      	mov	ip, r2
 8000a16:	4466      	add	r6, ip
 8000a18:	043f      	lsls	r7, r7, #16
 8000a1a:	041a      	lsls	r2, r3, #16
 8000a1c:	0c3f      	lsrs	r7, r7, #16
 8000a1e:	19d2      	adds	r2, r2, r7
 8000a20:	0194      	lsls	r4, r2, #6
 8000a22:	1e67      	subs	r7, r4, #1
 8000a24:	41bc      	sbcs	r4, r7
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	0e92      	lsrs	r2, r2, #26
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	019b      	lsls	r3, r3, #6
 8000a30:	431c      	orrs	r4, r3
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fmul+0xf0>
 8000a36:	e09b      	b.n	8000b70 <__aeabi_fmul+0x228>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	0862      	lsrs	r2, r4, #1
 8000a3c:	401c      	ands	r4, r3
 8000a3e:	4314      	orrs	r4, r2
 8000a40:	0002      	movs	r2, r0
 8000a42:	327f      	adds	r2, #127	; 0x7f
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	dd64      	ble.n	8000b12 <__aeabi_fmul+0x1ca>
 8000a48:	0763      	lsls	r3, r4, #29
 8000a4a:	d004      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a54:	3404      	adds	r4, #4
 8000a56:	0123      	lsls	r3, r4, #4
 8000a58:	d503      	bpl.n	8000a62 <__aeabi_fmul+0x11a>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <__aeabi_fmul+0x248>)
 8000a5e:	3280      	adds	r2, #128	; 0x80
 8000a60:	401c      	ands	r4, r3
 8000a62:	2afe      	cmp	r2, #254	; 0xfe
 8000a64:	dcbf      	bgt.n	80009e6 <__aeabi_fmul+0x9e>
 8000a66:	01a4      	lsls	r4, r4, #6
 8000a68:	0a64      	lsrs	r4, r4, #9
 8000a6a:	b2d0      	uxtb	r0, r2
 8000a6c:	e7b2      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000a6e:	4643      	mov	r3, r8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d13d      	bne.n	8000af0 <__aeabi_fmul+0x1a8>
 8000a74:	464a      	mov	r2, r9
 8000a76:	3301      	adds	r3, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	e792      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d129      	bne.n	8000ad8 <__aeabi_fmul+0x190>
 8000a84:	2304      	movs	r3, #4
 8000a86:	4699      	mov	r9, r3
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	e774      	b.n	800097a <__aeabi_fmul+0x32>
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d11b      	bne.n	8000acc <__aeabi_fmul+0x184>
 8000a94:	2308      	movs	r3, #8
 8000a96:	4699      	mov	r9, r3
 8000a98:	3b06      	subs	r3, #6
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	e76c      	b.n	800097a <__aeabi_fmul+0x32>
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	35ff      	adds	r5, #255	; 0xff
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10b      	bne.n	8000ac0 <__aeabi_fmul+0x178>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4691      	mov	r9, r2
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e778      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	0031      	movs	r1, r6
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d000      	beq.n	8000abe <__aeabi_fmul+0x176>
 8000abc:	e783      	b.n	80009c6 <__aeabi_fmul+0x7e>
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x9e>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	464a      	mov	r2, r9
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	469c      	mov	ip, r3
 8000aca:	e76c      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000acc:	230c      	movs	r3, #12
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b09      	subs	r3, #9
 8000ad2:	25ff      	movs	r5, #255	; 0xff
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e750      	b.n	800097a <__aeabi_fmul+0x32>
 8000ad8:	0020      	movs	r0, r4
 8000ada:	f000 fab9 	bl	8001050 <__clzsi2>
 8000ade:	2576      	movs	r5, #118	; 0x76
 8000ae0:	1f43      	subs	r3, r0, #5
 8000ae2:	409c      	lsls	r4, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	426d      	negs	r5, r5
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	1a2d      	subs	r5, r5, r0
 8000aee:	e744      	b.n	800097a <__aeabi_fmul+0x32>
 8000af0:	4640      	mov	r0, r8
 8000af2:	f000 faad 	bl	8001050 <__clzsi2>
 8000af6:	4642      	mov	r2, r8
 8000af8:	1f43      	subs	r3, r0, #5
 8000afa:	409a      	lsls	r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	4690      	mov	r8, r2
 8000b02:	469c      	mov	ip, r3
 8000b04:	3d76      	subs	r5, #118	; 0x76
 8000b06:	e74e      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000b08:	2480      	movs	r4, #128	; 0x80
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	03e4      	lsls	r4, r4, #15
 8000b10:	e760      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b12:	2301      	movs	r3, #1
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	2b1b      	cmp	r3, #27
 8000b18:	dd00      	ble.n	8000b1c <__aeabi_fmul+0x1d4>
 8000b1a:	e759      	b.n	80009d0 <__aeabi_fmul+0x88>
 8000b1c:	0022      	movs	r2, r4
 8000b1e:	309e      	adds	r0, #158	; 0x9e
 8000b20:	40da      	lsrs	r2, r3
 8000b22:	4084      	lsls	r4, r0
 8000b24:	0013      	movs	r3, r2
 8000b26:	1e62      	subs	r2, r4, #1
 8000b28:	4194      	sbcs	r4, r2
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	0763      	lsls	r3, r4, #29
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b38:	3404      	adds	r4, #4
 8000b3a:	0163      	lsls	r3, r4, #5
 8000b3c:	d51a      	bpl.n	8000b74 <__aeabi_fmul+0x22c>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	2400      	movs	r4, #0
 8000b42:	e747      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	03c0      	lsls	r0, r0, #15
 8000b48:	4204      	tst	r4, r0
 8000b4a:	d009      	beq.n	8000b60 <__aeabi_fmul+0x218>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	4203      	tst	r3, r0
 8000b50:	d106      	bne.n	8000b60 <__aeabi_fmul+0x218>
 8000b52:	4644      	mov	r4, r8
 8000b54:	4304      	orrs	r4, r0
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	0039      	movs	r1, r7
 8000b5a:	20ff      	movs	r0, #255	; 0xff
 8000b5c:	0a64      	lsrs	r4, r4, #9
 8000b5e:	e739      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	03c0      	lsls	r0, r0, #15
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0264      	lsls	r4, r4, #9
 8000b68:	0031      	movs	r1, r6
 8000b6a:	20ff      	movs	r0, #255	; 0xff
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	e731      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b70:	0028      	movs	r0, r5
 8000b72:	e765      	b.n	8000a40 <__aeabi_fmul+0xf8>
 8000b74:	01a4      	lsls	r4, r4, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	e72b      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b7c:	2080      	movs	r0, #128	; 0x80
 8000b7e:	03c0      	lsls	r0, r0, #15
 8000b80:	4304      	orrs	r4, r0
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	e724      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	08007d50 	.word	0x08007d50
 8000b90:	f7ffffff 	.word	0xf7ffffff

08000b94 <__aeabi_fsub>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	46ce      	mov	lr, r9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	0243      	lsls	r3, r0, #9
 8000b9c:	0a5b      	lsrs	r3, r3, #9
 8000b9e:	024e      	lsls	r6, r1, #9
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	0a72      	lsrs	r2, r6, #9
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	0045      	lsls	r5, r0, #1
 8000baa:	004a      	lsls	r2, r1, #1
 8000bac:	b580      	push	{r7, lr}
 8000bae:	0e2d      	lsrs	r5, r5, #24
 8000bb0:	001f      	movs	r7, r3
 8000bb2:	0fc4      	lsrs	r4, r0, #31
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0fc9      	lsrs	r1, r1, #31
 8000bb8:	09b6      	lsrs	r6, r6, #6
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d05b      	beq.n	8000c76 <__aeabi_fsub+0xe2>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4041      	eors	r1, r0
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	d039      	beq.n	8000c3a <__aeabi_fsub+0xa6>
 8000bc6:	1aa8      	subs	r0, r5, r2
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	dd5a      	ble.n	8000c82 <__aeabi_fsub+0xee>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d06a      	beq.n	8000ca6 <__aeabi_fsub+0x112>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x42>
 8000bd4:	e0d9      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	04d2      	lsls	r2, r2, #19
 8000bda:	4316      	orrs	r6, r2
 8000bdc:	281b      	cmp	r0, #27
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fsub+0x4e>
 8000be0:	e0e9      	b.n	8000db6 <__aeabi_fsub+0x222>
 8000be2:	2001      	movs	r0, #1
 8000be4:	4663      	mov	r3, ip
 8000be6:	1a18      	subs	r0, r3, r0
 8000be8:	0143      	lsls	r3, r0, #5
 8000bea:	d400      	bmi.n	8000bee <__aeabi_fsub+0x5a>
 8000bec:	e0b4      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000bee:	0180      	lsls	r0, r0, #6
 8000bf0:	0987      	lsrs	r7, r0, #6
 8000bf2:	0038      	movs	r0, r7
 8000bf4:	f000 fa2c 	bl	8001050 <__clzsi2>
 8000bf8:	3805      	subs	r0, #5
 8000bfa:	4087      	lsls	r7, r0
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_fsub+0x6e>
 8000c00:	e0cc      	b.n	8000d9c <__aeabi_fsub+0x208>
 8000c02:	1a2d      	subs	r5, r5, r0
 8000c04:	48b5      	ldr	r0, [pc, #724]	; (8000edc <__aeabi_fsub+0x348>)
 8000c06:	4038      	ands	r0, r7
 8000c08:	0743      	lsls	r3, r0, #29
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	4003      	ands	r3, r0
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d000      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c14:	3004      	adds	r0, #4
 8000c16:	0143      	lsls	r3, r0, #5
 8000c18:	d400      	bmi.n	8000c1c <__aeabi_fsub+0x88>
 8000c1a:	e0a0      	b.n	8000d5e <__aeabi_fsub+0x1ca>
 8000c1c:	1c6a      	adds	r2, r5, #1
 8000c1e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x90>
 8000c22:	e08d      	b.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c24:	0180      	lsls	r0, r0, #6
 8000c26:	0a47      	lsrs	r7, r0, #9
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	05d0      	lsls	r0, r2, #23
 8000c2c:	4338      	orrs	r0, r7
 8000c2e:	07e4      	lsls	r4, r4, #31
 8000c30:	4320      	orrs	r0, r4
 8000c32:	bcc0      	pop	{r6, r7}
 8000c34:	46b9      	mov	r9, r7
 8000c36:	46b0      	mov	r8, r6
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3a:	1aa8      	subs	r0, r5, r2
 8000c3c:	4680      	mov	r8, r0
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	dd45      	ble.n	8000cce <__aeabi_fsub+0x13a>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d070      	beq.n	8000d28 <__aeabi_fsub+0x194>
 8000c46:	2dff      	cmp	r5, #255	; 0xff
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0xb8>
 8000c4a:	e09e      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	04db      	lsls	r3, r3, #19
 8000c50:	431e      	orrs	r6, r3
 8000c52:	4643      	mov	r3, r8
 8000c54:	2b1b      	cmp	r3, #27
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0xc6>
 8000c58:	e0d2      	b.n	8000e00 <__aeabi_fsub+0x26c>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4460      	add	r0, ip
 8000c5e:	0143      	lsls	r3, r0, #5
 8000c60:	d57a      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000c62:	3501      	adds	r5, #1
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d06b      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <__aeabi_fsub+0x34c>)
 8000c6c:	4003      	ands	r3, r0
 8000c6e:	0840      	lsrs	r0, r0, #1
 8000c70:	4010      	ands	r0, r2
 8000c72:	4318      	orrs	r0, r3
 8000c74:	e7c8      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d020      	beq.n	8000cbc <__aeabi_fsub+0x128>
 8000c7a:	428c      	cmp	r4, r1
 8000c7c:	d023      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000c7e:	0028      	movs	r0, r5
 8000c80:	38ff      	subs	r0, #255	; 0xff
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d039      	beq.n	8000cfa <__aeabi_fsub+0x166>
 8000c86:	1b57      	subs	r7, r2, r5
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xfa>
 8000c8c:	e09d      	b.n	8000dca <__aeabi_fsub+0x236>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x102>
 8000c94:	e0db      	b.n	8000e4e <__aeabi_fsub+0x2ba>
 8000c96:	1e7b      	subs	r3, r7, #1
 8000c98:	2f01      	cmp	r7, #1
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x10a>
 8000c9c:	e10d      	b.n	8000eba <__aeabi_fsub+0x326>
 8000c9e:	2fff      	cmp	r7, #255	; 0xff
 8000ca0:	d071      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	e098      	b.n	8000dd8 <__aeabi_fsub+0x244>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x118>
 8000caa:	e0a7      	b.n	8000dfc <__aeabi_fsub+0x268>
 8000cac:	1e42      	subs	r2, r0, #1
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x120>
 8000cb2:	e0e6      	b.n	8000e82 <__aeabi_fsub+0x2ee>
 8000cb4:	28ff      	cmp	r0, #255	; 0xff
 8000cb6:	d068      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000cb8:	0010      	movs	r0, r2
 8000cba:	e78f      	b.n	8000bdc <__aeabi_fsub+0x48>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4041      	eors	r1, r0
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000cc4:	e77f      	b.n	8000bc6 <__aeabi_fsub+0x32>
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	4240      	negs	r0, r0
 8000cca:	4680      	mov	r8, r0
 8000ccc:	44a8      	add	r8, r5
 8000cce:	4640      	mov	r0, r8
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d038      	beq.n	8000d46 <__aeabi_fsub+0x1b2>
 8000cd4:	1b51      	subs	r1, r2, r5
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x148>
 8000cda:	e0ae      	b.n	8000e3a <__aeabi_fsub+0x2a6>
 8000cdc:	2aff      	cmp	r2, #255	; 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x14e>
 8000ce0:	e0df      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	4318      	orrs	r0, r3
 8000cea:	4684      	mov	ip, r0
 8000cec:	291b      	cmp	r1, #27
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0x15e>
 8000cf0:	e0d9      	b.n	8000ea6 <__aeabi_fsub+0x312>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	0015      	movs	r5, r2
 8000cf6:	1980      	adds	r0, r0, r6
 8000cf8:	e7b1      	b.n	8000c5e <__aeabi_fsub+0xca>
 8000cfa:	20fe      	movs	r0, #254	; 0xfe
 8000cfc:	1c6a      	adds	r2, r5, #1
 8000cfe:	4210      	tst	r0, r2
 8000d00:	d171      	bne.n	8000de6 <__aeabi_fsub+0x252>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x174>
 8000d06:	e0a6      	b.n	8000e56 <__aeabi_fsub+0x2c2>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x17c>
 8000d0e:	e0d9      	b.n	8000ec4 <__aeabi_fsub+0x330>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x184>
 8000d16:	e788      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d18:	1b98      	subs	r0, r3, r6
 8000d1a:	0143      	lsls	r3, r0, #5
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_fsub+0x18c>
 8000d1e:	e0e1      	b.n	8000ee4 <__aeabi_fsub+0x350>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1af0      	subs	r0, r6, r3
 8000d26:	e76f      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x19a>
 8000d2c:	e0b7      	b.n	8000e9e <__aeabi_fsub+0x30a>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x1a4>
 8000d36:	e09c      	b.n	8000e72 <__aeabi_fsub+0x2de>
 8000d38:	28ff      	cmp	r0, #255	; 0xff
 8000d3a:	d026      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d3c:	4690      	mov	r8, r2
 8000d3e:	e788      	b.n	8000c52 <__aeabi_fsub+0xbe>
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	2700      	movs	r7, #0
 8000d44:	e771      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d46:	20fe      	movs	r0, #254	; 0xfe
 8000d48:	1c6a      	adds	r2, r5, #1
 8000d4a:	4210      	tst	r0, r2
 8000d4c:	d064      	beq.n	8000e18 <__aeabi_fsub+0x284>
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d0f6      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d52:	0015      	movs	r5, r2
 8000d54:	4466      	add	r6, ip
 8000d56:	0870      	lsrs	r0, r6, #1
 8000d58:	0743      	lsls	r3, r0, #29
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x1ca>
 8000d5c:	e756      	b.n	8000c0c <__aeabi_fsub+0x78>
 8000d5e:	08c3      	lsrs	r3, r0, #3
 8000d60:	2dff      	cmp	r5, #255	; 0xff
 8000d62:	d012      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	0a5f      	lsrs	r7, r3, #9
 8000d68:	b2ea      	uxtb	r2, r5
 8000d6a:	e75e      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000d72:	e096      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d008      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d80:	4648      	mov	r0, r9
 8000d82:	4210      	tst	r0, r2
 8000d84:	d101      	bne.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d86:	000c      	movs	r4, r1
 8000d88:	464b      	mov	r3, r9
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0d8      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d8e:	2780      	movs	r7, #128	; 0x80
 8000d90:	03ff      	lsls	r7, r7, #15
 8000d92:	431f      	orrs	r7, r3
 8000d94:	027f      	lsls	r7, r7, #9
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	0a7f      	lsrs	r7, r7, #9
 8000d9a:	e746      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	003a      	movs	r2, r7
 8000da0:	1b45      	subs	r5, r0, r5
 8000da2:	0038      	movs	r0, r7
 8000da4:	3501      	adds	r5, #1
 8000da6:	40ea      	lsrs	r2, r5
 8000da8:	1b5d      	subs	r5, r3, r5
 8000daa:	40a8      	lsls	r0, r5
 8000dac:	1e43      	subs	r3, r0, #1
 8000dae:	4198      	sbcs	r0, r3
 8000db0:	2500      	movs	r5, #0
 8000db2:	4310      	orrs	r0, r2
 8000db4:	e728      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000db6:	2320      	movs	r3, #32
 8000db8:	1a1b      	subs	r3, r3, r0
 8000dba:	0032      	movs	r2, r6
 8000dbc:	409e      	lsls	r6, r3
 8000dbe:	40c2      	lsrs	r2, r0
 8000dc0:	0030      	movs	r0, r6
 8000dc2:	1e43      	subs	r3, r0, #1
 8000dc4:	4198      	sbcs	r0, r3
 8000dc6:	4310      	orrs	r0, r2
 8000dc8:	e70c      	b.n	8000be4 <__aeabi_fsub+0x50>
 8000dca:	2aff      	cmp	r2, #255	; 0xff
 8000dcc:	d0db      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	4318      	orrs	r0, r3
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	2f1b      	cmp	r7, #27
 8000dda:	dd56      	ble.n	8000e8a <__aeabi_fsub+0x2f6>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	000c      	movs	r4, r1
 8000de0:	0015      	movs	r5, r2
 8000de2:	1a30      	subs	r0, r6, r0
 8000de4:	e700      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000de6:	4663      	mov	r3, ip
 8000de8:	1b9f      	subs	r7, r3, r6
 8000dea:	017b      	lsls	r3, r7, #5
 8000dec:	d43d      	bmi.n	8000e6a <__aeabi_fsub+0x2d6>
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000df2:	e6fe      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000df4:	2400      	movs	r4, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e716      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	e7af      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e00:	0032      	movs	r2, r6
 8000e02:	4643      	mov	r3, r8
 8000e04:	4641      	mov	r1, r8
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	2320      	movs	r3, #32
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	409e      	lsls	r6, r3
 8000e0e:	0030      	movs	r0, r6
 8000e10:	1e43      	subs	r3, r0, #1
 8000e12:	4198      	sbcs	r0, r3
 8000e14:	4310      	orrs	r0, r2
 8000e16:	e721      	b.n	8000c5c <__aeabi_fsub+0xc8>
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1a7      	bne.n	8000d6c <__aeabi_fsub+0x1d8>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d059      	beq.n	8000ed6 <__aeabi_fsub+0x342>
 8000e22:	2200      	movs	r2, #0
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x296>
 8000e28:	e6ff      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	4460      	add	r0, ip
 8000e2e:	0143      	lsls	r3, r0, #5
 8000e30:	d592      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <__aeabi_fsub+0x348>)
 8000e34:	3501      	adds	r5, #1
 8000e36:	4018      	ands	r0, r3
 8000e38:	e78e      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d047      	beq.n	8000ed0 <__aeabi_fsub+0x33c>
 8000e40:	1e4b      	subs	r3, r1, #1
 8000e42:	2901      	cmp	r1, #1
 8000e44:	d015      	beq.n	8000e72 <__aeabi_fsub+0x2de>
 8000e46:	29ff      	cmp	r1, #255	; 0xff
 8000e48:	d02b      	beq.n	8000ea2 <__aeabi_fsub+0x30e>
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	e74e      	b.n	8000cec <__aeabi_fsub+0x158>
 8000e4e:	000c      	movs	r4, r1
 8000e50:	464b      	mov	r3, r9
 8000e52:	003d      	movs	r5, r7
 8000e54:	e784      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e56:	4662      	mov	r2, ip
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d18b      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d192      	bne.n	8000d86 <__aeabi_fsub+0x1f2>
 8000e60:	2780      	movs	r7, #128	; 0x80
 8000e62:	2400      	movs	r4, #0
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	03ff      	lsls	r7, r7, #15
 8000e68:	e6df      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	1af7      	subs	r7, r6, r3
 8000e70:	e6bf      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000e72:	0030      	movs	r0, r6
 8000e74:	4460      	add	r0, ip
 8000e76:	2501      	movs	r5, #1
 8000e78:	0143      	lsls	r3, r0, #5
 8000e7a:	d400      	bmi.n	8000e7e <__aeabi_fsub+0x2ea>
 8000e7c:	e76c      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e7e:	2502      	movs	r5, #2
 8000e80:	e6f2      	b.n	8000c68 <__aeabi_fsub+0xd4>
 8000e82:	4663      	mov	r3, ip
 8000e84:	2501      	movs	r5, #1
 8000e86:	1b98      	subs	r0, r3, r6
 8000e88:	e6ae      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	4660      	mov	r0, ip
 8000e90:	40fc      	lsrs	r4, r7
 8000e92:	1bdf      	subs	r7, r3, r7
 8000e94:	40b8      	lsls	r0, r7
 8000e96:	1e43      	subs	r3, r0, #1
 8000e98:	4198      	sbcs	r0, r3
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	e79f      	b.n	8000dde <__aeabi_fsub+0x24a>
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	e75e      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	e771      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	4665      	mov	r5, ip
 8000eaa:	4660      	mov	r0, ip
 8000eac:	40cd      	lsrs	r5, r1
 8000eae:	1a59      	subs	r1, r3, r1
 8000eb0:	4088      	lsls	r0, r1
 8000eb2:	1e43      	subs	r3, r0, #1
 8000eb4:	4198      	sbcs	r0, r3
 8000eb6:	4328      	orrs	r0, r5
 8000eb8:	e71c      	b.n	8000cf4 <__aeabi_fsub+0x160>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	2501      	movs	r5, #1
 8000ec0:	1af0      	subs	r0, r6, r3
 8000ec2:	e691      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000ec4:	2e00      	cmp	r6, #0
 8000ec6:	d095      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000ec8:	000c      	movs	r4, r1
 8000eca:	464f      	mov	r7, r9
 8000ecc:	2200      	movs	r2, #0
 8000ece:	e6ac      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	000d      	movs	r5, r1
 8000ed4:	e744      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ed6:	464f      	mov	r7, r9
 8000ed8:	2200      	movs	r2, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000edc:	fbffffff 	.word	0xfbffffff
 8000ee0:	7dffffff 	.word	0x7dffffff
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x356>
 8000ee8:	e736      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000eea:	2400      	movs	r4, #0
 8000eec:	2700      	movs	r7, #0
 8000eee:	e69c      	b.n	8000c2a <__aeabi_fsub+0x96>

08000ef0 <__aeabi_f2iz>:
 8000ef0:	0241      	lsls	r1, r0, #9
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0fc3      	lsrs	r3, r0, #31
 8000ef6:	0a49      	lsrs	r1, r1, #9
 8000ef8:	2000      	movs	r0, #0
 8000efa:	0e12      	lsrs	r2, r2, #24
 8000efc:	2a7e      	cmp	r2, #126	; 0x7e
 8000efe:	dd03      	ble.n	8000f08 <__aeabi_f2iz+0x18>
 8000f00:	2a9d      	cmp	r2, #157	; 0x9d
 8000f02:	dd02      	ble.n	8000f0a <__aeabi_f2iz+0x1a>
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <__aeabi_f2iz+0x3c>)
 8000f06:	1898      	adds	r0, r3, r2
 8000f08:	4770      	bx	lr
 8000f0a:	2080      	movs	r0, #128	; 0x80
 8000f0c:	0400      	lsls	r0, r0, #16
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	2a95      	cmp	r2, #149	; 0x95
 8000f12:	dc07      	bgt.n	8000f24 <__aeabi_f2iz+0x34>
 8000f14:	2096      	movs	r0, #150	; 0x96
 8000f16:	1a82      	subs	r2, r0, r2
 8000f18:	40d1      	lsrs	r1, r2
 8000f1a:	4248      	negs	r0, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f3      	bne.n	8000f08 <__aeabi_f2iz+0x18>
 8000f20:	0008      	movs	r0, r1
 8000f22:	e7f1      	b.n	8000f08 <__aeabi_f2iz+0x18>
 8000f24:	3a96      	subs	r2, #150	; 0x96
 8000f26:	4091      	lsls	r1, r2
 8000f28:	e7f7      	b.n	8000f1a <__aeabi_f2iz+0x2a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	7fffffff 	.word	0x7fffffff

08000f30 <__aeabi_i2f>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d013      	beq.n	8000f5e <__aeabi_i2f+0x2e>
 8000f36:	17c3      	asrs	r3, r0, #31
 8000f38:	18c6      	adds	r6, r0, r3
 8000f3a:	405e      	eors	r6, r3
 8000f3c:	0fc4      	lsrs	r4, r0, #31
 8000f3e:	0030      	movs	r0, r6
 8000f40:	f000 f886 	bl	8001050 <__clzsi2>
 8000f44:	239e      	movs	r3, #158	; 0x9e
 8000f46:	0005      	movs	r5, r0
 8000f48:	1a1b      	subs	r3, r3, r0
 8000f4a:	2b96      	cmp	r3, #150	; 0x96
 8000f4c:	dc0f      	bgt.n	8000f6e <__aeabi_i2f+0x3e>
 8000f4e:	2808      	cmp	r0, #8
 8000f50:	dd01      	ble.n	8000f56 <__aeabi_i2f+0x26>
 8000f52:	3d08      	subs	r5, #8
 8000f54:	40ae      	lsls	r6, r5
 8000f56:	0276      	lsls	r6, r6, #9
 8000f58:	0a76      	lsrs	r6, r6, #9
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	e002      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000f5e:	2400      	movs	r4, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	05c0      	lsls	r0, r0, #23
 8000f66:	4330      	orrs	r0, r6
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4320      	orrs	r0, r4
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6e:	2b99      	cmp	r3, #153	; 0x99
 8000f70:	dd0c      	ble.n	8000f8c <__aeabi_i2f+0x5c>
 8000f72:	2205      	movs	r2, #5
 8000f74:	0031      	movs	r1, r6
 8000f76:	1a12      	subs	r2, r2, r0
 8000f78:	40d1      	lsrs	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	0001      	movs	r1, r0
 8000f7e:	0030      	movs	r0, r6
 8000f80:	311b      	adds	r1, #27
 8000f82:	4088      	lsls	r0, r1
 8000f84:	1e41      	subs	r1, r0, #1
 8000f86:	4188      	sbcs	r0, r1
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2d05      	cmp	r5, #5
 8000f8e:	dc12      	bgt.n	8000fb6 <__aeabi_i2f+0x86>
 8000f90:	0031      	movs	r1, r6
 8000f92:	4f0d      	ldr	r7, [pc, #52]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000f94:	4039      	ands	r1, r7
 8000f96:	0772      	lsls	r2, r6, #29
 8000f98:	d009      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	4030      	ands	r0, r6
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d005      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fa2:	3104      	adds	r1, #4
 8000fa4:	014a      	lsls	r2, r1, #5
 8000fa6:	d502      	bpl.n	8000fae <__aeabi_i2f+0x7e>
 8000fa8:	239f      	movs	r3, #159	; 0x9f
 8000faa:	4039      	ands	r1, r7
 8000fac:	1b5b      	subs	r3, r3, r5
 8000fae:	0189      	lsls	r1, r1, #6
 8000fb0:	0a4e      	lsrs	r6, r1, #9
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	e7d6      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000fb6:	1f6a      	subs	r2, r5, #5
 8000fb8:	4096      	lsls	r6, r2
 8000fba:	0031      	movs	r1, r6
 8000fbc:	4f02      	ldr	r7, [pc, #8]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000fbe:	4039      	ands	r1, r7
 8000fc0:	0772      	lsls	r2, r6, #29
 8000fc2:	d0f4      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fc4:	e7e9      	b.n	8000f9a <__aeabi_i2f+0x6a>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	fbffffff 	.word	0xfbffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e05      	subs	r5, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f000 f83d 	bl	8001050 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0004      	movs	r4, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	dd01      	ble.n	8000fe8 <__aeabi_ui2f+0x1c>
 8000fe4:	3c08      	subs	r4, #8
 8000fe6:	40a5      	lsls	r5, r4
 8000fe8:	026d      	lsls	r5, r5, #9
 8000fea:	0a6d      	lsrs	r5, r5, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4328      	orrs	r0, r5
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd09      	ble.n	8001012 <__aeabi_ui2f+0x46>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0029      	movs	r1, r5
 8001002:	321b      	adds	r2, #27
 8001004:	4091      	lsls	r1, r2
 8001006:	1e4a      	subs	r2, r1, #1
 8001008:	4191      	sbcs	r1, r2
 800100a:	2205      	movs	r2, #5
 800100c:	1a12      	subs	r2, r2, r0
 800100e:	40d5      	lsrs	r5, r2
 8001010:	430d      	orrs	r5, r1
 8001012:	2c05      	cmp	r4, #5
 8001014:	dc12      	bgt.n	800103c <__aeabi_ui2f+0x70>
 8001016:	0029      	movs	r1, r5
 8001018:	4e0c      	ldr	r6, [pc, #48]	; (800104c <__aeabi_ui2f+0x80>)
 800101a:	4031      	ands	r1, r6
 800101c:	076a      	lsls	r2, r5, #29
 800101e:	d009      	beq.n	8001034 <__aeabi_ui2f+0x68>
 8001020:	200f      	movs	r0, #15
 8001022:	4028      	ands	r0, r5
 8001024:	2804      	cmp	r0, #4
 8001026:	d005      	beq.n	8001034 <__aeabi_ui2f+0x68>
 8001028:	3104      	adds	r1, #4
 800102a:	014a      	lsls	r2, r1, #5
 800102c:	d502      	bpl.n	8001034 <__aeabi_ui2f+0x68>
 800102e:	239f      	movs	r3, #159	; 0x9f
 8001030:	4031      	ands	r1, r6
 8001032:	1b1b      	subs	r3, r3, r4
 8001034:	0189      	lsls	r1, r1, #6
 8001036:	0a4d      	lsrs	r5, r1, #9
 8001038:	b2d8      	uxtb	r0, r3
 800103a:	e7db      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103c:	1f62      	subs	r2, r4, #5
 800103e:	4095      	lsls	r5, r2
 8001040:	0029      	movs	r1, r5
 8001042:	4e02      	ldr	r6, [pc, #8]	; (800104c <__aeabi_ui2f+0x80>)
 8001044:	4031      	ands	r1, r6
 8001046:	076a      	lsls	r2, r5, #29
 8001048:	d0f4      	beq.n	8001034 <__aeabi_ui2f+0x68>
 800104a:	e7e9      	b.n	8001020 <__aeabi_ui2f+0x54>
 800104c:	fbffffff 	.word	0xfbffffff

08001050 <__clzsi2>:
 8001050:	211c      	movs	r1, #28
 8001052:	2301      	movs	r3, #1
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	4298      	cmp	r0, r3
 8001058:	d301      	bcc.n	800105e <__clzsi2+0xe>
 800105a:	0c00      	lsrs	r0, r0, #16
 800105c:	3910      	subs	r1, #16
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	4298      	cmp	r0, r3
 8001062:	d301      	bcc.n	8001068 <__clzsi2+0x18>
 8001064:	0a00      	lsrs	r0, r0, #8
 8001066:	3908      	subs	r1, #8
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	4298      	cmp	r0, r3
 800106c:	d301      	bcc.n	8001072 <__clzsi2+0x22>
 800106e:	0900      	lsrs	r0, r0, #4
 8001070:	3904      	subs	r1, #4
 8001072:	a202      	add	r2, pc, #8	; (adr r2, 800107c <__clzsi2+0x2c>)
 8001074:	5c10      	ldrb	r0, [r2, r0]
 8001076:	1840      	adds	r0, r0, r1
 8001078:	4770      	bx	lr
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	02020304 	.word	0x02020304
 8001080:	01010101 	.word	0x01010101
	...

0800108c <__clzdi2>:
 800108c:	b510      	push	{r4, lr}
 800108e:	2900      	cmp	r1, #0
 8001090:	d103      	bne.n	800109a <__clzdi2+0xe>
 8001092:	f7ff ffdd 	bl	8001050 <__clzsi2>
 8001096:	3020      	adds	r0, #32
 8001098:	e002      	b.n	80010a0 <__clzdi2+0x14>
 800109a:	0008      	movs	r0, r1
 800109c:	f7ff ffd8 	bl	8001050 <__clzsi2>
 80010a0:	bd10      	pop	{r4, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)

080010a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x3c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Init+0x3c>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0049      	lsls	r1, r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f810 	bl	80010e4 <HAL_InitTick>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e001      	b.n	80010d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f005 fef6 	bl	8006ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_InitTick+0x88>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02b      	beq.n	8001154 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_InitTick+0x8c>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_InitTick+0x88>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	23fa      	movs	r3, #250	; 0xfa
 8001108:	0098      	lsls	r0, r3, #2
 800110a:	f7ff f805 	bl	8000118 <__udivsi3>
 800110e:	0003      	movs	r3, r0
 8001110:	0019      	movs	r1, r3
 8001112:	0020      	movs	r0, r4
 8001114:	f7ff f800 	bl	8000118 <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fa03 	bl	8002526 <HAL_SYSTICK_Config>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d112      	bne.n	800114a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d80a      	bhi.n	8001140 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f001 f9d2 	bl	80024dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_InitTick+0x90>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00d      	b.n	800115c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114a:	230f      	movs	r3, #15
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b005      	add	sp, #20
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000004 	.word	0x20000004
 8001170:	20000014 	.word	0x20000014
 8001174:	20000000 	.word	0x20000000

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	18d2      	adds	r2, r2, r3
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000004 	.word	0x20000004
 8001198:	20000098 	.word	0x20000098

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000098 	.word	0x20000098

080011b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80011c0:	401a      	ands	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	fe3fffff 	.word	0xfe3fffff

080011d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	23e0      	movs	r3, #224	; 0xe0
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	4013      	ands	r3, r2
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	2104      	movs	r1, #4
 8001206:	400a      	ands	r2, r1
 8001208:	2107      	movs	r1, #7
 800120a:	4091      	lsls	r1, r2
 800120c:	000a      	movs	r2, r1
 800120e:	43d2      	mvns	r2, r2
 8001210:	401a      	ands	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2104      	movs	r1, #4
 8001216:	400b      	ands	r3, r1
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4099      	lsls	r1, r3
 800121c:	000b      	movs	r3, r1
 800121e:	431a      	orrs	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b004      	add	sp, #16
 800122a:	bd80      	pop	{r7, pc}

0800122c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	2104      	movs	r1, #4
 800123e:	400a      	ands	r2, r1
 8001240:	2107      	movs	r1, #7
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2104      	movs	r1, #4
 800124c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800124e:	40da      	lsrs	r2, r3
 8001250:	0013      	movs	r3, r2
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}

0800125a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	23c0      	movs	r3, #192	; 0xc0
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4013      	ands	r3, r2
 800126c:	d101      	bne.n	8001272 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001272:	2300      	movs	r3, #0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	211f      	movs	r1, #31
 8001290:	400a      	ands	r2, r1
 8001292:	210f      	movs	r1, #15
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	43d2      	mvns	r2, r2
 800129a:	401a      	ands	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	0e9b      	lsrs	r3, r3, #26
 80012a0:	210f      	movs	r1, #15
 80012a2:	4019      	ands	r1, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	201f      	movs	r0, #31
 80012a8:	4003      	ands	r3, r0
 80012aa:	4099      	lsls	r1, r3
 80012ac:	000b      	movs	r3, r1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	035b      	lsls	r3, r3, #13
 80012ce:	0b5b      	lsrs	r3, r3, #13
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	0352      	lsls	r2, r2, #13
 80012f0:	0b52      	lsrs	r2, r2, #13
 80012f2:	43d2      	mvns	r2, r2
 80012f4:	401a      	ands	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2203      	movs	r2, #3
 8001310:	4013      	ands	r3, r2
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	0212      	lsls	r2, r2, #8
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	400b      	ands	r3, r1
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <LL_ADC_SetChannelSamplingTime+0x34>)
 800133e:	400b      	ands	r3, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	07ffff00 	.word	0x07ffff00

08001354 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <LL_ADC_EnableInternalRegulator+0x24>)
 8001362:	4013      	ands	r3, r2
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0552      	lsls	r2, r2, #21
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	6fffffe8 	.word	0x6fffffe8

0800137c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	055b      	lsls	r3, r3, #21
 800138c:	401a      	ands	r2, r3
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	055b      	lsls	r3, r3, #21
 8001392:	429a      	cmp	r2, r3
 8001394:	d101      	bne.n	800139a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <LL_ADC_Enable+0x20>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	7fffffe8 	.word	0x7fffffe8

080013c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <LL_ADC_Disable+0x20>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	2202      	movs	r2, #2
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	7fffffe8 	.word	0x7fffffe8

080013ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <LL_ADC_IsEnabled+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_IsEnabled+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	2b02      	cmp	r3, #2
 8001420:	d101      	bne.n	8001426 <LL_ADC_IsDisableOngoing+0x18>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <LL_ADC_IsDisableOngoing+0x1a>
 8001426:	2300      	movs	r3, #0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <LL_ADC_REG_StartConversion+0x20>)
 800143e:	4013      	ands	r3, r2
 8001440:	2204      	movs	r2, #4
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}
 8001450:	7fffffe8 	.word	0x7fffffe8

08001454 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2204      	movs	r2, #4
 8001462:	4013      	ands	r3, r2
 8001464:	2b04      	cmp	r3, #4
 8001466:	d101      	bne.n	800146c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	231f      	movs	r3, #31
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e17f      	b.n	800179e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f005 fd2d 	bl	8006f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2254      	movs	r2, #84	; 0x54
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff5b 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d115      	bne.n	80014f6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff40 	bl	8001354 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d4:	4bb4      	ldr	r3, [pc, #720]	; (80017a8 <HAL_ADC_Init+0x330>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	49b4      	ldr	r1, [pc, #720]	; (80017ac <HAL_ADC_Init+0x334>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f7fe fe1c 	bl	8000118 <__udivsi3>
 80014e0:	0003      	movs	r3, r0
 80014e2:	3301      	adds	r3, #1
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff3e 	bl	800137c <LL_ADC_IsInternalRegulatorEnabled>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d10f      	bne.n	8001524 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001508:	2210      	movs	r2, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	2201      	movs	r2, #1
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800151c:	231f      	movs	r3, #31
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ff93 	bl	8001454 <LL_ADC_REG_IsConversionOngoing>
 800152e:	0003      	movs	r3, r0
 8001530:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	2210      	movs	r2, #16
 8001538:	4013      	ands	r3, r2
 800153a:	d000      	beq.n	800153e <HAL_ADC_Init+0xc6>
 800153c:	e122      	b.n	8001784 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d000      	beq.n	8001546 <HAL_ADC_Init+0xce>
 8001544:	e11e      	b.n	8001784 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a99      	ldr	r2, [pc, #612]	; (80017b0 <HAL_ADC_Init+0x338>)
 800154c:	4013      	ands	r3, r2
 800154e:	2202      	movs	r2, #2
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff ff46 	bl	80013ec <LL_ADC_IsEnabled>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d000      	beq.n	8001566 <HAL_ADC_Init+0xee>
 8001564:	e0ad      	b.n	80016c2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e1b      	ldrb	r3, [r3, #24]
 800156e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001570:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e5b      	ldrb	r3, [r3, #25]
 8001576:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001578:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e9b      	ldrb	r3, [r3, #26]
 800157e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001580:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_ADC_Init+0x118>
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	e000      	b.n	8001592 <HAL_ADC_Init+0x11a>
 8001590:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001592:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001598:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da04      	bge.n	80015ac <HAL_ADC_Init+0x134>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	e001      	b.n	80015b0 <HAL_ADC_Init+0x138>
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80015b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	212c      	movs	r1, #44	; 0x2c
 80015b6:	5c5b      	ldrb	r3, [r3, r1]
 80015b8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015ba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2220      	movs	r2, #32
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d115      	bne.n	80015f8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7e9b      	ldrb	r3, [r3, #26]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	e00b      	b.n	80015f8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	2220      	movs	r2, #32
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	2201      	movs	r2, #1
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	23e0      	movs	r3, #224	; 0xe0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800160e:	4313      	orrs	r3, r2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a65      	ldr	r2, [pc, #404]	; (80017b4 <HAL_ADC_Init+0x33c>)
 800161e:	4013      	ands	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	430a      	orrs	r2, r1
 800162a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	0f9b      	lsrs	r3, r3, #30
 8001632:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001638:	4313      	orrs	r3, r2
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	223c      	movs	r2, #60	; 0x3c
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d111      	bne.n	800166e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0f9b      	lsrs	r3, r3, #30
 8001650:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001656:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800165c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001662:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4313      	orrs	r3, r2
 8001668:	2201      	movs	r2, #1
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <HAL_ADC_Init+0x340>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	430a      	orrs	r2, r1
 8001682:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	23c0      	movs	r3, #192	; 0xc0
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	429a      	cmp	r2, r3
 800168e:	d018      	beq.n	80016c2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	429a      	cmp	r2, r3
 800169a:	d012      	beq.n	80016c2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d00c      	beq.n	80016c2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016a8:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_ADC_Init+0x344>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a44      	ldr	r2, [pc, #272]	; (80017c0 <HAL_ADC_Init+0x348>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	23f0      	movs	r3, #240	; 0xf0
 80016b8:	039b      	lsls	r3, r3, #14
 80016ba:	401a      	ands	r2, r3
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_ADC_Init+0x344>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	001a      	movs	r2, r3
 80016cc:	2100      	movs	r1, #0
 80016ce:	f7ff fd90 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	493a      	ldr	r1, [pc, #232]	; (80017c4 <HAL_ADC_Init+0x34c>)
 80016dc:	001a      	movs	r2, r3
 80016de:	f7ff fd88 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2110      	movs	r1, #16
 80016f6:	4249      	negs	r1, r1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
 80016fc:	e018      	b.n	8001730 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	039b      	lsls	r3, r3, #14
 8001706:	429a      	cmp	r2, r3
 8001708:	d112      	bne.n	8001730 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	3b01      	subs	r3, #1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	221c      	movs	r2, #28
 800171a:	4013      	ands	r3, r2
 800171c:	2210      	movs	r2, #16
 800171e:	4252      	negs	r2, r2
 8001720:	409a      	lsls	r2, r3
 8001722:	0011      	movs	r1, r2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2100      	movs	r1, #0
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff fd78 	bl	800122c <LL_ADC_GetSamplingTimeCommonChannels>
 800173c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001742:	429a      	cmp	r2, r3
 8001744:	d10b      	bne.n	800175e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	2203      	movs	r2, #3
 8001752:	4393      	bics	r3, r2
 8001754:	2201      	movs	r2, #1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800175c:	e01c      	b.n	8001798 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	2212      	movs	r2, #18
 8001764:	4393      	bics	r3, r2
 8001766:	2210      	movs	r2, #16
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	2201      	movs	r2, #1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800177a:	231f      	movs	r3, #31
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001782:	e009      	b.n	8001798 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	2210      	movs	r2, #16
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001790:	231f      	movs	r3, #31
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001798:	231f      	movs	r3, #31
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b008      	add	sp, #32
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	20000014 	.word	0x20000014
 80017ac:	00030d40 	.word	0x00030d40
 80017b0:	fffffefd 	.word	0xfffffefd
 80017b4:	fffe0201 	.word	0xfffe0201
 80017b8:	1ffffc02 	.word	0x1ffffc02
 80017bc:	40012708 	.word	0x40012708
 80017c0:	ffc3ffff 	.word	0xffc3ffff
 80017c4:	07ffff04 	.word	0x07ffff04

080017c8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff fe3d 	bl	8001454 <LL_ADC_REG_IsConversionOngoing>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d15f      	bne.n	800189e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2254      	movs	r2, #84	; 0x54
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_Start_IT+0x24>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e05f      	b.n	80018ac <HAL_ADC_Start_IT+0xe4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2254      	movs	r2, #84	; 0x54
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017f4:	250f      	movs	r5, #15
 80017f6:	197c      	adds	r4, r7, r5
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fb68 	bl	8001ed0 <ADC_Enable>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001804:	197b      	adds	r3, r7, r5
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d143      	bne.n	8001894 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <HAL_ADC_Start_IT+0xec>)
 8001812:	4013      	ands	r3, r2
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	221c      	movs	r2, #28
 800182a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2254      	movs	r2, #84	; 0x54
 8001830:	2100      	movs	r1, #0
 8001832:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	211c      	movs	r1, #28
 8001840:	438a      	bics	r2, r1
 8001842:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	2b08      	cmp	r3, #8
 800184a:	d108      	bne.n	800185e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2108      	movs	r1, #8
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
          break;
 800185c:	e008      	b.n	8001870 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2104      	movs	r1, #4
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
          break;
 800186e:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	2b00      	cmp	r3, #0
 8001876:	d107      	bne.n	8001888 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2110      	movs	r1, #16
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fdcf 	bl	8001430 <LL_ADC_REG_StartConversion>
 8001892:	e008      	b.n	80018a6 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2254      	movs	r2, #84	; 0x54
 8001898:	2100      	movs	r1, #0
 800189a:	5499      	strb	r1, [r3, r2]
 800189c:	e003      	b.n	80018a6 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018a6:	230f      	movs	r3, #15
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	781b      	ldrb	r3, [r3, #0]
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}
 80018b4:	fffff0fe 	.word	0xfffff0fe

080018b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d017      	beq.n	8001924 <HAL_ADC_IRQHandler+0x54>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	2210      	movs	r2, #16
 8001902:	4013      	ands	r3, r2
 8001904:	d106      	bne.n	8001914 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	0018      	movs	r0, r3
 8001918:	f000 fd24 	bl	8002364 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2204      	movs	r2, #4
 8001928:	4013      	ands	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_ADC_IRQHandler+0x64>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d107      	bne.n	8001944 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2208      	movs	r2, #8
 8001938:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800193a:	d04d      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2208      	movs	r2, #8
 8001940:	4013      	ands	r3, r2
 8001942:	d049      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	2210      	movs	r2, #16
 800194a:	4013      	ands	r3, r2
 800194c:	d106      	bne.n	800195c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fc7a 	bl	800125a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d02e      	beq.n	80019c8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e9b      	ldrb	r3, [r3, #26]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d12a      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2208      	movs	r2, #8
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d123      	bne.n	80019c8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fd65 	bl	8001454 <LL_ADC_REG_IsConversionOngoing>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d110      	bne.n	80019b0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	210c      	movs	r1, #12
 800199a:	438a      	bics	r2, r1
 800199c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_ADC_IRQHandler+0x22c>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	2201      	movs	r2, #1
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58
 80019ae:	e00b      	b.n	80019c8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	2220      	movs	r2, #32
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2201      	movs	r2, #1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f005 f956 	bl	8006c7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	220c      	movs	r2, #12
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	4013      	ands	r3, r2
 80019de:	d012      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x136>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	4013      	ands	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	0252      	lsls	r2, r2, #9
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 f881 	bl	8001b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d014      	beq.n	8001a3a <HAL_ADC_IRQHandler+0x16a>
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d00f      	beq.n	8001a3a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0292      	lsls	r2, r2, #10
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fc8a 	bl	8002344 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0052      	lsls	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d014      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x19e>
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d00f      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	02d2      	lsls	r2, r2, #11
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 fc78 	bl	8002354 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2210      	movs	r2, #16
 8001a72:	4013      	ands	r3, r2
 8001a74:	d02b      	beq.n	8001ace <HAL_ADC_IRQHandler+0x1fe>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d027      	beq.n	8001ace <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e008      	b.n	8001a9e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fc36 	bl	8001302 <LL_ADC_REG_GetDMATransfer>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d110      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f825 	bl	8001b10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x224>
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	019b      	lsls	r3, r3, #6
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d008      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 fc45 	bl	8002374 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	0192      	lsls	r2, r2, #6
 8001af2:	601a      	str	r2, [r3, #0]
  }
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b006      	add	sp, #24
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	fffffefe 	.word	0xfffffefe

08001b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2317      	movs	r3, #23
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2254      	movs	r2, #84	; 0x54
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x24>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e1c0      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x3a6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2254      	movs	r2, #84	; 0x54
 8001b48:	2101      	movs	r1, #1
 8001b4a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff fc7f 	bl	8001454 <LL_ADC_REG_IsConversionOngoing>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d000      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x3c>
 8001b5a:	e1a3      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d100      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x46>
 8001b64:	e143      	b.n	8001dee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b76:	4ac1      	ldr	r2, [pc, #772]	; (8001e7c <HAL_ADC_ConfigChannel+0x35c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d108      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	0010      	movs	r0, r2
 8001b88:	f7ff fb98 	bl	80012bc <LL_ADC_REG_SetSequencerChAdd>
 8001b8c:	e0c9      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	211f      	movs	r1, #31
 8001b98:	400b      	ands	r3, r1
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	4099      	lsls	r1, r3
 8001b9e:	000b      	movs	r3, r1
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	035b      	lsls	r3, r3, #13
 8001bac:	0b5b      	lsrs	r3, r3, #13
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x9c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e9b      	lsrs	r3, r3, #26
 8001bb6:	221f      	movs	r2, #31
 8001bb8:	4013      	ands	r3, r2
 8001bba:	e098      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d000      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0xa8>
 8001bc6:	e091      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1cc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d000      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0xb4>
 8001bd2:	e089      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x1c8>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d000      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0xc0>
 8001bde:	e081      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x1c4>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2208      	movs	r2, #8
 8001be6:	4013      	ands	r3, r2
 8001be8:	d000      	beq.n	8001bec <HAL_ADC_ConfigChannel+0xcc>
 8001bea:	e079      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c0>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d000      	beq.n	8001bf8 <HAL_ADC_ConfigChannel+0xd8>
 8001bf6:	e071      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x1bc>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d000      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0xe4>
 8001c02:	e069      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x1b8>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d000      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0xf0>
 8001c0e:	e061      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1b4>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	4013      	ands	r3, r2
 8001c18:	d000      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0xfc>
 8001c1a:	e059      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x1b0>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	d151      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1ac>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d149      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1a8>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d141      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x1a4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d139      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1a0>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	4013      	ands	r3, r2
 8001c56:	d131      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x19c>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	019b      	lsls	r3, r3, #6
 8001c60:	4013      	ands	r3, r2
 8001c62:	d129      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x198>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d121      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x194>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d119      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x190>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	025b      	lsls	r3, r3, #9
 8001c84:	4013      	ands	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x18c>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	4013      	ands	r3, r2
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x188>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	02db      	lsls	r3, r3, #11
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d001      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x184>
 8001ca0:	2312      	movs	r3, #18
 8001ca2:	e024      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e022      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ca8:	2311      	movs	r3, #17
 8001caa:	e020      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cac:	2310      	movs	r3, #16
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	e01c      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	e01a      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cb8:	230d      	movs	r3, #13
 8001cba:	e018      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	e016      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cc0:	230b      	movs	r3, #11
 8001cc2:	e014      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	e012      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cc8:	2309      	movs	r3, #9
 8001cca:	e010      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ccc:	2308      	movs	r3, #8
 8001cce:	e00e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	e00c      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	e00a      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cd8:	2305      	movs	r3, #5
 8001cda:	e008      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e006      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1ce>
 8001cec:	2300      	movs	r3, #0
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6852      	ldr	r2, [r2, #4]
 8001cf2:	201f      	movs	r0, #31
 8001cf4:	4002      	ands	r2, r0
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d808      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	f7ff faad 	bl	800127c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	001a      	movs	r2, r3
 8001d30:	f7ff faf4 	bl	800131c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db00      	blt.n	8001d3e <HAL_ADC_ConfigChannel+0x21e>
 8001d3c:	e0bc      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fa49 	bl	80011d8 <LL_ADC_GetCommonPathInternalCh>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a4d      	ldr	r2, [pc, #308]	; (8001e84 <HAL_ADC_ConfigChannel+0x364>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d122      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d5c:	d11d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0412      	lsls	r2, r2, #16
 8001d64:	4313      	orrs	r3, r2
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001d68:	0019      	movs	r1, r3
 8001d6a:	0010      	movs	r0, r2
 8001d6c:	f7ff fa20 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_ADC_ConfigChannel+0x368>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4945      	ldr	r1, [pc, #276]	; (8001e8c <HAL_ADC_ConfigChannel+0x36c>)
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7fe f9ce 	bl	8000118 <__udivsi3>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	0013      	movs	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	189b      	adds	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d98:	e08e      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <HAL_ADC_ConfigChannel+0x370>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10e      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	045b      	lsls	r3, r3, #17
 8001daa:	4013      	ands	r3, r2
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	0452      	lsls	r2, r2, #17
 8001db4:	4313      	orrs	r3, r2
 8001db6:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001db8:	0019      	movs	r1, r3
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f7ff f9f8 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
 8001dc0:	e07a      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_ADC_ConfigChannel+0x374>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d000      	beq.n	8001dce <HAL_ADC_ConfigChannel+0x2ae>
 8001dcc:	e074      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	03db      	lsls	r3, r3, #15
 8001dd4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dd6:	d000      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x2ba>
 8001dd8:	e06e      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	03d2      	lsls	r2, r2, #15
 8001de0:	4313      	orrs	r3, r2
 8001de2:	4a27      	ldr	r2, [pc, #156]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001de4:	0019      	movs	r1, r3
 8001de6:	0010      	movs	r0, r2
 8001de8:	f7ff f9e2 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
 8001dec:	e064      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d004      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_ADC_ConfigChannel+0x35c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d107      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	0010      	movs	r0, r2
 8001e10:	f7ff fa65 	bl	80012de <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da4d      	bge.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff f9da 	bl	80011d8 <LL_ADC_GetCommonPathInternalCh>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_ADC_ConfigChannel+0x364>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_ADC_ConfigChannel+0x378>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f7ff f9b7 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
 8001e42:	e039      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_ADC_ConfigChannel+0x370>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d108      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_ADC_ConfigChannel+0x37c>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001e56:	0019      	movs	r1, r3
 8001e58:	0010      	movs	r0, r2
 8001e5a:	f7ff f9a9 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
 8001e5e:	e02b      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_ADC_ConfigChannel+0x374>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d126      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_ADC_ConfigChannel+0x380>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <HAL_ADC_ConfigChannel+0x360>)
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f7ff f99b 	bl	80011b0 <LL_ADC_SetCommonPathInternalCh>
 8001e7a:	e01d      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x398>
 8001e7c:	80000004 	.word	0x80000004
 8001e80:	40012708 	.word	0x40012708
 8001e84:	b0001000 	.word	0xb0001000
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	00030d40 	.word	0x00030d40
 8001e90:	b8004000 	.word	0xb8004000
 8001e94:	b4002000 	.word	0xb4002000
 8001e98:	ff7fffff 	.word	0xff7fffff
 8001e9c:	feffffff 	.word	0xfeffffff
 8001ea0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2317      	movs	r3, #23
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2254      	movs	r2, #84	; 0x54
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ec0:	2317      	movs	r3, #23
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fa83 	bl	80013ec <LL_ADC_IsEnabled>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d000      	beq.n	8001eec <ADC_Enable+0x1c>
 8001eea:	e069      	b.n	8001fc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <ADC_Enable+0xfc>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	2210      	movs	r2, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2201      	movs	r2, #1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e056      	b.n	8001fc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fa43 	bl	80013a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <ADC_Enable+0x100>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f959 	bl	80011d8 <LL_ADC_GetCommonPathInternalCh>
 8001f26:	0002      	movs	r2, r0
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <ADC_Enable+0x104>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4928      	ldr	r1, [pc, #160]	; (8001fd8 <ADC_Enable+0x108>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7fe f8ee 	bl	8000118 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001f40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f42:	e002      	b.n	8001f4a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d033      	beq.n	8001fc0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f58:	f7ff f920 	bl	800119c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f60:	e027      	b.n	8001fb2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff fa40 	bl	80013ec <LL_ADC_IsEnabled>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d104      	bne.n	8001f7a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff fa15 	bl	80013a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f7a:	f7ff f90f 	bl	800119c <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d914      	bls.n	8001fb2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00d      	beq.n	8001fb2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d1d0      	bne.n	8001f62 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	80000017 	.word	0x80000017
 8001fd0:	40012708 	.word	0x40012708
 8001fd4:	20000014 	.word	0x20000014
 8001fd8:	00030d40 	.word	0x00030d40

08001fdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff fa10 	bl	800140e <LL_ADC_IsDisableOngoing>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff f9f8 	bl	80013ec <LL_ADC_IsEnabled>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d046      	beq.n	800208e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d143      	bne.n	800208e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2205      	movs	r2, #5
 800200e:	4013      	ands	r3, r2
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10d      	bne.n	8002030 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff f9d5 	bl	80013c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2203      	movs	r2, #3
 8002024:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff f8b9 	bl	800119c <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800202e:	e028      	b.n	8002082 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	2210      	movs	r2, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e021      	b.n	8002090 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800204c:	f7ff f8a6 	bl	800119c <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d913      	bls.n	8002082 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d00d      	beq.n	8002082 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	2210      	movs	r2, #16
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e006      	b.n	8002090 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d1de      	bne.n	800204c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}

08002098 <LL_ADC_SetCalibrationFactor>:
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	22b4      	movs	r2, #180	; 0xb4
 80020a6:	589b      	ldr	r3, [r3, r2]
 80020a8:	227f      	movs	r2, #127	; 0x7f
 80020aa:	4393      	bics	r3, r2
 80020ac:	001a      	movs	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	21b4      	movs	r1, #180	; 0xb4
 80020b6:	505a      	str	r2, [r3, r1]
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <LL_ADC_GetCalibrationFactor>:
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	22b4      	movs	r2, #180	; 0xb4
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	227f      	movs	r2, #127	; 0x7f
 80020d0:	4013      	ands	r3, r2
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <LL_ADC_Enable>:
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <LL_ADC_Enable+0x20>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	7fffffe8 	.word	0x7fffffe8

08002100 <LL_ADC_Disable>:
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <LL_ADC_Disable+0x20>)
 800210e:	4013      	ands	r3, r2
 8002110:	2202      	movs	r2, #2
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}
 8002120:	7fffffe8 	.word	0x7fffffe8

08002124 <LL_ADC_IsEnabled>:
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <LL_ADC_IsEnabled+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_IsEnabled+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <LL_ADC_StartCalibration>:
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <LL_ADC_StartCalibration+0x24>)
 8002156:	4013      	ands	r3, r2
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0612      	lsls	r2, r2, #24
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	7fffffe8 	.word	0x7fffffe8

08002170 <LL_ADC_IsCalibrationOnGoing>:
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	0fdb      	lsrs	r3, r3, #31
 800217e:	07da      	lsls	r2, r3, #31
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	429a      	cmp	r2, r3
 8002186:	d101      	bne.n	800218c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800218c:	2300      	movs	r3, #0
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2254      	movs	r2, #84	; 0x54
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0ba      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x194>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2254      	movs	r2, #84	; 0x54
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021be:	2317      	movs	r3, #23
 80021c0:	18fc      	adds	r4, r7, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff ff09 	bl	8001fdc <ADC_Disable>
 80021ca:	0003      	movs	r3, r0
 80021cc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff ffa6 	bl	8002124 <LL_ADC_IsEnabled>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d000      	beq.n	80021de <HAL_ADCEx_Calibration_Start+0x46>
 80021dc:	e099      	b.n	8002312 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_ADCEx_Calibration_Start+0x19c>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	2202      	movs	r2, #2
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002206:	400a      	ands	r2, r1
 8002208:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e02d      	b.n	800226c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff ff97 	bl	8002148 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800221a:	e014      	b.n	8002246 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3301      	adds	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d90d      	bls.n	8002246 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	2212      	movs	r2, #18
 8002230:	4393      	bics	r3, r2
 8002232:	2210      	movs	r2, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2254      	movs	r2, #84	; 0x54
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e072      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff ff90 	bl	8002170 <LL_ADC_IsCalibrationOnGoing>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d1e3      	bne.n	800221c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff ff31 	bl	80020c0 <LL_ADC_GetCalibrationFactor>
 800225e:	0002      	movs	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	189b      	adds	r3, r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b07      	cmp	r3, #7
 8002270:	d9ce      	bls.n	8002210 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002272:	69f9      	ldr	r1, [r7, #28]
 8002274:	69b8      	ldr	r0, [r7, #24]
 8002276:	f7fd ff4f 	bl	8000118 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff ff2a 	bl	80020dc <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	0011      	movs	r1, r2
 8002290:	0018      	movs	r0, r3
 8002292:	f7ff ff01 	bl	8002098 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff ff30 	bl	8002100 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a0:	f7fe ff7c 	bl	800119c <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022a8:	e01b      	b.n	80022e2 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022aa:	f7fe ff77 	bl	800119c <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d914      	bls.n	80022e2 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <LL_ADC_IsEnabled>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	2210      	movs	r2, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2201      	movs	r2, #1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e024      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7ff ff1c 	bl	8002124 <LL_ADC_IsEnabled>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d1dc      	bne.n	80022aa <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	2203      	movs	r2, #3
 8002306:	4393      	bics	r3, r2
 8002308:	2201      	movs	r2, #1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
 8002310:	e005      	b.n	800231e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	2210      	movs	r2, #16
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2254      	movs	r2, #84	; 0x54
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b009      	add	sp, #36	; 0x24
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	fffffefd 	.word	0xfffffefd
 8002338:	00008003 	.word	0x00008003
 800233c:	ffff7ffc 	.word	0xffff7ffc
 8002340:	0002f1ff 	.word	0x0002f1ff

08002344 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b7f      	cmp	r3, #127	; 0x7f
 8002396:	d809      	bhi.n	80023ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002398:	1dfb      	adds	r3, r7, #7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	001a      	movs	r2, r3
 800239e:	231f      	movs	r3, #31
 80023a0:	401a      	ands	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_EnableIRQ+0x30>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	4091      	lsls	r1, r2
 80023a8:	000a      	movs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	0002      	movs	r2, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b7f      	cmp	r3, #127	; 0x7f
 80023cc:	d828      	bhi.n	8002420 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <__NVIC_SetPriority+0xd4>)
 80023d0:	1dfb      	adds	r3, r7, #7
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	33c0      	adds	r3, #192	; 0xc0
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	589b      	ldr	r3, [r3, r2]
 80023de:	1dfa      	adds	r2, r7, #7
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	0011      	movs	r1, r2
 80023e4:	2203      	movs	r2, #3
 80023e6:	400a      	ands	r2, r1
 80023e8:	00d2      	lsls	r2, r2, #3
 80023ea:	21ff      	movs	r1, #255	; 0xff
 80023ec:	4091      	lsls	r1, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	43d2      	mvns	r2, r2
 80023f2:	401a      	ands	r2, r3
 80023f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	22ff      	movs	r2, #255	; 0xff
 80023fc:	401a      	ands	r2, r3
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	2303      	movs	r3, #3
 8002406:	4003      	ands	r3, r0
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800240c:	481f      	ldr	r0, [pc, #124]	; (800248c <__NVIC_SetPriority+0xd4>)
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	430a      	orrs	r2, r1
 8002418:	33c0      	adds	r3, #192	; 0xc0
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800241e:	e031      	b.n	8002484 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <__NVIC_SetPriority+0xd8>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	0019      	movs	r1, r3
 8002428:	230f      	movs	r3, #15
 800242a:	400b      	ands	r3, r1
 800242c:	3b08      	subs	r3, #8
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3306      	adds	r3, #6
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	18d3      	adds	r3, r2, r3
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1dfa      	adds	r2, r7, #7
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	0011      	movs	r1, r2
 8002440:	2203      	movs	r2, #3
 8002442:	400a      	ands	r2, r1
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	21ff      	movs	r1, #255	; 0xff
 8002448:	4091      	lsls	r1, r2
 800244a:	000a      	movs	r2, r1
 800244c:	43d2      	mvns	r2, r2
 800244e:	401a      	ands	r2, r3
 8002450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	22ff      	movs	r2, #255	; 0xff
 8002458:	401a      	ands	r2, r3
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	2303      	movs	r3, #3
 8002462:	4003      	ands	r3, r0
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <__NVIC_SetPriority+0xd8>)
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	001c      	movs	r4, r3
 8002470:	230f      	movs	r3, #15
 8002472:	4023      	ands	r3, r4
 8002474:	3b08      	subs	r3, #8
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	430a      	orrs	r2, r1
 800247a:	3306      	adds	r3, #6
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	18c3      	adds	r3, r0, r3
 8002480:	3304      	adds	r3, #4
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b003      	add	sp, #12
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	045b      	lsls	r3, r3, #17
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d301      	bcc.n	80024ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a8:	2301      	movs	r3, #1
 80024aa:	e010      	b.n	80024ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <SysTick_Config+0x44>)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	3a01      	subs	r2, #1
 80024b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b4:	2301      	movs	r3, #1
 80024b6:	425b      	negs	r3, r3
 80024b8:	2103      	movs	r1, #3
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff ff7c 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SysTick_Config+0x44>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <SysTick_Config+0x44>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	210f      	movs	r1, #15
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	1c02      	adds	r2, r0, #0
 80024ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	0002      	movs	r2, r0
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b25b      	sxtb	r3, r3
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ff33 	bl	8002384 <__NVIC_EnableIRQ>
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ffaf 	bl	8002494 <SysTick_Config>
 8002536:	0003      	movs	r3, r0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e050      	b.n	80025f4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2225      	movs	r2, #37	; 0x25
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e041      	b.n	80025f4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	210e      	movs	r1, #14
 800257c:	438a      	bics	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	491c      	ldr	r1, [pc, #112]	; (80025fc <HAL_DMA_Abort+0xbc>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	438a      	bics	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_DMA_Abort+0xc0>)
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	221c      	movs	r2, #28
 80025aa:	4013      	ands	r3, r2
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_DMA_Abort+0xc0>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <HAL_DMA_Abort+0xbc>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2225      	movs	r2, #37	; 0x25
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2224      	movs	r2, #36	; 0x24
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fffffeff 	.word	0xfffffeff
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	210f      	movs	r1, #15
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2225      	movs	r2, #37	; 0x25
 8002618:	5c9b      	ldrb	r3, [r3, r2]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d006      	beq.n	800262e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e049      	b.n	80026c2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	210e      	movs	r1, #14
 800263a:	438a      	bics	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	438a      	bics	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	491d      	ldr	r1, [pc, #116]	; (80026d0 <HAL_DMA_Abort_IT+0xcc>)
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_DMA_Abort_IT+0xd0>)
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	221c      	movs	r2, #28
 8002668:	4013      	ands	r3, r2
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_DMA_Abort_IT+0xd0>)
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800267c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	490f      	ldr	r1, [pc, #60]	; (80026d0 <HAL_DMA_Abort_IT+0xcc>)
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800269e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2225      	movs	r2, #37	; 0x25
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	0010      	movs	r0, r2
 80026c0:	4798      	blx	r3
    }
  }
  return status;
 80026c2:	230f      	movs	r3, #15
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	781b      	ldrb	r3, [r3, #0]
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	fffffeff 	.word	0xfffffeff
 80026d4:	40020000 	.word	0x40020000

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e6:	e147      	b.n	8002978 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4091      	lsls	r1, r2
 80026f2:	000a      	movs	r2, r1
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d100      	bne.n	8002700 <HAL_GPIO_Init+0x28>
 80026fe:	e138      	b.n	8002972 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	4013      	ands	r3, r2
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x40>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	4013      	ands	r3, r2
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	409a      	lsls	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	43da      	mvns	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	0013      	movs	r3, r2
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
 8002754:	0013      	movs	r3, r2
 8002756:	43da      	mvns	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	2201      	movs	r2, #1
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	43da      	mvns	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	58d3      	ldr	r3, [r2, r3]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2207      	movs	r2, #7
 80027d4:	4013      	ands	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2107      	movs	r1, #7
 80027ee:	400b      	ands	r3, r1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	401a      	ands	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	23c0      	movs	r3, #192	; 0xc0
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	4013      	ands	r3, r2
 8002848:	d100      	bne.n	800284c <HAL_GPIO_Init+0x174>
 800284a:	e092      	b.n	8002972 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3318      	adds	r3, #24
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	589b      	ldr	r3, [r3, r2]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2203      	movs	r2, #3
 800285e:	4013      	ands	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	220f      	movs	r2, #15
 8002864:	409a      	lsls	r2, r3
 8002866:	0013      	movs	r3, r2
 8002868:	43da      	mvns	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	23a0      	movs	r3, #160	; 0xa0
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	429a      	cmp	r2, r3
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x1ca>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_GPIO_Init+0x2bc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x1c6>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a44      	ldr	r2, [pc, #272]	; (8002998 <HAL_GPIO_Init+0x2c0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x1c2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_GPIO_Init+0x2c4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x1be>
 8002892:	2303      	movs	r3, #3
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x1cc>
 8002896:	2305      	movs	r3, #5
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x1cc>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x1cc>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x1cc>
 80028a2:	2300      	movs	r3, #0
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	2103      	movs	r1, #3
 80028a8:	400a      	ands	r2, r1
 80028aa:	00d2      	lsls	r2, r2, #3
 80028ac:	4093      	lsls	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80028b4:	4936      	ldr	r1, [pc, #216]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3318      	adds	r3, #24
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	035b      	lsls	r3, r3, #13
 80028da:	4013      	ands	r3, r2
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	4013      	ands	r3, r2
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 8002918:	2384      	movs	r3, #132	; 0x84
 800291a:	58d3      	ldr	r3, [r2, r3]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43da      	mvns	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	4013      	ands	r3, r2
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800293c:	4914      	ldr	r1, [pc, #80]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 800293e:	2284      	movs	r2, #132	; 0x84
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	58d3      	ldr	r3, [r2, r3]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43da      	mvns	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	025b      	lsls	r3, r3, #9
 800295e:	4013      	ands	r3, r2
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	40da      	lsrs	r2, r3
 8002980:	1e13      	subs	r3, r2, #0
 8002982:	d000      	beq.n	8002986 <HAL_GPIO_Init+0x2ae>
 8002984:	e6b0      	b.n	80026e8 <HAL_GPIO_Init+0x10>
  }
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b006      	add	sp, #24
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021800 	.word	0x40021800
 8002994:	50000400 	.word	0x50000400
 8002998:	50000800 	.word	0x50000800
 800299c:	50000c00 	.word	0x50000c00

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	0008      	movs	r0, r1
 80029aa:	0011      	movs	r1, r2
 80029ac:	1cbb      	adds	r3, r7, #2
 80029ae:	1c02      	adds	r2, r0, #0
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	1c7b      	adds	r3, r7, #1
 80029b4:	1c0a      	adds	r2, r1, #0
 80029b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b8:	1c7b      	adds	r3, r7, #1
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c0:	1cbb      	adds	r3, r7, #2
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	881a      	ldrh	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d11f      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	0013      	movs	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4912      	ldr	r1, [pc, #72]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fd fb82 	bl	8000118 <__udivsi3>
 8002a14:	0003      	movs	r3, r0
 8002a16:	3301      	adds	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a1a:	e008      	b.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e001      	b.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e009      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	401a      	ands	r2, r3
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d0ed      	beq.n	8002a1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b004      	add	sp, #16
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	fffff9ff 	.word	0xfffff9ff
 8002a54:	20000014 	.word	0x20000014
 8002a58:	000f4240 	.word	0x000f4240

08002a5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	23e0      	movs	r3, #224	; 0xe0
 8002a66:	01db      	lsls	r3, r3, #7
 8002a68:	4013      	ands	r3, r2
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000

08002a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e2fe      	b.n	8003084 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1e>
 8002a90:	e07c      	b.n	8002b8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a92:	4bc3      	ldr	r3, [pc, #780]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2238      	movs	r2, #56	; 0x38
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9c:	4bc0      	ldr	r3, [pc, #768]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3e>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	4bb9      	ldr	r3, [pc, #740]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	029b      	lsls	r3, r3, #10
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d062      	beq.n	8002b8a <HAL_RCC_OscConfig+0x116>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d15e      	bne.n	8002b8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e2d9      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x78>
 8002adc:	4bb0      	ldr	r3, [pc, #704]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4baf      	ldr	r3, [pc, #700]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0249      	lsls	r1, r1, #9
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e020      	b.n	8002b2e <HAL_RCC_OscConfig+0xba>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	23a0      	movs	r3, #160	; 0xa0
 8002af2:	02db      	lsls	r3, r3, #11
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d10e      	bne.n	8002b16 <HAL_RCC_OscConfig+0xa2>
 8002af8:	4ba9      	ldr	r3, [pc, #676]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4ba8      	ldr	r3, [pc, #672]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	02c9      	lsls	r1, r1, #11
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	4ba6      	ldr	r3, [pc, #664]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4ba5      	ldr	r3, [pc, #660]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e00b      	b.n	8002b2e <HAL_RCC_OscConfig+0xba>
 8002b16:	4ba2      	ldr	r3, [pc, #648]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4ba1      	ldr	r3, [pc, #644]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	49a1      	ldr	r1, [pc, #644]	; (8002da4 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	4b9f      	ldr	r3, [pc, #636]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b9e      	ldr	r3, [pc, #632]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b28:	499f      	ldr	r1, [pc, #636]	; (8002da8 <HAL_RCC_OscConfig+0x334>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d014      	beq.n	8002b60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fb31 	bl	800119c <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fb2c 	bl	800119c <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e298      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	4b93      	ldr	r3, [pc, #588]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xcc>
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fb1c 	bl	800119c <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fb17 	bl	800119c <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e283      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7c:	4b88      	ldr	r3, [pc, #544]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	4013      	ands	r3, r2
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0xf6>
 8002b88:	e000      	b.n	8002b8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2202      	movs	r2, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x124>
 8002b96:	e099      	b.n	8002ccc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b98:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2238      	movs	r2, #56	; 0x38
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba2:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x144>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d002      	beq.n	8002bbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d135      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbe:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x162>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e256      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a74      	ldr	r2, [pc, #464]	; (8002dac <HAL_RCC_OscConfig+0x338>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	021a      	lsls	r2, r3, #8
 8002be6:	4b6e      	ldr	r3, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6e      	ldr	r2, [pc, #440]	; (8002db0 <HAL_RCC_OscConfig+0x33c>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c06:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	4013      	ands	r3, r2
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x340>)
 8002c12:	40da      	lsrs	r2, r3
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x344>)
 8002c16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x348>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fe fa61 	bl	80010e4 <HAL_InitTick>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d051      	beq.n	8002cca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e22c      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d030      	beq.n	8002c94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x33c>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c46:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0049      	lsls	r1, r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe faa2 	bl	800119c <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fa9d 	bl	800119c <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e209      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_RCC_OscConfig+0x338>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e01b      	b.n	8002ccc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002c9a:	4949      	ldr	r1, [pc, #292]	; (8002dc0 <HAL_RCC_OscConfig+0x34c>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fa7c 	bl	800119c <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fa77 	bl	800119c <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1e3      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x236>
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d047      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2238      	movs	r2, #56	; 0x38
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b18      	cmp	r3, #24
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d03c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2f2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d138      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e1c5      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d019      	beq.n	8002d34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d04:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	2101      	movs	r1, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fa46 	bl	800119c <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d16:	f7fe fa41 	bl	800119c <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1ad      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d0f1      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2a2>
 8002d32:	e018      	b.n	8002d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002d34:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fa2c 	bl	800119c <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fa27 	bl	800119c <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e193      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d1f1      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2fe>
 8002d70:	e0c6      	b.n	8002f00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	231f      	movs	r3, #31
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2238      	movs	r2, #56	; 0x38
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d11e      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x32c>)
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <HAL_RCC_OscConfig+0x31e>
 8002d90:	e0b6      	b.n	8002f00 <HAL_RCC_OscConfig+0x48c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d000      	beq.n	8002d9c <HAL_RCC_OscConfig+0x328>
 8002d9a:	e0b1      	b.n	8002f00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e171      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	fffeffff 	.word	0xfffeffff
 8002da8:	fffbffff 	.word	0xfffbffff
 8002dac:	ffff80ff 	.word	0xffff80ff
 8002db0:	ffffc7ff 	.word	0xffffc7ff
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dc4:	4bb1      	ldr	r3, [pc, #708]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	055b      	lsls	r3, r3, #21
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x360>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x362>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d011      	beq.n	8002dfe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4bac      	ldr	r3, [pc, #688]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dde:	4bab      	ldr	r3, [pc, #684]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0549      	lsls	r1, r1, #21
 8002de4:	430a      	orrs	r2, r1
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002de8:	4ba8      	ldr	r3, [pc, #672]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002df6:	231f      	movs	r3, #31
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfe:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <HAL_RCC_OscConfig+0x61c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d11a      	bne.n	8002e40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0a:	4ba1      	ldr	r3, [pc, #644]	; (8003090 <HAL_RCC_OscConfig+0x61c>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCC_OscConfig+0x61c>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0049      	lsls	r1, r1, #1
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002e18:	f7fe f9c0 	bl	800119c <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe f9bb 	bl	800119c <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e127      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <HAL_RCC_OscConfig+0x61c>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3e2>
 8002e48:	4b90      	ldr	r3, [pc, #576]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e4c:	4b8f      	ldr	r3, [pc, #572]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	430a      	orrs	r2, r1
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x404>
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e62:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e64:	2104      	movs	r1, #4
 8002e66:	430a      	orrs	r2, r1
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e6e:	4b87      	ldr	r3, [pc, #540]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x41c>
 8002e78:	4b84      	ldr	r3, [pc, #528]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e7c:	4b83      	ldr	r3, [pc, #524]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	438a      	bics	r2, r1
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e84:	4b81      	ldr	r3, [pc, #516]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e88:	4b80      	ldr	r3, [pc, #512]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d014      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe f980 	bl	800119c <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea0:	e009      	b.n	8002eb6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f97b 	bl	800119c <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_RCC_OscConfig+0x620>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0e6      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x42e>
 8002ec0:	e013      	b.n	8002eea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe f96b 	bl	800119c <HAL_GetTick>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eca:	e009      	b.n	8002ee0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe f966 	bl	800119c <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x620>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0d1      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002eea:	231f      	movs	r3, #31
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef8:	4b64      	ldr	r3, [pc, #400]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002efa:	4967      	ldr	r1, [pc, #412]	; (8003098 <HAL_RCC_OscConfig+0x624>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d100      	bne.n	8002f0a <HAL_RCC_OscConfig+0x496>
 8002f08:	e0bb      	b.n	8003082 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2238      	movs	r2, #56	; 0x38
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d100      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4a4>
 8002f16:	e07b      	b.n	8003010 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d156      	bne.n	8002fce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f26:	495d      	ldr	r1, [pc, #372]	; (800309c <HAL_RCC_OscConfig+0x628>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f936 	bl	800119c <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe f931 	bl	800119c <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e09d      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	049b      	lsls	r3, r3, #18
 8002f50:	4013      	ands	r3, r2
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4a51      	ldr	r2, [pc, #324]	; (80030a0 <HAL_RCC_OscConfig+0x62c>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	431a      	orrs	r2, r3
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	0449      	lsls	r1, r1, #17
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b3c      	ldr	r3, [pc, #240]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0549      	lsls	r1, r1, #21
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f8fa 	bl	800119c <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe f8f5 	bl	800119c <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e061      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	049b      	lsls	r3, r3, #18
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x53a>
 8002fcc:	e059      	b.n	8003082 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002fd4:	4931      	ldr	r1, [pc, #196]	; (800309c <HAL_RCC_OscConfig+0x628>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe f8df 	bl	800119c <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f8da 	bl	800119c <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e046      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff6:	4b25      	ldr	r3, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	049b      	lsls	r3, r3, #18
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x618>)
 8003008:	4926      	ldr	r1, [pc, #152]	; (80030a4 <HAL_RCC_OscConfig+0x630>)
 800300a:	400a      	ands	r2, r1
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	e038      	b.n	8003082 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e033      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x618>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2203      	movs	r2, #3
 8003026:	401a      	ands	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	429a      	cmp	r2, r3
 800302e:	d126      	bne.n	800307e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2270      	movs	r2, #112	; 0x70
 8003034:	401a      	ands	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d11f      	bne.n	800307e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	23fe      	movs	r3, #254	; 0xfe
 8003042:	01db      	lsls	r3, r3, #7
 8003044:	401a      	ands	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d116      	bne.n	800307e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	23f8      	movs	r3, #248	; 0xf8
 8003054:	039b      	lsls	r3, r3, #14
 8003056:	401a      	ands	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d10e      	bne.n	800307e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	23e0      	movs	r3, #224	; 0xe0
 8003064:	051b      	lsls	r3, r3, #20
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	0f5b      	lsrs	r3, r3, #29
 8003074:	075a      	lsls	r2, r3, #29
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b008      	add	sp, #32
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	00001388 	.word	0x00001388
 8003098:	efffffff 	.word	0xefffffff
 800309c:	feffffff 	.word	0xfeffffff
 80030a0:	11c1808c 	.word	0x11c1808c
 80030a4:	eefefffc 	.word	0xeefefffc

080030a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0e9      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2207      	movs	r2, #7
 80030c2:	4013      	ands	r3, r2
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d91e      	bls.n	8003108 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b73      	ldr	r3, [pc, #460]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2207      	movs	r2, #7
 80030d0:	4393      	bics	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030dc:	f7fe f85e 	bl	800119c <HAL_GetTick>
 80030e0:	0003      	movs	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e6:	f7fe f859 	bl	800119c <HAL_GetTick>
 80030ea:	0002      	movs	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_RCC_ClockConfig+0x1f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0ca      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2207      	movs	r2, #7
 8003100:	4013      	ands	r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2202      	movs	r2, #2
 800310e:	4013      	ands	r3, r2
 8003110:	d015      	beq.n	800313e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d006      	beq.n	800312a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003122:	21e0      	movs	r1, #224	; 0xe0
 8003124:	01c9      	lsls	r1, r1, #7
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312a:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <HAL_RCC_ClockConfig+0x1fc>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	4013      	ands	r3, r2
 8003146:	d057      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	4013      	ands	r3, r2
 800315a:	d12b      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e097      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d107      	bne.n	8003178 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	049b      	lsls	r3, r3, #18
 8003170:	4013      	ands	r3, r2
 8003172:	d11f      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e08b      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4013      	ands	r3, r2
 800318a:	d113      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e07f      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800319a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d108      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e074      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e06d      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2207      	movs	r2, #7
 80031ba:	4393      	bics	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fd ffe8 	bl	800119c <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d2:	f7fd ffe3 	bl	800119c <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	4a2f      	ldr	r2, [pc, #188]	; (800329c <HAL_RCC_ClockConfig+0x1f4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e054      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2238      	movs	r2, #56	; 0x38
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ec      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2207      	movs	r2, #7
 80031fe:	4013      	ands	r3, r2
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d21e      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2207      	movs	r2, #7
 800320c:	4393      	bics	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003218:	f7fd ffc0 	bl	800119c <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003220:	e009      	b.n	8003236 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003222:	f7fd ffbb 	bl	800119c <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_RCC_ClockConfig+0x1f4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e02c      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003236:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2207      	movs	r2, #7
 800323c:	4013      	ands	r3, r2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <HAL_RCC_ClockConfig+0x200>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003262:	f000 f829 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003266:	0001      	movs	r1, r0
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_ClockConfig+0x1f8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	220f      	movs	r2, #15
 8003270:	401a      	ands	r2, r3
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x204>)
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	58d3      	ldr	r3, [r2, r3]
 8003278:	221f      	movs	r2, #31
 800327a:	4013      	ands	r3, r2
 800327c:	000a      	movs	r2, r1
 800327e:	40da      	lsrs	r2, r3
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_ClockConfig+0x208>)
 8003282:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x20c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0018      	movs	r0, r3
 800328a:	f7fd ff2b 	bl	80010e4 <HAL_InitTick>
 800328e:	0003      	movs	r3, r0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40022000 	.word	0x40022000
 800329c:	00001388 	.word	0x00001388
 80032a0:	40021000 	.word	0x40021000
 80032a4:	fffff0ff 	.word	0xfffff0ff
 80032a8:	ffff8fff 	.word	0xffff8fff
 80032ac:	08007dfc 	.word	0x08007dfc
 80032b0:	20000014 	.word	0x20000014
 80032b4:	20000000 	.word	0x20000000

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032be:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2238      	movs	r2, #56	; 0x38
 80032c4:	4013      	ands	r3, r2
 80032c6:	d10f      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80032c8:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0adb      	lsrs	r3, r3, #11
 80032ce:	2207      	movs	r2, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	2201      	movs	r2, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	0013      	movs	r3, r2
 80032d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	4835      	ldr	r0, [pc, #212]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032de:	f7fc ff1b 	bl	8000118 <__udivsi3>
 80032e2:	0003      	movs	r3, r0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e05d      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2238      	movs	r2, #56	; 0x38
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d102      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e054      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2238      	movs	r2, #56	; 0x38
 8003300:	4013      	ands	r3, r2
 8003302:	2b10      	cmp	r3, #16
 8003304:	d138      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2203      	movs	r2, #3
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	3301      	adds	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d10d      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4824      	ldr	r0, [pc, #144]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003328:	f7fc fef6 	bl	8000118 <__udivsi3>
 800332c:	0003      	movs	r3, r0
 800332e:	0019      	movs	r1, r3
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	227f      	movs	r2, #127	; 0x7f
 8003338:	4013      	ands	r3, r2
 800333a:	434b      	muls	r3, r1
 800333c:	617b      	str	r3, [r7, #20]
        break;
 800333e:	e00d      	b.n	800335c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	481c      	ldr	r0, [pc, #112]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003344:	f7fc fee8 	bl	8000118 <__udivsi3>
 8003348:	0003      	movs	r3, r0
 800334a:	0019      	movs	r1, r3
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	227f      	movs	r2, #127	; 0x7f
 8003354:	4013      	ands	r3, r2
 8003356:	434b      	muls	r3, r1
 8003358:	617b      	str	r3, [r7, #20]
        break;
 800335a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0f5b      	lsrs	r3, r3, #29
 8003362:	2207      	movs	r2, #7
 8003364:	4013      	ands	r3, r2
 8003366:	3301      	adds	r3, #1
 8003368:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7fc fed3 	bl	8000118 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e015      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2238      	movs	r2, #56	; 0x38
 800337e:	4013      	ands	r3, r2
 8003380:	2b20      	cmp	r3, #32
 8003382:	d103      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2238      	movs	r2, #56	; 0x38
 8003392:	4013      	ands	r3, r2
 8003394:	2b18      	cmp	r3, #24
 8003396:	d103      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003398:	23fa      	movs	r3, #250	; 0xfa
 800339a:	01db      	lsls	r3, r3, #7
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e001      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b006      	add	sp, #24
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40021000 	.word	0x40021000
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <HAL_RCC_GetHCLKFreq+0x10>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000014 	.word	0x20000014

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b5b0      	push	{r4, r5, r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80033d4:	f7ff fff2 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033d8:	0004      	movs	r4, r0
 80033da:	f7ff fb3f 	bl	8002a5c <LL_RCC_GetAPB1Prescaler>
 80033de:	0003      	movs	r3, r0
 80033e0:	0b1a      	lsrs	r2, r3, #12
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e4:	0092      	lsls	r2, r2, #2
 80033e6:	58d3      	ldr	r3, [r2, r3]
 80033e8:	221f      	movs	r2, #31
 80033ea:	4013      	ands	r3, r2
 80033ec:	40dc      	lsrs	r4, r3
 80033ee:	0023      	movs	r3, r4
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bdb0      	pop	{r4, r5, r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	08007e3c 	.word	0x08007e3c

080033fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003404:	2313      	movs	r3, #19
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800340c:	2312      	movs	r3, #18
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003420:	e0a3      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2011      	movs	r0, #17
 8003424:	183b      	adds	r3, r7, r0
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4ba5      	ldr	r3, [pc, #660]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800342c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	055b      	lsls	r3, r3, #21
 8003432:	4013      	ands	r3, r2
 8003434:	d110      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4ba2      	ldr	r3, [pc, #648]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343a:	4ba1      	ldr	r3, [pc, #644]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	0549      	lsls	r1, r1, #21
 8003440:	430a      	orrs	r2, r1
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
 8003444:	4b9e      	ldr	r3, [pc, #632]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	055b      	lsls	r3, r3, #21
 800344c:	4013      	ands	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	183b      	adds	r3, r7, r0
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b9a      	ldr	r3, [pc, #616]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	0049      	lsls	r1, r1, #1
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003466:	f7fd fe99 	bl	800119c <HAL_GetTick>
 800346a:	0003      	movs	r3, r0
 800346c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800346e:	e00b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003470:	f7fd fe94 	bl	800119c <HAL_GetTick>
 8003474:	0002      	movs	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d904      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800347e:	2313      	movs	r3, #19
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2203      	movs	r2, #3
 8003484:	701a      	strb	r2, [r3, #0]
        break;
 8003486:	e005      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003488:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4013      	ands	r3, r2
 8003492:	d0ed      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003494:	2313      	movs	r3, #19
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d154      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034a2:	23c0      	movs	r3, #192	; 0xc0
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d019      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d014      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ba:	4b81      	ldr	r3, [pc, #516]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	4a82      	ldr	r2, [pc, #520]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034c4:	4b7e      	ldr	r3, [pc, #504]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034c8:	4b7d      	ldr	r3, [pc, #500]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	0249      	lsls	r1, r1, #9
 80034ce:	430a      	orrs	r2, r1
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d6:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034d8:	497c      	ldr	r1, [pc, #496]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80034da:	400a      	ands	r2, r1
 80034dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034de:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	d016      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd fe56 	bl	800119c <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	e00c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fd fe51 	bl	800119c <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	4a73      	ldr	r2, [pc, #460]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d904      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003506:	2313      	movs	r3, #19
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2203      	movs	r2, #3
 800350c:	701a      	strb	r2, [r3, #0]
            break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d0ed      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800351a:	2313      	movs	r3, #19
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	4a67      	ldr	r2, [pc, #412]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003534:	430a      	orrs	r2, r1
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
 8003538:	e00c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353a:	2312      	movs	r3, #18
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	2213      	movs	r2, #19
 8003540:	18ba      	adds	r2, r7, r2
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e005      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	2312      	movs	r3, #18
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2213      	movs	r2, #19
 800354e:	18ba      	adds	r2, r7, r2
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003554:	2311      	movs	r3, #17
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003562:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003564:	495b      	ldr	r1, [pc, #364]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003566:	400a      	ands	r2, r1
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4013      	ands	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003574:	4b52      	ldr	r3, [pc, #328]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	2203      	movs	r2, #3
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003584:	430a      	orrs	r2, r1
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	4013      	ands	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003592:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	4a49      	ldr	r2, [pc, #292]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f0:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003600:	430a      	orrs	r2, r1
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	01db      	lsls	r3, r3, #7
 800360c:	4013      	ands	r3, r2
 800360e:	d015      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	0899      	lsrs	r1, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800361e:	430a      	orrs	r2, r1
 8003620:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	05db      	lsls	r3, r3, #23
 800362a:	429a      	cmp	r2, r3
 800362c:	d106      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0249      	lsls	r1, r1, #9
 8003638:	430a      	orrs	r2, r1
 800363a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	039b      	lsls	r3, r3, #14
 8003644:	4013      	ands	r3, r2
 8003646:	d016      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003658:	430a      	orrs	r2, r1
 800365a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	03db      	lsls	r3, r3, #15
 8003664:	429a      	cmp	r2, r3
 8003666:	d106      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0449      	lsls	r1, r1, #17
 8003672:	430a      	orrs	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d016      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003692:	430a      	orrs	r2, r1
 8003694:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	01db      	lsls	r3, r3, #7
 800369e:	429a      	cmp	r2, r3
 80036a0:	d106      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	0249      	lsls	r1, r1, #9
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80036b0:	2312      	movs	r3, #18
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b006      	add	sp, #24
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	fffffcff 	.word	0xfffffcff
 80036cc:	fffeffff 	.word	0xfffeffff
 80036d0:	00001388 	.word	0x00001388
 80036d4:	efffffff 	.word	0xefffffff
 80036d8:	fffff3ff 	.word	0xfffff3ff
 80036dc:	fff3ffff 	.word	0xfff3ffff
 80036e0:	ffcfffff 	.word	0xffcfffff
 80036e4:	ffffcfff 	.word	0xffffcfff
 80036e8:	ffbfffff 	.word	0xffbfffff
 80036ec:	ffff3fff 	.word	0xffff3fff

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e04a      	b.n	8003798 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223d      	movs	r2, #61	; 0x3d
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d107      	bne.n	800371e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	223c      	movs	r2, #60	; 0x3c
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0018      	movs	r0, r3
 800371a:	f003 fc41 	bl	8006fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	223d      	movs	r2, #61	; 0x3d
 8003722:	2102      	movs	r1, #2
 8003724:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f000 fb49 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2248      	movs	r2, #72	; 0x48
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	223e      	movs	r2, #62	; 0x3e
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2240      	movs	r2, #64	; 0x40
 8003752:	2101      	movs	r1, #1
 8003754:	5499      	strb	r1, [r3, r2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2241      	movs	r2, #65	; 0x41
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2242      	movs	r2, #66	; 0x42
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2243      	movs	r2, #67	; 0x43
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2244      	movs	r2, #68	; 0x44
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2245      	movs	r2, #69	; 0x45
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2246      	movs	r2, #70	; 0x46
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2247      	movs	r2, #71	; 0x47
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223d      	movs	r2, #61	; 0x3d
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04a      	b.n	8003848 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	; 0x3d
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223c      	movs	r2, #60	; 0x3c
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f841 	bl	8003850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223d      	movs	r2, #61	; 0x3d
 80037d2:	2102      	movs	r1, #2
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	0019      	movs	r1, r3
 80037e0:	0010      	movs	r0, r2
 80037e2:	f000 faf1 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2248      	movs	r2, #72	; 0x48
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223e      	movs	r2, #62	; 0x3e
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2241      	movs	r2, #65	; 0x41
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2242      	movs	r2, #66	; 0x42
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2243      	movs	r2, #67	; 0x43
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2244      	movs	r2, #68	; 0x44
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2245      	movs	r2, #69	; 0x45
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2246      	movs	r2, #70	; 0x46
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2247      	movs	r2, #71	; 0x47
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223d      	movs	r2, #61	; 0x3d
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d108      	bne.n	8003882 <HAL_TIM_PWM_Start+0x22>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223e      	movs	r2, #62	; 0x3e
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	4193      	sbcs	r3, r2
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e037      	b.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d108      	bne.n	800389a <HAL_TIM_PWM_Start+0x3a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	223f      	movs	r2, #63	; 0x3f
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	4193      	sbcs	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e02b      	b.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d108      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x52>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	4193      	sbcs	r3, r2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e01f      	b.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d108      	bne.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2241      	movs	r2, #65	; 0x41
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	4193      	sbcs	r3, r2
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d108      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x82>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2242      	movs	r2, #66	; 0x42
 80038d4:	5c9b      	ldrb	r3, [r3, r2]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	4193      	sbcs	r3, r2
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2243      	movs	r2, #67	; 0x43
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	4193      	sbcs	r3, r2
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e081      	b.n	80039fe <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	223e      	movs	r2, #62	; 0x3e
 8003904:	2102      	movs	r1, #2
 8003906:	5499      	strb	r1, [r3, r2]
 8003908:	e023      	b.n	8003952 <HAL_TIM_PWM_Start+0xf2>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Start+0xba>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	223f      	movs	r2, #63	; 0x3f
 8003914:	2102      	movs	r1, #2
 8003916:	5499      	strb	r1, [r3, r2]
 8003918:	e01b      	b.n	8003952 <HAL_TIM_PWM_Start+0xf2>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0xca>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]
 8003928:	e013      	b.n	8003952 <HAL_TIM_PWM_Start+0xf2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0xda>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2241      	movs	r2, #65	; 0x41
 8003934:	2102      	movs	r1, #2
 8003936:	5499      	strb	r1, [r3, r2]
 8003938:	e00b      	b.n	8003952 <HAL_TIM_PWM_Start+0xf2>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b10      	cmp	r3, #16
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xea>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2242      	movs	r2, #66	; 0x42
 8003944:	2102      	movs	r1, #2
 8003946:	5499      	strb	r1, [r3, r2]
 8003948:	e003      	b.n	8003952 <HAL_TIM_PWM_Start+0xf2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2243      	movs	r2, #67	; 0x43
 800394e:	2102      	movs	r1, #2
 8003950:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fde2 	bl	8004524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_TIM_PWM_Start+0x1a8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIM_PWM_Start+0x11e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <HAL_TIM_PWM_Start+0x1ac>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIM_PWM_Start+0x11e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <HAL_TIM_PWM_Start+0x1b0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_Start+0x122>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_TIM_PWM_Start+0x124>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	0209      	lsls	r1, r1, #8
 8003996:	430a      	orrs	r2, r1
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_TIM_PWM_Start+0x1a8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00a      	beq.n	80039ba <HAL_TIM_PWM_Start+0x15a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	05db      	lsls	r3, r3, #23
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Start+0x15a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <HAL_TIM_PWM_Start+0x1b4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d116      	bne.n	80039e8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <HAL_TIM_PWM_Start+0x1b8>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d016      	beq.n	80039fa <HAL_TIM_PWM_Start+0x19a>
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d011      	beq.n	80039fa <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e6:	e008      	b.n	80039fa <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e000      	b.n	80039fc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	40000400 	.word	0x40000400
 8003a18:	00010007 	.word	0x00010007

08003a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2317      	movs	r3, #23
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	223c      	movs	r2, #60	; 0x3c
 8003a34:	5c9b      	ldrb	r3, [r3, r2]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0e5      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b14      	cmp	r3, #20
 8003a4a:	d900      	bls.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a4c:	e0d1      	b.n	8003bf2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	009a      	lsls	r2, r3, #2
 8003a52:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a54:	18d3      	adds	r3, r2, r3
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fa26 	bl	8003eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2108      	movs	r1, #8
 8003a74:	430a      	orrs	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2104      	movs	r1, #4
 8003a84:	438a      	bics	r2, r1
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e0af      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 fa85 	bl	8003fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0109      	lsls	r1, r1, #4
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4954      	ldr	r1, [pc, #336]	; (8003c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	021a      	lsls	r2, r3, #8
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	619a      	str	r2, [r3, #24]
      break;
 8003ae0:	e08c      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	0011      	movs	r1, r2
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fae0 	bl	80040b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2108      	movs	r1, #8
 8003afc:	430a      	orrs	r2, r1
 8003afe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69d9      	ldr	r1, [r3, #28]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	61da      	str	r2, [r3, #28]
      break;
 8003b22:	e06b      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	0011      	movs	r1, r2
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fb41 	bl	80041b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0109      	lsls	r1, r1, #4
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4932      	ldr	r1, [pc, #200]	; (8003c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69d9      	ldr	r1, [r3, #28]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]
      break;
 8003b68:	e048      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 fb82 	bl	800427c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2108      	movs	r1, #8
 8003b84:	430a      	orrs	r2, r1
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2104      	movs	r1, #4
 8003b94:	438a      	bics	r2, r1
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003baa:	e027      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 fbbb 	bl	8004330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0109      	lsls	r1, r1, #4
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4910      	ldr	r1, [pc, #64]	; (8003c18 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	021a      	lsls	r2, r3, #8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bf0:	e004      	b.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003bf2:	2317      	movs	r3, #23
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	223c      	movs	r2, #60	; 0x3c
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

  return status;
 8003c04:	2317      	movs	r3, #23
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	08007d90 	.word	0x08007d90
 8003c18:	fffffbff 	.word	0xfffffbff

08003c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	230f      	movs	r3, #15
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223c      	movs	r2, #60	; 0x3c
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_ConfigClockSource+0x20>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0bc      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x19a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	223c      	movs	r2, #60	; 0x3c
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	223d      	movs	r2, #61	; 0x3d
 8003c48:	2102      	movs	r1, #2
 8003c4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4a5a      	ldr	r2, [pc, #360]	; (8003dc0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a59      	ldr	r2, [pc, #356]	; (8003dc4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	0192      	lsls	r2, r2, #6
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xde>
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	0192      	lsls	r2, r2, #6
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d900      	bls.n	8003c82 <HAL_TIM_ConfigClockSource+0x66>
 8003c80:	e088      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	0152      	lsls	r2, r2, #5
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d100      	bne.n	8003c8c <HAL_TIM_ConfigClockSource+0x70>
 8003c8a:	e088      	b.n	8003d9e <HAL_TIM_ConfigClockSource+0x182>
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	0152      	lsls	r2, r2, #5
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d900      	bls.n	8003c96 <HAL_TIM_ConfigClockSource+0x7a>
 8003c94:	e07e      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003c96:	2b70      	cmp	r3, #112	; 0x70
 8003c98:	d018      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0xb0>
 8003c9a:	d900      	bls.n	8003c9e <HAL_TIM_ConfigClockSource+0x82>
 8003c9c:	e07a      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003c9e:	2b60      	cmp	r3, #96	; 0x60
 8003ca0:	d04f      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x126>
 8003ca2:	d900      	bls.n	8003ca6 <HAL_TIM_ConfigClockSource+0x8a>
 8003ca4:	e076      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003ca6:	2b50      	cmp	r3, #80	; 0x50
 8003ca8:	d03b      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x106>
 8003caa:	d900      	bls.n	8003cae <HAL_TIM_ConfigClockSource+0x92>
 8003cac:	e072      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d057      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x146>
 8003cb2:	d900      	bls.n	8003cb6 <HAL_TIM_ConfigClockSource+0x9a>
 8003cb4:	e06e      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003cb6:	2b30      	cmp	r3, #48	; 0x30
 8003cb8:	d063      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x166>
 8003cba:	d86b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d060      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x166>
 8003cc0:	d868      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d05d      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x166>
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d05b      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x166>
 8003cca:	e063      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 fc02 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2277      	movs	r2, #119	; 0x77
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e052      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6899      	ldr	r1, [r3, #8]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 fbeb 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	01c9      	lsls	r1, r1, #7
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e03e      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	001a      	movs	r2, r3
 8003d30:	f000 fb5c 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2150      	movs	r1, #80	; 0x50
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fbb6 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003d40:	e02e      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	001a      	movs	r2, r3
 8003d50:	f000 fb7a 	bl	8004448 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2160      	movs	r1, #96	; 0x60
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fba6 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003d60:	e01e      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	001a      	movs	r2, r3
 8003d70:	f000 fb3c 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 fb96 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003d80:	e00e      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	f000 fb8d 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003d92:	e005      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
      break;
 8003d9c:	e000      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	223d      	movs	r2, #61	; 0x3d
 8003da4:	2101      	movs	r1, #1
 8003da6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	223c      	movs	r2, #60	; 0x3c
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

  return status;
 8003db0:	230f      	movs	r3, #15
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	ffceff88 	.word	0xffceff88
 8003dc4:	ffff00ff 	.word	0xffff00ff

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d008      	beq.n	8003df2 <TIM_Base_SetConfig+0x2a>
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	05db      	lsls	r3, r3, #23
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d003      	beq.n	8003df2 <TIM_Base_SetConfig+0x2a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <TIM_Base_SetConfig+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2270      	movs	r2, #112	; 0x70
 8003df6:	4393      	bics	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d014      	beq.n	8003e36 <TIM_Base_SetConfig+0x6e>
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	05db      	lsls	r3, r3, #23
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d00f      	beq.n	8003e36 <TIM_Base_SetConfig+0x6e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <TIM_Base_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_Base_SetConfig+0x6e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_Base_SetConfig+0x6e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <TIM_Base_SetConfig+0xe0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_Base_SetConfig+0x6e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <TIM_Base_SetConfig+0xe4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <TIM_Base_SetConfig+0xe8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	001a      	movs	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0xbe>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <TIM_Base_SetConfig+0xe0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0xbe>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <TIM_Base_SetConfig+0xe4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d103      	bne.n	8003e8e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	615a      	str	r2, [r3, #20]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40002000 	.word	0x40002000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	fffffcff 	.word	0xfffffcff

08003eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <TIM_OC1_SetConfig+0xe8>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2203      	movs	r2, #3
 8003eea:	4393      	bics	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2202      	movs	r2, #2
 8003efc:	4393      	bics	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <TIM_OC1_SetConfig+0xec>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_OC1_SetConfig+0x6e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <TIM_OC1_SetConfig+0xf0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC1_SetConfig+0x6e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <TIM_OC1_SetConfig+0xf4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2208      	movs	r2, #8
 8003f26:	4393      	bics	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2204      	movs	r2, #4
 8003f38:	4393      	bics	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <TIM_OC1_SetConfig+0xec>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <TIM_OC1_SetConfig+0xa0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <TIM_OC1_SetConfig+0xf0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC1_SetConfig+0xa0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <TIM_OC1_SetConfig+0xf4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d111      	bne.n	8003f78 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <TIM_OC1_SetConfig+0xf8>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <TIM_OC1_SetConfig+0xfc>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b006      	add	sp, #24
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	fffeff8f 	.word	0xfffeff8f
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	fffffeff 	.word	0xfffffeff
 8003fb0:	fffffdff 	.word	0xfffffdff

08003fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <TIM_OC2_SetConfig+0xe0>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <TIM_OC2_SetConfig+0xe4>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	4393      	bics	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <TIM_OC2_SetConfig+0xe8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10d      	bne.n	8004032 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	4393      	bics	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	4393      	bics	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <TIM_OC2_SetConfig+0xe8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_OC2_SetConfig+0x96>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <TIM_OC2_SetConfig+0xec>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC2_SetConfig+0x96>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <TIM_OC2_SetConfig+0xf0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d113      	bne.n	8004072 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <TIM_OC2_SetConfig+0xf4>)
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4a15      	ldr	r2, [pc, #84]	; (80040ac <TIM_OC2_SetConfig+0xf8>)
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b006      	add	sp, #24
 8004092:	bd80      	pop	{r7, pc}
 8004094:	feff8fff 	.word	0xfeff8fff
 8004098:	fffffcff 	.word	0xfffffcff
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	fffffbff 	.word	0xfffffbff
 80040ac:	fffff7ff 	.word	0xfffff7ff

080040b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a33      	ldr	r2, [pc, #204]	; (800418c <TIM_OC3_SetConfig+0xdc>)
 80040c0:	401a      	ands	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <TIM_OC3_SetConfig+0xe0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2203      	movs	r2, #3
 80040e4:	4393      	bics	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <TIM_OC3_SetConfig+0xe4>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a23      	ldr	r2, [pc, #140]	; (8004198 <TIM_OC3_SetConfig+0xe8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10d      	bne.n	800412a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <TIM_OC3_SetConfig+0xec>)
 8004112:	4013      	ands	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <TIM_OC3_SetConfig+0xf0>)
 8004126:	4013      	ands	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <TIM_OC3_SetConfig+0xe8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_OC3_SetConfig+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <TIM_OC3_SetConfig+0xf4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_OC3_SetConfig+0x92>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <TIM_OC3_SetConfig+0xf8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d113      	bne.n	800416a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <TIM_OC3_SetConfig+0xfc>)
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <TIM_OC3_SetConfig+0x100>)
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}
 800418c:	fffffeff 	.word	0xfffffeff
 8004190:	fffeff8f 	.word	0xfffeff8f
 8004194:	fffffdff 	.word	0xfffffdff
 8004198:	40012c00 	.word	0x40012c00
 800419c:	fffff7ff 	.word	0xfffff7ff
 80041a0:	fffffbff 	.word	0xfffffbff
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800
 80041ac:	ffffefff 	.word	0xffffefff
 80041b0:	ffffdfff 	.word	0xffffdfff

080041b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_OC4_SetConfig+0xa8>)
 80041c4:	401a      	ands	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a20      	ldr	r2, [pc, #128]	; (8004260 <TIM_OC4_SetConfig+0xac>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <TIM_OC4_SetConfig+0xb0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <TIM_OC4_SetConfig+0xb4>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a17      	ldr	r2, [pc, #92]	; (800426c <TIM_OC4_SetConfig+0xb8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_OC4_SetConfig+0x70>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC4_SetConfig+0xbc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC4_SetConfig+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_OC4_SetConfig+0xc0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d109      	bne.n	8004238 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4a14      	ldr	r2, [pc, #80]	; (8004278 <TIM_OC4_SetConfig+0xc4>)
 8004228:	4013      	ands	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b006      	add	sp, #24
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	ffffefff 	.word	0xffffefff
 8004260:	feff8fff 	.word	0xfeff8fff
 8004264:	fffffcff 	.word	0xfffffcff
 8004268:	ffffdfff 	.word	0xffffdfff
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800
 8004278:	ffffbfff 	.word	0xffffbfff

0800427c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a23      	ldr	r2, [pc, #140]	; (8004318 <TIM_OC5_SetConfig+0x9c>)
 800428c:	401a      	ands	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a1d      	ldr	r2, [pc, #116]	; (800431c <TIM_OC5_SetConfig+0xa0>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4a19      	ldr	r2, [pc, #100]	; (8004320 <TIM_OC5_SetConfig+0xa4>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <TIM_OC5_SetConfig+0xa8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC5_SetConfig+0x66>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <TIM_OC5_SetConfig+0xac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC5_SetConfig+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <TIM_OC5_SetConfig+0xb0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d109      	bne.n	80042f6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <TIM_OC5_SetConfig+0x9c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffeffff 	.word	0xfffeffff
 800431c:	fffeff8f 	.word	0xfffeff8f
 8004320:	fffdffff 	.word	0xfffdffff
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40014400 	.word	0x40014400
 800432c:	40014800 	.word	0x40014800

08004330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <TIM_OC6_SetConfig+0xa0>)
 8004340:	401a      	ands	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <TIM_OC6_SetConfig+0xa4>)
 800435c:	4013      	ands	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <TIM_OC6_SetConfig+0xa8>)
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	051b      	lsls	r3, r3, #20
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a16      	ldr	r2, [pc, #88]	; (80043dc <TIM_OC6_SetConfig+0xac>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_OC6_SetConfig+0x68>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <TIM_OC6_SetConfig+0xb0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC6_SetConfig+0x68>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <TIM_OC6_SetConfig+0xb4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d109      	bne.n	80043ac <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <TIM_OC6_SetConfig+0xb8>)
 800439c:	4013      	ands	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	ffefffff 	.word	0xffefffff
 80043d4:	feff8fff 	.word	0xfeff8fff
 80043d8:	ffdfffff 	.word	0xffdfffff
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	fffbffff 	.word	0xfffbffff

080043ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2201      	movs	r2, #1
 8004404:	4393      	bics	r3, r2
 8004406:	001a      	movs	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	22f0      	movs	r2, #240	; 0xf0
 8004416:	4393      	bics	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	220a      	movs	r2, #10
 8004428:	4393      	bics	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b006      	add	sp, #24
 8004446:	bd80      	pop	{r7, pc}

08004448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	2210      	movs	r2, #16
 800445a:	4393      	bics	r3, r2
 800445c:	001a      	movs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <TIM_TI2_ConfigInputStage+0x60>)
 8004472:	4013      	ands	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	22a0      	movs	r2, #160	; 0xa0
 8004484:	4393      	bics	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b006      	add	sp, #24
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	ffff0fff 	.word	0xffff0fff

080044ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <TIM_ITRx_SetConfig+0x34>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	2207      	movs	r2, #7
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	ffcfff8f 	.word	0xffcfff8f

080044e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <TIM_ETR_SetConfig+0x3c>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b006      	add	sp, #24
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffff00ff 	.word	0xffff00ff

08004524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	221f      	movs	r2, #31
 8004534:	4013      	ands	r3, r2
 8004536:	2201      	movs	r2, #1
 8004538:	409a      	lsls	r2, r3
 800453a:	0013      	movs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	43d2      	mvns	r2, r2
 8004546:	401a      	ands	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	211f      	movs	r1, #31
 8004554:	400b      	ands	r3, r1
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4099      	lsls	r1, r3
 800455a:	000b      	movs	r3, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b006      	add	sp, #24
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223c      	movs	r2, #60	; 0x3c
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e050      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	223c      	movs	r2, #60	; 0x3c
 8004588:	2101      	movs	r1, #1
 800458a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	223d      	movs	r2, #61	; 0x3d
 8004590:	2102      	movs	r1, #2
 8004592:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a21      	ldr	r2, [pc, #132]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2270      	movs	r2, #112	; 0x70
 80045c4:	4393      	bics	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00a      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	05db      	lsls	r3, r3, #23
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2280      	movs	r2, #128	; 0x80
 80045fe:	4393      	bics	r3, r2
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	223d      	movs	r2, #61	; 0x3d
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	223c      	movs	r2, #60	; 0x3c
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	40012c00 	.word	0x40012c00
 8004634:	ff0fffff 	.word	0xff0fffff
 8004638:	40000400 	.word	0x40000400

0800463c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223c      	movs	r2, #60	; 0x3c
 800464e:	5c9b      	ldrb	r3, [r3, r2]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004654:	2302      	movs	r3, #2
 8004656:	e079      	b.n	800474c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	223c      	movs	r2, #60	; 0x3c
 800465c:	2101      	movs	r1, #1
 800465e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	4393      	bics	r3, r2
 8004666:	001a      	movs	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a38      	ldr	r2, [pc, #224]	; (8004754 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004674:	401a      	ands	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a35      	ldr	r2, [pc, #212]	; (8004758 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004682:	401a      	ands	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a33      	ldr	r2, [pc, #204]	; (800475c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004690:	401a      	ands	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800469e:	401a      	ands	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80046ac:	401a      	ands	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80046ba:	401a      	ands	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a29      	ldr	r2, [pc, #164]	; (800476c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80046c8:	401a      	ands	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d106      	bne.n	80046ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a24      	ldr	r2, [pc, #144]	; (8004774 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80046e2:	401a      	ands	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d121      	bne.n	800473a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80046fa:	401a      	ands	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	051b      	lsls	r3, r3, #20
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800470a:	401a      	ands	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004718:	401a      	ands	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d106      	bne.n	800473a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004730:	401a      	ands	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223c      	movs	r2, #60	; 0x3c
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	fffffcff 	.word	0xfffffcff
 8004758:	fffffbff 	.word	0xfffffbff
 800475c:	fffff7ff 	.word	0xfffff7ff
 8004760:	ffffefff 	.word	0xffffefff
 8004764:	ffffdfff 	.word	0xffffdfff
 8004768:	ffffbfff 	.word	0xffffbfff
 800476c:	fff0ffff 	.word	0xfff0ffff
 8004770:	40012c00 	.word	0x40012c00
 8004774:	efffffff 	.word	0xefffffff
 8004778:	ff0fffff 	.word	0xff0fffff
 800477c:	feffffff 	.word	0xfeffffff
 8004780:	fdffffff 	.word	0xfdffffff
 8004784:	dfffffff 	.word	0xdfffffff

08004788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e046      	b.n	8004828 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2288      	movs	r2, #136	; 0x88
 800479e:	589b      	ldr	r3, [r3, r2]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2284      	movs	r2, #132	; 0x84
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f002 fc7e 	bl	80070b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2288      	movs	r2, #136	; 0x88
 80047b8:	2124      	movs	r1, #36	; 0x24
 80047ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	438a      	bics	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 fc6c 	bl	80050ac <UART_SetConfig>
 80047d4:	0003      	movs	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e024      	b.n	8004828 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fed7 	bl	800559c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	490d      	ldr	r1, [pc, #52]	; (8004830 <HAL_UART_Init+0xa8>)
 80047fa:	400a      	ands	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	212a      	movs	r1, #42	; 0x2a
 800480a:	438a      	bics	r2, r1
 800480c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	430a      	orrs	r2, r1
 800481c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 ff6f 	bl	8005704 <UART_CheckIdleState>
 8004826:	0003      	movs	r3, r0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	ffffb7ff 	.word	0xffffb7ff

08004834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2288      	movs	r2, #136	; 0x88
 8004848:	589b      	ldr	r3, [r3, r2]
 800484a:	2b20      	cmp	r3, #32
 800484c:	d000      	beq.n	8004850 <HAL_UART_Transmit+0x1c>
 800484e:	e088      	b.n	8004962 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_UART_Transmit+0x2a>
 8004856:	1dbb      	adds	r3, r7, #6
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e080      	b.n	8004964 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	015b      	lsls	r3, r3, #5
 800486a:	429a      	cmp	r2, r3
 800486c:	d109      	bne.n	8004882 <HAL_UART_Transmit+0x4e>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d001      	beq.n	8004882 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e070      	b.n	8004964 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2290      	movs	r2, #144	; 0x90
 8004886:	2100      	movs	r1, #0
 8004888:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2288      	movs	r2, #136	; 0x88
 800488e:	2121      	movs	r1, #33	; 0x21
 8004890:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004892:	f7fc fc83 	bl	800119c <HAL_GetTick>
 8004896:	0003      	movs	r3, r0
 8004898:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1dba      	adds	r2, r7, #6
 800489e:	2154      	movs	r1, #84	; 0x54
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1dba      	adds	r2, r7, #6
 80048a8:	2156      	movs	r1, #86	; 0x56
 80048aa:	8812      	ldrh	r2, [r2, #0]
 80048ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	015b      	lsls	r3, r3, #5
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d108      	bne.n	80048cc <HAL_UART_Transmit+0x98>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	e003      	b.n	80048d4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d4:	e02c      	b.n	8004930 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	0013      	movs	r3, r2
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	f000 ff5c 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e039      	b.n	8004964 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	001a      	movs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	05d2      	lsls	r2, r2, #23
 8004902:	0dd2      	lsrs	r2, r2, #23
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	3302      	adds	r3, #2
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e007      	b.n	800491e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2256      	movs	r2, #86	; 0x56
 8004922:	5a9b      	ldrh	r3, [r3, r2]
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b299      	uxth	r1, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2256      	movs	r2, #86	; 0x56
 800492e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2256      	movs	r2, #86	; 0x56
 8004934:	5a9b      	ldrh	r3, [r3, r2]
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1cc      	bne.n	80048d6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	0013      	movs	r3, r2
 8004946:	2200      	movs	r2, #0
 8004948:	2140      	movs	r1, #64	; 0x40
 800494a:	f000 ff29 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e006      	b.n	8004964 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2288      	movs	r2, #136	; 0x88
 800495a:	2120      	movs	r1, #32
 800495c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b008      	add	sp, #32
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	228c      	movs	r2, #140	; 0x8c
 800497e:	589b      	ldr	r3, [r3, r2]
 8004980:	2b20      	cmp	r3, #32
 8004982:	d14a      	bne.n	8004a1a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_UART_Receive_IT+0x26>
 800498a:	1dbb      	adds	r3, r7, #6
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e042      	b.n	8004a1c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	015b      	lsls	r3, r3, #5
 800499e:	429a      	cmp	r2, r3
 80049a0:	d109      	bne.n	80049b6 <HAL_UART_Receive_IT+0x4a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2201      	movs	r2, #1
 80049ae:	4013      	ands	r3, r2
 80049b0:	d001      	beq.n	80049b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e032      	b.n	8004a1c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <HAL_UART_Receive_IT+0xb8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d020      	beq.n	8004a08 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	4013      	ands	r3, r2
 80049d2:	d019      	beq.n	8004a08 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d4:	f3ef 8310 	mrs	r3, PRIMASK
 80049d8:	613b      	str	r3, [r7, #16]
  return(result);
 80049da:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	2301      	movs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	04c9      	lsls	r1, r1, #19
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a08:	1dbb      	adds	r3, r7, #6
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 ff8d 	bl	8005930 <UART_Start_Receive_IT>
 8004a16:	0003      	movs	r3, r0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b008      	add	sp, #32
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40008000 	.word	0x40008000

08004a28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a28:	b5b0      	push	{r4, r5, r7, lr}
 8004a2a:	b0aa      	sub	sp, #168	; 0xa8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	22a4      	movs	r2, #164	; 0xa4
 8004a38:	18b9      	adds	r1, r7, r2
 8004a3a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	20a0      	movs	r0, #160	; 0xa0
 8004a44:	1839      	adds	r1, r7, r0
 8004a46:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	249c      	movs	r4, #156	; 0x9c
 8004a50:	1939      	adds	r1, r7, r4
 8004a52:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a54:	0011      	movs	r1, r2
 8004a56:	18bb      	adds	r3, r7, r2
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4aa2      	ldr	r2, [pc, #648]	; (8004ce4 <HAL_UART_IRQHandler+0x2bc>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2298      	movs	r2, #152	; 0x98
 8004a60:	18bd      	adds	r5, r7, r2
 8004a62:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004a64:	18bb      	adds	r3, r7, r2
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d11a      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2220      	movs	r2, #32
 8004a72:	4013      	ands	r3, r2
 8004a74:	d015      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d105      	bne.n	8004a8c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	055b      	lsls	r3, r3, #21
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d100      	bne.n	8004a96 <HAL_UART_IRQHandler+0x6e>
 8004a94:	e2dc      	b.n	8005050 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	4798      	blx	r3
      }
      return;
 8004aa0:	e2d6      	b.n	8005050 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aa2:	2398      	movs	r3, #152	; 0x98
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d100      	bne.n	8004aae <HAL_UART_IRQHandler+0x86>
 8004aac:	e122      	b.n	8004cf4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004aae:	239c      	movs	r3, #156	; 0x9c
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a8c      	ldr	r2, [pc, #560]	; (8004ce8 <HAL_UART_IRQHandler+0x2c0>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004aba:	23a0      	movs	r3, #160	; 0xa0
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_UART_IRQHandler+0x2c4>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d100      	bne.n	8004ac8 <HAL_UART_IRQHandler+0xa0>
 8004ac6:	e115      	b.n	8004cf4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ac8:	23a4      	movs	r3, #164	; 0xa4
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d012      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
 8004ad4:	23a0      	movs	r3, #160	; 0xa0
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2290      	movs	r2, #144	; 0x90
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2201      	movs	r2, #1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2190      	movs	r1, #144	; 0x90
 8004af8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afa:	23a4      	movs	r3, #164	; 0xa4
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2202      	movs	r2, #2
 8004b02:	4013      	ands	r3, r2
 8004b04:	d011      	beq.n	8004b2a <HAL_UART_IRQHandler+0x102>
 8004b06:	239c      	movs	r3, #156	; 0x9c
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2290      	movs	r2, #144	; 0x90
 8004b1e:	589b      	ldr	r3, [r3, r2]
 8004b20:	2204      	movs	r2, #4
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2190      	movs	r1, #144	; 0x90
 8004b28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b2a:	23a4      	movs	r3, #164	; 0xa4
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2204      	movs	r2, #4
 8004b32:	4013      	ands	r3, r2
 8004b34:	d011      	beq.n	8004b5a <HAL_UART_IRQHandler+0x132>
 8004b36:	239c      	movs	r3, #156	; 0x9c
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2290      	movs	r2, #144	; 0x90
 8004b4e:	589b      	ldr	r3, [r3, r2]
 8004b50:	2202      	movs	r2, #2
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2190      	movs	r1, #144	; 0x90
 8004b58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b5a:	23a4      	movs	r3, #164	; 0xa4
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	4013      	ands	r3, r2
 8004b64:	d017      	beq.n	8004b96 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b66:	23a0      	movs	r3, #160	; 0xa0
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d105      	bne.n	8004b7e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b72:	239c      	movs	r3, #156	; 0x9c
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5b      	ldr	r2, [pc, #364]	; (8004ce8 <HAL_UART_IRQHandler+0x2c0>)
 8004b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2208      	movs	r2, #8
 8004b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2290      	movs	r2, #144	; 0x90
 8004b8a:	589b      	ldr	r3, [r3, r2]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2190      	movs	r1, #144	; 0x90
 8004b94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b96:	23a4      	movs	r3, #164	; 0xa4
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1a4>
 8004ba4:	23a0      	movs	r3, #160	; 0xa0
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	04db      	lsls	r3, r3, #19
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d00c      	beq.n	8004bcc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2290      	movs	r2, #144	; 0x90
 8004bc0:	589b      	ldr	r3, [r3, r2]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2190      	movs	r1, #144	; 0x90
 8004bca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2290      	movs	r2, #144	; 0x90
 8004bd0:	589b      	ldr	r3, [r3, r2]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d100      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x1b0>
 8004bd6:	e23d      	b.n	8005054 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bd8:	23a4      	movs	r3, #164	; 0xa4
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2220      	movs	r2, #32
 8004be0:	4013      	ands	r3, r2
 8004be2:	d015      	beq.n	8004c10 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004be4:	23a0      	movs	r3, #160	; 0xa0
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	4013      	ands	r3, r2
 8004bee:	d106      	bne.n	8004bfe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bf0:	239c      	movs	r3, #156	; 0x9c
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	055b      	lsls	r3, r3, #21
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d008      	beq.n	8004c10 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	0010      	movs	r0, r2
 8004c0e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2290      	movs	r2, #144	; 0x90
 8004c14:	589b      	ldr	r3, [r3, r2]
 8004c16:	2194      	movs	r1, #148	; 0x94
 8004c18:	187a      	adds	r2, r7, r1
 8004c1a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d004      	beq.n	8004c34 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2228      	movs	r2, #40	; 0x28
 8004c30:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c32:	d04c      	beq.n	8004cce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 ff9e 	bl	8005b78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d13c      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	2090      	movs	r0, #144	; 0x90
 8004c54:	183a      	adds	r2, r7, r0
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	438a      	bics	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	183b      	adds	r3, r7, r0
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2280      	movs	r2, #128	; 0x80
 8004c86:	589b      	ldr	r3, [r3, r2]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d016      	beq.n	8004cba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	589b      	ldr	r3, [r3, r2]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_UART_IRQHandler+0x2c8>)
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2280      	movs	r2, #128	; 0x80
 8004c9a:	589b      	ldr	r3, [r3, r2]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fd fcb1 	bl	8002604 <HAL_DMA_Abort_IT>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d01c      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	589b      	ldr	r3, [r3, r2]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	5852      	ldr	r2, [r2, r1]
 8004cb4:	0010      	movs	r0, r2
 8004cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e012      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f9e1 	bl	8005084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc2:	e00d      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f9dc 	bl	8005084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e008      	b.n	8004ce0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 f9d7 	bl	8005084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2290      	movs	r2, #144	; 0x90
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004cde:	e1b9      	b.n	8005054 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	46c0      	nop			; (mov r8, r8)
    return;
 8004ce2:	e1b7      	b.n	8005054 <HAL_UART_IRQHandler+0x62c>
 8004ce4:	0000080f 	.word	0x0000080f
 8004ce8:	10000001 	.word	0x10000001
 8004cec:	04000120 	.word	0x04000120
 8004cf0:	08005c45 	.word	0x08005c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d000      	beq.n	8004cfe <HAL_UART_IRQHandler+0x2d6>
 8004cfc:	e13e      	b.n	8004f7c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cfe:	23a4      	movs	r3, #164	; 0xa4
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	4013      	ands	r3, r2
 8004d08:	d100      	bne.n	8004d0c <HAL_UART_IRQHandler+0x2e4>
 8004d0a:	e137      	b.n	8004f7c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d0c:	23a0      	movs	r3, #160	; 0xa0
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2210      	movs	r2, #16
 8004d14:	4013      	ands	r3, r2
 8004d16:	d100      	bne.n	8004d1a <HAL_UART_IRQHandler+0x2f2>
 8004d18:	e130      	b.n	8004f7c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d000      	beq.n	8004d32 <HAL_UART_IRQHandler+0x30a>
 8004d30:	e0a4      	b.n	8004e7c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	589b      	ldr	r3, [r3, r2]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	217e      	movs	r1, #126	; 0x7e
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d100      	bne.n	8004d4c <HAL_UART_IRQHandler+0x324>
 8004d4a:	e185      	b.n	8005058 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	225c      	movs	r2, #92	; 0x5c
 8004d50:	5a9b      	ldrh	r3, [r3, r2]
 8004d52:	187a      	adds	r2, r7, r1
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d300      	bcc.n	8004d5c <HAL_UART_IRQHandler+0x334>
 8004d5a:	e17d      	b.n	8005058 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	187a      	adds	r2, r7, r1
 8004d60:	215e      	movs	r1, #94	; 0x5e
 8004d62:	8812      	ldrh	r2, [r2, #0]
 8004d64:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	589b      	ldr	r3, [r3, r2]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	4013      	ands	r3, r2
 8004d74:	d170      	bne.n	8004e58 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d76:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d80:	2301      	movs	r3, #1
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	49b4      	ldr	r1, [pc, #720]	; (8005068 <HAL_UART_IRQHandler+0x640>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	f383 8810 	msr	PRIMASK, r3
}
 8004da6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	677b      	str	r3, [r7, #116]	; 0x74
 8004db2:	2301      	movs	r3, #1
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	438a      	bics	r2, r1
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dda:	f3ef 8310 	mrs	r3, PRIMASK
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de2:	673b      	str	r3, [r7, #112]	; 0x70
 8004de4:	2301      	movs	r3, #1
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	f383 8810 	msr	PRIMASK, r3
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2140      	movs	r1, #64	; 0x40
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	f383 8810 	msr	PRIMASK, r3
}
 8004e0a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	228c      	movs	r2, #140	; 0x8c
 8004e10:	2120      	movs	r1, #32
 8004e12:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e24:	2301      	movs	r3, #1
 8004e26:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e2a:	f383 8810 	msr	PRIMASK, r3
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2110      	movs	r1, #16
 8004e3c:	438a      	bics	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e46:	f383 8810 	msr	PRIMASK, r3
}
 8004e4a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	589b      	ldr	r3, [r3, r2]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fd fb74 	bl	8002540 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	225c      	movs	r2, #92	; 0x5c
 8004e62:	5a9a      	ldrh	r2, [r3, r2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	215e      	movs	r1, #94	; 0x5e
 8004e68:	5a5b      	ldrh	r3, [r3, r1]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f90d 	bl	8005094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7a:	e0ed      	b.n	8005058 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	225c      	movs	r2, #92	; 0x5c
 8004e80:	5a99      	ldrh	r1, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	225e      	movs	r2, #94	; 0x5e
 8004e86:	5a9b      	ldrh	r3, [r3, r2]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	208e      	movs	r0, #142	; 0x8e
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	1a8a      	subs	r2, r1, r2
 8004e90:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	225e      	movs	r2, #94	; 0x5e
 8004e96:	5a9b      	ldrh	r3, [r3, r2]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d100      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x478>
 8004e9e:	e0dd      	b.n	800505c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004ea0:	183b      	adds	r3, r7, r0
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d100      	bne.n	8004eaa <HAL_UART_IRQHandler+0x482>
 8004ea8:	e0d8      	b.n	800505c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eb2:	2488      	movs	r4, #136	; 0x88
 8004eb4:	193a      	adds	r2, r7, r4
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4967      	ldr	r1, [pc, #412]	; (800506c <HAL_UART_IRQHandler+0x644>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ee8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eea:	2484      	movs	r4, #132	; 0x84
 8004eec:	193a      	adds	r2, r7, r4
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f383 8810 	msr	PRIMASK, r3
}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	495a      	ldr	r1, [pc, #360]	; (8005070 <HAL_UART_IRQHandler+0x648>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	193b      	adds	r3, r7, r4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	228c      	movs	r2, #140	; 0x8c
 8004f1e:	2120      	movs	r1, #32
 8004f20:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	2480      	movs	r4, #128	; 0x80
 8004f38:	193a      	adds	r2, r7, r4
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f383 8810 	msr	PRIMASK, r3
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2110      	movs	r1, #16
 8004f54:	438a      	bics	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	193b      	adds	r3, r7, r4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f6c:	183b      	adds	r3, r7, r0
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0011      	movs	r1, r2
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 f88d 	bl	8005094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f7a:	e06f      	b.n	800505c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f7c:	23a4      	movs	r3, #164	; 0xa4
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	035b      	lsls	r3, r3, #13
 8004f86:	4013      	ands	r3, r2
 8004f88:	d010      	beq.n	8004fac <HAL_UART_IRQHandler+0x584>
 8004f8a:	239c      	movs	r3, #156	; 0x9c
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	03db      	lsls	r3, r3, #15
 8004f94:	4013      	ands	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2280      	movs	r2, #128	; 0x80
 8004f9e:	0352      	lsls	r2, r2, #13
 8004fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f001 faf1 	bl	800658c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004faa:	e05a      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004fac:	23a4      	movs	r3, #164	; 0xa4
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d016      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004fb8:	23a0      	movs	r3, #160	; 0xa0
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d106      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004fc4:	239c      	movs	r3, #156	; 0x9c
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d042      	beq.n	8005060 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	0010      	movs	r0, r2
 8004fe2:	4798      	blx	r3
    }
    return;
 8004fe4:	e03c      	b.n	8005060 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fe6:	23a4      	movs	r3, #164	; 0xa4
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2240      	movs	r2, #64	; 0x40
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d00a      	beq.n	8005008 <HAL_UART_IRQHandler+0x5e0>
 8004ff2:	23a0      	movs	r3, #160	; 0xa0
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2240      	movs	r2, #64	; 0x40
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 fe36 	bl	8005c72 <UART_EndTransmit_IT>
    return;
 8005006:	e02c      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005008:	23a4      	movs	r3, #164	; 0xa4
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0x606>
 8005016:	23a0      	movs	r3, #160	; 0xa0
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	05db      	lsls	r3, r3, #23
 8005020:	4013      	ands	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0018      	movs	r0, r3
 8005028:	f001 fac0 	bl	80065ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800502c:	e019      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800502e:	23a4      	movs	r3, #164	; 0xa4
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	045b      	lsls	r3, r3, #17
 8005038:	4013      	ands	r3, r2
 800503a:	d012      	beq.n	8005062 <HAL_UART_IRQHandler+0x63a>
 800503c:	23a0      	movs	r3, #160	; 0xa0
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da0d      	bge.n	8005062 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f001 faa7 	bl	800659c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800504e:	e008      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
      return;
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	e006      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
    return;
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	e004      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
      return;
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	e002      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
      return;
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	e000      	b.n	8005062 <HAL_UART_IRQHandler+0x63a>
    return;
 8005060:	46c0      	nop			; (mov r8, r8)
  }
}
 8005062:	46bd      	mov	sp, r7
 8005064:	b02a      	add	sp, #168	; 0xa8
 8005066:	bdb0      	pop	{r4, r5, r7, pc}
 8005068:	fffffeff 	.word	0xfffffeff
 800506c:	fffffedf 	.word	0xfffffedf
 8005070:	effffffe 	.word	0xeffffffe

08005074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	000a      	movs	r2, r1
 800509e:	1cbb      	adds	r3, r7, #2
 80050a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ac:	b5b0      	push	{r4, r5, r7, lr}
 80050ae:	b090      	sub	sp, #64	; 0x40
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050b4:	231a      	movs	r3, #26
 80050b6:	2220      	movs	r2, #32
 80050b8:	189b      	adds	r3, r3, r2
 80050ba:	19db      	adds	r3, r3, r7
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4ac4      	ldr	r2, [pc, #784]	; (80053f0 <UART_SetConfig+0x344>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ea:	430b      	orrs	r3, r1
 80050ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4abf      	ldr	r2, [pc, #764]	; (80053f4 <UART_SetConfig+0x348>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0018      	movs	r0, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	0003      	movs	r3, r0
 8005104:	430b      	orrs	r3, r1
 8005106:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4ab9      	ldr	r2, [pc, #740]	; (80053f8 <UART_SetConfig+0x34c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d004      	beq.n	8005122 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800511e:	4313      	orrs	r3, r2
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4ab4      	ldr	r2, [pc, #720]	; (80053fc <UART_SetConfig+0x350>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	430b      	orrs	r3, r1
 8005136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	220f      	movs	r2, #15
 8005140:	4393      	bics	r3, r2
 8005142:	0018      	movs	r0, r3
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	0003      	movs	r3, r0
 800514e:	430b      	orrs	r3, r1
 8005150:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4aaa      	ldr	r2, [pc, #680]	; (8005400 <UART_SetConfig+0x354>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d131      	bne.n	80051c0 <UART_SetConfig+0x114>
 800515c:	4ba9      	ldr	r3, [pc, #676]	; (8005404 <UART_SetConfig+0x358>)
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2203      	movs	r2, #3
 8005162:	4013      	ands	r3, r2
 8005164:	2b03      	cmp	r3, #3
 8005166:	d01d      	beq.n	80051a4 <UART_SetConfig+0xf8>
 8005168:	d823      	bhi.n	80051b2 <UART_SetConfig+0x106>
 800516a:	2b02      	cmp	r3, #2
 800516c:	d00c      	beq.n	8005188 <UART_SetConfig+0xdc>
 800516e:	d820      	bhi.n	80051b2 <UART_SetConfig+0x106>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <UART_SetConfig+0xce>
 8005174:	2b01      	cmp	r3, #1
 8005176:	d00e      	beq.n	8005196 <UART_SetConfig+0xea>
 8005178:	e01b      	b.n	80051b2 <UART_SetConfig+0x106>
 800517a:	231b      	movs	r3, #27
 800517c:	2220      	movs	r2, #32
 800517e:	189b      	adds	r3, r3, r2
 8005180:	19db      	adds	r3, r3, r7
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e071      	b.n	800526c <UART_SetConfig+0x1c0>
 8005188:	231b      	movs	r3, #27
 800518a:	2220      	movs	r2, #32
 800518c:	189b      	adds	r3, r3, r2
 800518e:	19db      	adds	r3, r3, r7
 8005190:	2202      	movs	r2, #2
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e06a      	b.n	800526c <UART_SetConfig+0x1c0>
 8005196:	231b      	movs	r3, #27
 8005198:	2220      	movs	r2, #32
 800519a:	189b      	adds	r3, r3, r2
 800519c:	19db      	adds	r3, r3, r7
 800519e:	2204      	movs	r2, #4
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e063      	b.n	800526c <UART_SetConfig+0x1c0>
 80051a4:	231b      	movs	r3, #27
 80051a6:	2220      	movs	r2, #32
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	2208      	movs	r2, #8
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e05c      	b.n	800526c <UART_SetConfig+0x1c0>
 80051b2:	231b      	movs	r3, #27
 80051b4:	2220      	movs	r2, #32
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	19db      	adds	r3, r3, r7
 80051ba:	2210      	movs	r2, #16
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e055      	b.n	800526c <UART_SetConfig+0x1c0>
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a90      	ldr	r2, [pc, #576]	; (8005408 <UART_SetConfig+0x35c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d106      	bne.n	80051d8 <UART_SetConfig+0x12c>
 80051ca:	231b      	movs	r3, #27
 80051cc:	2220      	movs	r2, #32
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	19db      	adds	r3, r3, r7
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e049      	b.n	800526c <UART_SetConfig+0x1c0>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a86      	ldr	r2, [pc, #536]	; (80053f8 <UART_SetConfig+0x34c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d13e      	bne.n	8005260 <UART_SetConfig+0x1b4>
 80051e2:	4b88      	ldr	r3, [pc, #544]	; (8005404 <UART_SetConfig+0x358>)
 80051e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051e6:	23c0      	movs	r3, #192	; 0xc0
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	4013      	ands	r3, r2
 80051ec:	22c0      	movs	r2, #192	; 0xc0
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <UART_SetConfig+0x198>
 80051f4:	22c0      	movs	r2, #192	; 0xc0
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d82a      	bhi.n	8005252 <UART_SetConfig+0x1a6>
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	4293      	cmp	r3, r2
 8005202:	d011      	beq.n	8005228 <UART_SetConfig+0x17c>
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	0112      	lsls	r2, r2, #4
 8005208:	4293      	cmp	r3, r2
 800520a:	d822      	bhi.n	8005252 <UART_SetConfig+0x1a6>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <UART_SetConfig+0x16e>
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	00d2      	lsls	r2, r2, #3
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <UART_SetConfig+0x18a>
 8005218:	e01b      	b.n	8005252 <UART_SetConfig+0x1a6>
 800521a:	231b      	movs	r3, #27
 800521c:	2220      	movs	r2, #32
 800521e:	189b      	adds	r3, r3, r2
 8005220:	19db      	adds	r3, r3, r7
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e021      	b.n	800526c <UART_SetConfig+0x1c0>
 8005228:	231b      	movs	r3, #27
 800522a:	2220      	movs	r2, #32
 800522c:	189b      	adds	r3, r3, r2
 800522e:	19db      	adds	r3, r3, r7
 8005230:	2202      	movs	r2, #2
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e01a      	b.n	800526c <UART_SetConfig+0x1c0>
 8005236:	231b      	movs	r3, #27
 8005238:	2220      	movs	r2, #32
 800523a:	189b      	adds	r3, r3, r2
 800523c:	19db      	adds	r3, r3, r7
 800523e:	2204      	movs	r2, #4
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e013      	b.n	800526c <UART_SetConfig+0x1c0>
 8005244:	231b      	movs	r3, #27
 8005246:	2220      	movs	r2, #32
 8005248:	189b      	adds	r3, r3, r2
 800524a:	19db      	adds	r3, r3, r7
 800524c:	2208      	movs	r2, #8
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e00c      	b.n	800526c <UART_SetConfig+0x1c0>
 8005252:	231b      	movs	r3, #27
 8005254:	2220      	movs	r2, #32
 8005256:	189b      	adds	r3, r3, r2
 8005258:	19db      	adds	r3, r3, r7
 800525a:	2210      	movs	r2, #16
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e005      	b.n	800526c <UART_SetConfig+0x1c0>
 8005260:	231b      	movs	r3, #27
 8005262:	2220      	movs	r2, #32
 8005264:	189b      	adds	r3, r3, r2
 8005266:	19db      	adds	r3, r3, r7
 8005268:	2210      	movs	r2, #16
 800526a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <UART_SetConfig+0x34c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d000      	beq.n	8005278 <UART_SetConfig+0x1cc>
 8005276:	e092      	b.n	800539e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005278:	231b      	movs	r3, #27
 800527a:	2220      	movs	r2, #32
 800527c:	189b      	adds	r3, r3, r2
 800527e:	19db      	adds	r3, r3, r7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d015      	beq.n	80052b2 <UART_SetConfig+0x206>
 8005286:	dc18      	bgt.n	80052ba <UART_SetConfig+0x20e>
 8005288:	2b04      	cmp	r3, #4
 800528a:	d00d      	beq.n	80052a8 <UART_SetConfig+0x1fc>
 800528c:	dc15      	bgt.n	80052ba <UART_SetConfig+0x20e>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <UART_SetConfig+0x1ec>
 8005292:	2b02      	cmp	r3, #2
 8005294:	d005      	beq.n	80052a2 <UART_SetConfig+0x1f6>
 8005296:	e010      	b.n	80052ba <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe f89a 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800529c:	0003      	movs	r3, r0
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052a0:	e014      	b.n	80052cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a2:	4b5a      	ldr	r3, [pc, #360]	; (800540c <UART_SetConfig+0x360>)
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052a6:	e011      	b.n	80052cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a8:	f7fe f806 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80052ac:	0003      	movs	r3, r0
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b0:	e00c      	b.n	80052cc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b8:	e008      	b.n	80052cc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052be:	231a      	movs	r3, #26
 80052c0:	2220      	movs	r2, #32
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	19db      	adds	r3, r3, r7
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
        break;
 80052ca:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d100      	bne.n	80052d4 <UART_SetConfig+0x228>
 80052d2:	e147      	b.n	8005564 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d8:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <UART_SetConfig+0x364>)
 80052da:	0052      	lsls	r2, r2, #1
 80052dc:	5ad3      	ldrh	r3, [r2, r3]
 80052de:	0019      	movs	r1, r3
 80052e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052e2:	f7fa ff19 	bl	8000118 <__udivsi3>
 80052e6:	0003      	movs	r3, r0
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	0013      	movs	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d305      	bcc.n	8005306 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005302:	429a      	cmp	r2, r3
 8005304:	d906      	bls.n	8005314 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005306:	231a      	movs	r3, #26
 8005308:	2220      	movs	r2, #32
 800530a:	189b      	adds	r3, r3, r2
 800530c:	19db      	adds	r3, r3, r7
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e127      	b.n	8005564 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <UART_SetConfig+0x364>)
 8005322:	0052      	lsls	r2, r2, #1
 8005324:	5ad3      	ldrh	r3, [r2, r3]
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	69b8      	ldr	r0, [r7, #24]
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	f7fa ffb6 	bl	80002a4 <__aeabi_uldivmod>
 8005338:	0002      	movs	r2, r0
 800533a:	000b      	movs	r3, r1
 800533c:	0e11      	lsrs	r1, r2, #24
 800533e:	021d      	lsls	r5, r3, #8
 8005340:	430d      	orrs	r5, r1
 8005342:	0214      	lsls	r4, r2, #8
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	1900      	adds	r0, r0, r4
 8005356:	4169      	adcs	r1, r5
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f7fa ff9d 	bl	80002a4 <__aeabi_uldivmod>
 800536a:	0002      	movs	r2, r0
 800536c:	000b      	movs	r3, r1
 800536e:	0013      	movs	r3, r2
 8005370:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005374:	23c0      	movs	r3, #192	; 0xc0
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d309      	bcc.n	8005390 <UART_SetConfig+0x2e4>
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	035b      	lsls	r3, r3, #13
 8005382:	429a      	cmp	r2, r3
 8005384:	d204      	bcs.n	8005390 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	e0e9      	b.n	8005564 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005390:	231a      	movs	r3, #26
 8005392:	2220      	movs	r2, #32
 8005394:	189b      	adds	r3, r3, r2
 8005396:	19db      	adds	r3, r3, r7
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e0e2      	b.n	8005564 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d000      	beq.n	80053ac <UART_SetConfig+0x300>
 80053aa:	e083      	b.n	80054b4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80053ac:	231b      	movs	r3, #27
 80053ae:	2220      	movs	r2, #32
 80053b0:	189b      	adds	r3, r3, r2
 80053b2:	19db      	adds	r3, r3, r7
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d015      	beq.n	80053e6 <UART_SetConfig+0x33a>
 80053ba:	dc2b      	bgt.n	8005414 <UART_SetConfig+0x368>
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d00d      	beq.n	80053dc <UART_SetConfig+0x330>
 80053c0:	dc28      	bgt.n	8005414 <UART_SetConfig+0x368>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <UART_SetConfig+0x320>
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d005      	beq.n	80053d6 <UART_SetConfig+0x32a>
 80053ca:	e023      	b.n	8005414 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe f800 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80053d0:	0003      	movs	r3, r0
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053d4:	e027      	b.n	8005426 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <UART_SetConfig+0x360>)
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053da:	e024      	b.n	8005426 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053dc:	f7fd ff6c 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80053e0:	0003      	movs	r3, r0
 80053e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e4:	e01f      	b.n	8005426 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ec:	e01b      	b.n	8005426 <UART_SetConfig+0x37a>
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	cfff69f3 	.word	0xcfff69f3
 80053f4:	ffffcfff 	.word	0xffffcfff
 80053f8:	40008000 	.word	0x40008000
 80053fc:	11fff4ff 	.word	0x11fff4ff
 8005400:	40013800 	.word	0x40013800
 8005404:	40021000 	.word	0x40021000
 8005408:	40004400 	.word	0x40004400
 800540c:	00f42400 	.word	0x00f42400
 8005410:	08007de4 	.word	0x08007de4
      default:
        pclk = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005418:	231a      	movs	r3, #26
 800541a:	2220      	movs	r2, #32
 800541c:	189b      	adds	r3, r3, r2
 800541e:	19db      	adds	r3, r3, r7
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
        break;
 8005424:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	2b00      	cmp	r3, #0
 800542a:	d100      	bne.n	800542e <UART_SetConfig+0x382>
 800542c:	e09a      	b.n	8005564 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <UART_SetConfig+0x4e8>)
 8005434:	0052      	lsls	r2, r2, #1
 8005436:	5ad3      	ldrh	r3, [r2, r3]
 8005438:	0019      	movs	r1, r3
 800543a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800543c:	f7fa fe6c 	bl	8000118 <__udivsi3>
 8005440:	0003      	movs	r3, r0
 8005442:	005a      	lsls	r2, r3, #1
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	18d2      	adds	r2, r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	0019      	movs	r1, r3
 8005452:	0010      	movs	r0, r2
 8005454:	f7fa fe60 	bl	8000118 <__udivsi3>
 8005458:	0003      	movs	r3, r0
 800545a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d921      	bls.n	80054a6 <UART_SetConfig+0x3fa>
 8005462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	025b      	lsls	r3, r3, #9
 8005468:	429a      	cmp	r2, r3
 800546a:	d21c      	bcs.n	80054a6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	b29a      	uxth	r2, r3
 8005470:	200e      	movs	r0, #14
 8005472:	2420      	movs	r4, #32
 8005474:	1903      	adds	r3, r0, r4
 8005476:	19db      	adds	r3, r3, r7
 8005478:	210f      	movs	r1, #15
 800547a:	438a      	bics	r2, r1
 800547c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	b29b      	uxth	r3, r3
 8005484:	2207      	movs	r2, #7
 8005486:	4013      	ands	r3, r2
 8005488:	b299      	uxth	r1, r3
 800548a:	1903      	adds	r3, r0, r4
 800548c:	19db      	adds	r3, r3, r7
 800548e:	1902      	adds	r2, r0, r4
 8005490:	19d2      	adds	r2, r2, r7
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	1902      	adds	r2, r0, r4
 800549e:	19d2      	adds	r2, r2, r7
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	e05e      	b.n	8005564 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80054a6:	231a      	movs	r3, #26
 80054a8:	2220      	movs	r2, #32
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	19db      	adds	r3, r3, r7
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e057      	b.n	8005564 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b4:	231b      	movs	r3, #27
 80054b6:	2220      	movs	r2, #32
 80054b8:	189b      	adds	r3, r3, r2
 80054ba:	19db      	adds	r3, r3, r7
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d015      	beq.n	80054ee <UART_SetConfig+0x442>
 80054c2:	dc18      	bgt.n	80054f6 <UART_SetConfig+0x44a>
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d00d      	beq.n	80054e4 <UART_SetConfig+0x438>
 80054c8:	dc15      	bgt.n	80054f6 <UART_SetConfig+0x44a>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <UART_SetConfig+0x428>
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d005      	beq.n	80054de <UART_SetConfig+0x432>
 80054d2:	e010      	b.n	80054f6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fd ff7c 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80054d8:	0003      	movs	r3, r0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054dc:	e014      	b.n	8005508 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054de:	4b2e      	ldr	r3, [pc, #184]	; (8005598 <UART_SetConfig+0x4ec>)
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e2:	e011      	b.n	8005508 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e4:	f7fd fee8 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80054e8:	0003      	movs	r3, r0
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ec:	e00c      	b.n	8005508 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054f4:	e008      	b.n	8005508 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054fa:	231a      	movs	r3, #26
 80054fc:	2220      	movs	r2, #32
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	19db      	adds	r3, r3, r7
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
        break;
 8005506:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02a      	beq.n	8005564 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <UART_SetConfig+0x4e8>)
 8005514:	0052      	lsls	r2, r2, #1
 8005516:	5ad3      	ldrh	r3, [r2, r3]
 8005518:	0019      	movs	r1, r3
 800551a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800551c:	f7fa fdfc 	bl	8000118 <__udivsi3>
 8005520:	0003      	movs	r3, r0
 8005522:	001a      	movs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	18d2      	adds	r2, r2, r3
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	0019      	movs	r1, r3
 8005532:	0010      	movs	r0, r2
 8005534:	f7fa fdf0 	bl	8000118 <__udivsi3>
 8005538:	0003      	movs	r3, r0
 800553a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	2b0f      	cmp	r3, #15
 8005540:	d90a      	bls.n	8005558 <UART_SetConfig+0x4ac>
 8005542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	025b      	lsls	r3, r3, #9
 8005548:	429a      	cmp	r2, r3
 800554a:	d205      	bcs.n	8005558 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	b29a      	uxth	r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	e005      	b.n	8005564 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005558:	231a      	movs	r3, #26
 800555a:	2220      	movs	r2, #32
 800555c:	189b      	adds	r3, r3, r2
 800555e:	19db      	adds	r3, r3, r7
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	226a      	movs	r2, #106	; 0x6a
 8005568:	2101      	movs	r1, #1
 800556a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2268      	movs	r2, #104	; 0x68
 8005570:	2101      	movs	r1, #1
 8005572:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	2200      	movs	r2, #0
 8005578:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	2200      	movs	r2, #0
 800557e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005580:	231a      	movs	r3, #26
 8005582:	2220      	movs	r2, #32
 8005584:	189b      	adds	r3, r3, r2
 8005586:	19db      	adds	r3, r3, r7
 8005588:	781b      	ldrb	r3, [r3, #0]
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b010      	add	sp, #64	; 0x40
 8005590:	bdb0      	pop	{r4, r5, r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	08007de4 	.word	0x08007de4
 8005598:	00f42400 	.word	0x00f42400

0800559c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	2201      	movs	r2, #1
 80055aa:	4013      	ands	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <UART_AdvFeatureConfig+0x144>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	0019      	movs	r1, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	2202      	movs	r2, #2
 80055cc:	4013      	ands	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4a43      	ldr	r2, [pc, #268]	; (80056e4 <UART_AdvFeatureConfig+0x148>)
 80055d8:	4013      	ands	r3, r2
 80055da:	0019      	movs	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	2204      	movs	r2, #4
 80055ee:	4013      	ands	r3, r2
 80055f0:	d00b      	beq.n	800560a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <UART_AdvFeatureConfig+0x14c>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	2208      	movs	r2, #8
 8005610:	4013      	ands	r3, r2
 8005612:	d00b      	beq.n	800562c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4a34      	ldr	r2, [pc, #208]	; (80056ec <UART_AdvFeatureConfig+0x150>)
 800561c:	4013      	ands	r3, r2
 800561e:	0019      	movs	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	2210      	movs	r2, #16
 8005632:	4013      	ands	r3, r2
 8005634:	d00b      	beq.n	800564e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <UART_AdvFeatureConfig+0x154>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	2220      	movs	r2, #32
 8005654:	4013      	ands	r3, r2
 8005656:	d00b      	beq.n	8005670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <UART_AdvFeatureConfig+0x158>)
 8005660:	4013      	ands	r3, r2
 8005662:	0019      	movs	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	4013      	ands	r3, r2
 8005678:	d01d      	beq.n	80056b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <UART_AdvFeatureConfig+0x15c>)
 8005682:	4013      	ands	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	035b      	lsls	r3, r3, #13
 800569a:	429a      	cmp	r2, r3
 800569c:	d10b      	bne.n	80056b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <UART_AdvFeatureConfig+0x160>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	4013      	ands	r3, r2
 80056be:	d00b      	beq.n	80056d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a0e      	ldr	r2, [pc, #56]	; (8005700 <UART_AdvFeatureConfig+0x164>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	fffdffff 	.word	0xfffdffff
 80056e4:	fffeffff 	.word	0xfffeffff
 80056e8:	fffbffff 	.word	0xfffbffff
 80056ec:	ffff7fff 	.word	0xffff7fff
 80056f0:	ffffefff 	.word	0xffffefff
 80056f4:	ffffdfff 	.word	0xffffdfff
 80056f8:	ffefffff 	.word	0xffefffff
 80056fc:	ff9fffff 	.word	0xff9fffff
 8005700:	fff7ffff 	.word	0xfff7ffff

08005704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2290      	movs	r2, #144	; 0x90
 8005710:	2100      	movs	r1, #0
 8005712:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005714:	f7fb fd42 	bl	800119c <HAL_GetTick>
 8005718:	0003      	movs	r3, r0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2208      	movs	r2, #8
 8005724:	4013      	ands	r3, r2
 8005726:	2b08      	cmp	r3, #8
 8005728:	d10c      	bne.n	8005744 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2280      	movs	r2, #128	; 0x80
 800572e:	0391      	lsls	r1, r2, #14
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <UART_CheckIdleState+0x98>)
 8005734:	9200      	str	r2, [sp, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	f000 f832 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 800573c:	1e03      	subs	r3, r0, #0
 800573e:	d001      	beq.n	8005744 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e026      	b.n	8005792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2204      	movs	r2, #4
 800574c:	4013      	ands	r3, r2
 800574e:	2b04      	cmp	r3, #4
 8005750:	d10c      	bne.n	800576c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	03d1      	lsls	r1, r2, #15
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4a10      	ldr	r2, [pc, #64]	; (800579c <UART_CheckIdleState+0x98>)
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	f000 f81e 	bl	80057a0 <UART_WaitOnFlagUntilTimeout>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d001      	beq.n	800576c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e012      	b.n	8005792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2288      	movs	r2, #136	; 0x88
 8005770:	2120      	movs	r1, #32
 8005772:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	228c      	movs	r2, #140	; 0x8c
 8005778:	2120      	movs	r1, #32
 800577a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2284      	movs	r2, #132	; 0x84
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	0018      	movs	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	b004      	add	sp, #16
 8005798:	bd80      	pop	{r7, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	01ffffff 	.word	0x01ffffff

080057a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b094      	sub	sp, #80	; 0x50
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	1dfb      	adds	r3, r7, #7
 80057ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b0:	e0a7      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	3301      	adds	r3, #1
 80057b6:	d100      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80057b8:	e0a3      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fb fcef 	bl	800119c <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d13f      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d0:	f3ef 8310 	mrs	r3, PRIMASK
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
 80057da:	2301      	movs	r3, #1
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	f383 8810 	msr	PRIMASK, r3
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	494e      	ldr	r1, [pc, #312]	; (800592c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80057f2:	400a      	ands	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	f383 8810 	msr	PRIMASK, r3
}
 8005800:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005802:	f3ef 8310 	mrs	r3, PRIMASK
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	643b      	str	r3, [r7, #64]	; 0x40
 800580c:	2301      	movs	r3, #1
 800580e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005812:	f383 8810 	msr	PRIMASK, r3
}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2101      	movs	r1, #1
 8005824:	438a      	bics	r2, r1
 8005826:	609a      	str	r2, [r3, #8]
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	f383 8810 	msr	PRIMASK, r3
}
 8005832:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2288      	movs	r2, #136	; 0x88
 8005838:	2120      	movs	r1, #32
 800583a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	228c      	movs	r2, #140	; 0x8c
 8005840:	2120      	movs	r1, #32
 8005842:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2284      	movs	r2, #132	; 0x84
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e069      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2204      	movs	r2, #4
 8005858:	4013      	ands	r3, r2
 800585a:	d052      	beq.n	8005902 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	401a      	ands	r2, r3
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	429a      	cmp	r2, r3
 800586e:	d148      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	0112      	lsls	r2, r2, #4
 8005878:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587a:	f3ef 8310 	mrs	r3, PRIMASK
 800587e:	613b      	str	r3, [r7, #16]
  return(result);
 8005880:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f383 8810 	msr	PRIMASK, r3
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4924      	ldr	r1, [pc, #144]	; (800592c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800589c:	400a      	ands	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80058b2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b6:	2301      	movs	r3, #1
 80058b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	438a      	bics	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2288      	movs	r2, #136	; 0x88
 80058e2:	2120      	movs	r1, #32
 80058e4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	228c      	movs	r2, #140	; 0x8c
 80058ea:	2120      	movs	r1, #32
 80058ec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2290      	movs	r2, #144	; 0x90
 80058f2:	2120      	movs	r1, #32
 80058f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2284      	movs	r2, #132	; 0x84
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e010      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	425a      	negs	r2, r3
 8005912:	4153      	adcs	r3, r2
 8005914:	b2db      	uxtb	r3, r3
 8005916:	001a      	movs	r2, r3
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d100      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x182>
 8005920:	e747      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b014      	add	sp, #80	; 0x50
 800592a:	bd80      	pop	{r7, pc}
 800592c:	fffffe5f 	.word	0xfffffe5f

08005930 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b098      	sub	sp, #96	; 0x60
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	1dbb      	adds	r3, r7, #6
 800593c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1dba      	adds	r2, r7, #6
 8005948:	215c      	movs	r1, #92	; 0x5c
 800594a:	8812      	ldrh	r2, [r2, #0]
 800594c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1dba      	adds	r2, r7, #6
 8005952:	215e      	movs	r1, #94	; 0x5e
 8005954:	8812      	ldrh	r2, [r2, #0]
 8005956:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	015b      	lsls	r3, r3, #5
 8005966:	429a      	cmp	r2, r3
 8005968:	d10d      	bne.n	8005986 <UART_Start_Receive_IT+0x56>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <UART_Start_Receive_IT+0x4c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2260      	movs	r2, #96	; 0x60
 8005976:	497b      	ldr	r1, [pc, #492]	; (8005b64 <UART_Start_Receive_IT+0x234>)
 8005978:	5299      	strh	r1, [r3, r2]
 800597a:	e02e      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2260      	movs	r2, #96	; 0x60
 8005980:	21ff      	movs	r1, #255	; 0xff
 8005982:	5299      	strh	r1, [r3, r2]
 8005984:	e029      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <UART_Start_Receive_IT+0x7a>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <UART_Start_Receive_IT+0x70>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2260      	movs	r2, #96	; 0x60
 800599a:	21ff      	movs	r1, #255	; 0xff
 800599c:	5299      	strh	r1, [r3, r2]
 800599e:	e01c      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2260      	movs	r2, #96	; 0x60
 80059a4:	217f      	movs	r1, #127	; 0x7f
 80059a6:	5299      	strh	r1, [r3, r2]
 80059a8:	e017      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	055b      	lsls	r3, r3, #21
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d10d      	bne.n	80059d2 <UART_Start_Receive_IT+0xa2>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <UART_Start_Receive_IT+0x98>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2260      	movs	r2, #96	; 0x60
 80059c2:	217f      	movs	r1, #127	; 0x7f
 80059c4:	5299      	strh	r1, [r3, r2]
 80059c6:	e008      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2260      	movs	r2, #96	; 0x60
 80059cc:	213f      	movs	r1, #63	; 0x3f
 80059ce:	5299      	strh	r1, [r3, r2]
 80059d0:	e003      	b.n	80059da <UART_Start_Receive_IT+0xaa>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2260      	movs	r2, #96	; 0x60
 80059d6:	2100      	movs	r1, #0
 80059d8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2290      	movs	r2, #144	; 0x90
 80059de:	2100      	movs	r1, #0
 80059e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	228c      	movs	r2, #140	; 0x8c
 80059e6:	2122      	movs	r1, #34	; 0x22
 80059e8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f4:	2301      	movs	r3, #1
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	059b      	lsls	r3, r3, #22
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d150      	bne.n	8005aca <UART_Start_Receive_IT+0x19a>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2268      	movs	r2, #104	; 0x68
 8005a2c:	5a9b      	ldrh	r3, [r3, r2]
 8005a2e:	1dba      	adds	r2, r7, #6
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d349      	bcc.n	8005aca <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	2380      	movs	r3, #128	; 0x80
 8005a3c:	015b      	lsls	r3, r3, #5
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d107      	bne.n	8005a52 <UART_Start_Receive_IT+0x122>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a46      	ldr	r2, [pc, #280]	; (8005b68 <UART_Start_Receive_IT+0x238>)
 8005a4e:	675a      	str	r2, [r3, #116]	; 0x74
 8005a50:	e002      	b.n	8005a58 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a45      	ldr	r2, [pc, #276]	; (8005b6c <UART_Start_Receive_IT+0x23c>)
 8005a56:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a60:	f3ef 8310 	mrs	r3, PRIMASK
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f383 8810 	msr	PRIMASK, r3
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	0049      	lsls	r1, r1, #1
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a94:	f3ef 8310 	mrs	r3, PRIMASK
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	0549      	lsls	r1, r1, #21
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f383 8810 	msr	PRIMASK, r3
}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	e047      	b.n	8005b5a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	015b      	lsls	r3, r3, #5
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d107      	bne.n	8005ae6 <UART_Start_Receive_IT+0x1b6>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	; (8005b70 <UART_Start_Receive_IT+0x240>)
 8005ae2:	675a      	str	r2, [r3, #116]	; 0x74
 8005ae4:	e002      	b.n	8005aec <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <UART_Start_Receive_IT+0x244>)
 8005aea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d019      	beq.n	8005b28 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af4:	f3ef 8310 	mrs	r3, PRIMASK
 8005af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005afa:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afe:	2301      	movs	r3, #1
 8005b00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2190      	movs	r1, #144	; 0x90
 8005b16:	0049      	lsls	r1, r1, #1
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	e018      	b.n	8005b5a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b30:	653b      	str	r3, [r7, #80]	; 0x50
 8005b32:	2301      	movs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2120      	movs	r1, #32
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b018      	add	sp, #96	; 0x60
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	000001ff 	.word	0x000001ff
 8005b68:	080062a1 	.word	0x080062a1
 8005b6c:	08005fb5 	.word	0x08005fb5
 8005b70:	08005e41 	.word	0x08005e41
 8005b74:	08005ccd 	.word	0x08005ccd

08005b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8310 	mrs	r3, PRIMASK
 8005b84:	617b      	str	r3, [r7, #20]
  return(result);
 8005b86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4926      	ldr	r1, [pc, #152]	; (8005c3c <UART_EndRxTransfer+0xc4>)
 8005ba2:	400a      	ands	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f383 8810 	msr	PRIMASK, r3
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb6:	623b      	str	r3, [r7, #32]
  return(result);
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	f383 8810 	msr	PRIMASK, r3
}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	491b      	ldr	r1, [pc, #108]	; (8005c40 <UART_EndRxTransfer+0xc8>)
 8005bd4:	400a      	ands	r2, r1
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	f383 8810 	msr	PRIMASK, r3
}
 8005be2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d118      	bne.n	8005c1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bec:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			; (mov r8, r8)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	438a      	bics	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	228c      	movs	r2, #140	; 0x8c
 8005c22:	2120      	movs	r1, #32
 8005c24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b00e      	add	sp, #56	; 0x38
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	fffffedf 	.word	0xfffffedf
 8005c40:	effffffe 	.word	0xeffffffe

08005c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	225e      	movs	r2, #94	; 0x5e
 8005c56:	2100      	movs	r1, #0
 8005c58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2256      	movs	r2, #86	; 0x56
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	0018      	movs	r0, r3
 8005c66:	f7ff fa0d 	bl	8005084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b004      	add	sp, #16
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c80:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	2301      	movs	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2140      	movs	r1, #64	; 0x40
 8005c9c:	438a      	bics	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2288      	movs	r2, #136	; 0x88
 8005cb0:	2120      	movs	r1, #32
 8005cb2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7ff f9d9 	bl	8005074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b006      	add	sp, #24
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b090      	sub	sp, #64	; 0x40
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cd4:	203e      	movs	r0, #62	; 0x3e
 8005cd6:	183b      	adds	r3, r7, r0
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	2160      	movs	r1, #96	; 0x60
 8005cdc:	5a52      	ldrh	r2, [r2, r1]
 8005cde:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	228c      	movs	r2, #140	; 0x8c
 8005ce4:	589b      	ldr	r3, [r3, r2]
 8005ce6:	2b22      	cmp	r3, #34	; 0x22
 8005ce8:	d000      	beq.n	8005cec <UART_RxISR_8BIT+0x20>
 8005cea:	e09a      	b.n	8005e22 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf2:	213c      	movs	r1, #60	; 0x3c
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	183b      	adds	r3, r7, r0
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b2d9      	uxtb	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d08:	400a      	ands	r2, r1
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	225e      	movs	r2, #94	; 0x5e
 8005d1c:	5a9b      	ldrh	r3, [r3, r2]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b299      	uxth	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	225e      	movs	r2, #94	; 0x5e
 8005d28:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	225e      	movs	r2, #94	; 0x5e
 8005d2e:	5a9b      	ldrh	r3, [r3, r2]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d000      	beq.n	8005d38 <UART_RxISR_8BIT+0x6c>
 8005d36:	e07c      	b.n	8005e32 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d38:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d42:	2301      	movs	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4938      	ldr	r1, [pc, #224]	; (8005e3c <UART_RxISR_8BIT+0x170>)
 8005d5a:	400a      	ands	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
 8005d74:	2301      	movs	r3, #1
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	f383 8810 	msr	PRIMASK, r3
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	438a      	bics	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	f383 8810 	msr	PRIMASK, r3
}
 8005d9a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	228c      	movs	r2, #140	; 0x8c
 8005da0:	2120      	movs	r1, #32
 8005da2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d12f      	bne.n	8005e18 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dc4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc8:	2301      	movs	r3, #1
 8005dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f383 8810 	msr	PRIMASK, r3
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2110      	movs	r1, #16
 8005de0:	438a      	bics	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f383 8810 	msr	PRIMASK, r3
}
 8005dee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2210      	movs	r2, #16
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d103      	bne.n	8005e06 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	225c      	movs	r2, #92	; 0x5c
 8005e0a:	5a9a      	ldrh	r2, [r3, r2]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0011      	movs	r1, r2
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7ff f93f 	bl	8005094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e16:	e00c      	b.n	8005e32 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 fed6 	bl	8006bcc <HAL_UART_RxCpltCallback>
}
 8005e20:	e007      	b.n	8005e32 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	619a      	str	r2, [r3, #24]
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b010      	add	sp, #64	; 0x40
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	fffffedf 	.word	0xfffffedf

08005e40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b090      	sub	sp, #64	; 0x40
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e48:	203e      	movs	r0, #62	; 0x3e
 8005e4a:	183b      	adds	r3, r7, r0
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	2160      	movs	r1, #96	; 0x60
 8005e50:	5a52      	ldrh	r2, [r2, r1]
 8005e52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	228c      	movs	r2, #140	; 0x8c
 8005e58:	589b      	ldr	r3, [r3, r2]
 8005e5a:	2b22      	cmp	r3, #34	; 0x22
 8005e5c:	d000      	beq.n	8005e60 <UART_RxISR_16BIT+0x20>
 8005e5e:	e09a      	b.n	8005f96 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e66:	213c      	movs	r1, #60	; 0x3c
 8005e68:	187b      	adds	r3, r7, r1
 8005e6a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	183a      	adds	r2, r7, r0
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	8812      	ldrh	r2, [r2, #0]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	225e      	movs	r2, #94	; 0x5e
 8005e90:	5a9b      	ldrh	r3, [r3, r2]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b299      	uxth	r1, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	225e      	movs	r2, #94	; 0x5e
 8005e9c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	225e      	movs	r2, #94	; 0x5e
 8005ea2:	5a9b      	ldrh	r3, [r3, r2]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d000      	beq.n	8005eac <UART_RxISR_16BIT+0x6c>
 8005eaa:	e07c      	b.n	8005fa6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eac:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f383 8810 	msr	PRIMASK, r3
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4938      	ldr	r1, [pc, #224]	; (8005fb0 <UART_RxISR_16BIT+0x170>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f383 8810 	msr	PRIMASK, r3
}
 8005edc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ede:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ee4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee8:	2301      	movs	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2101      	movs	r1, #1
 8005f00:	438a      	bics	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f383 8810 	msr	PRIMASK, r3
}
 8005f0e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	228c      	movs	r2, #140	; 0x8c
 8005f14:	2120      	movs	r1, #32
 8005f16:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d12f      	bne.n	8005f8c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f32:	f3ef 8310 	mrs	r3, PRIMASK
 8005f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f38:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f383 8810 	msr	PRIMASK, r3
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2110      	movs	r1, #16
 8005f54:	438a      	bics	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f383 8810 	msr	PRIMASK, r3
}
 8005f62:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d103      	bne.n	8005f7a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2210      	movs	r2, #16
 8005f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	225c      	movs	r2, #92	; 0x5c
 8005f7e:	5a9a      	ldrh	r2, [r3, r2]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0011      	movs	r1, r2
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7ff f885 	bl	8005094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f8a:	e00c      	b.n	8005fa6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f000 fe1c 	bl	8006bcc <HAL_UART_RxCpltCallback>
}
 8005f94:	e007      	b.n	8005fa6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2108      	movs	r1, #8
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	619a      	str	r2, [r3, #24]
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b010      	add	sp, #64	; 0x40
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	fffffedf 	.word	0xfffffedf

08005fb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b09c      	sub	sp, #112	; 0x70
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005fbc:	236a      	movs	r3, #106	; 0x6a
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	2160      	movs	r1, #96	; 0x60
 8005fc4:	5a52      	ldrh	r2, [r2, r1]
 8005fc6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	228c      	movs	r2, #140	; 0x8c
 8005fe4:	589b      	ldr	r3, [r3, r2]
 8005fe6:	2b22      	cmp	r3, #34	; 0x22
 8005fe8:	d000      	beq.n	8005fec <UART_RxISR_8BIT_FIFOEN+0x38>
 8005fea:	e144      	b.n	8006276 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fec:	235e      	movs	r3, #94	; 0x5e
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	2168      	movs	r1, #104	; 0x68
 8005ff4:	5a52      	ldrh	r2, [r2, r1]
 8005ff6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ff8:	e0eb      	b.n	80061d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006000:	215c      	movs	r1, #92	; 0x5c
 8006002:	187b      	adds	r3, r7, r1
 8006004:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006006:	187b      	adds	r3, r7, r1
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	236a      	movs	r3, #106	; 0x6a
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b2d9      	uxtb	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	400a      	ands	r2, r1
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	225e      	movs	r2, #94	; 0x5e
 800602c:	5a9b      	ldrh	r3, [r3, r2]
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b299      	uxth	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	225e      	movs	r2, #94	; 0x5e
 8006038:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	2207      	movs	r2, #7
 8006046:	4013      	ands	r3, r2
 8006048:	d049      	beq.n	80060de <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800604a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604c:	2201      	movs	r2, #1
 800604e:	4013      	ands	r3, r2
 8006050:	d010      	beq.n	8006074 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	4013      	ands	r3, r2
 800605a:	d00b      	beq.n	8006074 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2290      	movs	r2, #144	; 0x90
 8006068:	589b      	ldr	r3, [r3, r2]
 800606a:	2201      	movs	r2, #1
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2190      	movs	r1, #144	; 0x90
 8006072:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	d00f      	beq.n	800609c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800607c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607e:	2201      	movs	r2, #1
 8006080:	4013      	ands	r3, r2
 8006082:	d00b      	beq.n	800609c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2202      	movs	r2, #2
 800608a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2290      	movs	r2, #144	; 0x90
 8006090:	589b      	ldr	r3, [r3, r2]
 8006092:	2204      	movs	r2, #4
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2190      	movs	r1, #144	; 0x90
 800609a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	2204      	movs	r2, #4
 80060a0:	4013      	ands	r3, r2
 80060a2:	d00f      	beq.n	80060c4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80060a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a6:	2201      	movs	r2, #1
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2204      	movs	r2, #4
 80060b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2290      	movs	r2, #144	; 0x90
 80060b8:	589b      	ldr	r3, [r3, r2]
 80060ba:	2202      	movs	r2, #2
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2190      	movs	r1, #144	; 0x90
 80060c2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2290      	movs	r2, #144	; 0x90
 80060c8:	589b      	ldr	r3, [r3, r2]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7fe ffd7 	bl	8005084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2290      	movs	r2, #144	; 0x90
 80060da:	2100      	movs	r1, #0
 80060dc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	225e      	movs	r2, #94	; 0x5e
 80060e2:	5a9b      	ldrh	r3, [r3, r2]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d173      	bne.n	80061d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ea:	f3ef 8310 	mrs	r3, PRIMASK
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060f4:	2301      	movs	r3, #1
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f383 8810 	msr	PRIMASK, r3
}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4961      	ldr	r1, [pc, #388]	; (8006290 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800610c:	400a      	ands	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	f383 8810 	msr	PRIMASK, r3
}
 800611a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611c:	f3ef 8310 	mrs	r3, PRIMASK
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006124:	657b      	str	r3, [r7, #84]	; 0x54
 8006126:	2301      	movs	r3, #1
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	f383 8810 	msr	PRIMASK, r3
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4955      	ldr	r1, [pc, #340]	; (8006294 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800613e:	400a      	ands	r2, r1
 8006140:	609a      	str	r2, [r3, #8]
 8006142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006148:	f383 8810 	msr	PRIMASK, r3
}
 800614c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	228c      	movs	r2, #140	; 0x8c
 8006152:	2120      	movs	r1, #32
 8006154:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d12f      	bne.n	80061ca <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006170:	f3ef 8310 	mrs	r3, PRIMASK
 8006174:	623b      	str	r3, [r7, #32]
  return(result);
 8006176:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	653b      	str	r3, [r7, #80]	; 0x50
 800617a:	2301      	movs	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	f383 8810 	msr	PRIMASK, r3
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2110      	movs	r1, #16
 8006192:	438a      	bics	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	2210      	movs	r2, #16
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d103      	bne.n	80061b8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	225c      	movs	r2, #92	; 0x5c
 80061bc:	5a9a      	ldrh	r2, [r3, r2]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	0011      	movs	r1, r2
 80061c2:	0018      	movs	r0, r3
 80061c4:	f7fe ff66 	bl	8005094 <HAL_UARTEx_RxEventCallback>
 80061c8:	e003      	b.n	80061d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0018      	movs	r0, r3
 80061ce:	f000 fcfd 	bl	8006bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061d2:	235e      	movs	r3, #94	; 0x5e
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80061dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061de:	2220      	movs	r2, #32
 80061e0:	4013      	ands	r3, r2
 80061e2:	d000      	beq.n	80061e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80061e4:	e709      	b.n	8005ffa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061e6:	204e      	movs	r0, #78	; 0x4e
 80061e8:	183b      	adds	r3, r7, r0
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	215e      	movs	r1, #94	; 0x5e
 80061ee:	5a52      	ldrh	r2, [r2, r1]
 80061f0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061f2:	0001      	movs	r1, r0
 80061f4:	187b      	adds	r3, r7, r1
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d044      	beq.n	8006286 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2268      	movs	r2, #104	; 0x68
 8006200:	5a9b      	ldrh	r3, [r3, r2]
 8006202:	187a      	adds	r2, r7, r1
 8006204:	8812      	ldrh	r2, [r2, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d23d      	bcs.n	8006286 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620a:	f3ef 8310 	mrs	r3, PRIMASK
 800620e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006210:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006212:	64bb      	str	r3, [r7, #72]	; 0x48
 8006214:	2301      	movs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	491b      	ldr	r1, [pc, #108]	; (8006298 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800622c:	400a      	ands	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f383 8810 	msr	PRIMASK, r3
}
 800623a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a17      	ldr	r2, [pc, #92]	; (800629c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8006240:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	617b      	str	r3, [r7, #20]
  return(result);
 8006248:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800624a:	647b      	str	r3, [r7, #68]	; 0x44
 800624c:	2301      	movs	r3, #1
 800624e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f383 8810 	msr	PRIMASK, r3
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2120      	movs	r1, #32
 8006264:	430a      	orrs	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800626a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006274:	e007      	b.n	8006286 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2108      	movs	r1, #8
 8006282:	430a      	orrs	r2, r1
 8006284:	619a      	str	r2, [r3, #24]
}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b01c      	add	sp, #112	; 0x70
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	fffffeff 	.word	0xfffffeff
 8006294:	effffffe 	.word	0xeffffffe
 8006298:	efffffff 	.word	0xefffffff
 800629c:	08005ccd 	.word	0x08005ccd

080062a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b09e      	sub	sp, #120	; 0x78
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062a8:	2372      	movs	r3, #114	; 0x72
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	2160      	movs	r1, #96	; 0x60
 80062b0:	5a52      	ldrh	r2, [r2, r1]
 80062b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	228c      	movs	r2, #140	; 0x8c
 80062d0:	589b      	ldr	r3, [r3, r2]
 80062d2:	2b22      	cmp	r3, #34	; 0x22
 80062d4:	d000      	beq.n	80062d8 <UART_RxISR_16BIT_FIFOEN+0x38>
 80062d6:	e144      	b.n	8006562 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062d8:	2366      	movs	r3, #102	; 0x66
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	2168      	movs	r1, #104	; 0x68
 80062e0:	5a52      	ldrh	r2, [r2, r1]
 80062e2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062e4:	e0eb      	b.n	80064be <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ec:	2164      	movs	r1, #100	; 0x64
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80062f8:	187b      	adds	r3, r7, r1
 80062fa:	2272      	movs	r2, #114	; 0x72
 80062fc:	18ba      	adds	r2, r7, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	8812      	ldrh	r2, [r2, #0]
 8006302:	4013      	ands	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	225e      	movs	r2, #94	; 0x5e
 8006318:	5a9b      	ldrh	r3, [r3, r2]
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b299      	uxth	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	225e      	movs	r2, #94	; 0x5e
 8006324:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800632e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006330:	2207      	movs	r2, #7
 8006332:	4013      	ands	r3, r2
 8006334:	d049      	beq.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006338:	2201      	movs	r2, #1
 800633a:	4013      	ands	r3, r2
 800633c:	d010      	beq.n	8006360 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800633e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	4013      	ands	r3, r2
 8006346:	d00b      	beq.n	8006360 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2290      	movs	r2, #144	; 0x90
 8006354:	589b      	ldr	r3, [r3, r2]
 8006356:	2201      	movs	r2, #1
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2190      	movs	r1, #144	; 0x90
 800635e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006362:	2202      	movs	r2, #2
 8006364:	4013      	ands	r3, r2
 8006366:	d00f      	beq.n	8006388 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800636a:	2201      	movs	r2, #1
 800636c:	4013      	ands	r3, r2
 800636e:	d00b      	beq.n	8006388 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2202      	movs	r2, #2
 8006376:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2290      	movs	r2, #144	; 0x90
 800637c:	589b      	ldr	r3, [r3, r2]
 800637e:	2204      	movs	r2, #4
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2190      	movs	r1, #144	; 0x90
 8006386:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800638a:	2204      	movs	r2, #4
 800638c:	4013      	ands	r3, r2
 800638e:	d00f      	beq.n	80063b0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006392:	2201      	movs	r2, #1
 8006394:	4013      	ands	r3, r2
 8006396:	d00b      	beq.n	80063b0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2204      	movs	r2, #4
 800639e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2290      	movs	r2, #144	; 0x90
 80063a4:	589b      	ldr	r3, [r3, r2]
 80063a6:	2202      	movs	r2, #2
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2190      	movs	r1, #144	; 0x90
 80063ae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2290      	movs	r2, #144	; 0x90
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7fe fe61 	bl	8005084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2290      	movs	r2, #144	; 0x90
 80063c6:	2100      	movs	r1, #0
 80063c8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	225e      	movs	r2, #94	; 0x5e
 80063ce:	5a9b      	ldrh	r3, [r3, r2]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d173      	bne.n	80064be <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d6:	f3ef 8310 	mrs	r3, PRIMASK
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e0:	2301      	movs	r3, #1
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	f383 8810 	msr	PRIMASK, r3
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4961      	ldr	r1, [pc, #388]	; (800657c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80063f8:	400a      	ands	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f383 8810 	msr	PRIMASK, r3
}
 8006406:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006408:	f3ef 8310 	mrs	r3, PRIMASK
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006410:	65bb      	str	r3, [r7, #88]	; 0x58
 8006412:	2301      	movs	r3, #1
 8006414:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006418:	f383 8810 	msr	PRIMASK, r3
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4955      	ldr	r1, [pc, #340]	; (8006580 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800642a:	400a      	ands	r2, r1
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006430:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006434:	f383 8810 	msr	PRIMASK, r3
}
 8006438:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	228c      	movs	r2, #140	; 0x8c
 800643e:	2120      	movs	r1, #32
 8006440:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d12f      	bne.n	80064b6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006464:	657b      	str	r3, [r7, #84]	; 0x54
 8006466:	2301      	movs	r3, #1
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2110      	movs	r1, #16
 800647e:	438a      	bics	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2210      	movs	r2, #16
 8006496:	4013      	ands	r3, r2
 8006498:	2b10      	cmp	r3, #16
 800649a:	d103      	bne.n	80064a4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2210      	movs	r2, #16
 80064a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	225c      	movs	r2, #92	; 0x5c
 80064a8:	5a9a      	ldrh	r2, [r3, r2]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0011      	movs	r1, r2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7fe fdf0 	bl	8005094 <HAL_UARTEx_RxEventCallback>
 80064b4:	e003      	b.n	80064be <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 fb87 	bl	8006bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80064be:	2366      	movs	r3, #102	; 0x66
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <UART_RxISR_16BIT_FIFOEN+0x232>
 80064c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ca:	2220      	movs	r2, #32
 80064cc:	4013      	ands	r3, r2
 80064ce:	d000      	beq.n	80064d2 <UART_RxISR_16BIT_FIFOEN+0x232>
 80064d0:	e709      	b.n	80062e6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064d2:	2052      	movs	r0, #82	; 0x52
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	215e      	movs	r1, #94	; 0x5e
 80064da:	5a52      	ldrh	r2, [r2, r1]
 80064dc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064de:	0001      	movs	r1, r0
 80064e0:	187b      	adds	r3, r7, r1
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d044      	beq.n	8006572 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2268      	movs	r2, #104	; 0x68
 80064ec:	5a9b      	ldrh	r3, [r3, r2]
 80064ee:	187a      	adds	r2, r7, r1
 80064f0:	8812      	ldrh	r2, [r2, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d23d      	bcs.n	8006572 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f6:	f3ef 8310 	mrs	r3, PRIMASK
 80064fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80064fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006500:	2301      	movs	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f383 8810 	msr	PRIMASK, r3
}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	491b      	ldr	r1, [pc, #108]	; (8006584 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006518:	400a      	ands	r2, r1
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800651e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f383 8810 	msr	PRIMASK, r3
}
 8006526:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800652c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652e:	f3ef 8310 	mrs	r3, PRIMASK
 8006532:	61bb      	str	r3, [r7, #24]
  return(result);
 8006534:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006536:	64bb      	str	r3, [r7, #72]	; 0x48
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f383 8810 	msr	PRIMASK, r3
}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2120      	movs	r1, #32
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006560:	e007      	b.n	8006572 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2108      	movs	r1, #8
 800656e:	430a      	orrs	r2, r1
 8006570:	619a      	str	r2, [r3, #24]
}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	46bd      	mov	sp, r7
 8006576:	b01e      	add	sp, #120	; 0x78
 8006578:	bd80      	pop	{r7, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	fffffeff 	.word	0xfffffeff
 8006580:	effffffe 	.word	0xeffffffe
 8006584:	efffffff 	.word	0xefffffff
 8006588:	08005e41 	.word	0x08005e41

0800658c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b002      	add	sp, #8
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b002      	add	sp, #8
 80065ba:	bd80      	pop	{r7, pc}

080065bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065c0:	f7fa fd70 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065c4:	f000 f84a 	bl	800665c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065c8:	f000 fa9e 	bl	8006b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80065cc:	f000 fa68 	bl	8006aa0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80065d0:	f000 f8a2 	bl	8006718 <MX_ADC1_Init>
  MX_TIM1_Init();
 80065d4:	f000 f90c 	bl	80067f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80065d8:	f000 f9e6 	bl	80069a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Initialize PWM Channel 1
 80065dc:	4b17      	ldr	r3, [pc, #92]	; (800663c <main+0x80>)
 80065de:	2100      	movs	r1, #0
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fd f93d 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Initialize PWM Channel 2
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <main+0x80>)
 80065e8:	2104      	movs	r1, #4
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7fd f938 	bl	8003860 <HAL_TIM_PWM_Start>


  UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "STM32-SMPS Initialized!\r\n");	 // Transmit UART Startup message
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <main+0x84>)
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <main+0x88>)
 80065f4:	0011      	movs	r1, r2
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 fe7a 	bl	80072f0 <siprintf>
 80065fc:	0003      	movs	r3, r0
 80065fe:	b29a      	uxth	r2, r3
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <main+0x8c>)
 8006602:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
 8006604:	4b10      	ldr	r3, [pc, #64]	; (8006648 <main+0x8c>)
 8006606:	881a      	ldrh	r2, [r3, #0]
 8006608:	490e      	ldr	r1, [pc, #56]	; (8006644 <main+0x88>)
 800660a:	4810      	ldr	r0, [pc, #64]	; (800664c <main+0x90>)
 800660c:	2364      	movs	r3, #100	; 0x64
 800660e:	f7fe f911 	bl	8004834 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4);		// Initialize UART Interrupt transmission
 8006612:	490f      	ldr	r1, [pc, #60]	; (8006650 <main+0x94>)
 8006614:	4b0d      	ldr	r3, [pc, #52]	; (800664c <main+0x90>)
 8006616:	2204      	movs	r2, #4
 8006618:	0018      	movs	r0, r3
 800661a:	f7fe f9a7 	bl	800496c <HAL_UART_Receive_IT>
  	  // Set to receive 4 bytes (123\n)
  	  // Consider replacing with DMA based receive?

  HAL_ADCEx_Calibration_Start(&hadc1);
 800661e:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <main+0x98>)
 8006620:	0018      	movs	r0, r3
 8006622:	f7fb fdb9 	bl	8002198 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <main+0x98>)
 8006628:	0018      	movs	r0, r3
 800662a:	f7fb f8cd 	bl	80017c8 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <main+0x9c>)
 8006630:	2100      	movs	r1, #0
 8006632:	0018      	movs	r0, r3
 8006634:	f7fd f914 	bl	8003860 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006638:	e7fe      	b.n	8006638 <main+0x7c>
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	20000100 	.word	0x20000100
 8006640:	08007d10 	.word	0x08007d10
 8006644:	2000022c 	.word	0x2000022c
 8006648:	20000290 	.word	0x20000290
 800664c:	20000198 	.word	0x20000198
 8006650:	20000294 	.word	0x20000294
 8006654:	2000009c 	.word	0x2000009c
 8006658:	2000014c 	.word	0x2000014c

0800665c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b093      	sub	sp, #76	; 0x4c
 8006660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006662:	2410      	movs	r4, #16
 8006664:	193b      	adds	r3, r7, r4
 8006666:	0018      	movs	r0, r3
 8006668:	2338      	movs	r3, #56	; 0x38
 800666a:	001a      	movs	r2, r3
 800666c:	2100      	movs	r1, #0
 800666e:	f000 fe37 	bl	80072e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006672:	003b      	movs	r3, r7
 8006674:	0018      	movs	r0, r3
 8006676:	2310      	movs	r3, #16
 8006678:	001a      	movs	r2, r3
 800667a:	2100      	movs	r1, #0
 800667c:	f000 fe30 	bl	80072e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	0018      	movs	r0, r3
 8006686:	f7fc f9a9 	bl	80029dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800668a:	193b      	adds	r3, r7, r4
 800668c:	2202      	movs	r2, #2
 800668e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006690:	193b      	adds	r3, r7, r4
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	0052      	lsls	r2, r2, #1
 8006696:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006698:	0021      	movs	r1, r4
 800669a:	187b      	adds	r3, r7, r1
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80066a0:	187b      	adds	r3, r7, r1
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066a6:	187b      	adds	r3, r7, r1
 80066a8:	2202      	movs	r2, #2
 80066aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	2202      	movs	r2, #2
 80066b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80066b2:	187b      	adds	r3, r7, r1
 80066b4:	2200      	movs	r2, #0
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80066b8:	187b      	adds	r3, r7, r1
 80066ba:	2210      	movs	r2, #16
 80066bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066be:	187b      	adds	r3, r7, r1
 80066c0:	2280      	movs	r2, #128	; 0x80
 80066c2:	0292      	lsls	r2, r2, #10
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	0492      	lsls	r2, r2, #18
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	22c0      	movs	r2, #192	; 0xc0
 80066d2:	05d2      	lsls	r2, r2, #23
 80066d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066d6:	187b      	adds	r3, r7, r1
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fc f9cb 	bl	8002a74 <HAL_RCC_OscConfig>
 80066de:	1e03      	subs	r3, r0, #0
 80066e0:	d001      	beq.n	80066e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80066e2:	f000 fbe7 	bl	8006eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066e6:	003b      	movs	r3, r7
 80066e8:	2207      	movs	r2, #7
 80066ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066ec:	003b      	movs	r3, r7
 80066ee:	2202      	movs	r2, #2
 80066f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066f2:	003b      	movs	r3, r7
 80066f4:	2200      	movs	r2, #0
 80066f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80066f8:	003b      	movs	r3, r7
 80066fa:	2200      	movs	r2, #0
 80066fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80066fe:	003b      	movs	r3, r7
 8006700:	2102      	movs	r1, #2
 8006702:	0018      	movs	r0, r3
 8006704:	f7fc fcd0 	bl	80030a8 <HAL_RCC_ClockConfig>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d001      	beq.n	8006710 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800670c:	f000 fbd2 	bl	8006eb4 <Error_Handler>
  }
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b013      	add	sp, #76	; 0x4c
 8006716:	bd90      	pop	{r4, r7, pc}

08006718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	0018      	movs	r0, r3
 8006722:	230c      	movs	r3, #12
 8006724:	001a      	movs	r2, r3
 8006726:	2100      	movs	r1, #0
 8006728:	f000 fdda 	bl	80072e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800672c:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800672e:	4a2f      	ldr	r2, [pc, #188]	; (80067ec <MX_ADC1_Init+0xd4>)
 8006730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006732:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	05d2      	lsls	r2, r2, #23
 8006738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800673a:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006740:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006742:	2200      	movs	r2, #0
 8006744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006746:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006748:	2200      	movs	r2, #0
 800674a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800674c:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800674e:	2204      	movs	r2, #4
 8006750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006752:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006754:	2200      	movs	r2, #0
 8006756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006758:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800675a:	2200      	movs	r2, #0
 800675c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800675e:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006760:	2200      	movs	r2, #0
 8006762:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006764:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006766:	2201      	movs	r2, #1
 8006768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800676c:	2220      	movs	r2, #32
 800676e:	2100      	movs	r1, #0
 8006770:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006774:	2290      	movs	r2, #144	; 0x90
 8006776:	00d2      	lsls	r2, r2, #3
 8006778:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	00d2      	lsls	r2, r2, #3
 8006780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006784:	222c      	movs	r2, #44	; 0x2c
 8006786:	2100      	movs	r1, #0
 8006788:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006792:	2200      	movs	r2, #0
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <MX_ADC1_Init+0xd0>)
 8006798:	2200      	movs	r2, #0
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <MX_ADC1_Init+0xd0>)
 800679e:	223c      	movs	r2, #60	; 0x3c
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80067a4:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <MX_ADC1_Init+0xd0>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <MX_ADC1_Init+0xd0>)
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7fa fe63 	bl	8001478 <HAL_ADC_Init>
 80067b2:	1e03      	subs	r3, r0, #0
 80067b4:	d001      	beq.n	80067ba <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80067b6:	f000 fb7d 	bl	8006eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	2201      	movs	r2, #1
 80067be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	2200      	movs	r2, #0
 80067c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067cc:	1d3a      	adds	r2, r7, #4
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <MX_ADC1_Init+0xd0>)
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fb f9a4 	bl	8001b20 <HAL_ADC_ConfigChannel>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d001      	beq.n	80067e0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80067dc:	f000 fb6a 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b004      	add	sp, #16
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	2000009c 	.word	0x2000009c
 80067ec:	40012400 	.word	0x40012400

080067f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b09c      	sub	sp, #112	; 0x70
 80067f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80067f6:	2360      	movs	r3, #96	; 0x60
 80067f8:	18fb      	adds	r3, r7, r3
 80067fa:	0018      	movs	r0, r3
 80067fc:	2310      	movs	r3, #16
 80067fe:	001a      	movs	r2, r3
 8006800:	2100      	movs	r1, #0
 8006802:	f000 fd6d 	bl	80072e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006806:	2354      	movs	r3, #84	; 0x54
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	0018      	movs	r0, r3
 800680c:	230c      	movs	r3, #12
 800680e:	001a      	movs	r2, r3
 8006810:	2100      	movs	r1, #0
 8006812:	f000 fd65 	bl	80072e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006816:	2338      	movs	r3, #56	; 0x38
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	0018      	movs	r0, r3
 800681c:	231c      	movs	r3, #28
 800681e:	001a      	movs	r2, r3
 8006820:	2100      	movs	r1, #0
 8006822:	f000 fd5d 	bl	80072e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	0018      	movs	r0, r3
 800682a:	2334      	movs	r3, #52	; 0x34
 800682c:	001a      	movs	r2, r3
 800682e:	2100      	movs	r1, #0
 8006830:	f000 fd56 	bl	80072e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006834:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006836:	4a5b      	ldr	r2, [pc, #364]	; (80069a4 <MX_TIM1_Init+0x1b4>)
 8006838:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800683a:	4b59      	ldr	r3, [pc, #356]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 800683c:	2200      	movs	r2, #0
 800683e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8006840:	4b57      	ldr	r3, [pc, #348]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006842:	2220      	movs	r2, #32
 8006844:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 640;
 8006846:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006848:	22a0      	movs	r2, #160	; 0xa0
 800684a:	0092      	lsls	r2, r2, #2
 800684c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684e:	4b54      	ldr	r3, [pc, #336]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006850:	2200      	movs	r2, #0
 8006852:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006854:	4b52      	ldr	r3, [pc, #328]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006856:	2200      	movs	r2, #0
 8006858:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800685a:	4b51      	ldr	r3, [pc, #324]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006860:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006862:	0018      	movs	r0, r3
 8006864:	f7fc ff44 	bl	80036f0 <HAL_TIM_Base_Init>
 8006868:	1e03      	subs	r3, r0, #0
 800686a:	d001      	beq.n	8006870 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800686c:	f000 fb22 	bl	8006eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006870:	2160      	movs	r1, #96	; 0x60
 8006872:	187b      	adds	r3, r7, r1
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	0152      	lsls	r2, r2, #5
 8006878:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800687a:	187a      	adds	r2, r7, r1
 800687c:	4b48      	ldr	r3, [pc, #288]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 800687e:	0011      	movs	r1, r2
 8006880:	0018      	movs	r0, r3
 8006882:	f7fd f9cb 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 8006886:	1e03      	subs	r3, r0, #0
 8006888:	d001      	beq.n	800688e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800688a:	f000 fb13 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800688e:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006890:	0018      	movs	r0, r3
 8006892:	f7fc ff85 	bl	80037a0 <HAL_TIM_PWM_Init>
 8006896:	1e03      	subs	r3, r0, #0
 8006898:	d001      	beq.n	800689e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800689a:	f000 fb0b 	bl	8006eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800689e:	2154      	movs	r1, #84	; 0x54
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80068a6:	187b      	adds	r3, r7, r1
 80068a8:	2200      	movs	r2, #0
 80068aa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	2200      	movs	r2, #0
 80068b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80068b2:	187a      	adds	r2, r7, r1
 80068b4:	4b3a      	ldr	r3, [pc, #232]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7fd fe57 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d001      	beq.n	80068c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80068c2:	f000 faf7 	bl	8006eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068c6:	2138      	movs	r1, #56	; 0x38
 80068c8:	187b      	adds	r3, r7, r1
 80068ca:	2260      	movs	r2, #96	; 0x60
 80068cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 160;
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	22a0      	movs	r2, #160	; 0xa0
 80068d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	2200      	movs	r2, #0
 80068d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80068da:	187b      	adds	r3, r7, r1
 80068dc:	2200      	movs	r2, #0
 80068de:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80068e0:	187b      	adds	r3, r7, r1
 80068e2:	2204      	movs	r2, #4
 80068e4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80068e6:	187b      	adds	r3, r7, r1
 80068e8:	2200      	movs	r2, #0
 80068ea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80068ec:	187b      	adds	r3, r7, r1
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068f2:	1879      	adds	r1, r7, r1
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7fd f88f 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 80068fe:	1e03      	subs	r3, r0, #0
 8006900:	d001      	beq.n	8006906 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8006902:	f000 fad7 	bl	8006eb4 <Error_Handler>
  }
  sConfigOC.Pulse = 480;
 8006906:	2138      	movs	r1, #56	; 0x38
 8006908:	187b      	adds	r3, r7, r1
 800690a:	22f0      	movs	r2, #240	; 0xf0
 800690c:	0052      	lsls	r2, r2, #1
 800690e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8006910:	187b      	adds	r3, r7, r1
 8006912:	2202      	movs	r2, #2
 8006914:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006916:	1879      	adds	r1, r7, r1
 8006918:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 800691a:	2204      	movs	r2, #4
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd f87d 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d001      	beq.n	800692a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8006926:	f000 fac5 	bl	8006eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	2200      	movs	r2, #0
 8006934:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	2200      	movs	r2, #0
 800693a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	2200      	movs	r2, #0
 8006940:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	2200      	movs	r2, #0
 8006946:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006948:	1d3b      	adds	r3, r7, #4
 800694a:	2280      	movs	r2, #128	; 0x80
 800694c:	0192      	lsls	r2, r2, #6
 800694e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	2200      	movs	r2, #0
 8006954:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	2200      	movs	r2, #0
 800695a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800695c:	1d3b      	adds	r3, r7, #4
 800695e:	2200      	movs	r2, #0
 8006960:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	2280      	movs	r2, #128	; 0x80
 8006966:	0492      	lsls	r2, r2, #18
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	2200      	movs	r2, #0
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	2200      	movs	r2, #0
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800697c:	1d3a      	adds	r2, r7, #4
 800697e:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006980:	0011      	movs	r1, r2
 8006982:	0018      	movs	r0, r3
 8006984:	f7fd fe5a 	bl	800463c <HAL_TIMEx_ConfigBreakDeadTime>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d001      	beq.n	8006990 <MX_TIM1_Init+0x1a0>
  {
    Error_Handler();
 800698c:	f000 fa92 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006990:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <MX_TIM1_Init+0x1b0>)
 8006992:	0018      	movs	r0, r3
 8006994:	f000 fb4e 	bl	8007034 <HAL_TIM_MspPostInit>

}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b01c      	add	sp, #112	; 0x70
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000100 	.word	0x20000100
 80069a4:	40012c00 	.word	0x40012c00

080069a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08e      	sub	sp, #56	; 0x38
 80069ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069ae:	2328      	movs	r3, #40	; 0x28
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	0018      	movs	r0, r3
 80069b4:	2310      	movs	r3, #16
 80069b6:	001a      	movs	r2, r3
 80069b8:	2100      	movs	r1, #0
 80069ba:	f000 fc91 	bl	80072e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069be:	231c      	movs	r3, #28
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	0018      	movs	r0, r3
 80069c4:	230c      	movs	r3, #12
 80069c6:	001a      	movs	r2, r3
 80069c8:	2100      	movs	r1, #0
 80069ca:	f000 fc89 	bl	80072e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069ce:	003b      	movs	r3, r7
 80069d0:	0018      	movs	r0, r3
 80069d2:	231c      	movs	r3, #28
 80069d4:	001a      	movs	r2, r3
 80069d6:	2100      	movs	r1, #0
 80069d8:	f000 fc82 	bl	80072e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069dc:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <MX_TIM2_Init+0xf4>)
 80069de:	2280      	movs	r2, #128	; 0x80
 80069e0:	05d2      	lsls	r2, r2, #23
 80069e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80069e4:	4b2d      	ldr	r3, [pc, #180]	; (8006a9c <MX_TIM2_Init+0xf4>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ea:	4b2c      	ldr	r3, [pc, #176]	; (8006a9c <MX_TIM2_Init+0xf4>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 640;
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <MX_TIM2_Init+0xf4>)
 80069f2:	22a0      	movs	r2, #160	; 0xa0
 80069f4:	0092      	lsls	r2, r2, #2
 80069f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069f8:	4b28      	ldr	r3, [pc, #160]	; (8006a9c <MX_TIM2_Init+0xf4>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069fe:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7fc fe72 	bl	80036f0 <HAL_TIM_Base_Init>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8006a10:	f000 fa50 	bl	8006eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a14:	2128      	movs	r1, #40	; 0x28
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	2280      	movs	r2, #128	; 0x80
 8006a1a:	0152      	lsls	r2, r2, #5
 8006a1c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a1e:	187a      	adds	r2, r7, r1
 8006a20:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fd f8f9 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d001      	beq.n	8006a32 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006a2e:	f000 fa41 	bl	8006eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fc feb3 	bl	80037a0 <HAL_TIM_PWM_Init>
 8006a3a:	1e03      	subs	r3, r0, #0
 8006a3c:	d001      	beq.n	8006a42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8006a3e:	f000 fa39 	bl	8006eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006a42:	211c      	movs	r1, #28
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	2220      	movs	r2, #32
 8006a48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a50:	187a      	adds	r2, r7, r1
 8006a52:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7fd fd88 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8006a5c:	1e03      	subs	r3, r0, #0
 8006a5e:	d001      	beq.n	8006a64 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8006a60:	f000 fa28 	bl	8006eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a64:	003b      	movs	r3, r7
 8006a66:	2260      	movs	r2, #96	; 0x60
 8006a68:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 320;
 8006a6a:	003b      	movs	r3, r7
 8006a6c:	22a0      	movs	r2, #160	; 0xa0
 8006a6e:	0052      	lsls	r2, r2, #1
 8006a70:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a72:	003b      	movs	r3, r7
 8006a74:	2200      	movs	r2, #0
 8006a76:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006a78:	003b      	movs	r3, r7
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a7e:	0039      	movs	r1, r7
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <MX_TIM2_Init+0xf4>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7fc ffc9 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 8006a8a:	1e03      	subs	r3, r0, #0
 8006a8c:	d001      	beq.n	8006a92 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8006a8e:	f000 fa11 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b00e      	add	sp, #56	; 0x38
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	2000014c 	.word	0x2000014c

08006aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <MX_USART2_UART_Init+0x64>)
 8006aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006aac:	22e1      	movs	r2, #225	; 0xe1
 8006aae:	0252      	lsls	r2, r2, #9
 8006ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ab8:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aca:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006adc:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <MX_USART2_UART_Init+0x60>)
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fd fe4c 	bl	8004788 <HAL_UART_Init>
 8006af0:	1e03      	subs	r3, r0, #0
 8006af2:	d001      	beq.n	8006af8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006af4:	f000 f9de 	bl	8006eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	20000198 	.word	0x20000198
 8006b04:	40004400 	.word	0x40004400

08006b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0e:	240c      	movs	r4, #12
 8006b10:	193b      	adds	r3, r7, r4
 8006b12:	0018      	movs	r0, r3
 8006b14:	2314      	movs	r3, #20
 8006b16:	001a      	movs	r2, r3
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f000 fbe1 	bl	80072e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b1e:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	4b27      	ldr	r3, [pc, #156]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b24:	2104      	movs	r1, #4
 8006b26:	430a      	orrs	r2, r1
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34
 8006b2a:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2e:	2204      	movs	r2, #4
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b36:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3a:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b3c:	2120      	movs	r1, #32
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	635a      	str	r2, [r3, #52]	; 0x34
 8006b42:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	2220      	movs	r2, #32
 8006b48:	4013      	ands	r3, r2
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b54:	2101      	movs	r1, #1
 8006b56:	430a      	orrs	r2, r1
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34
 8006b5a:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <MX_GPIO_Init+0xb8>)
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4013      	ands	r3, r2
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <MX_GPIO_Init+0xbc>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2140      	movs	r1, #64	; 0x40
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7fb ff17 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8006b72:	193b      	adds	r3, r7, r4
 8006b74:	2204      	movs	r2, #4
 8006b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b78:	193b      	adds	r3, r7, r4
 8006b7a:	2288      	movs	r2, #136	; 0x88
 8006b7c:	0352      	lsls	r2, r2, #13
 8006b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b80:	193b      	adds	r3, r7, r4
 8006b82:	2200      	movs	r2, #0
 8006b84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8006b86:	193b      	adds	r3, r7, r4
 8006b88:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <MX_GPIO_Init+0xc0>)
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	0010      	movs	r0, r2
 8006b8e:	f7fb fda3 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006b92:	0021      	movs	r1, r4
 8006b94:	187b      	adds	r3, r7, r1
 8006b96:	2240      	movs	r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b9a:	187b      	adds	r3, r7, r1
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba6:	187b      	adds	r3, r7, r1
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	4a05      	ldr	r2, [pc, #20]	; (8006bc4 <MX_GPIO_Init+0xbc>)
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	0010      	movs	r0, r2
 8006bb4:	f7fb fd90 	bl	80026d8 <HAL_GPIO_Init>

}
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b009      	add	sp, #36	; 0x24
 8006bbe:	bd90      	pop	{r4, r7, pc}
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	50000800 	.word	0x50000800
 8006bc8:	50001400 	.word	0x50001400

08006bcc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	// Interrupt when buffer is full ("213\n"
    ADCFlag = 0;	// Disable ADC control
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <HAL_UART_RxCpltCallback+0x90>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
	pulsewidth= atoi(UART_RX_BUFF); // Convert buffer to received value
 8006bda:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <HAL_UART_RxCpltCallback+0x94>)
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fb4e 	bl	800727e <atoi>
 8006be2:	0003      	movs	r3, r0
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006be8:	801a      	strh	r2, [r3, #0]
    if(pulsewidth > PULSE_MAX)	//
 8006bea:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	001a      	movs	r2, r3
 8006bf0:	233c      	movs	r3, #60	; 0x3c
 8006bf2:	33ff      	adds	r3, #255	; 0xff
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	dd07      	ble.n	8006c08 <HAL_UART_RxCpltCallback+0x3c>
    {
    	pulsewidth = PULSE_MAX;	// If pulsewidth is given as larger than max, set to max
 8006bf8:	233c      	movs	r3, #60	; 0x3c
 8006bfa:	33ff      	adds	r3, #255	; 0xff
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006c00:	801a      	strh	r2, [r3, #0]
    	ADCFlag=1;	// And enable ADC Control
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <HAL_UART_RxCpltCallback+0x90>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
    }
    UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "Pulse width: %d\r\n", pulsewidth);
 8006c08:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	4916      	ldr	r1, [pc, #88]	; (8006c68 <HAL_UART_RxCpltCallback+0x9c>)
 8006c10:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <HAL_UART_RxCpltCallback+0xa0>)
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 fb6c 	bl	80072f0 <siprintf>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <HAL_UART_RxCpltCallback+0xa4>)
 8006c1e:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100); // Echo pulse width
 8006c20:	4b13      	ldr	r3, [pc, #76]	; (8006c70 <HAL_UART_RxCpltCallback+0xa4>)
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	4911      	ldr	r1, [pc, #68]	; (8006c6c <HAL_UART_RxCpltCallback+0xa0>)
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <HAL_UART_RxCpltCallback+0xa8>)
 8006c28:	2364      	movs	r3, #100	; 0x64
 8006c2a:	f7fd fe03 	bl	8004834 <HAL_UART_Transmit>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth); // Update PWM CH 1
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006c30:	881a      	ldrh	r2, [r3, #0]
 8006c32:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <HAL_UART_RxCpltCallback+0xac>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth); // Update PWM CH 2
 8006c38:	23a0      	movs	r3, #160	; 0xa0
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <HAL_UART_RxCpltCallback+0x98>)
 8006c3e:	8812      	ldrh	r2, [r2, #0]
 8006c40:	1a9a      	subs	r2, r3, r2
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <HAL_UART_RxCpltCallback+0xac>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart2, UART_RX_BUFF, 4); // Enable next UART Receive interrupt
 8006c48:	4905      	ldr	r1, [pc, #20]	; (8006c60 <HAL_UART_RxCpltCallback+0x94>)
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_UART_RxCpltCallback+0xa8>)
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fd fe8c 	bl	800496c <HAL_UART_Receive_IT>
}
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	46bd      	mov	sp, r7
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000008 	.word	0x20000008
 8006c60:	20000294 	.word	0x20000294
 8006c64:	20000006 	.word	0x20000006
 8006c68:	08007d2c 	.word	0x08007d2c
 8006c6c:	2000022c 	.word	0x2000022c
 8006c70:	20000290 	.word	0x20000290
 8006c74:	20000198 	.word	0x20000198
 8006c78:	20000100 	.word	0x20000100

08006c7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <HAL_ADC_ConvCpltCallback+0x1f0>)
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fa fe16 	bl	80018b8 <HAL_ADC_GetValue>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	b21a      	sxth	r2, r3
 8006c90:	4b77      	ldr	r3, [pc, #476]	; (8006e70 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8006c92:	801a      	strh	r2, [r3, #0]
	UART_TX_BUFF_LEN = sprintf(UART_TX_BUFF, "ADC Value: %d\r\n", AD_RES);
 8006c94:	4b76      	ldr	r3, [pc, #472]	; (8006e70 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	5e9b      	ldrsh	r3, [r3, r2]
 8006c9a:	001a      	movs	r2, r3
 8006c9c:	4975      	ldr	r1, [pc, #468]	; (8006e74 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8006c9e:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 fb25 	bl	80072f0 <siprintf>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	4b74      	ldr	r3, [pc, #464]	; (8006e7c <HAL_ADC_ConvCpltCallback+0x200>)
 8006cac:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)UART_TX_BUFF, UART_TX_BUFF_LEN, 100);
 8006cae:	4b73      	ldr	r3, [pc, #460]	; (8006e7c <HAL_ADC_ConvCpltCallback+0x200>)
 8006cb0:	881a      	ldrh	r2, [r3, #0]
 8006cb2:	4971      	ldr	r1, [pc, #452]	; (8006e78 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8006cb4:	4872      	ldr	r0, [pc, #456]	; (8006e80 <HAL_ADC_ConvCpltCallback+0x204>)
 8006cb6:	2364      	movs	r3, #100	; 0x64
 8006cb8:	f7fd fdbc 	bl	8004834 <HAL_UART_Transmit>
	if(ADCFlag)
 8006cbc:	4b71      	ldr	r3, [pc, #452]	; (8006e84 <HAL_ADC_ConvCpltCallback+0x208>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d100      	bne.n	8006cc6 <HAL_ADC_ConvCpltCallback+0x4a>
 8006cc4:	e0c1      	b.n	8006e4a <HAL_ADC_ConvCpltCallback+0x1ce>
	{
		AD_RES = HAL_ADC_GetValue(&hadc1);
 8006cc6:	4b69      	ldr	r3, [pc, #420]	; (8006e6c <HAL_ADC_ConvCpltCallback+0x1f0>)
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7fa fdf5 	bl	80018b8 <HAL_ADC_GetValue>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	b21a      	sxth	r2, r3
 8006cd2:	4b67      	ldr	r3, [pc, #412]	; (8006e70 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8006cd4:	801a      	strh	r2, [r3, #0]

	error = AD_RES - ADC_REFERENCE	;
 8006cd6:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	5e9b      	ldrsh	r3, [r3, r2]
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7fa f927 	bl	8000f30 <__aeabi_i2f>
 8006ce2:	1c03      	adds	r3, r0, #0
 8006ce4:	4a68      	ldr	r2, [pc, #416]	; (8006e88 <HAL_ADC_ConvCpltCallback+0x20c>)
 8006ce6:	1c11      	adds	r1, r2, #0
 8006ce8:	1c18      	adds	r0, r3, #0
 8006cea:	f7f9 ff53 	bl	8000b94 <__aeabi_fsub>
 8006cee:	1c03      	adds	r3, r0, #0
 8006cf0:	1c1a      	adds	r2, r3, #0
 8006cf2:	4b66      	ldr	r3, [pc, #408]	; (8006e8c <HAL_ADC_ConvCpltCallback+0x210>)
 8006cf4:	601a      	str	r2, [r3, #0]

	//pulsewidth = PULSE_STEP *  (Kp * AD_RES ) + PULSE_HALF;
	// We use a constant sampling rate, as such we do not need time.
	// The ki and kd are now dependent on the sampling rate (and must be scaled accordingly).

	ITerm += ki * error;	// Calculate Integral term
 8006cf6:	4b66      	ldr	r3, [pc, #408]	; (8006e90 <HAL_ADC_ConvCpltCallback+0x214>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b64      	ldr	r3, [pc, #400]	; (8006e8c <HAL_ADC_ConvCpltCallback+0x210>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1c19      	adds	r1, r3, #0
 8006d00:	1c10      	adds	r0, r2, #0
 8006d02:	f7f9 fe21 	bl	8000948 <__aeabi_fmul>
 8006d06:	1c03      	adds	r3, r0, #0
 8006d08:	1c1a      	adds	r2, r3, #0
 8006d0a:	4b62      	ldr	r3, [pc, #392]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	1c19      	adds	r1, r3, #0
 8006d10:	1c10      	adds	r0, r2, #0
 8006d12:	f7f9 fbcb 	bl	80004ac <__aeabi_fadd>
 8006d16:	1c03      	adds	r3, r0, #0
 8006d18:	1c1a      	adds	r2, r3, #0
 8006d1a:	4b5e      	ldr	r3, [pc, #376]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d1c:	601a      	str	r2, [r3, #0]

	if(ITerm > PULSE_HALF) // Prevent integral windup / integral lag
 8006d1e:	23a0      	movs	r3, #160	; 0xa0
 8006d20:	0018      	movs	r0, r3
 8006d22:	f7fa f905 	bl	8000f30 <__aeabi_i2f>
 8006d26:	1c02      	adds	r2, r0, #0
 8006d28:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	1c19      	adds	r1, r3, #0
 8006d2e:	1c10      	adds	r0, r2, #0
 8006d30:	f7f9 fa90 	bl	8000254 <__aeabi_fcmplt>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d007      	beq.n	8006d48 <HAL_ADC_ConvCpltCallback+0xcc>
	{
		ITerm = PULSE_HALF;
 8006d38:	23a0      	movs	r3, #160	; 0xa0
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7fa f946 	bl	8000fcc <__aeabi_ui2f>
 8006d40:	1c02      	adds	r2, r0, #0
 8006d42:	4b54      	ldr	r3, [pc, #336]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e015      	b.n	8006d74 <HAL_ADC_ConvCpltCallback+0xf8>
	}
	else if(ITerm < -PULSE_HALF) // THis is wrong
 8006d48:	23a0      	movs	r3, #160	; 0xa0
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7fa f8ef 	bl	8000f30 <__aeabi_i2f>
 8006d52:	1c02      	adds	r2, r0, #0
 8006d54:	4b4f      	ldr	r3, [pc, #316]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1c19      	adds	r1, r3, #0
 8006d5a:	1c10      	adds	r0, r2, #0
 8006d5c:	f7f9 fa8e 	bl	800027c <__aeabi_fcmpgt>
 8006d60:	1e03      	subs	r3, r0, #0
 8006d62:	d007      	beq.n	8006d74 <HAL_ADC_ConvCpltCallback+0xf8>
	{
		ITerm = -PULSE_HALF;
 8006d64:	23a0      	movs	r3, #160	; 0xa0
 8006d66:	425b      	negs	r3, r3
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7fa f8e1 	bl	8000f30 <__aeabi_i2f>
 8006d6e:	1c02      	adds	r2, r0, #0
 8006d70:	4b48      	ldr	r3, [pc, #288]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006d72:	601a      	str	r2, [r3, #0]
	}

	d_error = error - last_error; // Calculate derivative term
 8006d74:	4b45      	ldr	r3, [pc, #276]	; (8006e8c <HAL_ADC_ConvCpltCallback+0x210>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <HAL_ADC_ConvCpltCallback+0x21c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	1c19      	adds	r1, r3, #0
 8006d7e:	1c10      	adds	r0, r2, #0
 8006d80:	f7f9 ff08 	bl	8000b94 <__aeabi_fsub>
 8006d84:	1c03      	adds	r3, r0, #0
 8006d86:	1c1a      	adds	r2, r3, #0
 8006d88:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <HAL_ADC_ConvCpltCallback+0x220>)
 8006d8a:	601a      	str	r2, [r3, #0]

	pulse_result = (kp * error + ITerm + kd * d_error);  // Calculate output from PID
 8006d8c:	4b44      	ldr	r3, [pc, #272]	; (8006ea0 <HAL_ADC_ConvCpltCallback+0x224>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <HAL_ADC_ConvCpltCallback+0x210>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1c19      	adds	r1, r3, #0
 8006d96:	1c10      	adds	r0, r2, #0
 8006d98:	f7f9 fdd6 	bl	8000948 <__aeabi_fmul>
 8006d9c:	1c03      	adds	r3, r0, #0
 8006d9e:	1c1a      	adds	r2, r3, #0
 8006da0:	4b3c      	ldr	r3, [pc, #240]	; (8006e94 <HAL_ADC_ConvCpltCallback+0x218>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	1c19      	adds	r1, r3, #0
 8006da6:	1c10      	adds	r0, r2, #0
 8006da8:	f7f9 fb80 	bl	80004ac <__aeabi_fadd>
 8006dac:	1c03      	adds	r3, r0, #0
 8006dae:	1c1c      	adds	r4, r3, #0
 8006db0:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <HAL_ADC_ConvCpltCallback+0x228>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <HAL_ADC_ConvCpltCallback+0x220>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	1c19      	adds	r1, r3, #0
 8006dba:	1c10      	adds	r0, r2, #0
 8006dbc:	f7f9 fdc4 	bl	8000948 <__aeabi_fmul>
 8006dc0:	1c03      	adds	r3, r0, #0
 8006dc2:	1c19      	adds	r1, r3, #0
 8006dc4:	1c20      	adds	r0, r4, #0
 8006dc6:	f7f9 fb71 	bl	80004ac <__aeabi_fadd>
 8006dca:	1c03      	adds	r3, r0, #0
 8006dcc:	1c1a      	adds	r2, r3, #0
 8006dce:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_ADC_ConvCpltCallback+0x22c>)
 8006dd0:	601a      	str	r2, [r3, #0]
	if(pulse_result > PULSE_HALF) // Prevent output going above max
 8006dd2:	23a0      	movs	r3, #160	; 0xa0
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7fa f8ab 	bl	8000f30 <__aeabi_i2f>
 8006dda:	1c02      	adds	r2, r0, #0
 8006ddc:	4b32      	ldr	r3, [pc, #200]	; (8006ea8 <HAL_ADC_ConvCpltCallback+0x22c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	1c19      	adds	r1, r3, #0
 8006de2:	1c10      	adds	r0, r2, #0
 8006de4:	f7f9 fa36 	bl	8000254 <__aeabi_fcmplt>
 8006de8:	1e03      	subs	r3, r0, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_ADC_ConvCpltCallback+0x17c>
	{
		pulsewidth = PULSE_MAX;
 8006dec:	233c      	movs	r3, #60	; 0x3c
 8006dee:	33ff      	adds	r3, #255	; 0xff
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <HAL_ADC_ConvCpltCallback+0x230>)
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	e024      	b.n	8006e42 <HAL_ADC_ConvCpltCallback+0x1c6>
	}
	else if(pulse_result < -PULSE_HALF)
 8006df8:	23a0      	movs	r3, #160	; 0xa0
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7fa f897 	bl	8000f30 <__aeabi_i2f>
 8006e02:	1c02      	adds	r2, r0, #0
 8006e04:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <HAL_ADC_ConvCpltCallback+0x22c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	1c19      	adds	r1, r3, #0
 8006e0a:	1c10      	adds	r0, r2, #0
 8006e0c:	f7f9 fa36 	bl	800027c <__aeabi_fcmpgt>
 8006e10:	1e03      	subs	r3, r0, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_ADC_ConvCpltCallback+0x1a0>
	{
		pulsewidth = 0;
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <HAL_ADC_ConvCpltCallback+0x230>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	e012      	b.n	8006e42 <HAL_ADC_ConvCpltCallback+0x1c6>
	}
	else{
		pulsewidth = pulse_result + PULSE_HALF;
 8006e1c:	23a0      	movs	r3, #160	; 0xa0
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f7fa f886 	bl	8000f30 <__aeabi_i2f>
 8006e24:	1c02      	adds	r2, r0, #0
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_ADC_ConvCpltCallback+0x22c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	1c19      	adds	r1, r3, #0
 8006e2c:	1c10      	adds	r0, r2, #0
 8006e2e:	f7f9 fb3d 	bl	80004ac <__aeabi_fadd>
 8006e32:	1c03      	adds	r3, r0, #0
 8006e34:	1c18      	adds	r0, r3, #0
 8006e36:	f7f9 fa55 	bl	80002e4 <__aeabi_f2uiz>
 8006e3a:	0003      	movs	r3, r0
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_ADC_ConvCpltCallback+0x230>)
 8006e40:	801a      	strh	r2, [r3, #0]
	}

	last_error = error; // Store last error term
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <HAL_ADC_ConvCpltCallback+0x210>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <HAL_ADC_ConvCpltCallback+0x21c>)
 8006e48:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulsewidth);
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <HAL_ADC_ConvCpltCallback+0x230>)
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <HAL_ADC_ConvCpltCallback+0x234>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ARR_COUNT - pulsewidth);
 8006e54:	23a0      	movs	r3, #160	; 0xa0
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_ADC_ConvCpltCallback+0x230>)
 8006e5a:	8812      	ldrh	r2, [r2, #0]
 8006e5c:	1a9a      	subs	r2, r3, r2
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <HAL_ADC_ConvCpltCallback+0x234>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_ADC_Start_IT(&hadc1);
}
 8006e64:	46c0      	nop			; (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b003      	add	sp, #12
 8006e6a:	bd90      	pop	{r4, r7, pc}
 8006e6c:	2000009c 	.word	0x2000009c
 8006e70:	2000000a 	.word	0x2000000a
 8006e74:	08007d40 	.word	0x08007d40
 8006e78:	2000022c 	.word	0x2000022c
 8006e7c:	20000290 	.word	0x20000290
 8006e80:	20000198 	.word	0x20000198
 8006e84:	20000008 	.word	0x20000008
 8006e88:	44c9b26f 	.word	0x44c9b26f
 8006e8c:	200002a0 	.word	0x200002a0
 8006e90:	20000010 	.word	0x20000010
 8006e94:	2000029c 	.word	0x2000029c
 8006e98:	200002a4 	.word	0x200002a4
 8006e9c:	200002a8 	.word	0x200002a8
 8006ea0:	2000000c 	.word	0x2000000c
 8006ea4:	20000298 	.word	0x20000298
 8006ea8:	200002ac 	.word	0x200002ac
 8006eac:	20000006 	.word	0x20000006
 8006eb0:	20000100 	.word	0x20000100

08006eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006eb8:	b672      	cpsid	i
}
 8006eba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ebc:	e7fe      	b.n	8006ebc <Error_Handler+0x8>
	...

08006ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <HAL_MspInit+0x44>)
 8006ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <HAL_MspInit+0x44>)
 8006ecc:	2101      	movs	r1, #1
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <HAL_MspInit+0x44>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4013      	ands	r3, r2
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <HAL_MspInit+0x44>)
 8006ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_MspInit+0x44>)
 8006ee4:	2180      	movs	r1, #128	; 0x80
 8006ee6:	0549      	lsls	r1, r1, #21
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <HAL_MspInit+0x44>)
 8006eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	055b      	lsls	r3, r3, #21
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b002      	add	sp, #8
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	40021000 	.word	0x40021000

08006f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b08b      	sub	sp, #44	; 0x2c
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f10:	2414      	movs	r4, #20
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	0018      	movs	r0, r3
 8006f16:	2314      	movs	r3, #20
 8006f18:	001a      	movs	r2, r3
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	f000 f9e0 	bl	80072e0 <memset>
  if(hadc->Instance==ADC1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <HAL_ADC_MspInit+0x90>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d131      	bne.n	8006f8e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006f2a:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	0349      	lsls	r1, r1, #13
 8006f34:	430a      	orrs	r2, r1
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40
 8006f38:	4b18      	ldr	r3, [pc, #96]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	035b      	lsls	r3, r3, #13
 8006f40:	4013      	ands	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f46:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	635a      	str	r2, [r3, #52]	; 0x34
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <HAL_ADC_MspInit+0x94>)
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	2201      	movs	r2, #1
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	2203      	movs	r2, #3
 8006f68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6a:	193b      	adds	r3, r7, r4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f70:	193a      	adds	r2, r7, r4
 8006f72:	23a0      	movs	r3, #160	; 0xa0
 8006f74:	05db      	lsls	r3, r3, #23
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7fb fbad 	bl	80026d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2100      	movs	r1, #0
 8006f82:	200c      	movs	r0, #12
 8006f84:	f7fb faaa 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8006f88:	200c      	movs	r0, #12
 8006f8a:	f7fb fabc 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b00b      	add	sp, #44	; 0x2c
 8006f94:	bd90      	pop	{r4, r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	40012400 	.word	0x40012400
 8006f9c:	40021000 	.word	0x40021000

08006fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b08f      	sub	sp, #60	; 0x3c
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fa8:	2410      	movs	r4, #16
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	0018      	movs	r0, r3
 8006fae:	2328      	movs	r3, #40	; 0x28
 8006fb0:	001a      	movs	r2, r3
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f000 f994 	bl	80072e0 <memset>
  if(htim_base->Instance==TIM1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIM_Base_MspInit+0x8c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d11e      	bne.n	8007000 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8006fc2:	193b      	adds	r3, r7, r4
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	0392      	lsls	r2, r2, #14
 8006fc8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 8006fca:	193b      	adds	r3, r7, r4
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	03d2      	lsls	r2, r2, #15
 8006fd0:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f7fc fa11 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8006fda:	1e03      	subs	r3, r0, #0
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8006fde:	f7ff ff69 	bl	8006eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fe2:	4b13      	ldr	r3, [pc, #76]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 8006fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 8006fe8:	2180      	movs	r1, #128	; 0x80
 8006fea:	0109      	lsls	r1, r1, #4
 8006fec:	430a      	orrs	r2, r1
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 8006ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff4:	2380      	movs	r3, #128	; 0x80
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006ffe:	e011      	b.n	8007024 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	429a      	cmp	r2, r3
 800700a:	d10b      	bne.n	8007024 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800700c:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 8007012:	2101      	movs	r1, #1
 8007014:	430a      	orrs	r2, r1
 8007016:	63da      	str	r2, [r3, #60]	; 0x3c
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_TIM_Base_MspInit+0x90>)
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	2201      	movs	r2, #1
 800701e:	4013      	ands	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	68bb      	ldr	r3, [r7, #8]
}
 8007024:	46c0      	nop			; (mov r8, r8)
 8007026:	46bd      	mov	sp, r7
 8007028:	b00f      	add	sp, #60	; 0x3c
 800702a:	bd90      	pop	{r4, r7, pc}
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40021000 	.word	0x40021000

08007034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800703c:	240c      	movs	r4, #12
 800703e:	193b      	adds	r3, r7, r4
 8007040:	0018      	movs	r0, r3
 8007042:	2314      	movs	r3, #20
 8007044:	001a      	movs	r2, r3
 8007046:	2100      	movs	r1, #0
 8007048:	f000 f94a 	bl	80072e0 <memset>
  if(htim->Instance==TIM1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <HAL_TIM_MspPostInit+0x74>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d123      	bne.n	800709e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <HAL_TIM_MspPostInit+0x78>)
 8007058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_TIM_MspPostInit+0x78>)
 800705c:	2101      	movs	r1, #1
 800705e:	430a      	orrs	r2, r1
 8007060:	635a      	str	r2, [r3, #52]	; 0x34
 8007062:	4b12      	ldr	r3, [pc, #72]	; (80070ac <HAL_TIM_MspPostInit+0x78>)
 8007064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007066:	2201      	movs	r2, #1
 8007068:	4013      	ands	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800706e:	193b      	adds	r3, r7, r4
 8007070:	22c0      	movs	r2, #192	; 0xc0
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007076:	0021      	movs	r1, r4
 8007078:	187b      	adds	r3, r7, r1
 800707a:	2202      	movs	r2, #2
 800707c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707e:	187b      	adds	r3, r7, r1
 8007080:	2200      	movs	r2, #0
 8007082:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007084:	187b      	adds	r3, r7, r1
 8007086:	2200      	movs	r2, #0
 8007088:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800708a:	187b      	adds	r3, r7, r1
 800708c:	2202      	movs	r2, #2
 800708e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007090:	187a      	adds	r2, r7, r1
 8007092:	23a0      	movs	r3, #160	; 0xa0
 8007094:	05db      	lsls	r3, r3, #23
 8007096:	0011      	movs	r1, r2
 8007098:	0018      	movs	r0, r3
 800709a:	f7fb fb1d 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b009      	add	sp, #36	; 0x24
 80070a4:	bd90      	pop	{r4, r7, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40021000 	.word	0x40021000

080070b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b08b      	sub	sp, #44	; 0x2c
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b8:	2414      	movs	r4, #20
 80070ba:	193b      	adds	r3, r7, r4
 80070bc:	0018      	movs	r0, r3
 80070be:	2314      	movs	r3, #20
 80070c0:	001a      	movs	r2, r3
 80070c2:	2100      	movs	r1, #0
 80070c4:	f000 f90c 	bl	80072e0 <memset>
  if(huart->Instance==USART2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_UART_MspInit+0x9c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d138      	bne.n	8007144 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d6:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070d8:	2180      	movs	r1, #128	; 0x80
 80070da:	0289      	lsls	r1, r1, #10
 80070dc:	430a      	orrs	r2, r1
 80070de:	63da      	str	r2, [r3, #60]	; 0x3c
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	4013      	ands	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070f4:	2101      	movs	r1, #1
 80070f6:	430a      	orrs	r2, r1
 80070f8:	635a      	str	r2, [r3, #52]	; 0x34
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <HAL_UART_MspInit+0xa0>)
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	2201      	movs	r2, #1
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8007106:	0021      	movs	r1, r4
 8007108:	187b      	adds	r3, r7, r1
 800710a:	220c      	movs	r2, #12
 800710c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710e:	187b      	adds	r3, r7, r1
 8007110:	2202      	movs	r2, #2
 8007112:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007114:	187b      	adds	r3, r7, r1
 8007116:	2201      	movs	r2, #1
 8007118:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800711a:	187b      	adds	r3, r7, r1
 800711c:	2200      	movs	r2, #0
 800711e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007120:	187b      	adds	r3, r7, r1
 8007122:	2201      	movs	r2, #1
 8007124:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007126:	187a      	adds	r2, r7, r1
 8007128:	23a0      	movs	r3, #160	; 0xa0
 800712a:	05db      	lsls	r3, r3, #23
 800712c:	0011      	movs	r1, r2
 800712e:	0018      	movs	r0, r3
 8007130:	f7fb fad2 	bl	80026d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007134:	2200      	movs	r2, #0
 8007136:	2100      	movs	r1, #0
 8007138:	201c      	movs	r0, #28
 800713a:	f7fb f9cf 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800713e:	201c      	movs	r0, #28
 8007140:	f7fb f9e1 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b00b      	add	sp, #44	; 0x2c
 800714a:	bd90      	pop	{r4, r7, pc}
 800714c:	40004400 	.word	0x40004400
 8007150:	40021000 	.word	0x40021000

08007154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007158:	e7fe      	b.n	8007158 <NMI_Handler+0x4>

0800715a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800715e:	e7fe      	b.n	800715e <HardFault_Handler+0x4>

08007160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007178:	f7f9 fffe 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800717c:	46c0      	nop			; (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007188:	4b03      	ldr	r3, [pc, #12]	; (8007198 <ADC1_IRQHandler+0x14>)
 800718a:	0018      	movs	r0, r3
 800718c:	f7fa fba0 	bl	80018d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8007190:	46c0      	nop			; (mov r8, r8)
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	2000009c 	.word	0x2000009c

0800719c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <USART2_IRQHandler+0x14>)
 80071a2:	0018      	movs	r0, r3
 80071a4:	f7fd fc40 	bl	8004a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80071a8:	46c0      	nop			; (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	20000198 	.word	0x20000198

080071b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071bc:	4a14      	ldr	r2, [pc, #80]	; (8007210 <_sbrk+0x5c>)
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <_sbrk+0x60>)
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071c8:	4b13      	ldr	r3, [pc, #76]	; (8007218 <_sbrk+0x64>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <_sbrk+0x64>)
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <_sbrk+0x68>)
 80071d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <_sbrk+0x64>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	18d3      	adds	r3, r2, r3
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d207      	bcs.n	80071f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071e4:	f000 f852 	bl	800728c <__errno>
 80071e8:	0003      	movs	r3, r0
 80071ea:	220c      	movs	r2, #12
 80071ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	425b      	negs	r3, r3
 80071f2:	e009      	b.n	8007208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <_sbrk+0x64>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <_sbrk+0x64>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	18d2      	adds	r2, r2, r3
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <_sbrk+0x64>)
 8007204:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007206:	68fb      	ldr	r3, [r7, #12]
}
 8007208:	0018      	movs	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	b006      	add	sp, #24
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20002000 	.word	0x20002000
 8007214:	00000400 	.word	0x00000400
 8007218:	200002b0 	.word	0x200002b0
 800721c:	200002c8 	.word	0x200002c8

08007220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800722c:	480d      	ldr	r0, [pc, #52]	; (8007264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800722e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007230:	f7ff fff6 	bl	8007220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007234:	480c      	ldr	r0, [pc, #48]	; (8007268 <LoopForever+0x6>)
  ldr r1, =_edata
 8007236:	490d      	ldr	r1, [pc, #52]	; (800726c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007238:	4a0d      	ldr	r2, [pc, #52]	; (8007270 <LoopForever+0xe>)
  movs r3, #0
 800723a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800723c:	e002      	b.n	8007244 <LoopCopyDataInit>

0800723e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800723e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007242:	3304      	adds	r3, #4

08007244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007248:	d3f9      	bcc.n	800723e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800724a:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800724c:	4c0a      	ldr	r4, [pc, #40]	; (8007278 <LoopForever+0x16>)
  movs r3, #0
 800724e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007250:	e001      	b.n	8007256 <LoopFillZerobss>

08007252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007254:	3204      	adds	r2, #4

08007256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007258:	d3fb      	bcc.n	8007252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800725a:	f000 f81d 	bl	8007298 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800725e:	f7ff f9ad 	bl	80065bc <main>

08007262 <LoopForever>:

LoopForever:
  b LoopForever
 8007262:	e7fe      	b.n	8007262 <LoopForever>
  ldr   r0, =_estack
 8007264:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8007268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800726c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8007270:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 8007274:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8007278:	200002c4 	.word	0x200002c4

0800727c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800727c:	e7fe      	b.n	800727c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

0800727e <atoi>:
 800727e:	b510      	push	{r4, lr}
 8007280:	220a      	movs	r2, #10
 8007282:	2100      	movs	r1, #0
 8007284:	f000 f8e2 	bl	800744c <strtol>
 8007288:	bd10      	pop	{r4, pc}
	...

0800728c <__errno>:
 800728c:	4b01      	ldr	r3, [pc, #4]	; (8007294 <__errno+0x8>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	4770      	bx	lr
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	20000018 	.word	0x20000018

08007298 <__libc_init_array>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	2600      	movs	r6, #0
 800729c:	4d0c      	ldr	r5, [pc, #48]	; (80072d0 <__libc_init_array+0x38>)
 800729e:	4c0d      	ldr	r4, [pc, #52]	; (80072d4 <__libc_init_array+0x3c>)
 80072a0:	1b64      	subs	r4, r4, r5
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	42a6      	cmp	r6, r4
 80072a6:	d109      	bne.n	80072bc <__libc_init_array+0x24>
 80072a8:	2600      	movs	r6, #0
 80072aa:	f000 fd25 	bl	8007cf8 <_init>
 80072ae:	4d0a      	ldr	r5, [pc, #40]	; (80072d8 <__libc_init_array+0x40>)
 80072b0:	4c0a      	ldr	r4, [pc, #40]	; (80072dc <__libc_init_array+0x44>)
 80072b2:	1b64      	subs	r4, r4, r5
 80072b4:	10a4      	asrs	r4, r4, #2
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	d105      	bne.n	80072c6 <__libc_init_array+0x2e>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	00b3      	lsls	r3, r6, #2
 80072be:	58eb      	ldr	r3, [r5, r3]
 80072c0:	4798      	blx	r3
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7ee      	b.n	80072a4 <__libc_init_array+0xc>
 80072c6:	00b3      	lsls	r3, r6, #2
 80072c8:	58eb      	ldr	r3, [r5, r3]
 80072ca:	4798      	blx	r3
 80072cc:	3601      	adds	r6, #1
 80072ce:	e7f2      	b.n	80072b6 <__libc_init_array+0x1e>
 80072d0:	08007f98 	.word	0x08007f98
 80072d4:	08007f98 	.word	0x08007f98
 80072d8:	08007f98 	.word	0x08007f98
 80072dc:	08007f9c 	.word	0x08007f9c

080072e0 <memset>:
 80072e0:	0003      	movs	r3, r0
 80072e2:	1882      	adds	r2, r0, r2
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d100      	bne.n	80072ea <memset+0xa>
 80072e8:	4770      	bx	lr
 80072ea:	7019      	strb	r1, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	e7f9      	b.n	80072e4 <memset+0x4>

080072f0 <siprintf>:
 80072f0:	b40e      	push	{r1, r2, r3}
 80072f2:	b500      	push	{lr}
 80072f4:	490b      	ldr	r1, [pc, #44]	; (8007324 <siprintf+0x34>)
 80072f6:	b09c      	sub	sp, #112	; 0x70
 80072f8:	ab1d      	add	r3, sp, #116	; 0x74
 80072fa:	9002      	str	r0, [sp, #8]
 80072fc:	9006      	str	r0, [sp, #24]
 80072fe:	9107      	str	r1, [sp, #28]
 8007300:	9104      	str	r1, [sp, #16]
 8007302:	4809      	ldr	r0, [pc, #36]	; (8007328 <siprintf+0x38>)
 8007304:	4909      	ldr	r1, [pc, #36]	; (800732c <siprintf+0x3c>)
 8007306:	cb04      	ldmia	r3!, {r2}
 8007308:	9105      	str	r1, [sp, #20]
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	a902      	add	r1, sp, #8
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	f000 f90a 	bl	8007528 <_svfiprintf_r>
 8007314:	2300      	movs	r3, #0
 8007316:	9a02      	ldr	r2, [sp, #8]
 8007318:	7013      	strb	r3, [r2, #0]
 800731a:	b01c      	add	sp, #112	; 0x70
 800731c:	bc08      	pop	{r3}
 800731e:	b003      	add	sp, #12
 8007320:	4718      	bx	r3
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	7fffffff 	.word	0x7fffffff
 8007328:	20000018 	.word	0x20000018
 800732c:	ffff0208 	.word	0xffff0208

08007330 <_strtol_l.constprop.0>:
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b087      	sub	sp, #28
 8007334:	001e      	movs	r6, r3
 8007336:	9005      	str	r0, [sp, #20]
 8007338:	9101      	str	r1, [sp, #4]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d045      	beq.n	80073cc <_strtol_l.constprop.0+0x9c>
 8007340:	000b      	movs	r3, r1
 8007342:	2e24      	cmp	r6, #36	; 0x24
 8007344:	d842      	bhi.n	80073cc <_strtol_l.constprop.0+0x9c>
 8007346:	4a3f      	ldr	r2, [pc, #252]	; (8007444 <_strtol_l.constprop.0+0x114>)
 8007348:	2108      	movs	r1, #8
 800734a:	4694      	mov	ip, r2
 800734c:	001a      	movs	r2, r3
 800734e:	4660      	mov	r0, ip
 8007350:	7814      	ldrb	r4, [r2, #0]
 8007352:	3301      	adds	r3, #1
 8007354:	5d00      	ldrb	r0, [r0, r4]
 8007356:	001d      	movs	r5, r3
 8007358:	0007      	movs	r7, r0
 800735a:	400f      	ands	r7, r1
 800735c:	4208      	tst	r0, r1
 800735e:	d1f5      	bne.n	800734c <_strtol_l.constprop.0+0x1c>
 8007360:	2c2d      	cmp	r4, #45	; 0x2d
 8007362:	d13a      	bne.n	80073da <_strtol_l.constprop.0+0xaa>
 8007364:	2701      	movs	r7, #1
 8007366:	781c      	ldrb	r4, [r3, #0]
 8007368:	1c95      	adds	r5, r2, #2
 800736a:	2e00      	cmp	r6, #0
 800736c:	d065      	beq.n	800743a <_strtol_l.constprop.0+0x10a>
 800736e:	2e10      	cmp	r6, #16
 8007370:	d109      	bne.n	8007386 <_strtol_l.constprop.0+0x56>
 8007372:	2c30      	cmp	r4, #48	; 0x30
 8007374:	d107      	bne.n	8007386 <_strtol_l.constprop.0+0x56>
 8007376:	2220      	movs	r2, #32
 8007378:	782b      	ldrb	r3, [r5, #0]
 800737a:	4393      	bics	r3, r2
 800737c:	2b58      	cmp	r3, #88	; 0x58
 800737e:	d157      	bne.n	8007430 <_strtol_l.constprop.0+0x100>
 8007380:	2610      	movs	r6, #16
 8007382:	786c      	ldrb	r4, [r5, #1]
 8007384:	3502      	adds	r5, #2
 8007386:	4b30      	ldr	r3, [pc, #192]	; (8007448 <_strtol_l.constprop.0+0x118>)
 8007388:	0031      	movs	r1, r6
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	0018      	movs	r0, r3
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	f7f8 ff48 	bl	8000224 <__aeabi_uidivmod>
 8007394:	2300      	movs	r3, #0
 8007396:	2201      	movs	r2, #1
 8007398:	4684      	mov	ip, r0
 800739a:	0018      	movs	r0, r3
 800739c:	9104      	str	r1, [sp, #16]
 800739e:	4252      	negs	r2, r2
 80073a0:	0021      	movs	r1, r4
 80073a2:	3930      	subs	r1, #48	; 0x30
 80073a4:	2909      	cmp	r1, #9
 80073a6:	d81d      	bhi.n	80073e4 <_strtol_l.constprop.0+0xb4>
 80073a8:	000c      	movs	r4, r1
 80073aa:	42a6      	cmp	r6, r4
 80073ac:	dd28      	ble.n	8007400 <_strtol_l.constprop.0+0xd0>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	db24      	blt.n	80073fc <_strtol_l.constprop.0+0xcc>
 80073b2:	0013      	movs	r3, r2
 80073b4:	4584      	cmp	ip, r0
 80073b6:	d306      	bcc.n	80073c6 <_strtol_l.constprop.0+0x96>
 80073b8:	d102      	bne.n	80073c0 <_strtol_l.constprop.0+0x90>
 80073ba:	9904      	ldr	r1, [sp, #16]
 80073bc:	42a1      	cmp	r1, r4
 80073be:	db02      	blt.n	80073c6 <_strtol_l.constprop.0+0x96>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4370      	muls	r0, r6
 80073c4:	1820      	adds	r0, r4, r0
 80073c6:	782c      	ldrb	r4, [r5, #0]
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7e9      	b.n	80073a0 <_strtol_l.constprop.0+0x70>
 80073cc:	f7ff ff5e 	bl	800728c <__errno>
 80073d0:	2316      	movs	r3, #22
 80073d2:	6003      	str	r3, [r0, #0]
 80073d4:	2000      	movs	r0, #0
 80073d6:	b007      	add	sp, #28
 80073d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073da:	2c2b      	cmp	r4, #43	; 0x2b
 80073dc:	d1c5      	bne.n	800736a <_strtol_l.constprop.0+0x3a>
 80073de:	781c      	ldrb	r4, [r3, #0]
 80073e0:	1c95      	adds	r5, r2, #2
 80073e2:	e7c2      	b.n	800736a <_strtol_l.constprop.0+0x3a>
 80073e4:	0021      	movs	r1, r4
 80073e6:	3941      	subs	r1, #65	; 0x41
 80073e8:	2919      	cmp	r1, #25
 80073ea:	d801      	bhi.n	80073f0 <_strtol_l.constprop.0+0xc0>
 80073ec:	3c37      	subs	r4, #55	; 0x37
 80073ee:	e7dc      	b.n	80073aa <_strtol_l.constprop.0+0x7a>
 80073f0:	0021      	movs	r1, r4
 80073f2:	3961      	subs	r1, #97	; 0x61
 80073f4:	2919      	cmp	r1, #25
 80073f6:	d803      	bhi.n	8007400 <_strtol_l.constprop.0+0xd0>
 80073f8:	3c57      	subs	r4, #87	; 0x57
 80073fa:	e7d6      	b.n	80073aa <_strtol_l.constprop.0+0x7a>
 80073fc:	0013      	movs	r3, r2
 80073fe:	e7e2      	b.n	80073c6 <_strtol_l.constprop.0+0x96>
 8007400:	2b00      	cmp	r3, #0
 8007402:	da09      	bge.n	8007418 <_strtol_l.constprop.0+0xe8>
 8007404:	2322      	movs	r3, #34	; 0x22
 8007406:	9a05      	ldr	r2, [sp, #20]
 8007408:	9803      	ldr	r0, [sp, #12]
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	9b02      	ldr	r3, [sp, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0e1      	beq.n	80073d6 <_strtol_l.constprop.0+0xa6>
 8007412:	1e6b      	subs	r3, r5, #1
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	e007      	b.n	8007428 <_strtol_l.constprop.0+0xf8>
 8007418:	2f00      	cmp	r7, #0
 800741a:	d000      	beq.n	800741e <_strtol_l.constprop.0+0xee>
 800741c:	4240      	negs	r0, r0
 800741e:	9a02      	ldr	r2, [sp, #8]
 8007420:	2a00      	cmp	r2, #0
 8007422:	d0d8      	beq.n	80073d6 <_strtol_l.constprop.0+0xa6>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f4      	bne.n	8007412 <_strtol_l.constprop.0+0xe2>
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	9a01      	ldr	r2, [sp, #4]
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e7d2      	b.n	80073d6 <_strtol_l.constprop.0+0xa6>
 8007430:	2430      	movs	r4, #48	; 0x30
 8007432:	2e00      	cmp	r6, #0
 8007434:	d1a7      	bne.n	8007386 <_strtol_l.constprop.0+0x56>
 8007436:	3608      	adds	r6, #8
 8007438:	e7a5      	b.n	8007386 <_strtol_l.constprop.0+0x56>
 800743a:	2c30      	cmp	r4, #48	; 0x30
 800743c:	d09b      	beq.n	8007376 <_strtol_l.constprop.0+0x46>
 800743e:	260a      	movs	r6, #10
 8007440:	e7a1      	b.n	8007386 <_strtol_l.constprop.0+0x56>
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	08007e5d 	.word	0x08007e5d
 8007448:	7fffffff 	.word	0x7fffffff

0800744c <strtol>:
 800744c:	b510      	push	{r4, lr}
 800744e:	0013      	movs	r3, r2
 8007450:	000a      	movs	r2, r1
 8007452:	0001      	movs	r1, r0
 8007454:	4802      	ldr	r0, [pc, #8]	; (8007460 <strtol+0x14>)
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	f7ff ff6a 	bl	8007330 <_strtol_l.constprop.0>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	20000018 	.word	0x20000018

08007464 <__ssputs_r>:
 8007464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007466:	688e      	ldr	r6, [r1, #8]
 8007468:	b085      	sub	sp, #20
 800746a:	0007      	movs	r7, r0
 800746c:	000c      	movs	r4, r1
 800746e:	9203      	str	r2, [sp, #12]
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	429e      	cmp	r6, r3
 8007474:	d83c      	bhi.n	80074f0 <__ssputs_r+0x8c>
 8007476:	2390      	movs	r3, #144	; 0x90
 8007478:	898a      	ldrh	r2, [r1, #12]
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	421a      	tst	r2, r3
 800747e:	d034      	beq.n	80074ea <__ssputs_r+0x86>
 8007480:	6909      	ldr	r1, [r1, #16]
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	6960      	ldr	r0, [r4, #20]
 8007486:	1a5b      	subs	r3, r3, r1
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	2303      	movs	r3, #3
 800748c:	4343      	muls	r3, r0
 800748e:	0fdd      	lsrs	r5, r3, #31
 8007490:	18ed      	adds	r5, r5, r3
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	9802      	ldr	r0, [sp, #8]
 8007496:	3301      	adds	r3, #1
 8007498:	181b      	adds	r3, r3, r0
 800749a:	106d      	asrs	r5, r5, #1
 800749c:	42ab      	cmp	r3, r5
 800749e:	d900      	bls.n	80074a2 <__ssputs_r+0x3e>
 80074a0:	001d      	movs	r5, r3
 80074a2:	0553      	lsls	r3, r2, #21
 80074a4:	d532      	bpl.n	800750c <__ssputs_r+0xa8>
 80074a6:	0029      	movs	r1, r5
 80074a8:	0038      	movs	r0, r7
 80074aa:	f000 fb53 	bl	8007b54 <_malloc_r>
 80074ae:	1e06      	subs	r6, r0, #0
 80074b0:	d109      	bne.n	80074c6 <__ssputs_r+0x62>
 80074b2:	230c      	movs	r3, #12
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	2001      	movs	r0, #1
 80074ba:	89a2      	ldrh	r2, [r4, #12]
 80074bc:	4240      	negs	r0, r0
 80074be:	4313      	orrs	r3, r2
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	b005      	add	sp, #20
 80074c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c6:	9a02      	ldr	r2, [sp, #8]
 80074c8:	6921      	ldr	r1, [r4, #16]
 80074ca:	f000 faba 	bl	8007a42 <memcpy>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <__ssputs_r+0xc0>)
 80074d2:	401a      	ands	r2, r3
 80074d4:	2380      	movs	r3, #128	; 0x80
 80074d6:	4313      	orrs	r3, r2
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	6126      	str	r6, [r4, #16]
 80074de:	18f6      	adds	r6, r6, r3
 80074e0:	6026      	str	r6, [r4, #0]
 80074e2:	6165      	str	r5, [r4, #20]
 80074e4:	9e01      	ldr	r6, [sp, #4]
 80074e6:	1aed      	subs	r5, r5, r3
 80074e8:	60a5      	str	r5, [r4, #8]
 80074ea:	9b01      	ldr	r3, [sp, #4]
 80074ec:	429e      	cmp	r6, r3
 80074ee:	d900      	bls.n	80074f2 <__ssputs_r+0x8e>
 80074f0:	9e01      	ldr	r6, [sp, #4]
 80074f2:	0032      	movs	r2, r6
 80074f4:	9903      	ldr	r1, [sp, #12]
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	f000 faac 	bl	8007a54 <memmove>
 80074fc:	68a3      	ldr	r3, [r4, #8]
 80074fe:	2000      	movs	r0, #0
 8007500:	1b9b      	subs	r3, r3, r6
 8007502:	60a3      	str	r3, [r4, #8]
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	199e      	adds	r6, r3, r6
 8007508:	6026      	str	r6, [r4, #0]
 800750a:	e7da      	b.n	80074c2 <__ssputs_r+0x5e>
 800750c:	002a      	movs	r2, r5
 800750e:	0038      	movs	r0, r7
 8007510:	f000 fb96 	bl	8007c40 <_realloc_r>
 8007514:	1e06      	subs	r6, r0, #0
 8007516:	d1e0      	bne.n	80074da <__ssputs_r+0x76>
 8007518:	0038      	movs	r0, r7
 800751a:	6921      	ldr	r1, [r4, #16]
 800751c:	f000 faae 	bl	8007a7c <_free_r>
 8007520:	e7c7      	b.n	80074b2 <__ssputs_r+0x4e>
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	fffffb7f 	.word	0xfffffb7f

08007528 <_svfiprintf_r>:
 8007528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752a:	b0a1      	sub	sp, #132	; 0x84
 800752c:	9003      	str	r0, [sp, #12]
 800752e:	001d      	movs	r5, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	000f      	movs	r7, r1
 8007534:	0016      	movs	r6, r2
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	d511      	bpl.n	800755e <_svfiprintf_r+0x36>
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10e      	bne.n	800755e <_svfiprintf_r+0x36>
 8007540:	2140      	movs	r1, #64	; 0x40
 8007542:	f000 fb07 	bl	8007b54 <_malloc_r>
 8007546:	6038      	str	r0, [r7, #0]
 8007548:	6138      	str	r0, [r7, #16]
 800754a:	2800      	cmp	r0, #0
 800754c:	d105      	bne.n	800755a <_svfiprintf_r+0x32>
 800754e:	230c      	movs	r3, #12
 8007550:	9a03      	ldr	r2, [sp, #12]
 8007552:	3801      	subs	r0, #1
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	b021      	add	sp, #132	; 0x84
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755a:	2340      	movs	r3, #64	; 0x40
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	2300      	movs	r3, #0
 8007560:	ac08      	add	r4, sp, #32
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	3320      	adds	r3, #32
 8007566:	7663      	strb	r3, [r4, #25]
 8007568:	3310      	adds	r3, #16
 800756a:	76a3      	strb	r3, [r4, #26]
 800756c:	9507      	str	r5, [sp, #28]
 800756e:	0035      	movs	r5, r6
 8007570:	782b      	ldrb	r3, [r5, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <_svfiprintf_r+0x52>
 8007576:	2b25      	cmp	r3, #37	; 0x25
 8007578:	d147      	bne.n	800760a <_svfiprintf_r+0xe2>
 800757a:	1bab      	subs	r3, r5, r6
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	42b5      	cmp	r5, r6
 8007580:	d00c      	beq.n	800759c <_svfiprintf_r+0x74>
 8007582:	0032      	movs	r2, r6
 8007584:	0039      	movs	r1, r7
 8007586:	9803      	ldr	r0, [sp, #12]
 8007588:	f7ff ff6c 	bl	8007464 <__ssputs_r>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d100      	bne.n	8007592 <_svfiprintf_r+0x6a>
 8007590:	e0ae      	b.n	80076f0 <_svfiprintf_r+0x1c8>
 8007592:	6962      	ldr	r2, [r4, #20]
 8007594:	9b05      	ldr	r3, [sp, #20]
 8007596:	4694      	mov	ip, r2
 8007598:	4463      	add	r3, ip
 800759a:	6163      	str	r3, [r4, #20]
 800759c:	782b      	ldrb	r3, [r5, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d100      	bne.n	80075a4 <_svfiprintf_r+0x7c>
 80075a2:	e0a5      	b.n	80076f0 <_svfiprintf_r+0x1c8>
 80075a4:	2201      	movs	r2, #1
 80075a6:	2300      	movs	r3, #0
 80075a8:	4252      	negs	r2, r2
 80075aa:	6062      	str	r2, [r4, #4]
 80075ac:	a904      	add	r1, sp, #16
 80075ae:	3254      	adds	r2, #84	; 0x54
 80075b0:	1852      	adds	r2, r2, r1
 80075b2:	1c6e      	adds	r6, r5, #1
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	60e3      	str	r3, [r4, #12]
 80075b8:	60a3      	str	r3, [r4, #8]
 80075ba:	7013      	strb	r3, [r2, #0]
 80075bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80075be:	2205      	movs	r2, #5
 80075c0:	7831      	ldrb	r1, [r6, #0]
 80075c2:	4854      	ldr	r0, [pc, #336]	; (8007714 <_svfiprintf_r+0x1ec>)
 80075c4:	f000 fa32 	bl	8007a2c <memchr>
 80075c8:	1c75      	adds	r5, r6, #1
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d11f      	bne.n	800760e <_svfiprintf_r+0xe6>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	06d3      	lsls	r3, r2, #27
 80075d2:	d504      	bpl.n	80075de <_svfiprintf_r+0xb6>
 80075d4:	2353      	movs	r3, #83	; 0x53
 80075d6:	a904      	add	r1, sp, #16
 80075d8:	185b      	adds	r3, r3, r1
 80075da:	2120      	movs	r1, #32
 80075dc:	7019      	strb	r1, [r3, #0]
 80075de:	0713      	lsls	r3, r2, #28
 80075e0:	d504      	bpl.n	80075ec <_svfiprintf_r+0xc4>
 80075e2:	2353      	movs	r3, #83	; 0x53
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	185b      	adds	r3, r3, r1
 80075e8:	212b      	movs	r1, #43	; 0x2b
 80075ea:	7019      	strb	r1, [r3, #0]
 80075ec:	7833      	ldrb	r3, [r6, #0]
 80075ee:	2b2a      	cmp	r3, #42	; 0x2a
 80075f0:	d016      	beq.n	8007620 <_svfiprintf_r+0xf8>
 80075f2:	0035      	movs	r5, r6
 80075f4:	2100      	movs	r1, #0
 80075f6:	200a      	movs	r0, #10
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	782a      	ldrb	r2, [r5, #0]
 80075fc:	1c6e      	adds	r6, r5, #1
 80075fe:	3a30      	subs	r2, #48	; 0x30
 8007600:	2a09      	cmp	r2, #9
 8007602:	d94e      	bls.n	80076a2 <_svfiprintf_r+0x17a>
 8007604:	2900      	cmp	r1, #0
 8007606:	d111      	bne.n	800762c <_svfiprintf_r+0x104>
 8007608:	e017      	b.n	800763a <_svfiprintf_r+0x112>
 800760a:	3501      	adds	r5, #1
 800760c:	e7b0      	b.n	8007570 <_svfiprintf_r+0x48>
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <_svfiprintf_r+0x1ec>)
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	1ac0      	subs	r0, r0, r3
 8007614:	2301      	movs	r3, #1
 8007616:	4083      	lsls	r3, r0
 8007618:	4313      	orrs	r3, r2
 800761a:	002e      	movs	r6, r5
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	e7ce      	b.n	80075be <_svfiprintf_r+0x96>
 8007620:	9b07      	ldr	r3, [sp, #28]
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	9107      	str	r1, [sp, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	db01      	blt.n	8007630 <_svfiprintf_r+0x108>
 800762c:	930b      	str	r3, [sp, #44]	; 0x2c
 800762e:	e004      	b.n	800763a <_svfiprintf_r+0x112>
 8007630:	425b      	negs	r3, r3
 8007632:	60e3      	str	r3, [r4, #12]
 8007634:	2302      	movs	r3, #2
 8007636:	4313      	orrs	r3, r2
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	782b      	ldrb	r3, [r5, #0]
 800763c:	2b2e      	cmp	r3, #46	; 0x2e
 800763e:	d10a      	bne.n	8007656 <_svfiprintf_r+0x12e>
 8007640:	786b      	ldrb	r3, [r5, #1]
 8007642:	2b2a      	cmp	r3, #42	; 0x2a
 8007644:	d135      	bne.n	80076b2 <_svfiprintf_r+0x18a>
 8007646:	9b07      	ldr	r3, [sp, #28]
 8007648:	3502      	adds	r5, #2
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	9207      	str	r2, [sp, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	db2b      	blt.n	80076ac <_svfiprintf_r+0x184>
 8007654:	9309      	str	r3, [sp, #36]	; 0x24
 8007656:	4e30      	ldr	r6, [pc, #192]	; (8007718 <_svfiprintf_r+0x1f0>)
 8007658:	2203      	movs	r2, #3
 800765a:	0030      	movs	r0, r6
 800765c:	7829      	ldrb	r1, [r5, #0]
 800765e:	f000 f9e5 	bl	8007a2c <memchr>
 8007662:	2800      	cmp	r0, #0
 8007664:	d006      	beq.n	8007674 <_svfiprintf_r+0x14c>
 8007666:	2340      	movs	r3, #64	; 0x40
 8007668:	1b80      	subs	r0, r0, r6
 800766a:	4083      	lsls	r3, r0
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	3501      	adds	r5, #1
 8007670:	4313      	orrs	r3, r2
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	7829      	ldrb	r1, [r5, #0]
 8007676:	2206      	movs	r2, #6
 8007678:	4828      	ldr	r0, [pc, #160]	; (800771c <_svfiprintf_r+0x1f4>)
 800767a:	1c6e      	adds	r6, r5, #1
 800767c:	7621      	strb	r1, [r4, #24]
 800767e:	f000 f9d5 	bl	8007a2c <memchr>
 8007682:	2800      	cmp	r0, #0
 8007684:	d03c      	beq.n	8007700 <_svfiprintf_r+0x1d8>
 8007686:	4b26      	ldr	r3, [pc, #152]	; (8007720 <_svfiprintf_r+0x1f8>)
 8007688:	2b00      	cmp	r3, #0
 800768a:	d125      	bne.n	80076d8 <_svfiprintf_r+0x1b0>
 800768c:	2207      	movs	r2, #7
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	3307      	adds	r3, #7
 8007692:	4393      	bics	r3, r2
 8007694:	3308      	adds	r3, #8
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	6963      	ldr	r3, [r4, #20]
 800769a:	9a04      	ldr	r2, [sp, #16]
 800769c:	189b      	adds	r3, r3, r2
 800769e:	6163      	str	r3, [r4, #20]
 80076a0:	e765      	b.n	800756e <_svfiprintf_r+0x46>
 80076a2:	4343      	muls	r3, r0
 80076a4:	0035      	movs	r5, r6
 80076a6:	2101      	movs	r1, #1
 80076a8:	189b      	adds	r3, r3, r2
 80076aa:	e7a6      	b.n	80075fa <_svfiprintf_r+0xd2>
 80076ac:	2301      	movs	r3, #1
 80076ae:	425b      	negs	r3, r3
 80076b0:	e7d0      	b.n	8007654 <_svfiprintf_r+0x12c>
 80076b2:	2300      	movs	r3, #0
 80076b4:	200a      	movs	r0, #10
 80076b6:	001a      	movs	r2, r3
 80076b8:	3501      	adds	r5, #1
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	7829      	ldrb	r1, [r5, #0]
 80076be:	1c6e      	adds	r6, r5, #1
 80076c0:	3930      	subs	r1, #48	; 0x30
 80076c2:	2909      	cmp	r1, #9
 80076c4:	d903      	bls.n	80076ce <_svfiprintf_r+0x1a6>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0c5      	beq.n	8007656 <_svfiprintf_r+0x12e>
 80076ca:	9209      	str	r2, [sp, #36]	; 0x24
 80076cc:	e7c3      	b.n	8007656 <_svfiprintf_r+0x12e>
 80076ce:	4342      	muls	r2, r0
 80076d0:	0035      	movs	r5, r6
 80076d2:	2301      	movs	r3, #1
 80076d4:	1852      	adds	r2, r2, r1
 80076d6:	e7f1      	b.n	80076bc <_svfiprintf_r+0x194>
 80076d8:	ab07      	add	r3, sp, #28
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	003a      	movs	r2, r7
 80076de:	0021      	movs	r1, r4
 80076e0:	4b10      	ldr	r3, [pc, #64]	; (8007724 <_svfiprintf_r+0x1fc>)
 80076e2:	9803      	ldr	r0, [sp, #12]
 80076e4:	e000      	b.n	80076e8 <_svfiprintf_r+0x1c0>
 80076e6:	bf00      	nop
 80076e8:	9004      	str	r0, [sp, #16]
 80076ea:	9b04      	ldr	r3, [sp, #16]
 80076ec:	3301      	adds	r3, #1
 80076ee:	d1d3      	bne.n	8007698 <_svfiprintf_r+0x170>
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80076f4:	065b      	lsls	r3, r3, #25
 80076f6:	d400      	bmi.n	80076fa <_svfiprintf_r+0x1d2>
 80076f8:	e72d      	b.n	8007556 <_svfiprintf_r+0x2e>
 80076fa:	2001      	movs	r0, #1
 80076fc:	4240      	negs	r0, r0
 80076fe:	e72a      	b.n	8007556 <_svfiprintf_r+0x2e>
 8007700:	ab07      	add	r3, sp, #28
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	003a      	movs	r2, r7
 8007706:	0021      	movs	r1, r4
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <_svfiprintf_r+0x1fc>)
 800770a:	9803      	ldr	r0, [sp, #12]
 800770c:	f000 f87c 	bl	8007808 <_printf_i>
 8007710:	e7ea      	b.n	80076e8 <_svfiprintf_r+0x1c0>
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	08007f5d 	.word	0x08007f5d
 8007718:	08007f63 	.word	0x08007f63
 800771c:	08007f67 	.word	0x08007f67
 8007720:	00000000 	.word	0x00000000
 8007724:	08007465 	.word	0x08007465

08007728 <_printf_common>:
 8007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772a:	0015      	movs	r5, r2
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	688a      	ldr	r2, [r1, #8]
 8007730:	690b      	ldr	r3, [r1, #16]
 8007732:	000c      	movs	r4, r1
 8007734:	9000      	str	r0, [sp, #0]
 8007736:	4293      	cmp	r3, r2
 8007738:	da00      	bge.n	800773c <_printf_common+0x14>
 800773a:	0013      	movs	r3, r2
 800773c:	0022      	movs	r2, r4
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	3243      	adds	r2, #67	; 0x43
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	2a00      	cmp	r2, #0
 8007746:	d001      	beq.n	800774c <_printf_common+0x24>
 8007748:	3301      	adds	r3, #1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	069b      	lsls	r3, r3, #26
 8007750:	d502      	bpl.n	8007758 <_printf_common+0x30>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	3302      	adds	r3, #2
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	2306      	movs	r3, #6
 800775c:	0017      	movs	r7, r2
 800775e:	401f      	ands	r7, r3
 8007760:	421a      	tst	r2, r3
 8007762:	d027      	beq.n	80077b4 <_printf_common+0x8c>
 8007764:	0023      	movs	r3, r4
 8007766:	3343      	adds	r3, #67	; 0x43
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	1e5a      	subs	r2, r3, #1
 800776c:	4193      	sbcs	r3, r2
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	0692      	lsls	r2, r2, #26
 8007772:	d430      	bmi.n	80077d6 <_printf_common+0xae>
 8007774:	0022      	movs	r2, r4
 8007776:	9901      	ldr	r1, [sp, #4]
 8007778:	9800      	ldr	r0, [sp, #0]
 800777a:	9e08      	ldr	r6, [sp, #32]
 800777c:	3243      	adds	r2, #67	; 0x43
 800777e:	47b0      	blx	r6
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d025      	beq.n	80077d0 <_printf_common+0xa8>
 8007784:	2306      	movs	r3, #6
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	682a      	ldr	r2, [r5, #0]
 800778a:	68e1      	ldr	r1, [r4, #12]
 800778c:	2500      	movs	r5, #0
 800778e:	4003      	ands	r3, r0
 8007790:	2b04      	cmp	r3, #4
 8007792:	d103      	bne.n	800779c <_printf_common+0x74>
 8007794:	1a8d      	subs	r5, r1, r2
 8007796:	43eb      	mvns	r3, r5
 8007798:	17db      	asrs	r3, r3, #31
 800779a:	401d      	ands	r5, r3
 800779c:	68a3      	ldr	r3, [r4, #8]
 800779e:	6922      	ldr	r2, [r4, #16]
 80077a0:	4293      	cmp	r3, r2
 80077a2:	dd01      	ble.n	80077a8 <_printf_common+0x80>
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	18ed      	adds	r5, r5, r3
 80077a8:	2700      	movs	r7, #0
 80077aa:	42bd      	cmp	r5, r7
 80077ac:	d120      	bne.n	80077f0 <_printf_common+0xc8>
 80077ae:	2000      	movs	r0, #0
 80077b0:	e010      	b.n	80077d4 <_printf_common+0xac>
 80077b2:	3701      	adds	r7, #1
 80077b4:	68e3      	ldr	r3, [r4, #12]
 80077b6:	682a      	ldr	r2, [r5, #0]
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	42bb      	cmp	r3, r7
 80077bc:	ddd2      	ble.n	8007764 <_printf_common+0x3c>
 80077be:	0022      	movs	r2, r4
 80077c0:	2301      	movs	r3, #1
 80077c2:	9901      	ldr	r1, [sp, #4]
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	9e08      	ldr	r6, [sp, #32]
 80077c8:	3219      	adds	r2, #25
 80077ca:	47b0      	blx	r6
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d1f0      	bne.n	80077b2 <_printf_common+0x8a>
 80077d0:	2001      	movs	r0, #1
 80077d2:	4240      	negs	r0, r0
 80077d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077d6:	2030      	movs	r0, #48	; 0x30
 80077d8:	18e1      	adds	r1, r4, r3
 80077da:	3143      	adds	r1, #67	; 0x43
 80077dc:	7008      	strb	r0, [r1, #0]
 80077de:	0021      	movs	r1, r4
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	3145      	adds	r1, #69	; 0x45
 80077e4:	7809      	ldrb	r1, [r1, #0]
 80077e6:	18a2      	adds	r2, r4, r2
 80077e8:	3243      	adds	r2, #67	; 0x43
 80077ea:	3302      	adds	r3, #2
 80077ec:	7011      	strb	r1, [r2, #0]
 80077ee:	e7c1      	b.n	8007774 <_printf_common+0x4c>
 80077f0:	0022      	movs	r2, r4
 80077f2:	2301      	movs	r3, #1
 80077f4:	9901      	ldr	r1, [sp, #4]
 80077f6:	9800      	ldr	r0, [sp, #0]
 80077f8:	9e08      	ldr	r6, [sp, #32]
 80077fa:	321a      	adds	r2, #26
 80077fc:	47b0      	blx	r6
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d0e6      	beq.n	80077d0 <_printf_common+0xa8>
 8007802:	3701      	adds	r7, #1
 8007804:	e7d1      	b.n	80077aa <_printf_common+0x82>
	...

08007808 <_printf_i>:
 8007808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800780a:	b08b      	sub	sp, #44	; 0x2c
 800780c:	9206      	str	r2, [sp, #24]
 800780e:	000a      	movs	r2, r1
 8007810:	3243      	adds	r2, #67	; 0x43
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	9005      	str	r0, [sp, #20]
 8007816:	9204      	str	r2, [sp, #16]
 8007818:	7e0a      	ldrb	r2, [r1, #24]
 800781a:	000c      	movs	r4, r1
 800781c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800781e:	2a78      	cmp	r2, #120	; 0x78
 8007820:	d807      	bhi.n	8007832 <_printf_i+0x2a>
 8007822:	2a62      	cmp	r2, #98	; 0x62
 8007824:	d809      	bhi.n	800783a <_printf_i+0x32>
 8007826:	2a00      	cmp	r2, #0
 8007828:	d100      	bne.n	800782c <_printf_i+0x24>
 800782a:	e0c1      	b.n	80079b0 <_printf_i+0x1a8>
 800782c:	2a58      	cmp	r2, #88	; 0x58
 800782e:	d100      	bne.n	8007832 <_printf_i+0x2a>
 8007830:	e08c      	b.n	800794c <_printf_i+0x144>
 8007832:	0026      	movs	r6, r4
 8007834:	3642      	adds	r6, #66	; 0x42
 8007836:	7032      	strb	r2, [r6, #0]
 8007838:	e022      	b.n	8007880 <_printf_i+0x78>
 800783a:	0010      	movs	r0, r2
 800783c:	3863      	subs	r0, #99	; 0x63
 800783e:	2815      	cmp	r0, #21
 8007840:	d8f7      	bhi.n	8007832 <_printf_i+0x2a>
 8007842:	f7f8 fc5f 	bl	8000104 <__gnu_thumb1_case_shi>
 8007846:	0016      	.short	0x0016
 8007848:	fff6001f 	.word	0xfff6001f
 800784c:	fff6fff6 	.word	0xfff6fff6
 8007850:	001ffff6 	.word	0x001ffff6
 8007854:	fff6fff6 	.word	0xfff6fff6
 8007858:	fff6fff6 	.word	0xfff6fff6
 800785c:	003600a8 	.word	0x003600a8
 8007860:	fff6009a 	.word	0xfff6009a
 8007864:	00b9fff6 	.word	0x00b9fff6
 8007868:	0036fff6 	.word	0x0036fff6
 800786c:	fff6fff6 	.word	0xfff6fff6
 8007870:	009e      	.short	0x009e
 8007872:	0026      	movs	r6, r4
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	3642      	adds	r6, #66	; 0x42
 8007878:	1d11      	adds	r1, r2, #4
 800787a:	6019      	str	r1, [r3, #0]
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	7033      	strb	r3, [r6, #0]
 8007880:	2301      	movs	r3, #1
 8007882:	e0a7      	b.n	80079d4 <_printf_i+0x1cc>
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	6819      	ldr	r1, [r3, #0]
 8007888:	1d0a      	adds	r2, r1, #4
 800788a:	0605      	lsls	r5, r0, #24
 800788c:	d50b      	bpl.n	80078a6 <_printf_i+0x9e>
 800788e:	680d      	ldr	r5, [r1, #0]
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	2d00      	cmp	r5, #0
 8007894:	da03      	bge.n	800789e <_printf_i+0x96>
 8007896:	232d      	movs	r3, #45	; 0x2d
 8007898:	9a04      	ldr	r2, [sp, #16]
 800789a:	426d      	negs	r5, r5
 800789c:	7013      	strb	r3, [r2, #0]
 800789e:	4b61      	ldr	r3, [pc, #388]	; (8007a24 <_printf_i+0x21c>)
 80078a0:	270a      	movs	r7, #10
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	e01b      	b.n	80078de <_printf_i+0xd6>
 80078a6:	680d      	ldr	r5, [r1, #0]
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	0641      	lsls	r1, r0, #25
 80078ac:	d5f1      	bpl.n	8007892 <_printf_i+0x8a>
 80078ae:	b22d      	sxth	r5, r5
 80078b0:	e7ef      	b.n	8007892 <_printf_i+0x8a>
 80078b2:	680d      	ldr	r5, [r1, #0]
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	1d08      	adds	r0, r1, #4
 80078b8:	6018      	str	r0, [r3, #0]
 80078ba:	062e      	lsls	r6, r5, #24
 80078bc:	d501      	bpl.n	80078c2 <_printf_i+0xba>
 80078be:	680d      	ldr	r5, [r1, #0]
 80078c0:	e003      	b.n	80078ca <_printf_i+0xc2>
 80078c2:	066d      	lsls	r5, r5, #25
 80078c4:	d5fb      	bpl.n	80078be <_printf_i+0xb6>
 80078c6:	680d      	ldr	r5, [r1, #0]
 80078c8:	b2ad      	uxth	r5, r5
 80078ca:	4b56      	ldr	r3, [pc, #344]	; (8007a24 <_printf_i+0x21c>)
 80078cc:	2708      	movs	r7, #8
 80078ce:	9303      	str	r3, [sp, #12]
 80078d0:	2a6f      	cmp	r2, #111	; 0x6f
 80078d2:	d000      	beq.n	80078d6 <_printf_i+0xce>
 80078d4:	3702      	adds	r7, #2
 80078d6:	0023      	movs	r3, r4
 80078d8:	2200      	movs	r2, #0
 80078da:	3343      	adds	r3, #67	; 0x43
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	6863      	ldr	r3, [r4, #4]
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	db03      	blt.n	80078ee <_printf_i+0xe6>
 80078e6:	2204      	movs	r2, #4
 80078e8:	6821      	ldr	r1, [r4, #0]
 80078ea:	4391      	bics	r1, r2
 80078ec:	6021      	str	r1, [r4, #0]
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	d102      	bne.n	80078f8 <_printf_i+0xf0>
 80078f2:	9e04      	ldr	r6, [sp, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <_printf_i+0x10a>
 80078f8:	9e04      	ldr	r6, [sp, #16]
 80078fa:	0028      	movs	r0, r5
 80078fc:	0039      	movs	r1, r7
 80078fe:	f7f8 fc91 	bl	8000224 <__aeabi_uidivmod>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	3e01      	subs	r6, #1
 8007906:	5c5b      	ldrb	r3, [r3, r1]
 8007908:	7033      	strb	r3, [r6, #0]
 800790a:	002b      	movs	r3, r5
 800790c:	0005      	movs	r5, r0
 800790e:	429f      	cmp	r7, r3
 8007910:	d9f3      	bls.n	80078fa <_printf_i+0xf2>
 8007912:	2f08      	cmp	r7, #8
 8007914:	d109      	bne.n	800792a <_printf_i+0x122>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	07db      	lsls	r3, r3, #31
 800791a:	d506      	bpl.n	800792a <_printf_i+0x122>
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	6922      	ldr	r2, [r4, #16]
 8007920:	4293      	cmp	r3, r2
 8007922:	dc02      	bgt.n	800792a <_printf_i+0x122>
 8007924:	2330      	movs	r3, #48	; 0x30
 8007926:	3e01      	subs	r6, #1
 8007928:	7033      	strb	r3, [r6, #0]
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	1b9b      	subs	r3, r3, r6
 800792e:	6123      	str	r3, [r4, #16]
 8007930:	9b07      	ldr	r3, [sp, #28]
 8007932:	0021      	movs	r1, r4
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	9805      	ldr	r0, [sp, #20]
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	aa09      	add	r2, sp, #36	; 0x24
 800793c:	f7ff fef4 	bl	8007728 <_printf_common>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d14c      	bne.n	80079de <_printf_i+0x1d6>
 8007944:	2001      	movs	r0, #1
 8007946:	4240      	negs	r0, r0
 8007948:	b00b      	add	sp, #44	; 0x2c
 800794a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800794c:	3145      	adds	r1, #69	; 0x45
 800794e:	700a      	strb	r2, [r1, #0]
 8007950:	4a34      	ldr	r2, [pc, #208]	; (8007a24 <_printf_i+0x21c>)
 8007952:	9203      	str	r2, [sp, #12]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	6821      	ldr	r1, [r4, #0]
 8007958:	ca20      	ldmia	r2!, {r5}
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	0608      	lsls	r0, r1, #24
 800795e:	d516      	bpl.n	800798e <_printf_i+0x186>
 8007960:	07cb      	lsls	r3, r1, #31
 8007962:	d502      	bpl.n	800796a <_printf_i+0x162>
 8007964:	2320      	movs	r3, #32
 8007966:	4319      	orrs	r1, r3
 8007968:	6021      	str	r1, [r4, #0]
 800796a:	2710      	movs	r7, #16
 800796c:	2d00      	cmp	r5, #0
 800796e:	d1b2      	bne.n	80078d6 <_printf_i+0xce>
 8007970:	2320      	movs	r3, #32
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	439a      	bics	r2, r3
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	e7ad      	b.n	80078d6 <_printf_i+0xce>
 800797a:	2220      	movs	r2, #32
 800797c:	6809      	ldr	r1, [r1, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	6022      	str	r2, [r4, #0]
 8007982:	0022      	movs	r2, r4
 8007984:	2178      	movs	r1, #120	; 0x78
 8007986:	3245      	adds	r2, #69	; 0x45
 8007988:	7011      	strb	r1, [r2, #0]
 800798a:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <_printf_i+0x220>)
 800798c:	e7e1      	b.n	8007952 <_printf_i+0x14a>
 800798e:	0648      	lsls	r0, r1, #25
 8007990:	d5e6      	bpl.n	8007960 <_printf_i+0x158>
 8007992:	b2ad      	uxth	r5, r5
 8007994:	e7e4      	b.n	8007960 <_printf_i+0x158>
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	680d      	ldr	r5, [r1, #0]
 800799a:	1d10      	adds	r0, r2, #4
 800799c:	6949      	ldr	r1, [r1, #20]
 800799e:	6018      	str	r0, [r3, #0]
 80079a0:	6813      	ldr	r3, [r2, #0]
 80079a2:	062e      	lsls	r6, r5, #24
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0x1a2>
 80079a6:	6019      	str	r1, [r3, #0]
 80079a8:	e002      	b.n	80079b0 <_printf_i+0x1a8>
 80079aa:	066d      	lsls	r5, r5, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0x19e>
 80079ae:	8019      	strh	r1, [r3, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	9e04      	ldr	r6, [sp, #16]
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	e7bb      	b.n	8007930 <_printf_i+0x128>
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	1d11      	adds	r1, r2, #4
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	6816      	ldr	r6, [r2, #0]
 80079c0:	2100      	movs	r1, #0
 80079c2:	0030      	movs	r0, r6
 80079c4:	6862      	ldr	r2, [r4, #4]
 80079c6:	f000 f831 	bl	8007a2c <memchr>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d001      	beq.n	80079d2 <_printf_i+0x1ca>
 80079ce:	1b80      	subs	r0, r0, r6
 80079d0:	6060      	str	r0, [r4, #4]
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9a04      	ldr	r2, [sp, #16]
 80079da:	7013      	strb	r3, [r2, #0]
 80079dc:	e7a8      	b.n	8007930 <_printf_i+0x128>
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	0032      	movs	r2, r6
 80079e2:	9906      	ldr	r1, [sp, #24]
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	9d07      	ldr	r5, [sp, #28]
 80079e8:	47a8      	blx	r5
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d0aa      	beq.n	8007944 <_printf_i+0x13c>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	079b      	lsls	r3, r3, #30
 80079f2:	d415      	bmi.n	8007a20 <_printf_i+0x218>
 80079f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f6:	68e0      	ldr	r0, [r4, #12]
 80079f8:	4298      	cmp	r0, r3
 80079fa:	daa5      	bge.n	8007948 <_printf_i+0x140>
 80079fc:	0018      	movs	r0, r3
 80079fe:	e7a3      	b.n	8007948 <_printf_i+0x140>
 8007a00:	0022      	movs	r2, r4
 8007a02:	2301      	movs	r3, #1
 8007a04:	9906      	ldr	r1, [sp, #24]
 8007a06:	9805      	ldr	r0, [sp, #20]
 8007a08:	9e07      	ldr	r6, [sp, #28]
 8007a0a:	3219      	adds	r2, #25
 8007a0c:	47b0      	blx	r6
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d098      	beq.n	8007944 <_printf_i+0x13c>
 8007a12:	3501      	adds	r5, #1
 8007a14:	68e3      	ldr	r3, [r4, #12]
 8007a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	42ab      	cmp	r3, r5
 8007a1c:	dcf0      	bgt.n	8007a00 <_printf_i+0x1f8>
 8007a1e:	e7e9      	b.n	80079f4 <_printf_i+0x1ec>
 8007a20:	2500      	movs	r5, #0
 8007a22:	e7f7      	b.n	8007a14 <_printf_i+0x20c>
 8007a24:	08007f6e 	.word	0x08007f6e
 8007a28:	08007f7f 	.word	0x08007f7f

08007a2c <memchr>:
 8007a2c:	b2c9      	uxtb	r1, r1
 8007a2e:	1882      	adds	r2, r0, r2
 8007a30:	4290      	cmp	r0, r2
 8007a32:	d101      	bne.n	8007a38 <memchr+0xc>
 8007a34:	2000      	movs	r0, #0
 8007a36:	4770      	bx	lr
 8007a38:	7803      	ldrb	r3, [r0, #0]
 8007a3a:	428b      	cmp	r3, r1
 8007a3c:	d0fb      	beq.n	8007a36 <memchr+0xa>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	e7f6      	b.n	8007a30 <memchr+0x4>

08007a42 <memcpy>:
 8007a42:	2300      	movs	r3, #0
 8007a44:	b510      	push	{r4, lr}
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d100      	bne.n	8007a4c <memcpy+0xa>
 8007a4a:	bd10      	pop	{r4, pc}
 8007a4c:	5ccc      	ldrb	r4, [r1, r3]
 8007a4e:	54c4      	strb	r4, [r0, r3]
 8007a50:	3301      	adds	r3, #1
 8007a52:	e7f8      	b.n	8007a46 <memcpy+0x4>

08007a54 <memmove>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4288      	cmp	r0, r1
 8007a58:	d902      	bls.n	8007a60 <memmove+0xc>
 8007a5a:	188b      	adds	r3, r1, r2
 8007a5c:	4298      	cmp	r0, r3
 8007a5e:	d303      	bcc.n	8007a68 <memmove+0x14>
 8007a60:	2300      	movs	r3, #0
 8007a62:	e007      	b.n	8007a74 <memmove+0x20>
 8007a64:	5c8b      	ldrb	r3, [r1, r2]
 8007a66:	5483      	strb	r3, [r0, r2]
 8007a68:	3a01      	subs	r2, #1
 8007a6a:	d2fb      	bcs.n	8007a64 <memmove+0x10>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	5ccc      	ldrb	r4, [r1, r3]
 8007a70:	54c4      	strb	r4, [r0, r3]
 8007a72:	3301      	adds	r3, #1
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1fa      	bne.n	8007a6e <memmove+0x1a>
 8007a78:	e7f8      	b.n	8007a6c <memmove+0x18>
	...

08007a7c <_free_r>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	0005      	movs	r5, r0
 8007a80:	2900      	cmp	r1, #0
 8007a82:	d010      	beq.n	8007aa6 <_free_r+0x2a>
 8007a84:	1f0c      	subs	r4, r1, #4
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da00      	bge.n	8007a8e <_free_r+0x12>
 8007a8c:	18e4      	adds	r4, r4, r3
 8007a8e:	0028      	movs	r0, r5
 8007a90:	f000 f918 	bl	8007cc4 <__malloc_lock>
 8007a94:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <_free_r+0x90>)
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <_free_r+0x2c>
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	6014      	str	r4, [r2, #0]
 8007aa0:	0028      	movs	r0, r5
 8007aa2:	f000 f917 	bl	8007cd4 <__malloc_unlock>
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d908      	bls.n	8007abe <_free_r+0x42>
 8007aac:	6821      	ldr	r1, [r4, #0]
 8007aae:	1860      	adds	r0, r4, r1
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d1f3      	bne.n	8007a9c <_free_r+0x20>
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	1841      	adds	r1, r0, r1
 8007aba:	6021      	str	r1, [r4, #0]
 8007abc:	e7ee      	b.n	8007a9c <_free_r+0x20>
 8007abe:	001a      	movs	r2, r3
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <_free_r+0x4e>
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	d9f9      	bls.n	8007abe <_free_r+0x42>
 8007aca:	6811      	ldr	r1, [r2, #0]
 8007acc:	1850      	adds	r0, r2, r1
 8007ace:	42a0      	cmp	r0, r4
 8007ad0:	d10b      	bne.n	8007aea <_free_r+0x6e>
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1809      	adds	r1, r1, r0
 8007ad6:	1850      	adds	r0, r2, r1
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	4283      	cmp	r3, r0
 8007adc:	d1e0      	bne.n	8007aa0 <_free_r+0x24>
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	1841      	adds	r1, r0, r1
 8007ae4:	6011      	str	r1, [r2, #0]
 8007ae6:	6053      	str	r3, [r2, #4]
 8007ae8:	e7da      	b.n	8007aa0 <_free_r+0x24>
 8007aea:	42a0      	cmp	r0, r4
 8007aec:	d902      	bls.n	8007af4 <_free_r+0x78>
 8007aee:	230c      	movs	r3, #12
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	e7d5      	b.n	8007aa0 <_free_r+0x24>
 8007af4:	6821      	ldr	r1, [r4, #0]
 8007af6:	1860      	adds	r0, r4, r1
 8007af8:	4283      	cmp	r3, r0
 8007afa:	d103      	bne.n	8007b04 <_free_r+0x88>
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	1841      	adds	r1, r0, r1
 8007b02:	6021      	str	r1, [r4, #0]
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6054      	str	r4, [r2, #4]
 8007b08:	e7ca      	b.n	8007aa0 <_free_r+0x24>
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	200002b4 	.word	0x200002b4

08007b10 <sbrk_aligned>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4e0f      	ldr	r6, [pc, #60]	; (8007b50 <sbrk_aligned+0x40>)
 8007b14:	000d      	movs	r5, r1
 8007b16:	6831      	ldr	r1, [r6, #0]
 8007b18:	0004      	movs	r4, r0
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d102      	bne.n	8007b24 <sbrk_aligned+0x14>
 8007b1e:	f000 f8bf 	bl	8007ca0 <_sbrk_r>
 8007b22:	6030      	str	r0, [r6, #0]
 8007b24:	0029      	movs	r1, r5
 8007b26:	0020      	movs	r0, r4
 8007b28:	f000 f8ba 	bl	8007ca0 <_sbrk_r>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d00a      	beq.n	8007b46 <sbrk_aligned+0x36>
 8007b30:	2303      	movs	r3, #3
 8007b32:	1cc5      	adds	r5, r0, #3
 8007b34:	439d      	bics	r5, r3
 8007b36:	42a8      	cmp	r0, r5
 8007b38:	d007      	beq.n	8007b4a <sbrk_aligned+0x3a>
 8007b3a:	1a29      	subs	r1, r5, r0
 8007b3c:	0020      	movs	r0, r4
 8007b3e:	f000 f8af 	bl	8007ca0 <_sbrk_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d101      	bne.n	8007b4a <sbrk_aligned+0x3a>
 8007b46:	2501      	movs	r5, #1
 8007b48:	426d      	negs	r5, r5
 8007b4a:	0028      	movs	r0, r5
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	200002b8 	.word	0x200002b8

08007b54 <_malloc_r>:
 8007b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b56:	2203      	movs	r2, #3
 8007b58:	1ccb      	adds	r3, r1, #3
 8007b5a:	4393      	bics	r3, r2
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	0006      	movs	r6, r0
 8007b60:	001f      	movs	r7, r3
 8007b62:	2b0c      	cmp	r3, #12
 8007b64:	d232      	bcs.n	8007bcc <_malloc_r+0x78>
 8007b66:	270c      	movs	r7, #12
 8007b68:	42b9      	cmp	r1, r7
 8007b6a:	d831      	bhi.n	8007bd0 <_malloc_r+0x7c>
 8007b6c:	0030      	movs	r0, r6
 8007b6e:	f000 f8a9 	bl	8007cc4 <__malloc_lock>
 8007b72:	4d32      	ldr	r5, [pc, #200]	; (8007c3c <_malloc_r+0xe8>)
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	001c      	movs	r4, r3
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	d12e      	bne.n	8007bda <_malloc_r+0x86>
 8007b7c:	0039      	movs	r1, r7
 8007b7e:	0030      	movs	r0, r6
 8007b80:	f7ff ffc6 	bl	8007b10 <sbrk_aligned>
 8007b84:	0004      	movs	r4, r0
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d11e      	bne.n	8007bc8 <_malloc_r+0x74>
 8007b8a:	682c      	ldr	r4, [r5, #0]
 8007b8c:	0025      	movs	r5, r4
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	d14a      	bne.n	8007c28 <_malloc_r+0xd4>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	0029      	movs	r1, r5
 8007b96:	18e3      	adds	r3, r4, r3
 8007b98:	0030      	movs	r0, r6
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	f000 f880 	bl	8007ca0 <_sbrk_r>
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	4283      	cmp	r3, r0
 8007ba4:	d143      	bne.n	8007c2e <_malloc_r+0xda>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	3703      	adds	r7, #3
 8007baa:	1aff      	subs	r7, r7, r3
 8007bac:	2303      	movs	r3, #3
 8007bae:	439f      	bics	r7, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	2f0c      	cmp	r7, #12
 8007bb4:	d200      	bcs.n	8007bb8 <_malloc_r+0x64>
 8007bb6:	270c      	movs	r7, #12
 8007bb8:	0039      	movs	r1, r7
 8007bba:	0030      	movs	r0, r6
 8007bbc:	f7ff ffa8 	bl	8007b10 <sbrk_aligned>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d034      	beq.n	8007c2e <_malloc_r+0xda>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	19df      	adds	r7, r3, r7
 8007bc8:	6027      	str	r7, [r4, #0]
 8007bca:	e013      	b.n	8007bf4 <_malloc_r+0xa0>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dacb      	bge.n	8007b68 <_malloc_r+0x14>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	0028      	movs	r0, r5
 8007bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	1bd1      	subs	r1, r2, r7
 8007bde:	d420      	bmi.n	8007c22 <_malloc_r+0xce>
 8007be0:	290b      	cmp	r1, #11
 8007be2:	d917      	bls.n	8007c14 <_malloc_r+0xc0>
 8007be4:	19e2      	adds	r2, r4, r7
 8007be6:	6027      	str	r7, [r4, #0]
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d111      	bne.n	8007c10 <_malloc_r+0xbc>
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	6053      	str	r3, [r2, #4]
 8007bf4:	0030      	movs	r0, r6
 8007bf6:	0025      	movs	r5, r4
 8007bf8:	f000 f86c 	bl	8007cd4 <__malloc_unlock>
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	350b      	adds	r5, #11
 8007c00:	1d23      	adds	r3, r4, #4
 8007c02:	4395      	bics	r5, r2
 8007c04:	1aea      	subs	r2, r5, r3
 8007c06:	429d      	cmp	r5, r3
 8007c08:	d0e5      	beq.n	8007bd6 <_malloc_r+0x82>
 8007c0a:	1b5b      	subs	r3, r3, r5
 8007c0c:	50a3      	str	r3, [r4, r2]
 8007c0e:	e7e2      	b.n	8007bd6 <_malloc_r+0x82>
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	e7ec      	b.n	8007bee <_malloc_r+0x9a>
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	d101      	bne.n	8007c1e <_malloc_r+0xca>
 8007c1a:	602a      	str	r2, [r5, #0]
 8007c1c:	e7ea      	b.n	8007bf4 <_malloc_r+0xa0>
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	e7e8      	b.n	8007bf4 <_malloc_r+0xa0>
 8007c22:	0023      	movs	r3, r4
 8007c24:	6864      	ldr	r4, [r4, #4]
 8007c26:	e7a7      	b.n	8007b78 <_malloc_r+0x24>
 8007c28:	002c      	movs	r4, r5
 8007c2a:	686d      	ldr	r5, [r5, #4]
 8007c2c:	e7af      	b.n	8007b8e <_malloc_r+0x3a>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	0030      	movs	r0, r6
 8007c32:	6033      	str	r3, [r6, #0]
 8007c34:	f000 f84e 	bl	8007cd4 <__malloc_unlock>
 8007c38:	e7cd      	b.n	8007bd6 <_malloc_r+0x82>
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	200002b4 	.word	0x200002b4

08007c40 <_realloc_r>:
 8007c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c42:	0007      	movs	r7, r0
 8007c44:	000e      	movs	r6, r1
 8007c46:	0014      	movs	r4, r2
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d105      	bne.n	8007c58 <_realloc_r+0x18>
 8007c4c:	0011      	movs	r1, r2
 8007c4e:	f7ff ff81 	bl	8007b54 <_malloc_r>
 8007c52:	0005      	movs	r5, r0
 8007c54:	0028      	movs	r0, r5
 8007c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	d103      	bne.n	8007c64 <_realloc_r+0x24>
 8007c5c:	f7ff ff0e 	bl	8007a7c <_free_r>
 8007c60:	0025      	movs	r5, r4
 8007c62:	e7f7      	b.n	8007c54 <_realloc_r+0x14>
 8007c64:	f000 f83e 	bl	8007ce4 <_malloc_usable_size_r>
 8007c68:	9001      	str	r0, [sp, #4]
 8007c6a:	4284      	cmp	r4, r0
 8007c6c:	d803      	bhi.n	8007c76 <_realloc_r+0x36>
 8007c6e:	0035      	movs	r5, r6
 8007c70:	0843      	lsrs	r3, r0, #1
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	d3ee      	bcc.n	8007c54 <_realloc_r+0x14>
 8007c76:	0021      	movs	r1, r4
 8007c78:	0038      	movs	r0, r7
 8007c7a:	f7ff ff6b 	bl	8007b54 <_malloc_r>
 8007c7e:	1e05      	subs	r5, r0, #0
 8007c80:	d0e8      	beq.n	8007c54 <_realloc_r+0x14>
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	0022      	movs	r2, r4
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d900      	bls.n	8007c8c <_realloc_r+0x4c>
 8007c8a:	001a      	movs	r2, r3
 8007c8c:	0031      	movs	r1, r6
 8007c8e:	0028      	movs	r0, r5
 8007c90:	f7ff fed7 	bl	8007a42 <memcpy>
 8007c94:	0031      	movs	r1, r6
 8007c96:	0038      	movs	r0, r7
 8007c98:	f7ff fef0 	bl	8007a7c <_free_r>
 8007c9c:	e7da      	b.n	8007c54 <_realloc_r+0x14>
	...

08007ca0 <_sbrk_r>:
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	b570      	push	{r4, r5, r6, lr}
 8007ca4:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_sbrk_r+0x20>)
 8007ca6:	0004      	movs	r4, r0
 8007ca8:	0008      	movs	r0, r1
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	f7ff fa82 	bl	80071b4 <_sbrk>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d103      	bne.n	8007cbc <_sbrk_r+0x1c>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d000      	beq.n	8007cbc <_sbrk_r+0x1c>
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	bd70      	pop	{r4, r5, r6, pc}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	200002bc 	.word	0x200002bc

08007cc4 <__malloc_lock>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4802      	ldr	r0, [pc, #8]	; (8007cd0 <__malloc_lock+0xc>)
 8007cc8:	f000 f814 	bl	8007cf4 <__retarget_lock_acquire_recursive>
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	200002c0 	.word	0x200002c0

08007cd4 <__malloc_unlock>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <__malloc_unlock+0xc>)
 8007cd8:	f000 f80d 	bl	8007cf6 <__retarget_lock_release_recursive>
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	200002c0 	.word	0x200002c0

08007ce4 <_malloc_usable_size_r>:
 8007ce4:	1f0b      	subs	r3, r1, #4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	1f18      	subs	r0, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da01      	bge.n	8007cf2 <_malloc_usable_size_r+0xe>
 8007cee:	580b      	ldr	r3, [r1, r0]
 8007cf0:	18c0      	adds	r0, r0, r3
 8007cf2:	4770      	bx	lr

08007cf4 <__retarget_lock_acquire_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_release_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
